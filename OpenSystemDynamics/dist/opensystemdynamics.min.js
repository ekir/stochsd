var Settings = {
	// Controls the zoom in NW mode
	nwInitZoom: 0.5,
	// The font size under the primitives
	primitiveFontSize: 13,
	// Whatever to show debug
	showDebug: true
};

/*

Copyright 2017 Erik Gustafsson. All rights reserved.

This file may distributed and/or modified under the
terms of the Insight Maker Public License (https://InsightMaker.com/impl).

*/

// Are reference used for debuggning
// We set objects we need to study to temppublic, from inside functions we are debuggning, and then we can see information about them in the javascript debugger
var debugPublic={};
// Example of how to use debugPublic
//~ debugPublic["testvalue"]=1;
//~ debugPublic["testvalue"]=referencetoObject;

// Debug popup
dpopup_mode=false;
function dpopup(message) {
	if(dpopup_mode) {
		alert(messsage);
	}
}

function errorPopUp(message) {
	alert("Error: "+message);
}

/*

Copyright 2017 Erik Gustafsson. All rights reserved.

This file may distributed and/or modified under the
terms of the Insight Maker Public License (https://InsightMaker.com/impl).

*/


// This file controls the things that are depending on which environment the software is running in
// There are two supported environments
// 1. Web
// 2. NodeWebkit (http://nwjs.io)
// 
// The things that depend on the environment are things such as file handeling and window closing
// The decision of which environment to use is in the bottom of this file

var nwjsGui = null;
var nwjsWindow = null;
var nwjsApp = null;

class nwController{
	static init() {
		this.nwActive = null;
		if (typeof require === "undefined") {
			this.nwActive = false;
		} else {
			this.nwActive = true;
			this.maximize = this.unsafeNwMaximize;
			this.getWindow = this.unsafeGetWindow;
			this.getParams = this.unsafeGetParams;
			this.ready = this.unsafeReady;	
			this.openFile = this.unsafeOpenFile;	
		}
	}
	static ready() {
		// This is replaced in init if NW is running		
	}
	static unsafeReady() {
		//~ NwZoomController.zoomReset();
		NwZoomController.zoomLoadFromStorage();
		let params = this.getParams();
		if(params.length >= 1) {
			let parameterFilename = params[0];
			fileManager.loadFromCommandLine(parameterFilename);
		}
		
		var ngui = this.unsafeGetGui();
		var nwin = this.unsafeGetWindow();
		var app = this.unsafeGetApp();
		nwjsGui = ngui;
		nwjsWindow = nwin;
		nwjsApp = app;

		// This save before closing handler only works when we run without StochSD tools.
		// Otherwise it makes it impossible to quit
		nwin.on("close",function(event) {
			quitQuestion();
		});
	}
	static isNwActive() {
		return this.nwActive;
	}
	static getWindow() {
		// This is replaced in init if NW is running
	}
	static unsafeGetGui() {
		var ngui = require("nw.gui");
		return ngui;
	}
	static unsafeGetWindow() {
		var ngui = require("nw.gui");
		var nwin = ngui.Window.get();
		return nwin;		
	}
	static unsafeGetApp() {
		var nwgui = require("nw.gui");
		var App = nwgui.App;
		return App;
	}
	static maximize() {
		// This is replaced in init if NW is running
	}
	static unsafeNwMaximize() {
		// This function is unsafe unless NW is active
		var nwin = nwController.getWindow();
		nwin.show();
		nwin.maximize();
	}
	static getParams() {
		
	}
	static unsafeGetParams() {
		var nwgui = require("nw.gui");
		return nwgui.App.argv;
	}
	static openFile() {
		
	}
	static unsafeOpenFile(fileName) {
		nwjsGui.Shell.openItem(fileName);
	}
}
nwController.init();
nwController.maximize();

class NwZoomController {
	static init() {
		this.nwWindow=nwController.getWindow();
	}
	static zoomIn() {
		do_global_log("Zooming in");
		this.nwWindow.zoomLevel += 0.1;
		localStorage.setItem("zoomLevel",this.nwWindow.zoomLevel);
	}
	static zoomOut() {
		do_global_log("Zooming out");
		this.nwWindow.zoomLevel -= 0.1;
		localStorage.setItem("zoomLevel",this.nwWindow.zoomLevel);
	}
	static zoomReset() {
		do_global_log("Reseting zoom");
		this.nwWindow.zoomLevel = Settings.nwInitZoom;
		localStorage.setItem("zoomLevel",this.nwWindow.zoomLevel);
	}
	
	static zoomLoadFromStorage() {
		do_global_log("loading from storage zoom");
		let loadedZoomLevel = localStorage.getItem("zoomLevel");
		if(loadedZoomLevel==null) {
			return;
		}
		loadedZoomLevel = Number(loadedZoomLevel);
		this.nwWindow.zoomLevel = loadedZoomLevel;
	}
}
NwZoomController.init();

class BaseFileManager {
	constructor() {
		this._fileName = "";
		this.lastSaved = null;
		this.softwareName = "StochSD";
	}
	// This is executed when the document is ready
	ready() {
		// Override this
		this.updateTitle();
	}
	newModel() {
		localStorage.removeItem("reloadPending");
		this._fileName = "";
		this.updateTitle();
		applicationReload();
	}
	newModelOld() {
		History.clearUndoHistory();
		newModel();
		// Store an empty state as first state
		History.storeUndoState();
		// There is no last state is it could not be unsaved
		History.unsavedChanges = false;
		this.fileName = null;	
		this.lastSaved = null;
		this.updateTitle();
		// Optional handler for when saving is finished
		this.finishedSaveHandler = null;
		RunResults.resetSimulation();
	}
	hasSaveAs() {
		return false;
	}
	saveModelAs() {
		// Override this where hasSaveAs is true
	}
	saveModel() {
		// Override this
	}
	loadModel() {
		// Override this
	}
	setTitle(newTitle) {;
		if (window !== window.top) {
			// In iFrame
			setParentTitle(newTitle);
		}
		else {
			// Not in iFrame
			document.title = newTitle;
		}
	}
	loadModelData(modelData) {
		History.clearUndoHistory();
		loadModelFromXml(modelData);
		// Store an empty state as first state
		History.storeUndoState();
		RunResults.resetSimulation();
	}
	updateSaveTime() {
		this.lastSaved = new Date().toLocaleTimeString();
		
	}
	updateTitle() {
		let title = this.softwareName;	
		if(this._fileName != "") {
			title += " | "+this.fileName;
			if(this.lastSaved) {
				title+=" (last saved: "+this.lastSaved+")";
			}
		}
		this.setTitle(title);
	}
	set fileName(newFileName) {
		if(newFileName == null) {
			newFileName = "";
		}
		this._fileName = newFileName;	
	}
	get fileName() {
		return this._fileName;
	}
	appendFileExtension(filename,extension) {
		var extension_position=filename.length-extension.length;
		var current_extension=filename.substring(extension_position,filename.length);
		if(current_extension.toLowerCase()!=extension.toLowerCase()) {
			filename+=extension;
		}
		return filename;
	}
}

class WebFileManager extends BaseFileManager {
	constructor() {
		super();
		this.softwareName = "StochSD Web";
	}
	download(fileName, data) {
		// Create Blob and attach it to ObjectURL
		var blob = new Blob([data], {type: "octet/stream"}),
		url = window.URL.createObjectURL(blob);
		
		// Create download link and click it
		var a = document.createElement("a");
		a.style.display="none";
		a.href = url;
		a.download = fileName;
		document.body.appendChild(a);
		a.click();
		
		History.unsavedChanges = false;
		
		// The setTimeout is a fix to make it work in Firefox
		// Without it, the objectURL is removed before the click-event is triggered
		// And the download does not work
		setTimeout(function() {
			window.URL.revokeObjectURL(url);
			a.remove();
		},1);
	}
	saveModel() {
		let fileData = createModelFileData();
		
		let suggesName = (this.fileName) ? this.fileName : "model";
		
		var fileName=prompt("Filename:",suggesName);
		if(fileName==null) {
			return;
		}
		this.fileName = this.appendFileExtension(fileName,".InsightMaker");
		this.download(this.fileName,fileData);
		this.updateSaveTime();
		this.updateTitle();
		if(this.finishedSaveHandler) {
			this.finishedSaveHandler();
		}
	}
	loadModel() {
		openFile({
			read: "text",
			multiple: false,
			accept: InsightMakerFileExtension,
			onCompleted: (model) => {
				this.fileName = model.name;
				//~ this.loadModelData(model.contents);
				//~ this.updateTitle();
				
				do_global_log("web load file call  back");
				var fileData = model.contents;
				History.forceCustomUndoState(fileData);
				this.updateTitle();
				preserveRestart();
			}
		});
	}
}
class NwFileManager extends BaseFileManager {
	constructor() {
		super();
		this.softwareName = "StochSD Desktop";
	}
	
	// This is executed when the document is ready
	ready() {
		super.ready();
		// Prepare model loader
		this.modelLoaderInput = document.body.appendChild(document.createElement("input"));
		this.modelLoaderInput.className = "modelLoaderInput";
		this.modelLoaderInput.addEventListener('change', (event) => {
			do_global_log("NW: In read file callback");
			var file = event.target.files[0]; 
			if (file) {
				do_global_log("NW: In read file callback has file");
				this.fileName = file.path;
				var reader = new FileReader();
				reader.onload = (reader_event) => { 
					do_global_log("NW: reader.onload callback");
					var fileData = reader_event.target.result;
					History.forceCustomUndoState(fileData);
					this.updateTitle();
					preserveRestart();
				}
				reader.readAsText(file);
			}
		}, false);
		this.modelLoaderInput.type="file";
		this.modelLoaderInput.accept=InsightMakerFileExtension;
		
		// Prepare model saver
		//<input type="file" nwsaveas>
		this.modelSaverInput = document.body.appendChild(document.createElement("input"));
		this.modelSaverInput.className = "modelSaverInput";
		this.modelSaverInput.addEventListener('change', (event) => {
			var file = event.target.files[0]; 
			if (file) {
				this.fileName = this.appendFileExtension(file.path,InsightMakerFileExtension);
				let fileData = createModelFileData();
				this.writeFile(this.fileName,fileData);
				this.updateSaveTime();
				this.updateTitle();
				if(this.finishedSaveHandler) {
					this.finishedSaveHandler();
				}
			}
		}, false);
		this.modelSaverInput.type="file";
		this.modelSaverInput.nwsaveas="";
		this.modelSaverInput.accept=InsightMakerFileExtension;
	}
	hasSaveAs() {
		return true;
	}
	writeFile(fileName,FileData) {
		do_global_log("NW: In write file");
		//~ if(self.fileName == null) {
			//~ self.saveModelAs();
			//~ return;
		//~ }
		let fs = require('fs');
		fs.writeFile(fileName,FileData, function(err) {
			do_global_log("NW: in write file callback");
			if(err) {
				do_global_log("NW: Error in write file callback");
				console.error(err);
				alert("Error in file saving "+getStackTrace());
			}
			do_global_log("NW: Success in write file callback");
			History.unsavedChanges = false;
		}); 
	}
	saveModel() {
		do_global_log("NW: save model triggered");
		if(this.fileName == "") {
			this.saveModelAs();
			return;
		}
		let fileData = createModelFileData();
		this.writeFile(this.fileName,fileData);
		this.updateSaveTime();
		this.updateTitle();
	}
	saveModelAs() {
		do_global_log("NW: save model as ... triggered");
		this.modelSaverInput.value = "";
		this.modelSaverInput.click();
		
		// The following line seems to cause a flicky bug
		//~ uploader.parentElement.removeChild(uploader);
	}
	loadModel() {	
		do_global_log("NW: load model");
		this.modelLoaderInput.value = "";
		this.modelLoaderInput.click();
		
		// The following line seems to cause a flicky bug
		//~ uploader.parentElement.removeChild(uploader);
	}
	loadFromCommandLine(fileName) {
		var fs = require('fs')
		var resolve = require('path').resolve;
		var absoluteFileName = resolve(fileName);
		
		
		fs.readFile(fileName, 'utf8', (err,data) => {
			if (err) {
				return console.error(err);
			}
			console.error(fs);
			this.fileName = absoluteFileName;
			this.loadModelData(data);	
			this.updateTitle();
		});
	}
}

class Environment {
	constructor() {
		this.reloadingStarted = false;
	}
	ready() {
		// Override this
	}
	keyDown(event) {
		// Override this
	}
	getFileManager() {
		// Override this
	}
}

class WebEnvironment extends Environment {
	ready() {
		window.onbeforeunload=(e)=>{
			if(this.reloadingStarted) {
				// We never want to complain if we have initialized a reload
				// We only want to complain when the user is closing the page
				return null;
			}
			if(History.unsavedChanges) {
				return 'You have unsaved changes. Are you sure you want to quit?';
			} else {
				return null;
			}
		};
	}
	getFileManager() {
		return new WebFileManager();
	}
}

class NwEnvironment extends Environment {
	ready() {
		$("#btn_zoom_in").click(function() {
			NwZoomController.zoomIn();
		});
		$("#btn_zoom_out").click(function() {
			NwZoomController.zoomOut();
		});
		$("#btn_zoom_reset").click(function() {
			NwZoomController.zoomReset();
		});
		$(".hideUnlessNwjs").removeClass("hideUnlessNwjs");
	}
	keyDown(event) {
		if(event.ctrlKey) {
			// Does not work in web browsers-since ctrl+N is reserved
			if(event.keyCode == keyboard["N"]){
				event.preventDefault();
				$("#btn_new").click();
			}
			
			if(event.keyCode == keyboard["+"]) {
				NwZoomController.zoomIn();
			}
			if(event.keyCode == keyboard["-"]) {
				NwZoomController.zoomOut();
			}
			if(event.keyCode == keyboard["0"]) {
				NwZoomController.zoomReset();
			}
			updateWindowSize();
		}
	}
	getFileManager() {
		return new NwFileManager();
	}
}

function detectEnvironment() {
	if(nwController.isNwActive()) {
		return new NwEnvironment();
	} else {
		return new WebEnvironment();
	}
}

var environment = detectEnvironment();
var fileManager = environment.getFileManager();

"use strict";
/*

Copyright 2010-2015 Scott Fortmann-Roe. All rights reserved.

This file may distributed and/or modified under the
terms of the Insight Maker Public License (https://InsightMaker.com/impl).

*/

var translations = {};

function getText(src){
	if(translations[src]){
		src = translations[src];
	}
	
	for(var i = 1; i < arguments.length; i++){
		src = src.replace("%s", arguments[i]);
	}
	
	return src;
}

"use strict";
/*

Copyright 2010-2015 Scott Fortmann-Roe. All rights reserved.

This file may distributed and/or modified under the
terms of the Insight Maker Public License (https://InsightMaker.com/impl).

*/

var graph;
var primitiveBank = {};
var defaultSolver = '{"enabled": false, "algorithm": "RK1", "timeStep": 1}';

var doc = document.implementation.createDocument("","",null);



// This is a list of all primitives that can be loaded and saved
// Important: The order of the array is the order which primitives are saved.
// Therefor Flows and Links must be at the end since they depend on Stocks and Variables for their connections
const saveblePrimitiveTypes = ["TextArea","Rectangle","Line","Setting","Stock","Variable","Converter","Ghost","Text","Numberbox","Table","Diagram","XyPlot","Flow","Link"];

// A list of all primitives, inclduing Generic which is used non-savable primitives
const allPrimitiveTypes = ["Generic"].concat(saveblePrimitiveTypes);

// Model types. Types that are affecting the logic of the simulations. This must be correct in order for the simulation to work.
const allModelTypes=["Stock","State","Transition","Action","Agents","Variable","Converter","Flow"];


primitiveBank.text = doc.createElement('Text');
primitiveBank.text.setAttribute('name', getText('Text Area'));
primitiveBank.text.setAttribute('LabelPosition', "Middle");

primitiveBank.folder = doc.createElement('Folder');
primitiveBank.folder.setAttribute('name', getText('New Folder'));
primitiveBank.folder.setAttribute('Note', '');
primitiveBank.folder.setAttribute('Type', 'None');
primitiveBank.folder.setAttribute('Solver', defaultSolver);
primitiveBank.folder.setAttribute('Image', 'None');
primitiveBank.folder.setAttribute('FlipHorizontal', false);
primitiveBank.folder.setAttribute('FlipVertical', false);
primitiveBank.folder.setAttribute('LabelPosition', "Middle");
primitiveBank.folder.setAttribute('AgentBase', "");

primitiveBank.ghost = doc.createElement('Ghost');
primitiveBank.ghost.setAttribute('Source', '');

primitiveBank.picture = doc.createElement('Picture');
primitiveBank.picture.setAttribute('name', '');
primitiveBank.picture.setAttribute('Note', '');
primitiveBank.picture.setAttribute('Image', 'Growth');
primitiveBank.picture.setAttribute('FlipHorizontal', false);
primitiveBank.picture.setAttribute('FlipVertical', false);
primitiveBank.picture.setAttribute('LabelPosition', "Bottom");


/* Used for primitives that does not have a corresponding element in insightmaker */
primitiveBank.generic = doc.createElement('Generic');
setValuedProperties(primitiveBank.generic);

primitiveBank.numberbox = doc.createElement('Numberbox');
setValuedProperties(primitiveBank.numberbox);

primitiveBank.table = doc.createElement('Table');
primitiveBank.table.setAttribute('Primitives', '');
setValuedProperties(primitiveBank.table);

primitiveBank.diagram = doc.createElement('Diagram');
primitiveBank.diagram.setAttribute('Primitives', '');
setValuedProperties(primitiveBank.diagram);

primitiveBank.xyplot = doc.createElement('XyPlot');
primitiveBank.xyplot.setAttribute('Primitives', '');
setValuedProperties(primitiveBank.xyplot);

primitiveBank.line = doc.createElement('Line');
setValuedProperties(primitiveBank.line);

primitiveBank.rectangle = doc.createElement('Rectangle');
setValuedProperties(primitiveBank.rectangle);

primitiveBank.textarea = doc.createElement('TextArea');
setValuedProperties(primitiveBank.textarea);

primitiveBank.display = doc.createElement('Display');
primitiveBank.display.setAttribute('name', getText('Default Display'));
primitiveBank.display.setAttribute('Note', '');
primitiveBank.display.setAttribute('Type', 'Time Series');
primitiveBank.display.setAttribute('xAxis', getText("Time") + ' (%u)');
primitiveBank.display.setAttribute('yAxis', '');
primitiveBank.display.setAttribute('yAxis2', '');
primitiveBank.display.setAttribute('showMarkers', false);
primitiveBank.display.setAttribute('showLines', true);
primitiveBank.display.setAttribute('showArea', false);
primitiveBank.display.setAttribute('ThreeDimensional', false);
primitiveBank.display.setAttribute('Primitives', '');
primitiveBank.display.setAttribute('Primitives2', '');
primitiveBank.display.setAttribute('AutoAddPrimitives', false);
primitiveBank.display.setAttribute('ScatterplotOrder', 'X Primitive, Y Primitive');
primitiveBank.display.setAttribute('Image', 'Display');
primitiveBank.display.setAttribute('FlipHorizontal', false);
primitiveBank.display.setAttribute('FlipVertical', false);
primitiveBank.display.setAttribute('LabelPosition', "Bottom");
primitiveBank.display.setAttribute('legendPosition', "Automatic");

function setValuedProperties(cell) {
	cell.setAttribute('Units', "Unitless")
	cell.setAttribute('MaxConstraintUsed', false)
	cell.setAttribute('MinConstraintUsed', false)
	cell.setAttribute('MaxConstraint', '100');
	cell.setAttribute('MinConstraint', '0');
	cell.setAttribute('ShowSlider', false);
	cell.setAttribute('SliderMax', 100);
	cell.setAttribute('SliderMin', 0);
	cell.setAttribute('SliderStep', '');
}

primitiveBank.stock = doc.createElement('Stock');
primitiveBank.stock.setAttribute('name', getText('New Stock'));
primitiveBank.stock.setAttribute('Note', '');
primitiveBank.stock.setAttribute('InitialValue', '0');
primitiveBank.stock.setAttribute('StockMode', 'Store');
primitiveBank.stock.setAttribute('Delay', '10');
primitiveBank.stock.setAttribute('Volume', '100');
primitiveBank.stock.setAttribute('NonNegative', false);
setValuedProperties(primitiveBank.stock);
primitiveBank.stock.setAttribute('Image', 'None');
primitiveBank.stock.setAttribute('FlipHorizontal', false);
primitiveBank.stock.setAttribute('FlipVertical', false);
primitiveBank.stock.setAttribute('LabelPosition', "Middle");

primitiveBank.state = doc.createElement('State');
primitiveBank.state.setAttribute('name', getText('New State'));
primitiveBank.state.setAttribute('Note', '');
primitiveBank.state.setAttribute('Active', 'false');
primitiveBank.state.setAttribute('Residency', '0');
primitiveBank.state.setAttribute('Image', 'None');
primitiveBank.state.setAttribute('FlipHorizontal', false);
primitiveBank.state.setAttribute('FlipVertical', false);
primitiveBank.state.setAttribute('LabelPosition', "Middle");

primitiveBank.transition = doc.createElement('Transition');
primitiveBank.transition.setAttribute('name', getText('Transition'));
primitiveBank.transition.setAttribute('Note', '');
primitiveBank.transition.setAttribute('Trigger', 'Timeout');
primitiveBank.transition.setAttribute('Value', '1');
primitiveBank.transition.setAttribute('Repeat', false);
primitiveBank.transition.setAttribute('Recalculate', false);
setValuedProperties(primitiveBank.transition);

primitiveBank.action = doc.createElement('Action');
primitiveBank.action.setAttribute('name', getText('New Action'));
primitiveBank.action.setAttribute('Note', '');
primitiveBank.action.setAttribute('Trigger', 'Probability');
primitiveBank.action.setAttribute('Value', '0.5');
primitiveBank.action.setAttribute('Repeat', true);
primitiveBank.action.setAttribute('Recalculate', false);
primitiveBank.action.setAttribute('Action', 'Self.Move({Rand(), Rand()})');

primitiveBank.agents = doc.createElement('Agents');
primitiveBank.agents.setAttribute('name', getText('New Agent Population'));
primitiveBank.agents.setAttribute('Note', '');
primitiveBank.agents.setAttribute('Size', 100);
primitiveBank.agents.setAttribute('GeoWrap', false);
primitiveBank.agents.setAttribute('GeoDimUnits', 'Unitless');
primitiveBank.agents.setAttribute('GeoWidth', 200);
primitiveBank.agents.setAttribute('GeoHeight', 100);
primitiveBank.agents.setAttribute('Placement', "Random");
primitiveBank.agents.setAttribute('PlacementFunction', "{Rand()*Width(Self), Rand()*Height(Self)}");
primitiveBank.agents.setAttribute('Network', "None");
primitiveBank.agents.setAttribute('NetworkFunction', "RandBoolean(0.02)");
primitiveBank.agents.setAttribute('Agent', '');
primitiveBank.agents.setAttribute('Image', 'None');
primitiveBank.agents.setAttribute('FlipHorizontal', false);
primitiveBank.agents.setAttribute('FlipVertical', false);
primitiveBank.agents.setAttribute('LabelPosition', "Middle");
primitiveBank.agents.setAttribute('ShowSlider', false);
primitiveBank.agents.setAttribute('SliderMax', 100);
primitiveBank.agents.setAttribute('SliderMin', 0);
primitiveBank.agents.setAttribute('SliderStep', 1);

primitiveBank.variable = doc.createElement('Variable');
primitiveBank.variable.setAttribute('name', getText('New Variable'));
primitiveBank.variable.setAttribute('Note', '');
primitiveBank.variable.setAttribute('Equation', '0');
setValuedProperties(primitiveBank.variable);
primitiveBank.variable.setAttribute('Image', 'None');
primitiveBank.variable.setAttribute('FlipHorizontal', false);
primitiveBank.variable.setAttribute('FlipVertical', false);
primitiveBank.variable.setAttribute('LabelPosition', "Middle");

primitiveBank.button = doc.createElement('Button');
primitiveBank.button.setAttribute('name', getText('New Button'));
primitiveBank.button.setAttribute('Note', '');
primitiveBank.button.setAttribute('Function', 'showMessage("Button action triggered!\\n\\nIf you want to edit this Action, click on the button while holding down the Shift key on your keyboard.")');
primitiveBank.button.setAttribute('Image', 'None');
primitiveBank.button.setAttribute('FlipHorizontal', false);
primitiveBank.button.setAttribute('FlipVertical', false);
primitiveBank.button.setAttribute('LabelPosition', "Middle");

primitiveBank.converter = doc.createElement('Converter');
primitiveBank.converter.setAttribute('name', getText('New Converter'));
primitiveBank.converter.setAttribute('Note', '');
primitiveBank.converter.setAttribute('Source', 'Time');
primitiveBank.converter.setAttribute('Data', '0,0; 1,1; 2,4; 3,9');
primitiveBank.converter.setAttribute('Interpolation', 'Linear');
setValuedProperties(primitiveBank.converter);
primitiveBank.converter.setAttribute('Image', 'None');
primitiveBank.converter.setAttribute('FlipHorizontal', false);
primitiveBank.converter.setAttribute('FlipVertical', false);
primitiveBank.converter.setAttribute('LabelPosition', "Middle");

primitiveBank.flow = doc.createElement('Flow');
primitiveBank.flow.setAttribute('name', getText('Flow'));
primitiveBank.flow.setAttribute('Note', '');
primitiveBank.flow.setAttribute('FlowRate', '0');
primitiveBank.flow.setAttribute('OnlyPositive', true);
primitiveBank.flow.setAttribute('TimeIndependent', false);
setValuedProperties(primitiveBank.flow);

primitiveBank.link = doc.createElement('Link');
primitiveBank.link.setAttribute('name', getText('Link'));
primitiveBank.link.setAttribute('Note', '');
primitiveBank.link.setAttribute('BiDirectional', false);

primitiveBank.setting = doc.createElement('Setting');
primitiveBank.setting.setAttribute('Note', '');
primitiveBank.setting.setAttribute('Version', '36');
primitiveBank.setting.setAttribute('Throttle', '1');
primitiveBank.setting.setAttribute('TimeLength', '100');
primitiveBank.setting.setAttribute('TimeStart', '0');
primitiveBank.setting.setAttribute('TimeStep', '1');
primitiveBank.setting.setAttribute('TimeUnits', 'Years');
primitiveBank.setting.setAttribute('Units', "");
primitiveBank.setting.setAttribute("SolutionAlgorithm", "RK1");
primitiveBank.setting.setAttribute("BackgroundColor", "white");
primitiveBank.setting.setAttribute("Macros", "");
primitiveBank.setting.setAttribute("SensitivityPrimitives", "");
primitiveBank.setting.setAttribute("SensitivityRuns", 50);
primitiveBank.setting.setAttribute("SensitivityBounds", "50, 80, 95, 100");
primitiveBank.setting.setAttribute("SensitivityShowRuns", "false");
primitiveBank.setting.setAttribute("StrictUnits", "true");
primitiveBank.setting.setAttribute("StrictLinks", "true");
primitiveBank.setting.setAttribute("StrictAgentResolution", "true");
primitiveBank.setting.setAttribute("StyleSheet", "{}");


var blankGraphTemplate = "<mxGraphModel>\n  <root>\n    <mxCell id=\"0\"\/>\n    <mxCell id=\"1\" parent=\"0\"\/>\n    <Folder name=\"Step 2. Share your Insights\" Note=\"\" Type=\"None\" Solver=\"{&quot;enabled&quot;: false, &quot;algorithm&quot;: &quot;RK1&quot;, &quot;timeStep&quot;: 1}\" Image=\"None\" FlipHorizontal=\"false\" FlipVertical=\"false\" LabelPosition=\"Top\" AgentBase=\"\" id=\"44\">\n      <mxCell style=\"folder;dashed=0;fontSize=18;fontFamily=Verdana;fontStyle=1;rounded=0;strokeColor=#C0C0C0;strokeWidth=1;30=10;fillColor=#FFFFFF\" parent=\"1\" vertex=\"1\">\n        <mxGeometry x=\"710\" y=\"90\" width=\"320\" height=\"522\" as=\"geometry\"\/>\n      <\/mxCell>\n    <\/Folder>\n    <Setting Note=\"\" Version=\"34\" TimeLength=\"20\" TimeStart=\"0\" TimeStep=\"1\" TimeUnits=\"Years\" StrictUnits=\"true\" StrictLinks=\"true\" StrictAgentResolution=\"true\" Units=\"\" HiddenUIGroups=\"Validation,User Interface\" SolutionAlgorithm=\"RK1\" BackgroundColor=\"white\" Throttle=\"1\" Macros=\"\" SensitivityPrimitives=\"\" SensitivityRuns=\"50\" SensitivityBounds=\"50, 80, 95, 100\" SensitivityShowRuns=\"false\" id=\"2\">\n      <mxCell parent=\"1\" vertex=\"1\" visible=\"0\">\n        <mxGeometry x=\"20\" y=\"20\" width=\"80\" height=\"40\" as=\"geometry\"\/>\n      <\/mxCell>\n    <\/Setting>\n    <Display name=\"Default Display\" Note=\"\" Type=\"Time Series\" xAxis=\"Time (%u)\" yAxis=\"%o\" ThreeDimensional=\"false\" Primitives=\"35\" AutoAddPrimitives=\"true\" ScatterplotOrder=\"X Primitive, Y Primitive\" Image=\"Display\" yAxis2=\"\" Primitives2=\"\" showMarkers=\"false\" showLines=\"true\" showArea=\"false\" legendPosition=\"None\" id=\"3\">\n      <mxCell style=\"roundImage;image=\/builder\/images\/DisplayFull.png;\" parent=\"1\" vertex=\"1\" visible=\"0\">\n        <mxGeometry x=\"50\" y=\"20\" width=\"64\" height=\"64\" as=\"geometry\"\/>\n      <\/mxCell>\n    <\/Display>\n    <Button name=\"Click me to Clear this Demo Model\" Note=\"\" Function=\"clearModel()\" Image=\"None\" FlipHorizontal=\"false\" FlipVertical=\"false\" LabelPosition=\"Middle\" id=\"23\">\n      <mxCell style=\"button;fontSize=18;fillColor=#FFFF99;strokeColor=#FF9900;fontColor=#FF6600;fontStyle=1;fontFamily=Verdana\" parent=\"1\" vertex=\"1\">\n        <mxGeometry x=\"510\" y=\"12\" width=\"520\" height=\"58\" as=\"geometry\"\/>\n      <\/mxCell>\n    <\/Button>\n    <Picture name=\"\" Note=\"\" Image=\"List\" FlipHorizontal=\"false\" FlipVertical=\"false\" LabelPosition=\"Bottom\" id=\"46\">\n      <mxCell style=\"picture;image=https:\/\/insightmaker.com\/builder\/images\/SD\/List.png;imageFlipV=0;imageFlipH=0;shape=image\" parent=\"1\" vertex=\"1\">\n        <mxGeometry x=\"30\" y=\"10\" width=\"64\" height=\"64\" as=\"geometry\"\/>\n      <\/mxCell>\n    <\/Picture>\n    <Text name=\"Insight Maker Basics\" LabelPosition=\"Middle\" id=\"47\">\n      <mxCell style=\"text;fontStyle=1;fontFamily=Helvetica\" parent=\"1\" vertex=\"1\">\n        <mxGeometry x=\"100\" y=\"17\" width=\"320\" height=\"50\" as=\"geometry\"\/>\n      <\/mxCell>\n    <\/Text>\n    <Picture name=\"\" Note=\"\" Image=\"Network\" FlipHorizontal=\"false\" FlipVertical=\"false\" LabelPosition=\"Bottom\" id=\"48\">\n      <mxCell style=\"picture;image=https:\/\/insightmaker.com\/builder\/images\/SD\/Network.png;imageFlipV=0;imageFlipH=0;shape=image\" parent=\"1\" vertex=\"1\">\n        <mxGeometry x=\"950\" y=\"492\" width=\"132\" height=\"132\" as=\"geometry\"\/>\n      <\/mxCell>\n    <\/Picture>\n    <Text name=\"&lt;i style=&quot;float:left;margin-right:8px;margin-bottom:5px;color:lightgrey&quot; class=&quot;fa fa-3x fa-share-alt&quot;&gt;&lt;\/i&gt; Insight Maker models are web pages, so sharing them is as easy as emailing a link or posting it to Twitter or Facebook. If you have your own web page or blog, you can embed Insight Maker models right in your page.&#xa;&lt;hr style=&quot;width:50%; margin-top:16px;margin-bottom:16px&quot;&gt;&lt;i style=&quot;float:left;margin-right:10px;margin-bottom:5px;color:lightgrey&quot; class=&quot;fa fa-4x fa-file-text-o&quot;&gt;&lt;\/i&gt; Insight Maker provides two great ways to help you explain your model: Stories and Articles.&#xa;&#xa;&lt;a href=&quot;\/storytelling&quot; target=&quot;_blank&quot;&gt;Stories&lt;\/a&gt; create a walkthrough of your model where you can show messages and reveal the model step-by-step. Articles take a story and convert it into a crisp static web page.&#xa;&#xa;Here are a few example articles made with Insight Maker. What will you write your article on?&#xa;&#xa; \u2022 &quot;&lt;a href=&quot;https:\/\/insightmaker.com\/article\/20382&quot; target=&quot;_blank&quot;&gt;Air Pollution Dynamics&lt;\/a&gt;&quot;&#xa; \u2022 &quot;&lt;a href=&quot;https:\/\/insightmaker.com\/article\/8872&quot; target=&quot;_blank&quot;&gt;Bird Feeder Dilemma&lt;\/a&gt;&quot;&#xa; \u2022 &quot;&lt;a href=&quot;https:\/\/insightmaker.com\/article\/133&quot; target=&quot;_blank&quot;&gt;Balancing Loop with Delay&lt;\/a&gt;&quot;\" LabelPosition=\"Middle\" id=\"55\">\n      <mxCell style=\"text;fontFamily=Helvetica;fontStyle=0;fontSize=15;align=left;labelPosition=middle;verticalLabelPosition=middle;verticalAlign=middle\" parent=\"1\" vertex=\"1\">\n        <mxGeometry x=\"730\" y=\"138\" width=\"280\" height=\"455\" as=\"geometry\"\/>\n      <\/mxCell>\n    <\/Text>\n    <Folder name=\"Step 1. Build your Model\" Note=\"\" Type=\"None\" Solver=\"{&quot;enabled&quot;: false, &quot;algorithm&quot;: &quot;RK1&quot;, &quot;timeStep&quot;: 1}\" Image=\"None\" FlipHorizontal=\"false\" FlipVertical=\"false\" LabelPosition=\"Middle\" AgentBase=\"\" id=\"42\">\n      <mxCell style=\"folder;dashed=0;fontSize=18;fontFamily=Verdana;fontStyle=1;image=None;shape=rectangle;rounded=0;strokeColor=#C0C0C0;strokeWidth=1;30=10\" parent=\"1\" vertex=\"1\">\n        <mxGeometry x=\"15\" y=\"90\" width=\"680\" height=\"522\" as=\"geometry\">\n          <mxRectangle x=\"15\" y=\"98\" width=\"250\" height=\"30\" as=\"alternateBounds\"\/>\n        <\/mxGeometry>\n      <\/mxCell>\n    <\/Folder>\n    <Link name=\"Link\" Note=\"\" BiDirectional=\"false\" id=\"28\">\n      <mxCell style=\"link;dashed=0;strokeColor=#003366;strokeWidth=5;30=50;endArrow=block\" parent=\"42\" source=\"51\" target=\"49\" edge=\"1\">\n        <mxGeometry x=\"35\" width=\"100\" height=\"100\" as=\"geometry\">\n          <mxPoint x=\"35\" y=\"100\" as=\"sourcePoint\"\/>\n          <mxPoint x=\"135\" as=\"targetPoint\"\/>\n        <\/mxGeometry>\n      <\/mxCell>\n    <\/Link>\n    <Link name=\"Link\" Note=\"\" BiDirectional=\"false\" id=\"29\">\n      <mxCell style=\"link;strokeColor=#003366;dashed=0;strokeWidth=5;30=50;endArrow=block\" parent=\"42\" source=\"49\" target=\"50\" edge=\"1\">\n        <mxGeometry x=\"35\" width=\"100\" height=\"100\" as=\"geometry\">\n          <mxPoint x=\"35\" y=\"100\" as=\"sourcePoint\"\/>\n          <mxPoint x=\"135\" as=\"targetPoint\"\/>\n          <Array as=\"points\"\/>\n        <\/mxGeometry>\n      <\/mxCell>\n    <\/Link>\n    <Text name=\"Use an extensive set of &lt;a href=&quot;\/diagramming&quot; target=&quot;_blank&quot;&gt;drawing tools to create&lt;\/a&gt; causal loop diagrams, flow charts or rich pictures. Build the diagram that communicates your insights and mental models.&#xa;&#xa;This diagram is an Insight Maker model. Feel free to change it. Each  picture, textbox or other element is called a &quot;&lt;a href=&quot;\/primitives&quot; target=&quot;_blank&quot;&gt;Primitive&lt;\/a&gt;&quot;. You can click and drag primitives to move them or edit their contents in the sidebar.\" LabelPosition=\"Middle\" id=\"45\">\n      <mxCell style=\"text;fontFamily=Helvetica;fontStyle=0;fontSize=15;align=left;labelPosition=middle;verticalLabelPosition=middle;verticalAlign=middle\" parent=\"42\" vertex=\"1\">\n        <mxGeometry x=\"185\" y=\"36\" width=\"475\" height=\"136\" as=\"geometry\"\/>\n      <\/mxCell>\n    <\/Text>\n    <Picture name=\"Simulate\" Note=\"\" Image=\"https:\/\/insightmaker.com\/sites\/default\/files\/misc\/kchart.png\" FlipHorizontal=\"false\" FlipVertical=\"false\" LabelPosition=\"Left\" id=\"49\">\n      <mxCell style=\"picture;image=https:\/\/insightmaker.com\/sites\/default\/files\/misc\/kchart.png;imageFlipV=0;imageFlipH=0;shape=image;verticalLabelPosition=middle;verticalAlign=middle;labelPosition=left;align=right;fontStyle=1\" parent=\"42\" vertex=\"1\">\n        <mxGeometry x=\"79\" y=\"223\" width=\"90\" height=\"90\" as=\"geometry\"\/>\n      <\/mxCell>\n    <\/Picture>\n    <Picture name=\"Analyze\" Note=\"\" Image=\"https:\/\/insightmaker.com\/sites\/default\/files\/misc\/kformula.png\" FlipHorizontal=\"false\" FlipVertical=\"false\" LabelPosition=\"Left\" id=\"50\">\n      <mxCell style=\"picture;image=https:\/\/insightmaker.com\/sites\/default\/files\/misc\/kformula.png;imageFlipV=0;imageFlipH=0;shape=image;verticalLabelPosition=middle;verticalAlign=middle;labelPosition=left;align=right;fontStyle=1\" parent=\"42\" vertex=\"1\">\n        <mxGeometry x=\"79\" y=\"402\" width=\"90\" height=\"90\" as=\"geometry\"\/>\n      <\/mxCell>\n    <\/Picture>\n    <Picture name=\"Diagram\" Note=\"\" Image=\"https:\/\/insightmaker.com\/sites\/default\/files\/misc\/kivio.png\" FlipHorizontal=\"false\" FlipVertical=\"false\" LabelPosition=\"Left\" id=\"51\">\n      <mxCell style=\"picture;image=https:\/\/insightmaker.com\/sites\/default\/files\/misc\/kivio.png;imageFlipV=0;imageFlipH=0;shape=image;verticalLabelPosition=middle;verticalAlign=middle;labelPosition=left;align=right;fontStyle=1\" parent=\"42\" vertex=\"1\">\n        <mxGeometry x=\"79\" y=\"40\" width=\"90\" height=\"90\" as=\"geometry\"\/>\n      <\/mxCell>\n    <\/Picture>\n    <Text name=\"Add equations to your model to &lt;a href=&quot;\/simulating&quot; target=&quot;_blank&quot;&gt;simulate&lt;\/a&gt; future behavior and changes. Use a powerful &lt;a href=&quot;\/equations&quot; target=&quot;_blank&quot;&gt;equation language&lt;\/a&gt; and large library of &lt;a href=&quot;\/functions&quot; target=&quot;_blank&quot;&gt;built-in functions&lt;\/a&gt; to simulate &lt;a href=&quot;\/systemdynamics&quot; target=&quot;_blank&quot;&gt;System Dynamics&lt;\/a&gt; or &lt;a href=&quot;\/agentbased&quot; target=&quot;_blank&quot;&gt;Agent Based Models&lt;\/a&gt;. View and explore results directly within Insight Maker.\" LabelPosition=\"Middle\" id=\"52\">\n      <mxCell style=\"text;fontFamily=Helvetica;fontStyle=0;fontSize=15;align=left;labelPosition=middle;verticalLabelPosition=middle;verticalAlign=middle\" parent=\"42\" vertex=\"1\">\n        <mxGeometry x=\"185\" y=\"215\" width=\"290\" height=\"120\" as=\"geometry\"\/>\n      <\/mxCell>\n    <\/Text>\n    <Text name=\"Analyze your model results. Study the trends to understand the dynamics of your system. Use Insight Maker&#39;s &lt;a href=&quot;\/sensitivitytesting&quot; target=&quot;_blank&quot;&gt;Sensitivity Testing Tool&lt;\/a&gt; to understand the effect of randomness. Apply Insight Maker&#39;s &lt;a href=&quot;\/optimization&quot; target=&quot;_blank&quot;&gt;Optimization Tool&lt;\/a&gt; to maximize or minimize a goal. Utilize Insight Maker&#39;s &lt;a href=&quot;\/scripting&quot; target=&quot;_blank&quot;&gt;scripting&lt;\/a&gt; capabilities to take complete control of your analysis.\" LabelPosition=\"Middle\" id=\"53\">\n      <mxCell style=\"text;fontFamily=Helvetica;fontStyle=0;fontSize=15;align=left;labelPosition=middle;verticalLabelPosition=middle;verticalAlign=middle\" parent=\"42\" vertex=\"1\">\n        <mxGeometry x=\"185\" y=\"387\" width=\"475\" height=\"120\" as=\"geometry\"\/>\n      <\/mxCell>\n    <\/Text>\n    <Folder name=\"Product Adoption\" Note=\"\" Type=\"None\" Solver=\"{&quot;enabled&quot;: false, &quot;algorithm&quot;: &quot;RK1&quot;, &quot;timeStep&quot;: 1}\" Image=\"None\" FlipHorizontal=\"false\" FlipVertical=\"false\" LabelPosition=\"Middle\" AgentBase=\"\" id=\"41\">\n      <mxCell style=\"folder;strokeWidth=1;30=10;fontSize=13;image=None;shape=rectangle;\" parent=\"42\" vertex=\"1\">\n        <mxGeometry x=\"490\" y=\"213\" width=\"170\" height=\"122\" as=\"geometry\">\n          <mxRectangle x=\"490\" y=\"213\" width=\"170\" height=\"27\" as=\"alternateBounds\"\/>\n        <\/mxGeometry>\n      <\/mxCell>\n    <\/Folder>\n    <Stock name=\"Users\" Note=\"\" InitialValue=\"1000\" StockMode=\"Store\" Delay=\"10\" Volume=\"100\" NonNegative=\"false\" Units=\"Unitless\" MaxConstraintUsed=\"false\" MinConstraintUsed=\"false\" MaxConstraint=\"100\" MinConstraint=\"0\" ShowSlider=\"false\" SliderMax=\"100\" SliderMin=\"0\" SliderStep=\"\" Image=\"None\" FlipHorizontal=\"false\" FlipVertical=\"false\" LabelPosition=\"Middle\" id=\"35\">\n      <mxCell style=\"stock;fontSize=9;strokeWidth=1;30=10\" parent=\"41\" vertex=\"1\">\n        <mxGeometry x=\"20\" y=\"90\" width=\"40\" height=\"20\" as=\"geometry\"\/>\n      <\/mxCell>\n    <\/Stock>\n    <Flow name=\"Adoption\" Note=\"\" FlowRate=\"[Users]*[Rate]\" OnlyPositive=\"true\" TimeIndependent=\"false\" Units=\"Unitless\" MaxConstraintUsed=\"false\" MinConstraintUsed=\"false\" MaxConstraint=\"100\" MinConstraint=\"0\" ShowSlider=\"false\" SliderMax=\"100\" SliderMin=\"0\" SliderStep=\"\" id=\"36\">\n      <mxCell style=\"flow;fontSize=9;strokeWidth=2;30=20\" parent=\"41\" target=\"35\" edge=\"1\">\n        <mxGeometry x=\"-680\" y=\"-150\" width=\"100\" height=\"100\" as=\"geometry\">\n          <mxPoint x=\"40\" y=\"40\" as=\"sourcePoint\"\/>\n          <mxPoint x=\"-680\" y=\"-50\" as=\"targetPoint\"\/>\n        <\/mxGeometry>\n      <\/mxCell>\n    <\/Flow>\n    <Variable name=\"Rate\" Note=\"\" Equation=\"0.2\" Units=\"Unitless\" MaxConstraintUsed=\"false\" MinConstraintUsed=\"false\" MaxConstraint=\"100\" MinConstraint=\"0\" ShowSlider=\"false\" SliderMax=\"100\" SliderMin=\"0\" SliderStep=\"\" Image=\"None\" FlipHorizontal=\"false\" FlipVertical=\"false\" LabelPosition=\"Middle\" id=\"37\">\n      <mxCell style=\"variable;fontSize=9;strokeWidth=1;30=10\" parent=\"41\" vertex=\"1\">\n        <mxGeometry x=\"60\" y=\"25\" width=\"40\" height=\"20\" as=\"geometry\"\/>\n      <\/mxCell>\n    <\/Variable>\n    <Link name=\"Link\" Note=\"\" BiDirectional=\"false\" id=\"38\">\n      <mxCell style=\"link;strokeWidth=1;30=10\" parent=\"41\" source=\"37\" target=\"36\" edge=\"1\">\n        <mxGeometry x=\"-650\" y=\"-150\" width=\"100\" height=\"100\" as=\"geometry\">\n          <mxPoint x=\"-650\" y=\"-50\" as=\"sourcePoint\"\/>\n          <mxPoint x=\"-550\" y=\"-150\" as=\"targetPoint\"\/>\n          <Array as=\"points\">\n            <mxPoint x=\"50\" y=\"42\"\/>\n          <\/Array>\n        <\/mxGeometry>\n      <\/mxCell>\n    <\/Link>\n    <Button name=\"Click me to Simulate\" Note=\"\" Function=\"runModel();\" Image=\"None\" FlipHorizontal=\"false\" FlipVertical=\"false\" LabelPosition=\"Middle\" id=\"40\">\n      <mxCell style=\"button;fillColor=#B3E2CD;strokeWidth=2;30=20;fontSize=12\" parent=\"41\" vertex=\"1\">\n        <mxGeometry x=\"80\" y=\"63\" width=\"75\" height=\"35\" as=\"geometry\"\/>\n      <\/mxCell>\n    <\/Button>\n  <\/root>\n<\/mxGraphModel>\n";

function setConverterInit(converter) {
	var start = parseFloat(getTimeStart(), 10);
	var end = parseFloat(getTimeStart(), 10) + parseFloat(getTimeLength(), 10);

	converter.setAttribute("Data", start + "," + Math.pow(start, 2) + "; " + (start + end) / 2 + "," + Math.pow((start + end) / 2, 2) + "; " + end + "," + Math.pow(end, 2))
}

"use strict";
/*

Copyright 2010-2015 Scott Fortmann-Roe. All rights reserved.

This file may distributed and/or modified under the
terms of the Insight Maker Public License (https://InsightMaker.com/impl).

*/

var analysisCount = 0;


function getGraphXml(graph) {
	var enc = new mxCodec(mxUtils.createXmlDocument());
	var node = enc.encode(graph.getModel());
	return mxUtils.getPrettyXml(node);
}

var isSendingtoServer = false;
var waitingToSendToServer = false;
var waitingToSendTimeout = -1;
function sendGraphtoServer(graph) {
	if(isSendingtoServer){
		waitingToSendToServer = true;
	}else{
		if(!unfoldingManager.unfolding){
			clearTimeout(waitingToSendTimeout);
			waitingToSendToServer = false;
			isSendingtoServer = true;

			Ext.Ajax.request({
				url: builder_path + '/save.php',
				method: 'POST',
				params: {
					data: getGraphXml(graph),
					nid: drupal_node_ID,
					title: graph_title,
					description: graph_description,
					tags: graph_tags,
					has_article: has_article,
					published: published,
					groups: JSON.stringify(node_groups)
				},

				success: function(result, request) {
					if (parseInt(result.responseText) != result.responseText) {
						console.log("Insight Save Issue:\n\n" + result.responseText);
					} else {
						drupal_node_ID = result.responseText;
						setSaveEnabled(waitingToSendToServer);
						updateWindowTitle();
						setTopLinks();

					}
				},
				failure: function(result, request) {
					console.log("Insight Not Saved:\n\n" + result.responseText);
					/*Ext.MessageBox.hide();
		            Ext.MessageBox.show({
		                title: 'Error',
		                msg: 'The Insight could not be saved. Please try again later.',
		                buttons: Ext.MessageBox.OK,
		                animEl: 'mb9',
		                icon: Ext.MessageBox.ERROR
		            });*/
				},
				callback: function(){
					isSendingtoServer = false;

					if(waitingToSendToServer){
						waitingToSendTimeout = setTimeout(function(){
							sendGraphtoServer(graph);
						}, 5*1000); // Wait 5 seconds
					}
				}
			});
		}
	}

}

function validPrimitiveName(name, primitive) {
	if (primitive.value.nodeName == "Stock" || primitive.value.nodeName == "Variable" || primitive.value.nodeName == "Converter" || primitive.value.nodeName == "Flow" || primitive.value.nodeName == "Display" || primitive.value.nodeName == "Agents" || primitive.value.nodeName == "Transition" || primitive.value.nodeName == "State") {
		if (name.length > 0 && (!(/[\[\]\(\)\{\}\<\>\'\"]/.test(name)))) {
			return true;
		} else {
			mxUtils.alert(getText("Primitive names cannot contain brackets, parenthesis, or quotes."));
			return false;
		}
	} else {
		return true;
	}
}

function isPrimitive(cell) {
	return !(cell.value.nodeName == 'Button' || cell.value.nodeName == 'Picture' || cell.value.nodeName == 'Text');
}

function cellsContainNodename(myCells, name) {
	for (var i = 0; i < myCells.length; i++) {
		if (myCells[i].value.nodeName == name) {
			return true;
		}
	}
}


function connectionType() {
	if (ribbonPanelItems().down('#connect').pressed) {
		return "Flow";
	} else {
		return "Link";
	}
	return "None";
}

function setAllConnectable() {
	graph.setConnectable(true);
	var items = primitives();
	for (var i = 0; i < items.length; i++) {
		items[i].setConnectable(true);
	}
}

var primitiveCache = {};
//cache clearing is set in InsightEditor.js


function primitives(type) {
	// All use of primitiveCache are around here (in Utilities.js)
	// We can disable caching by uncommmenting the following 3 lines
	//~ if (primitiveCache[" " + type]) {
		//~ return primitiveCache[" " + type];
	//~ }
	// Caching is only a way to make getting primitives faster by skipping some code here
	var myCells = childrenCells(((graph instanceof SimpleNode)?graph.children[0]:graph.getModel().getRoot()).children[0]);
	if (type == null) {
		// Take all cells
		primitiveCache[" " + type] = myCells;
	} else {
		// Go through all cells and take the once with the correct type
		var targetCells = [];
		for (var i = 0; i < myCells.length; i++) {
			if (myCells[i].value.nodeName == type) {
				targetCells.push(myCells[i]);
			}
		}
		primitiveCache[" " + type] = targetCells;
	}
	return primitiveCache[" " + type];
}

function childrenCells(root) {
	var myCells = root?root.children:null;
	if (myCells != null) {
		var additions = [];
		for (var i = 0; i < myCells.length; i++) {
			//alert(myCells[i].value.nodeName);
			if (myCells[i].value.nodeName == "Folder") {
				additions = additions.concat(childrenCells(myCells[i]));
			}
		}
		myCells = myCells.concat(additions);
		for (var i = myCells.length - 1; i >= 0; i--) {
			if (myCells[i] == null || myCells[i].value == null) {
				myCells.splice(i, 1);
			}
		}
		return myCells;
	}
	return null;
}


var neighborhoodCache = {};
//cache clearing is set in InsightEditor.js

function clearPrimitiveCache() {
	primitiveCache = {};
	neighborhoodCache = {};
}

function neighborhood(target) {
	// All neighberhood cache is in this function
	
	var targetInAgent = inAgent(target);
	if (neighborhoodCache[target.id]) {
		return neighborhoodCache[target.id];
	}
	var hood = [];
	var myCells = primitives();
	if (myCells != null) {
		if (target != null) {
			var flows = [];
			var links = [];
			if (["Flow","Link","Transition"].indexOf(target.value.nodeName) > -1) {
				if (orig(target.source) !== null) {
					hood.push({
						item: orig(target.source),
						type: "direct"
					});
				}
				if (orig(target.target) !== null) {
					hood.push({
						item: orig(target.target),
						type: "direct"
					});
				}
			}
			if (target.value.nodeName == "Agents") {
				if (target.getAttribute("Agent")) {
					hood = hood.concat(getAgentItems(target));
				}
			}
			for (var i = 0; i < myCells.length; i++) {
				if (myCells[i].value.nodeName == "Flow") {
					flows.push(orig(myCells[i]));
				} else if (myCells[i].value.nodeName == "Link") {
					links.push(orig(myCells[i]));
				}
			}
			for (var i = 0; i < flows.length; i++) {
				if (flows[i].source == target) {
					hood.push({
						item: flows[i],
						type: "direct",
						linkHidden: true
					});
				}
				if (flows[i].target == target) {
					hood.push({
						item: flows[i],
						type: "direct",
						linkHidden: true
					});
				}
			}
			for (var i = 0; i < links.length; i++) {
				if (orig(links[i].source) == target && (isDefined(links[i].target) && links[i].target !== null)) {
					var linkHidden = !isTrue(links[i].getAttribute("BiDirectional"));

					hood.push({
						item: orig(links[i].target),
						type: "direct",
						linkHidden: linkHidden
					});
					hood = hood.concat(getAgentItems(links[i].target, linkHidden));
				}
				if (orig(links[i].target) == target && (isDefined(links[i].source) && links[i].source !== null) && !(inAgent(orig(links[i].source)) && !targetInAgent)) {
					hood.push({
						item: orig(links[i].source),
						type: "direct"
					});
					hood = hood.concat(getAgentItems(links[i].source));
				}
			}
		} else {
			for (var i = 0; i < myCells.length; i++) {
				if (isValued(myCells[i])) {
					hood.push({
						item: orig(myCells[i]),
						type: "direct"
					});
				}
			}
		}
	}
	hood = hood.filter(function(x){
		return x;
	});
	var res = [];

	//Remove duplicated elements
	for (var i = 0; i < hood.length; i++) {
		if(hood[i].linkHidden && strictLinks){
			continue;
		}
		var found = false;
		for (var j = 0; j < res.length; j++) {
			if (res[j].type == hood[i].type && res[j].item.id == hood[i].item.id) {
				found = true;
        if (res[j].linkHidden && !hood[i].linkHidden){
          res[j].linkHidden = false;
        }
				break;
			}
		}
		if (!found) {
			if (isValued(hood[i].item) || (hood[i].item.value.nodeName == "Agents")) {
				res.push(hood[i]);
			}
		}
	}
	neighborhoodCache[target.id] = res;
	return res;

	function getAgentItems(agent, linkHidden) {
		var res = [];
		if (orig(agent).value.nodeName == "Agents" && orig(agent).getAttribute("Agent")) {
			var id = orig(agent).getAttribute("Agent");
			if (id) {
				var items = getChildren(findID(id));
				items.forEach(function(x) {
					if (isValued(x) && x.value.nodeName != "Ghost") {
						res.push({
							item: x,
							type: "agent",
							linkHidden: linkHidden,
							name: x.getAttribute("name")
						});
					}
				})
			}
		}

		return res.sort(function(a, b) {
			if (a.name == b.name) {
				return 0;
			} else if (a.name > b.name) {
				return 1
			} else {
				return -1;
			}
		});
	}
}

function doubleArray(arr) {
	var narr = [];
	for (var i = 0; i < arr.length; i++) {
		narr.push([arr[i], arr[i]])
	}
	return narr;
}

function isValued(cell) {
	if (isUndefined(cell) || cell == null || isUndefined(orig(cell))) {
		return false;
	}
	return (orig(cell).value.nodeName == "Converter" || orig(cell).value.nodeName == "Flow" || orig(cell).value.nodeName == "Stock" || orig(cell).value.nodeName == "Variable" || orig(cell).value.nodeName == "Transition" || orig(cell).value.nodeName == "State");
}

function setSaveEnabled(e) {
	if (is_editor && (!is_embed)) {
		var b = ribbonPanelItems().getComponent('savebut');
		if (e && unfoldingManager.unfolding == false) {
			b.setDisabled(false);
			b.setText('Save');
		} else {
			b.setDisabled(true);
			b.setText('Saved');
		}
	}
}

function updateWindowTitle() {
	if (!is_embed) {
		if (graph_title == "") {
			document.title = "Untitled Insight | Insight Maker";
		} else {
			document.title = graph_title + " | Insight Maker";
			if(window.history && window.history.replaceState){

				window.history.replaceState('Object', document.title, '/insight/' + drupal_node_ID + "/" + getURLTitle());
			}
		}
	}
}

function getURLTitle(){
	var t = graph_title.replace(/&#\d+;/g, "");
	t = t.replace(/'/g, '');
	t = t.replace(/[^A-Za-z0-9]/g, "-");
	t = t.replace(/\-+/g, "-");
	t = t.replace(/(^\-)|(\-$)/g, "");
	if(t.toLowerCase().indexOf("embed") == 0){
		t = "_" + t;
	}
	return t;
}

function hasDisplay() {
	var myCells = primitives();
	return cellsContainNodename(myCells, "Display");
}

function urlImage(cell) {
	return cell.getAttribute("Image") && cell.getAttribute("Image").substring(0, 4).toLowerCase() == "http";
}

function setPicture(cell) {

	var styleString = cell.getStyle();
	if (cell.getAttribute("Image") == "None" || cell.getAttribute("Image") == "" || cell.getAttribute("Image") == " " || cell.getAttribute("Image") == "null" || (cell.value.nodeName == "Folder" && !cell.isCollapsed())) {
		styleString = mxUtils.setStyle(styleString, "image", "None");
		if (cell.value.nodeName == "Display" || cell.value.nodeName == "Stock" || cell.value.nodeName == "Folder") {
			styleString = mxUtils.setStyle(styleString, "shape", "rectangle");
		} else if (cell.value.nodeName == "Button") {
			styleString = mxUtils.setStyle(styleString, "shape", "rectangle");
		} else {
			styleString = mxUtils.setStyle(styleString, "shape", "ellipse");
		}
	} else {
		//alert(cell.getAttribute("Image"));
		if (urlImage(cell)) {
			styleString = mxUtils.setStyle(styleString, "image", cell.getAttribute("Image"));
		} else {
			styleString = mxUtils.setStyle(styleString, "image", builder_path + "/images/SD/" + cell.getAttribute("Image") + ".png");
		}
		if (isTrue(cell.getAttribute("FlipVertical"))) {
			styleString = mxUtils.setStyle(styleString, "imageFlipV", 1);
		} else {
			styleString = mxUtils.setStyle(styleString, "imageFlipV", 0);
		}
		if (isTrue(cell.getAttribute("FlipHorizontal"))) {
			styleString = mxUtils.setStyle(styleString, "imageFlipH", 1);
		} else {
			styleString = mxUtils.setStyle(styleString, "imageFlipH", 0);
		}
		styleString = mxUtils.setStyle(styleString, "shape", "image");
	}
	var edit = new mxStyleChange(graph.getModel(), cell, styleString);

	graph.getModel().execute(edit);

	//cell.setStyle(styleString);
	propogateGhosts(cell);
}

function setLabelPosition(cell) {


	var labelPos = cell.getAttribute("LabelPosition");

	var styleString = cell.getStyle();

	if (cell.value.nodeName == "Folder" && (!cell.isCollapsed())) {
		styleString = mxUtils.setStyle(styleString, "labelPosition", null);
		styleString = mxUtils.setStyle(styleString, "align", null);

		styleString = mxUtils.setStyle(styleString, "verticalLabelPosition", null);
		styleString = mxUtils.setStyle(styleString, "verticalAlign", null);

	} else {

		if (labelPos == "Top") {
			styleString = mxUtils.setStyle(styleString, "labelPosition", "middle");
			styleString = mxUtils.setStyle(styleString, "align", "center");

			styleString = mxUtils.setStyle(styleString, "verticalLabelPosition", "top");
			styleString = mxUtils.setStyle(styleString, "verticalAlign", "bottom");
		} else if (labelPos == "Bottom") {
			styleString = mxUtils.setStyle(styleString, "labelPosition", "middle");
			styleString = mxUtils.setStyle(styleString, "align", "center");

			styleString = mxUtils.setStyle(styleString, "verticalLabelPosition", "bottom");
			styleString = mxUtils.setStyle(styleString, "verticalAlign", "top");
		} else if (labelPos == "Middle") {
			styleString = mxUtils.setStyle(styleString, "labelPosition", "middle");
			styleString = mxUtils.setStyle(styleString, "align", "center");

			styleString = mxUtils.setStyle(styleString, "verticalLabelPosition", "middle");
			styleString = mxUtils.setStyle(styleString, "verticalAlign", "middle");
		} else if (labelPos == "Left") {
			styleString = mxUtils.setStyle(styleString, "verticalLabelPosition", "middle");
			styleString = mxUtils.setStyle(styleString, "verticalAlign", "middle");

			styleString = mxUtils.setStyle(styleString, "labelPosition", "left");
			styleString = mxUtils.setStyle(styleString, "align", "right");
		} else if (labelPos == "Right") {
			styleString = mxUtils.setStyle(styleString, "verticalLabelPosition", "middle");
			styleString = mxUtils.setStyle(styleString, "verticalAlign", "middle");

			styleString = mxUtils.setStyle(styleString, "labelPosition", "right");
			styleString = mxUtils.setStyle(styleString, "align", "left");
		}
	}

	var edit = new mxStyleChange(graph.getModel(), cell, styleString);

	graph.getModel().execute(edit);

	//cell.setStyle(styleString);
	propogateGhosts(cell);
}

function removeAgent(cell) {
	var items = primitives("Agents");
	for (var i = 0; i < items.length; i++) {
		if (items[i].getAttribute("Agent") == cell.id) {
			items[i].setAttribute("Agent", "");
		}
	}
}

function deletePrimitive(cell) {
	var myCells = primitives();

	var setting = getSetting();
	if (setting.getAttribute("SensitivityPrimitives")) {
		var items = setting.getAttribute("SensitivityPrimitives").split(",");
		var j = items.indexOf(cell.id);
		if (j > -1) {
			items.splice(j, 1);
			setting.setAttribute("SensitivityPrimitives", items.join(","));
		}
	}


	if (cell.value.nodeName == "Folder" && cell.getAttribute("Type") == "Agent") {
		removeAgent(cell);
	}

	for (var i = 0; i < myCells.length; i++) {
		if (myCells[i].value.nodeName == "Display") {
			if (myCells[i].getAttribute("Primitives")) {
				var items = myCells[i].getAttribute("Primitives").split(",");
				var j = items.indexOf(cell.id);
				if (j > -1) {
					items.splice(j, 1);
					myCells[i].setAttribute("Primitives", items.join(","));
				}
			}
		} else if (myCells[i].value.nodeName == "Converter") {
			if (myCells[i].getAttribute("Source") == cell.id) {
				myCells[i].setAttribute("Source", "Time");
			} else if (cell.value.nodeName == "Link") {
				testConverterSource(myCells[i]);
			}
		} else if (myCells[i].value.nodeName == "Ghost") {
			if (myCells[i].value.getAttribute("Source") == cell.id) {
				var k = myCells[i];

				deletePrimitive(k);
				graph.removeCells([k], false);

			}
		}
	}
}

function linkBroken(edge) {
	var myCells = primitives();
	for (var i = 0; i < myCells.length; i++) {
		if (myCells[i].value.nodeName == "Converter") {
			testConverterSource(myCells[i]);
		}
		/*else if(myCells[i].value.nodeName == "Agents") {
            var source = myCells[i].getAttribute("Agent");
			if(source){
				if(! connected(myCells[i], findID(source))){
					myCells[i].setAttribute("Agent", "");
				}
			}
        }*/
	}
	if ((edge.getTerminal(false) !== null) && edge.getTerminal(false).value.nodeName == "Converter") {
		if (typeof(edge.getTerminal(true)) != "undefined") {
			if (isValued(edge.getTerminal(true))) {
				edge.getTerminal(false).setAttribute("Source", orig(edge.getTerminal(true)).id);
			}
		}
	}

}

function testConverterSource(target) {
	var neigh = neighborhood(target);
	var found = false;
	for (var j = 0; j < neigh.length; j++) {
		if (!neigh[j].linkHidden) {
			if (target.getAttribute("Source") == neigh[j].item.id) {
				found = true;
			}
		}
	}
	if (!found) {
		target.setAttribute("Source", "Time");
	}
}

function downloadModel() {
	var data = getGraphXml(graph);
	surpressCloseWarning = true;
	document.getElementById('downloader').title.value = encodeURIComponent(graph_title);
	document.getElementById('downloader').code.value = encodeURIComponent(data);
	document.getElementById('downloader').submit()
	//alert(encodeURIComponent(data));
	//location.href = "/builder/downloader.php?code=" + encodeURIComponent(data) + "&title=" + encodeURIComponent(graph_title);
}

function getSetting() {
	var myCells = primitives();

	for (var i = 0; i < myCells.length; i++) {
		if (myCells[i].value.nodeName == "Setting") {
			return myCells[i];
		}
	}
	alert("Settings primitive could not be found.")
	return null;
}

function handelCursors() {
	graph.container.style.cursor = 'auto';
}

var propertiesWin;

function updateProperties() {
	var model_title;
	if (graph_title == "") {
		model_title = "Untitled Insight";
	} else {
		model_title = graph_title;
	}

	if (!propertiesWin) {
		propertiesWin = new Ext.Window({
			applyTo: 'property-win',
			layout: {
				type: 'vbox',
				align: "stretch"
			},
			modal: true,
			width: 550,
			title: "Save Insight",
			autoHeight: true,
			minHeight: 300,
			minWidth: 450,
			closable: true,
			resizable: true,
			autoScroll: true,
			closeAction: 'hide',
			defaults: {
				width: 230,
				labelWidth: 150
			},
			items: [new Ext.form.TextField({
				fieldLabel: 'Insight Title',
				name: 'sinsightTitle',
				id: 'sinsightTitle',
				allowBlank: false,
				selectOnFocus: true,
				value: model_title,
				margin: 9
			}), new Ext.form.TextField({
				fieldLabel: 'Tags',
				name: 'sinsightTags',
				id: 'sinsightTags',
				allowBlank: true,
				emptyText: "Environment, Health Care, Finance",
				value: graph_tags,
				margin: 9
			}), new Ext.form.field.HtmlEditor({
				enableColors: false,
				enableSourceEdit: false,
				enableFont: false,
				enableLists: true,
				enableFontSize: false,
				fieldLabel: 'Description',
				name: 'sinsightDescription',
				id: 'sinsightDescription',
				allowBlank: true,
				emptyText: "Enter a brief description of the Insight.",
				value: graph_description,
				margin: 9,
				minHeight: 100,
				flex: 1
			}),
			{
			        xtype: 'fieldcontainer',
			        fieldLabel: 'Insight Access',
			        layout: 'hbox',
			        defaults: {
			            flex: 1,
			            hideLabel: true
			        },
					margin: 9,
			        items: [
			{
				xtype: "segmentedbutton",
				items: [
				{
					glyph: 0xf0ac,
					text: 'Public Insight',
					pressed: published,
					id: 'insightPublic',
					tooltip: "This Insight is public. Anyone can view it, but only you can edit it."
				},
				{
					glyph: 0xf084,
					//iconCls: 'green-icon',
					text: 'Private Insight',
					pressed: ! published,
					tooltip: "This Insight is private. Only people you have given access to can view it."
				}
				]
			}
		]}, Ext.create('Ext.form.field.Tag', {
			hidden: user_groups.length == 0,
				fieldLabel: 'Share with Groups',
				name: 'sinsightGroups',
				id: 'sinsightGroups',
				value: node_groups,
				allowBlank: true,
				filterPickList: true,
				store: group_titles,
				margin: 9
			})
		],

			buttons: [{
				text: 'Cancel',
				scale: "large",
				glyph: 0xf05c,
				handler: function() {
					propertiesWin.hide();
				}
			}, {
				glyph: 0xf00c,
				scale: "large",
				text: 'Save',
				handler: function() {
					if (Ext.getCmp("sinsightTitle").validate()) {
						propertiesWin.hide();
						graph_title = Ext.String.trim(Ext.getCmp('sinsightTitle').getValue());
						graph_description = Ext.String.trim(Ext.getCmp('sinsightDescription').getValue());
						graph_description = graph_description.replace(/^(\u200b|&nbsp;)/g, "");
						graph_description = graph_description.replace(/(\u200b|&nbsp;)$/g, "");
						if (graph_description == "<br>" || graph_description == "<br/>" || graph_description == "\u200b" || graph_description == "&nbsp;") {
							graph_description = "";
						}
						graph_tags = Ext.getCmp('sinsightTags').getValue();
						node_groups = Ext.getCmp('sinsightGroups').getValue();
						published = Ext.getCmp('insightPublic').pressed;
						setSaveEnabled(true);
						sendGraphtoServer(graph);
						selectionChanged(false);
					} else {
						showNotification(getText("You must specify a name for the Insight."), "error", true);
					}
				}
			}]


		});
	} else {
		if (graph_title != "") {
			Ext.getCmp('sinsightTitle').setValue(graph_title);
			Ext.getCmp('sinsightTags').setValue(graph_tags);
			Ext.getCmp('sinsightDescription').setValue(graph_description);
		}
	}
	propertiesWin.show();
	Ext.getCmp("sinsightTitle").focus(true, 300);
}

function isTrue(item) {
	return (item != "false" && item != "No" && item != 0) && (item == 1 || item == -1 || item == "True" || item == "true" || item == true || item == "Yes");
}

function customUnits() {
	if (typeof(getSetting().getAttribute("Units")) != "undefined") {
		var rows = getSetting().getAttribute("Units").split("\n");
		for (var i = 0; i < rows.length; i++) {
			rows[i] = rows[i].split("<>");
		}
		return rows;
	} else {
		return [];
	}
}


function orig(cell) {
	if (isUndefined(cell) || cell === null) {
		return null;
	}
	if (cell.value.nodeName === "Ghost") {
		return findID(cell.value.getAttribute("Source"));
	} else {
		return cell;
	}
}

function currentStyleIs(val) {
	var tmp = graph.getCellStyle(graph.getSelectionCell())[mxConstants.STYLE_FONTSTYLE];
	for (var i = 3; i >= 1; i--) {

		tmp = tmp - val * (Math.pow(2, i));
		if (tmp < 0) {
			tmp = tmp + val * Math.pow(2, i);
		}
	}
	return (tmp >= val);
}

function setStyles() {
	if ((!is_embed) && is_editor) {
		var selected = !graph.isSelectionEmpty();

		var r = ribbonPanelItems();

		if (selected) {
			r.down('#bold').setChecked(currentStyleIs(mxConstants.FONT_BOLD));
			r.down('#italic').setChecked(currentStyleIs(mxConstants.FONT_ITALIC));
			r.down('#underline').setChecked(currentStyleIs(mxConstants.FONT_UNDERLINE));
			var style = graph.getCellStyle(graph.getSelectionCell());
			r.down("#sizeCombo").setValue(style[mxConstants.STYLE_FONTSIZE]);
			r.down("#fontCombo").setValue(style[mxConstants.STYLE_FONTFAMILY]);
		} else {
			r.down('#bold').setChecked(false);
			r.down('#italic').setChecked(false);
			r.down('#underline').setChecked(false);
			r.down("#fontCombo").setValue("");
			r.down("#sizeCombo").setValue("");
		}
	}
}

function stringArray(items, comma, and) {
	if (items.length == 0) {
		return "";
	} else if (items.length == 1) {
		return items[0];
	} else {
		var i = items.slice();
		var last = i.pop();
		var first = i.join(comma);
		return first + and + last;
	}
}

function quickLabel(label, title, objects) {
	var setting = getSetting();

	return processLabel(label, title, objects, setting.getAttribute("TimeUnits"), setting.getAttribute("TimeStep"), setting.getAttribute("SolutionAlgorithm"));
}

function processLabel(label, title, objects, units, timeStep, algorithm) {
	var ph = "<PERCENTSIGNPLACEHOLDER>";
	label = replaceAll(label, "%%", ph);

	label = replaceAll(label, "%u", units);
	label = replaceAll(label, "%t", title);
	label = replaceAll(label, "%o", objects);
	label = replaceAll(label, "%ts", timeStep);
	label = replaceAll(label, "%a", algorithm);

	label = replaceAll(label, ph, "%");

	return clean(label);
}

function replaceAll(txt, replace, with_this) {

	if (isUndefined(txt)) {
		return "";
	}
	return txt.replace(new RegExp(replace, 'g'), with_this);
}

function loadBackgroundColor() {
	mxPanel.el.dom.style["background-color"] = getSetting().getAttribute("BackgroundColor");

	mxPanel.el.dom.style.backgroundColor = getSetting().getAttribute("BackgroundColor");
}

function isUndefined(item) {
	return typeof(item) == "undefined";
}

function isDefined(item) {
	return (!isUndefined(item));
}


function isTouch() {
	return mxClient.IS_TOUCH;
}

function propogateGhostsOld(cell) {
	var ghosts = primitives("Ghost");
	for (var i = 0; i < ghosts.length; i++) {
		if (ghosts[i].getAttribute("Source") == cell.id) {
			var style = cell.getStyle();
			style = mxUtils.setStyle(style, "opacity", 30);
			ghosts[i].setStyle(style);
			//console.log(cell.getAttribute("name"));
			var edit = setAttributeUndoable(ghosts[i], "name", cell.getAttribute("name"));

		}
	}
}

function propogateName(cell, oldName) {
	if (isValued(cell)) {
		//console.log(oldName)
		var newValue = getName(cell);
		var patt = new RegExp("\\[" + oldName + "\\]", "gi");

		var connected = graph.getConnections(cell);
		for (var i = 0; i < connected.length; i++) {
			if((!connected[i].target) || (!connected[i].source)){
				continue;
			}
			var neighbor;
			if (connected[i].value.nodeName == "Flow" || connected[i].value.nodeName == "Transition") {
				neighbor = connected[i];
			} else if (connected[i].target.id == cell.id) {
				neighbor = connected[i].source;
			} else {
				neighbor = connected[i].target;
			}
			//console.log(neighbor.getAttribute("name"))
			if (isValued(neighbor) || (neighbor && neighbor.value.nodeName == "Action")) {
				//console.log(getValue(neighbor))
				setValue(neighbor, getValue(neighbor).replace(patt, "[" + newValue + "]"))
			}
		}


	}
}

function map(val, fn) {
	if (val instanceof Array) {
		return val.map(fn);
	} else {
		return fn(val);
	}
}

function arrify(item) {
	if (!item) {
		return [];
	}
	if (item.forEach) {
		return item;
	} else {
		return [item];
	}
}

function unitsUsedInModel() {
	var items = primitives();
	var us = [];
	for (var i = 0; i < items.length; i++) {
		var u = items[i].getAttribute("Units");
		if (items[i].value.nodeName != "Setting" && isDefined(u) && u !== null && u != "Unitless") {
			us.push(u);
		}
	}
	return Ext.Array.unique(us);
}

function changeNodeName(node, newName) {
	var doc = mxUtils.createXmlDocument();
	var newNode = doc.createElement(newName);
	var attrs = node.attributes;
	for (var i = 0; i < attrs.length; i++) {
		newNode.setAttribute(attrs[i].name, attrs[i].value)
	}
	return newNode;
}

function cmd(key) {
	if (mxClient.IS_MAC) {
		return "<span style='color:grey'>(&#8984;" + key + ")</span>";
	} else {
		return "<span style='color:grey'>(Ctrl-" + key + ")</span>";
	}
}

function inAgent(cell) {
	if ((!cell) || cell == null) {
		return false;
	}

	var p = getParent(cell);
	if (p) {
		//console.log(p);
		if (p.getAttribute("Type") == "Agent") {
			return true;
		}
	}
	return inAgent(p);
}

function parentAgent(cell) {
	if ((!cell) || cell == null) {
		return undefined;
	}

	var p = getParent(cell);
	if (p) {
		//console.log(p);
		if (p.getAttribute("Type") == "Agent") {
			return p;
		}
	}
	return parentAgent(p);
}

function isGray(color) {
	if (isUndefined(color)) {
		return true;
	}
	var c;
	if (color[0] == "#") {
		c = color;
	} else {
		c = colourNameToHex(color);
	}
	if (c == "#6482B9") {
		return true; //treat flows as grey alwayse
	}
	var start = c[1];
	if (c.length == 4) {
		for (var i = 2; i < c.length; i++) {
			if (c[i] != start) {
				return false;
			}
		}
	} else if (c.length == 7) {
		for (var i = 1; i < c.length; i = i + 2) {
			if (c[i] != start) {
				return false;
			}
		}
		var start = c[2];
		for (var i = 2; i < c.length; i = i + 2) {
			if (c[i] != start) {
				return false;
			}
		}
	}
	return true;
}

function colourNameToHex(colour) {
	var colours = {
		"aliceblue": "#f0f8ff",
		"antiquewhite": "#faebd7",
		"aqua": "#00ffff",
		"aquamarine": "#7fffd4",
		"azure": "#f0ffff",
		"beige": "#f5f5dc",
		"bisque": "#ffe4c4",
		"black": "#000000",
		"blanchedalmond": "#ffebcd",
		"blue": "#0000ff",
		"blueviolet": "#8a2be2",
		"brown": "#a52a2a",
		"burlywood": "#deb887",
		"cadetblue": "#5f9ea0",
		"chartreuse": "#7fff00",
		"chocolate": "#d2691e",
		"coral": "#ff7f50",
		"cornflowerblue": "#6495ed",
		"cornsilk": "#fff8dc",
		"crimson": "#dc143c",
		"cyan": "#00ffff",
		"darkblue": "#00008b",
		"darkcyan": "#008b8b",
		"darkgoldenrod": "#b8860b",
		"darkgray": "#a9a9a9",
		"darkgreen": "#006400",
		"darkkhaki": "#bdb76b",
		"darkmagenta": "#8b008b",
		"darkolivegreen": "#556b2f",
		"darkorange": "#ff8c00",
		"darkorchid": "#9932cc",
		"darkred": "#8b0000",
		"darksalmon": "#e9967a",
		"darkseagreen": "#8fbc8f",
		"darkslateblue": "#483d8b",
		"darkslategray": "#2f4f4f",
		"darkturquoise": "#00ced1",
		"darkviolet": "#9400d3",
		"deeppink": "#ff1493",
		"deepskyblue": "#00bfff",
		"dimgray": "#696969",
		"dodgerblue": "#1e90ff",
		"firebrick": "#b22222",
		"floralwhite": "#fffaf0",
		"forestgreen": "#228b22",
		"fuchsia": "#ff00ff",
		"gainsboro": "#dcdcdc",
		"ghostwhite": "#f8f8ff",
		"gold": "#ffd700",
		"goldenrod": "#daa520",
		"gray": "#808080",
		"green": "#008000",
		"greenyellow": "#adff2f",
		"honeydew": "#f0fff0",
		"hotpink": "#ff69b4",
		"indianred ": "#cd5c5c",
		"indigo ": "#4b0082",
		"ivory": "#fffff0",
		"khaki": "#f0e68c",
		"lavender": "#e6e6fa",
		"lavenderblush": "#fff0f5",
		"lawngreen": "#7cfc00",
		"lemonchiffon": "#fffacd",
		"lightblue": "#add8e6",
		"lightcoral": "#f08080",
		"lightcyan": "#e0ffff",
		"lightgoldenrodyellow": "#fafad2",
		"lightgrey": "#d3d3d3",
		"lightgreen": "#90ee90",
		"lightpink": "#ffb6c1",
		"lightsalmon": "#ffa07a",
		"lightseagreen": "#20b2aa",
		"lightskyblue": "#87cefa",
		"lightslategray": "#778899",
		"lightsteelblue": "#b0c4de",
		"lightyellow": "#ffffe0",
		"lime": "#00ff00",
		"limegreen": "#32cd32",
		"linen": "#faf0e6",
		"magenta": "#ff00ff",
		"maroon": "#800000",
		"mediumaquamarine": "#66cdaa",
		"mediumblue": "#0000cd",
		"mediumorchid": "#ba55d3",
		"mediumpurple": "#9370d8",
		"mediumseagreen": "#3cb371",
		"mediumslateblue": "#7b68ee",
		"mediumspringgreen": "#00fa9a",
		"mediumturquoise": "#48d1cc",
		"mediumvioletred": "#c71585",
		"midnightblue": "#191970",
		"mintcream": "#f5fffa",
		"mistyrose": "#ffe4e1",
		"moccasin": "#ffe4b5",
		"navajowhite": "#ffdead",
		"navy": "#000080",
		"oldlace": "#fdf5e6",
		"olive": "#808000",
		"olivedrab": "#6b8e23",
		"orange": "#ffa500",
		"orangered": "#ff4500",
		"orchid": "#da70d6",
		"palegoldenrod": "#eee8aa",
		"palegreen": "#98fb98",
		"paleturquoise": "#afeeee",
		"palevioletred": "#d87093",
		"papayawhip": "#ffefd5",
		"peachpuff": "#ffdab9",
		"peru": "#cd853f",
		"pink": "#ffc0cb",
		"plum": "#dda0dd",
		"powderblue": "#b0e0e6",
		"purple": "#800080",
		"red": "#ff0000",
		"rosybrown": "#bc8f8f",
		"royalblue": "#4169e1",
		"saddlebrown": "#8b4513",
		"salmon": "#fa8072",
		"sandybrown": "#f4a460",
		"seagreen": "#2e8b57",
		"seashell": "#fff5ee",
		"sienna": "#a0522d",
		"silver": "#c0c0c0",
		"skyblue": "#87ceeb",
		"slateblue": "#6a5acd",
		"slategray": "#708090",
		"snow": "#fffafa",
		"springgreen": "#00ff7f",
		"steelblue": "#4682b4",
		"tan": "#d2b48c",
		"teal": "#008080",
		"thistle": "#d8bfd8",
		"tomato": "#ff6347",
		"turquoise": "#40e0d0",
		"violet": "#ee82ee",
		"wheat": "#f5deb3",
		"white": "#ffffff",
		"whitesmoke": "#f5f5f5",
		"yellow": "#ffff00",
		"yellowgreen": "#9acd32"
	};

	if (typeof colours[colour.toLowerCase()] != 'undefined')
		return colours[colour.toLowerCase()];

	return false;
}


function printGraph() { // P
	var pageCount = mxUtils.prompt(getText('Enter page count for printing') + ":", '1');

	if (pageCount != null) {
		var scale = mxUtils.getScaleForPageCount(pageCount, graph);
		var preview = new mxPrintPreview(graph, scale);
		preview.open();
	}
}

function flatten(arr) {
	var r = [];

	function recFlatten(a) {
		var i, ln, v;

		for (i = 0, ln = a.length; i < ln; i++) {
			v = a[i];

			if (Array.isArray(v)) {
				recFlatten(v);
			} else {
				r.push(v);
			}
		}

		return r;
	}

	return recFlatten(arr);
}

var downloadButton = function(name){
	return {
					xtype: 'button',
					text: 'Download',
					glyph: 0xf0ed,
					handler: function(){
						var grid = this.up("gridpanel");
						var store = grid.getStore();
						var columns = grid.columns;//store.fields ? store.fields.items : store.model.prototype.fields.items;

						var res = "";

						res += columns.filter(function(x){
							return !x.hidden;
						}).map(function(x){
								return '"' + (x.text || x.name).replace(/"/g, '""') + '"';
							}).join(",");

				        store.each(function(record, index) {
					        var cells = [];
					        columns.forEach(function(col) {
					            var name = col.name || col.dataIndex;
					            if(name) {
					                //if (Ext.isFunction(col.renderer)) {
					                 // var value = col.renderer(record.get(name), null, record);
					                //} else {
					                  var value = ""+record.get(name);
					                //}
					                cells.push('"'+value.replace(/"/g, '""')+'"');
					            }
					        });


				          res += "\r\n" + cells.join(",");
				        });

						downloadFile(name+".csv", res);
					}
				};
			}


			function deepClone(target, obj, depth, fn){
				var options, name, src, copy, copyIsArray, clone;

						// Only deal with non-null/undefined values
						if ( (options = arguments[ 1 ]) != null ) {
							// Extend the base object
							for ( name in options ) {
								src = target[ name ];
								copy = options[ name ];

								// Prevent never-ending loop
								if ( target === copy ) {
									continue;
								}
								if(fn){
									var x = fn(copy);
									if(x){
										target[name] = x;
										continue;
									}
								}
								// Recurse if we're merging plain objects or arrays
								if ( depth > 0 && copy && ( (copyIsArray = Array.isArray(copy)) || typeof(copy)=="object" ) ) {
									if ( copyIsArray ) {
										copyIsArray = false;
										clone = src && Array.isArray(src) ? src : [];

									} else {
										clone = src && typeof(srv)=="object" ? src : {};
									}

									// Never move original objects, clone them
									target[ name ] = deepClone( clone, copy, depth-1, fn );

								// Don't bring in undefined values
								} else if ( copy !== undefined ) {
									target[ name ] = copy;
								}
							}
						}

					// Return the modified object
					return target;

			}

			function exportSvg() {
				var scale = graph.view.scale;
				var bounds = graph.getGraphBounds();

				// Prepares SVG document that holds the output
				var svgDoc = mxUtils.createXmlDocument();
				var root = (svgDoc.createElementNS != null) ?
					svgDoc.createElementNS(mxConstants.NS_SVG, 'svg') : svgDoc.createElement('svg');

				if (root.style != null) {
					root.style.backgroundColor = '#FFFFFF';
				} else {
					root.setAttribute('style', 'background-color:#FFFFFF');
				}

				if (svgDoc.createElementNS == null) {
					root.setAttribute('xmlns', mxConstants.NS_SVG);
				}

				root.setAttribute('width', Math.ceil(bounds.width * scale + 2) + 'px');
				root.setAttribute('height', Math.ceil(bounds.height * scale + 2) + 'px');
				root.setAttribute('xmlns:xlink', mxConstants.NS_XLINK);
				root.setAttribute('version', '1.1');

				// Adds group for anti-aliasing via transform
				var group = (svgDoc.createElementNS != null) ?
					svgDoc.createElementNS(mxConstants.NS_SVG, 'g') : svgDoc.createElement('g');
				group.setAttribute('transform', 'translate(0.5,0.5)');
				root.appendChild(group);
				svgDoc.appendChild(root);

				// Renders graph. Offset will be multiplied with state's scale when painting state.
				var svgCanvas = new mxSvgCanvas2D(group);
				svgCanvas.translate(Math.floor(1 / scale - bounds.x), Math.floor(1 / scale - bounds.y));
				svgCanvas.scale(scale);

				var imgExport = new mxImageExport();
				imgExport.drawState(graph.getView().getState(graph.model.root), svgCanvas);


				var xml = (mxUtils.getXml(root));

				downloadFile("Insight Maker Diagram.svg", xml);
			};

"use strict";
/*

Copyright 2010-2015 Scott Fortmann-Roe. All rights reserved.

This file may distributed and/or modified under the
terms of the Insight Maker Public License (https://InsightMaker.com/impl).

*/

/*
Class: Insight Maker API

Functions to manipulate Insight Maker models.

Introduction:

The following is a set of API functions for Insight Maker. JavaScript is the language used for these interfaces. In addition to the Insight Maker specific functions listed here,
standard JavaScript is also supported in buttons.

There are three primary avenues for making use of this API.

* For the "Action" of Buttons embedded within models.

* For a parent page to manipulate an embedded IFRAME containing an Insight Maker model.

* Using the JavaScript console of the web browser to manipulate a model. To find the built-in JavaScript console for a web browser, 
see the relevant browser's documentation.

Primitive Types:

A number of the API function refer to primitives by their type. The following are the valid types. Types are usually quoted when used and should always be capitalized (e.g. "Stock").

* Stock
* Variable
* Converter
* Flow
* Link
* Text
* Picture
* Folder
* Button
* Ghost

Examples:

The following examples illustrate the usage of the API for certain scenarios.

Using Dialogues:

Ask the user to specify a URL and opens a new web page at the location.

> showURL(showPrompt("What page should I open?"));

Expanding and Collapsing Folders:

This example expands all the folders in the model.

> expandFolder(findType("Folder"));

And this collapses them.

> collapseFolder(findType("Folder"));

Notes:

Show the notes for all flow and link primitives in the model.

> var connectors = findType(["Flow", "Link"]);
> showNote(connectors);

Using Opacity:

Makes the currently selected primitives partially transparent.

> setOpacity(getSelected(), 50);

Rabbit Birth Rate:

This  example will  work with the default Insight Maker model.
It prompts the user to specify the birth rate for the rabbit population.
It then sets the relevant primitive to that value and runs the model.

> var birthRate = showPrompt("Enter the birth rate for the rabbits:", 0.1);
> var birthPrimitive = findName("Rabbit Birth Rate");
> setValue(birthPrimitive, birthRate);
> runModel();

This could also be written more compactly as

> setValue(findName("Rabbit Birth Rate"), showPrompt("Enter the birth rate for the rabbits:", 0.1));
> runModel();

Building a Model:

This example creates a new model with two stocks connected by a flow.

> clearModel();
>
> var source = createPrimitive("Source", "Stock", [100, 50], [140, 50]);
> setValue(source, 100); //Give the source an initial value of 100
>
> var sink = createPrimitive("Sink", "Stock", [100, 300], [140, 50]);
>
> var myFlow = createConnector("Leakage", "Flow", source, sink);
> setValue(myFlow, "0.1*[Source]"); //10% of the source's volume moves to the sink each time period

Manipulating a Model in an IFRAME:

To access the API of an embedded IFRAME, first give the IFRAME an "id" property. This is not added by default in Insight Maker. For instance change

> <IFRAME SRC="...

to

> <IFRAME ID="InsightMakerModel1" SRC="...

Then from the parent page you can use the following JavaScript syntax to call API functions. This example calls the API's <clearModel> function.

> document.getElementById('InsightMakerModel1').contentWindow.postMessage("clearModel()", "*");


*/


/*

Group: Dialogues and User Input

*/


/*
Method: showMessage

Shows a message in a dialogue window.

Parameters:

message - The string to show as the message.

See also:

<showPrompt>, <showChoice>
*/


function showMessage(message) {
	dpopup(message);
	//Ext.Msg.dpopup('', message);
}

/*
Method: showPrompt

Shows a prompt in a dialogue window and provides a text input for the user to enter a value.

Parameters:

message - The string to show as the prompt.
defaultValue - The default value for the prompt. This parameter is optional.

Returns:

The value entered by the user.

See also:

<showMessage>, <showChoice>
*/

function showPrompt(message, defaultValue) {
	return prompt(message, defaultValue)
}

/*
Method: showChoice

Shows a prompt in a dialogue window and provides the user the option to click "OK" or "Cancel". Returns the value the user clicked as a boolean.

Parameters:

message - The string to show as the prompt.

Returns:

The value of the button clicked by the user as a boolean. "OK" is true, "Cancel" is false.

See also:

<showMessage>, <showPrompt>
*/


function showChoice(message) {
	return confirm(message);
}

/*
Method: showURL

Creates a new web browser window and sets the URL.

Parameters:

url - The URL to show.

*/

function showURL(url) {
	var win = window.open(url, '', 'scrollbars=yes,menubar=yes,height=500,width=700,resizable=yes,toolbar=yes,location=yes,status=yes');
	if (open == win || typeof(win)=='undefined'){
		Ext.Msg.dpopup('', "<big><big><center><a href='"+url+"' target='_blank'><i class='fa fa-external-link-square'></i> Open Link</a></center></big></big>")
	}
}

/*
Method: downloadFile

Downloads a file.

Parameters:

fileName - The name of the file to download
data - The data to download.

*/

function downloadFile(fileName, data) {
	// Create Blob and attach it to ObjectURL
	var blob = new Blob([data], {type: "octet/stream"}),
	url = window.URL.createObjectURL(blob);
	
	// Create download link and click it
	var a = document.createElement("a");
	a.style.display="none";
	a.href = url;
	a.download = fileName;
	document.body.appendChild(a);
	a.click();
	
	// The setTimeout is a fix to make it work in Firefox
	// Without it, the objectURL is removed before the click-event is triggered
	// And the download does not work
	setTimeout(function() {
		window.URL.revokeObjectURL(url);
		a.remove();
	},1);
};

/*
Method: showData

Creates a display to showcase data. Multiple tabs of data may be shown. This function is passed an array of objects each representing an individual tab.

Parameters:

title - The title for the data window
tabs - An array of tab objects
size - The dimensions of the window in the form [width, height] (optional)

Tab Objects:

Each tab object contains several properties.

name - The name of the tab
type - The tab type. E.g. "text", "HTML", "table" or "chart"
data - The data for the tab

The different types of tabs are as follows.

Text Tab:

A text tab displays a large amount of text. For a text tab, the data property should be the text string that will be displayed.

HTML Tab:

An HTML tab displays HTML content. For an HTML tab, the data property should be the HTML content that will be displayed.

Table Tab:

A table tab displays a grid of data. For a table tab, the data object should be an array of arrays. Each inner array represents a column in the resulting table. The following property is also supported for tables.

header - For a table, an array containing containing the titles of the columns (optional)

Chart Tab:

A chart creates a graphical display of your data. In this case the data should be an array of series objects.

The following properties are also supported.

xData - The x coordinates for the series (each series must have the same number of points with the same x-coordinates). In the form [x1, x2, ..., xn]
xType - The data type for the x-axis can be "numeric" or "category" (for use with categorical data such as column charts). By default, "numeric" data is assumed. (optional)
xLabel - A string for the x-Axis label (optional)
yLabel - A string for the y-Axis label (optional)
legend - A string controlling the position of the legend. Can be "left", "right", "bottom", "top", or "none" (optional)
verticalGrid - True/false value whether or not to plot a vertical grid (optional)
horizontalGird - True/false value whether or not to plot a horizontal grid (optional)
xMin - The minimum value of the x-Axis (optional)
xMax - The maximum value of the x-Axis (optional)
yMin - The minimum value of the y-Axis (optional)
yMax - The maximum value of the y-Axis (optional)

Each series object has the following the properties:

data - An array containing the data for the series of the form [y1, y2, ..., yn]
type - The display type for the series. Can be "line" or "bar"
name - The series name as a string (for display in the legend)
color - The color of the series. A string such as "green" or "#00ff00" (optional)
hideLegend - Prevents the series from being displayed in the legend (optional)
fill - If the series is a line series, creates a solid filled area between the line and  the x-axis (optional)
hideMarkers - Hides the markers for individual data points (optional)

Returns:

The window object that was created.

Example:

> showData("Sample Data",
>  [
>  {name: "A Chart",
>	type: "chart",
>	xLabel: "Chart x-Axis",
>	yLabel: "Chart y-Axis",
>	legend: "top",
>	horizontalGrid: true,
>	verticalGrid: true,
>	xType: "numeric",
>	xData: [1,2,3,4,5],
>	data: [{
>		data: [1,4,9,16,25],
>		type: "line",
>		name: "Energy"
>	},{
>		data: [1,2,3,4,5],
>		type: "line",
>		name: "Cost"
>	}]
>	},
>  {name: "I'm a Text Tab",
>	type: "text",
>	data: "This is a long data string..."
>	},
>  {name: "I'm an HTML Tab",
>	type: "html",
>	data: "<center><p>This is <b>HTML</b> content.</p></center>"
>	},
>  {name: "Here's a Grid",
>	type: "table",
>	data: [[1,2,3,4],[1,4,9,16]],
>	header: ["Value", "Value^2"]
>	}
>  ]
> )


*/

function showData(title, tabs, size) {
	if (!size) {
		size = [Math.min(Ext.getBody().getViewSize().width, 640), Math.min(Ext.getBody().getViewSize().height, 480)];
	}

	var tabItems = [];
	for (var i = 0; i < tabs.length; i++) {
		var tab = {
			layout: "fit"
		};
		tab.title = tabs[i].name;
		if (tabs[i].type.toLowerCase() == "text") {
			var textData = {
				xtype: "textareafield",
				value: tabs[i].data,
				readOnly: true
			};
			tab.items = [textData];
		} else if (tabs[i].type.toLowerCase() == "html") {
			var htmlData = {
				title: "Insight Equations",
				xtype: "box",
				html: tabs[i].data,
				style: "background-color: white",
				autoScroll: true
			};
			tab.items = [htmlData];
		} else if (tabs[i].type.toLowerCase() == "table") {
			var gridData = {
				xtype: "grid"
			};
			var gridColumns = [];
			var storeFields = [];
			var data = []
			for (var j = 0; j < tabs[i].data.length; j++) {
				gridColumns.push({
					dataIndex: "a" + j,
					text: tabs[i].header ? tabs[i].header[j] : ""
				});
				var columnType = "float";
				for (var k = 0; k < tabs[i].data[j].length; k++) {
					if ((typeof tabs[i].data[j][i]) == "string") {
						columnType = "string";
					}
				}
				storeFields.push({
					name: "a" + j,
					type: columnType
				})

			}
			for (var k = 0; k < tabs[i].data[0].length; k++) {
				data.push({});
			}
			for (var j = 0; j < tabs[i].data.length; j++) {
				for (var k = 0; k < tabs[i].data[0].length; k++) {
					data[k]["a" + j] = tabs[i].data[j][k];
				}
			}

			gridData.columns = gridColumns;
			gridData.store = new Ext.data.JsonStore({
				fields: storeFields,
				data: data
			});
			if (!tabs[i].header) {
				gridData.hideHeaders = true;
			}

			gridData.dockedItems = [{
				xtype: 'toolbar',
				dock: 'bottom',
				items: ["->", downloadButton(tabs[i].name)]
			}];
			tab.items = [gridData];

		} else if (tabs[i].type.toLowerCase() == "chart") {
			var defaultColors = ["#94ae0a", "#115fa6", "#a61120", "#ff8809", "#ffd13e", "#a61187", "#24ad9a", "#7c7474", "#a66111"];
			var defaultColorIndex = 0;
			var colors = [];
			for (var j = 0; j < tabs[i].data.length; j++) {
				if (tabs[i].data[j].color) {
					colors.push(tabs[i].data[j].color);
				} else {
					colors.push(defaultColors[defaultColorIndex]);
					defaultColorIndex++;
					defaultColorIndex = defaultColorIndex % defaultColors.length;
				}
			}

			var dataSeries = [];
			var storeFields = [{
				name: "x",
				type: tabs[i].xType.toLowerCase() == "numeric" ? "float" : "string"
			}];
			var yFields = [];
			var data = [];
			for (var j = 0; j < tabs[i].xData.length; j++) {
				data.push({
					x: tabs[i].xData[j]
				});
			}

			for (var j = 0; j < tabs[i].data.length; j++) {
				storeFields.push({
					name: "a" + j,
					type: "float"
				});

				dataSeries.push({
					shadow: false,
					type: tabs[i].data[j].fill ? "area" : tabs[i].data[j].type.toLowerCase(),
					title: tabs[i].data[j].name,
					colors: [colors[j]],
					axis: 'left',
					xField: 'x',
					yField: "a" + j,
					showInLegend: tabs[i].data[j].hideLegend ? false : true,
					showMarkers: tabs[i].data[j].hideMarkers ? false : true,
					style: {
						opacity: 1,
						"stroke-width": 3
					},
					marker: {
						radius: 3
					},
					animation: false
				});
				if (tabs[i].data[j].fill) {
					dataSeries[dataSeries.length - 1].style["stroke-width"] = 0;
				}

				yFields.push("a" + j);

				for (var k = 0; k < tabs[i].data[j].data.length; k++) {
					data[k]["a" + j] = tabs[i].data[j].data[k];
				}
			}



			var chartData = {
				xtype: "cartesian",

				animation: false,
				shadow: false,
				interactions: 'crosszoom',

				store: new Ext.data.JsonStore({
					fields: storeFields,
					data: data
				}),
				axes: [{
					position: "bottom",
					type: tabs[i].xType ? tabs[i].xType.toLowerCase() : "numeric",
					grid: tabs[i].verticalGrid ? tabs[i].verticalGrid : false,
					title: {
						text: tabs[i].xLabel ? tabs[i].xLabel : "",
						fontSize: 14
					},
					fields: ["x"],
					minimum: tabs[i].xMin,
					maximum: tabs[i].xMax
				}, {
					position: "left",
					type: "numeric",
					grid: tabs[i].horizontalGrid ? tabs[i].horizontalGrid : false,

					title: {
						text: tabs[i].yLabel ? tabs[i].yLabel : "",
						fontSize: 14
					},
					titleMargin: 20,
					fields: yFields,
					minimum: tabs[i].yMin,
					maximum: tabs[i].yMax
				}],
				series: dataSeries
			};

			if (tabs[i].legend && tabs[i].legend != 'none') {
				chartData.legend = {};
				chartData.legend.docked = tabs[i].legend;
				chartData.legend.toggleable = !tabs[i].legendStatic;
			}


			tab.items = [chartData];



		} else {
			dpopup("Unknown tab type: " + tabs[i].type);
		}
		tabItems.push(tab);
	}

	var win = new Ext.Window({
		title: title,
		layout: 'fit',
		closeAction: 'destroy',
		border: false,
		modal: false,
		resizable: true,
		closable: true,
		maximizable: true,
		minimizable: true,
		shadow: true,
		width: size[0],
		height: size[1],
		items: [{
			xtype: "tabpanel",
			layout: "fit",
			items: tabItems
		}]
	});

	win.on('minimize', function(w) {
		if (w.expandedState) {
			w.expandedState = false;
			w.collapse();
		} else {
			w.expandedState = true;
			win.expand();
		}
	});


	win.show();

	return win;
}

/*
Method: frontWindow

Gets the frontmost window (if one exists).

Returns:

A window object.

*/

function frontWindow() {
	return Ext.WindowMgr.getActive();
}

/*
Method: closeAllWindows

Closes all open windows.

*/

function closeAllWindows() {
	var w;
	while (w = Ext.WindowMgr.getActive()) {
		w.close();
	}
}


/*
Method: openFile

Prompts the user to select one or more files on their computer. Information about the selected files are made available and the contents of the files are optionally read into memory.

Note that this function needs to be called as a direct result of user actions (such as the user clicking on a button). Browser security restrictions will prevent the function from operating if it is not called in response a user actions. Note also that this function is not supported on Internet Explorer 9.

Parameters:

config - A configuraiton object with the following optional properties:
multiple - If false, only a single file may be selected; if true, one or more files may be selected at a time.
accept - A string containing a MIME file type to filter file selection. If defined, only files matching the specified type may be selected. For example, "image/*" may be used to only accept image files.
read - If defined the selected files will be opened and their contents loaded. Read may either be "binary" in which case the contents is loaded as a binary string, "text" in which case the contents is loaded as a regular text string, or "xlsx" in which case an Excel file is loaded as an object.
onCompleted - A function to handle results. The openFile function is asynchronous. Once it completes, the callback function is called with the resulting data as a parameter.
onError - A function to handle the occurence of an error.
onSelected - A function fired once files have been selected but before data has been read.

Returns:

The openFile function is asynchronous and returns nothing directly. On the successful selection of files, the callback is called with the results. 

If config.multiple is false, these results are a single file object. If config.multiple is true, then these results are an array of file objects. Each file object has the following properties:

file - The orginal file object.
name - The name of the selected file.
type - The type of the selected file.
size - The size of the selected file.
contents - If config.read is true, the contents in the file is loaded with the specified type.

Examples:

>// Select a single text file and display its contents
>openFile({
>	read: "text",
>	multiple: false,
>	onCompleted: function(result){
>		dpopup(result.contents);
>	}
>});

*/

function openFile(config) {
	config = config || {
		multiple: false,
		accept: null,
		onCompleted: null,
		onSelected: null,
		onError: null,
		read: false
	};
	if (config.read) {
		config.read = config.read.toLowerCase();
	}
	if (config.read == "xlsx" && (!config.accept)) {
		config.accept = "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet";
	}

	var opener = document.createElement("input");
	opener.setAttribute("type", "file");
	if (config.multiple) {
		opener.setAttribute("multiple", true);
	}
	if (config.accept) {
		opener.setAttribute("accept", config.accept);
	}

	var res = null;

	var loadCount = 0;
	var handleLoad = function() {
		$(opener).remove();

		if (!res.length) {
			config.onCompleted(res);
		} else {
			loadCount++;
			if (loadCount == res.length) {
				config.onCompleted(res);
			}
		}

	}

	var processFile = function(file) {
		var data = {};
		data.file = file;
		data.size = file.size;
		data.name = file.name;
		data.type = file.type;

		var reader = new FileReader();
		reader.onloadend = function(evt) {
			if (config.read == "xlsx") {
				require(['jszip'], function() {
					require(['xlsx'], function() {
						data.contents = XLSX.read(reader.result, {
							type: "binary"
						});
						handleLoad();
					});
				});
			} else {
				data.contents = reader.result;
				handleLoad();
			}
		};
		reader.onerror = function() {
			if (config.onError) {
				config.onError(reader.error)
			} else {
				dpopup("FileReader error.");
			}
		};

		reader.onabort = function() {
			if (config.onError) {
				config.onError(reader.error)
			} else {
				dpopup("FileReader aborted.");
			}

		}

		if (config.read == "binary") {
			reader.readAsBinaryString(file);
		} else if (config.read == "text") {
			reader.readAsText(file);
		} else if (config.read == "xlsx") {
			reader.readAsBinaryString(file);
		} else if (!config.read) {
			// leaving empty means don't load
			setTimeout(handleLoad, 1);
		} else {
			throw "Unknown data read type: " + config.type;
		}
		return data;
	}

	var callback = function() {

		var files = opener.files;

		if (config.onSelected) {
			config.onSelected(files);
		}

		if (config.onCompleted) {

			if (typeof files[0] == "undefined") {
				config.onCompleted(null);
			}

			if (!config.multiple) {
				res = processFile(files[0]);
			} else {
				res = Array.prototype.slice.call(files).map(function(x) {
					return processFile(x);
				});
			}
		}
	}

	opener.onchange = callback;
	document.body.appendChild(opener);
	opener.click();
}


/*

Group: General Model Functions

*/

/*
Method: runModel

Runs a simulation and optionally returns the results.

Parameters:

config - A configuration object. For compatibility, if set to the Boolean value, equivalent to calling runModel with a configuration object with the silent property set to the boolean value.
config.silent - If false or undefined, behaves the same way as if the user clicked the run simulation button. If true, no visible response is shown to running the simulation and the results of the simulation are returned as an object.
config.selectedDisplay - The selected tab in the display, should be a display primitive.
config.rate - A multiplier to control the speed of the animation in the result window. Use -1 to skip animation.
config.onSuccess(results) - Callback called when the simulation completes successfully.
config.onError(results) - Callback called when an error occurs during the simulation.
config.onPause(results) - Callback called when the simulation is paused. If this is set and a pause interval is defined for the model, then the simulation will be asynchronous and a results object will not be returned directly by the function call. 

Returns:

If silent is true, returns the simulation results as a results object. If callbacks are defined, the callbacks are called with a results object. This object contains the following properties.

times - The times for each period of the simulation as an array.
value(primitive) - A function that takes a primitive reference and returns an array of the values that primitive took on over the course of the simulation.
lastValue(primitive) - A function that takes a primitive reference and returns the last value of the primitive during the simulation.
window - The results window object (if config.silent is false).
error - "none" if no simulation error occurred, otherwise an error message.
errorPrimitive - The primitive that caused the error.
resume() - If the simulation was paused, this function may be called to resume the simulation. Please note that Insight Maker currently only supports running a single simulation at a time. When a new simulation is started, any currently paused simulations will be terminated immediately.
setValue(primitive, value) - If the simulation is paused, allows changing the value of a primitive. Value can be any equation that does not depend on the model state. E.g. "{Cows: 1, Sheep: 2} * 2" is a valid Value, but "[Other Primitive] + 1" is not.
stochastic - True if the simulation contained an element of randomness.

Examples:

> # Runs a simulation, and displays the average value of the Stock named "Rabbits"
> runModel({
>   onSuccess: function(results){
>      var sum = 0;
>      for(var i = 0; i < results.times.length; i++){
>          sum += results.value(findName("Rabbits"))[i];
>      }
>      showMessage("The average value is: " + sum/results.times.length);
>   }
> })

> # Create interactive run of the model where the primitive "Rate" is adjusted each pause interval
> runModel({
> 	silent: true,
> 	onPause: function(results){
> 		console.log("Simulation Step");
> 		results.setValue(findName("Rate"), prompt("Enter New 'Rate' Value"));
>		results.resume();
> 	},
> 	onSuccess: function(results){
> 		console.log("Simulation Done");
> 		console.log(results);
> 	},
> 	onError: function(){
> 		dpopup("A simulation error occurred.");
> 	}
> });

*/

function runModel(config) {
	if (simulationRunning()) {
		if( (!simulate.config.silent) && (! config.resultsWindow) ){
			mxUtils.alert(getText("You have an existing simulation running that has not yet completed. Either close the results window or press the window's 'Stop' button. You may then run a new simulation."));
			//~ simulate.resultsWindow.show();
			return;
		}
	}

	if (isUndefined(config)) {
		config = {silent: graph instanceof SimpleNode};
	} else if (typeof config == 'boolean') {
		config = {
			silent: config
		};
	}
	return runSimulation(config);
}

function simulationRunning() {
	return simulate && (!simulate.completed());
}

function endRunningSimulation() {
	if (simulate) {
		simulate.terminate();
	}
}

/*
Method: saveModel

Saves the model.

Parameters:

dialogue - Pass true to show the properties dialogues (e.g. name, description, tags). The dialogue is always shown if this is the first save.

*/



function saveModel(dialogue) {
	if (dialogue || graph_title == "") {
		updateProperties();
	} else {
		if(!unfoldingManager.unfolding){
			sendGraphtoServer(graph);
		}
	}
}


/*
Method: clearModel

Removes all primitives from the model.
*/


function clearModel() {
	if(graph instanceof SimpleNode){
		graph.children[0].children[0].children = graph.children[0].children[0].children.filter(function(x){
			return x.value.nodeName == "Setting";
		});
		clearPrimitiveCache();
	}else{
		graph.getModel().beginUpdate();
		graph.allowButtonSelect = true;
		graph.selectAll();
		graph.allowButtonSelect = false;
		graph.removeCells(graph.getSelectionCells(), false);
		graph.getModel().endUpdate();
	}
}

/*
Method: layoutModel

Reorganizes the primitives in the model according to an algorithm.

Parameters:

algorithm - The algorithm used to calculate the new positions of the primitive. Either "organic" or "circular".

*/

function layoutModel(algorithm) {
	if (algorithm == "organic") {
		var layout = new mxFastOrganicLayout(graph);
		layout.forceConstant = 50;
		executeLayout(layout, true);
	} else if (algorithm == "circular") {
		executeLayout(new mxCircleLayout(graph), true);
	} else if (algorithm == "hierarchical") {
		var layout = new mxCompactTreeLayout(graph);
		layout.horizontal = false;
		layout.resizeParent = false;
		layout.moveTree = false;
		executeLayout(layout, true);
	} else {
		dpopup("Unknown layout algorithm: " + algorithm);
	}
}

var executeLayout = function(layout, animate, ignoreChildCount) {
	var cell = graph.getSelectionCell();

	if (cell == null || (!ignoreChildCount && graph.getModel().getChildCount(cell) == 0)) {
		cell = graph.getDefaultParent();
	}

	graph.getModel().beginUpdate();
	try {
		layout.execute(cell);
	} catch (e) {
		throw e;
	} finally {
		// Animates the changes in the graph model except
		// for Camino, where animation is too slow
		if (animate && navigator.userAgent.indexOf('Camino') < 0) {
			// New API for animating graph layout results asynchronously
			var morph = new mxMorphing(graph);
			morph.addListener(mxEvent.DONE, function() {
				graph.getModel().endUpdate();
			});

			morph.startAnimation();
		} else {
			graph.getModel().endUpdate();
		}
	}

};

/*
Method: setZoom

Sets the scale of the diagram display.

Parameters:

scale - The diagram scale. If this is a number, then it determine the scale level. 1 means 100%, 0.5 means 50%, 2 means 200% and so on. You also pass one of the following strings: "fit" to fit the model to the diagram area, "actual" to reset the scale, "in" to zoom further in based on the current scale, and "out" to further out based on the current scale.

*/

function setZoom(scale) {
	if (scale == "fit") {
		graph.fit();
	} else if (scale == "actual") {
		graph.zoomActual();
	} else if (scale == "in") {
		graph.zoomIn();
	} else if (scale == "out") {
		graph.zoomOut();
	} else {
		graph.getView().setScale(scale);
	}
}


/*

Group: Simulation Settings

*/

/*
Method: getTimeStep

Gets the time step used in the simulation.

Returns:

The time step for the simulation as a floating point number.

See also:

<setTimeStep>
*/


function getTimeStep() {
	return parseFloat(getSetting().getAttribute("TimeStep"));
}


/*
Method: setTimeStep

Sets the time step used in the simulation.

Parameters:

timeStep - The time step to be used in the simulation.

See also:

<getTimeStep>
*/


function setTimeStep(timeStep) {
	setAttributeUndoable(
		getSetting(), "TimeStep",
		timeStep);

}

/*
Method: getTimeStart

Gets the start time for the simulation.

Returns:

The start time for the simulation as a floating point number.

See also:

<setTimeStart>
*/


function getTimeStart() {
	return parseFloat(getSetting().getAttribute("TimeStart"));
}


/*
Method: setTimeStart

Sets the start time for the simulation.

Parameters:

timeStart - The start time for the simulation.

See also:

<getTimeStart>
*/


function setTimeStart(timeStart) {
	setAttributeUndoable(
		getSetting(), "TimeStart",
		timeStart);

}

/*
Method: getTimeLength

Gets the length of the simulation.

Returns:

The length of the simulation as a floating point number.

See also:

<setTimeLength>
*/

function getTimeLength() {
	return parseFloat(getSetting().getAttribute("TimeLength"));
}


/*
Method: setTimeLength

Sets the length of the simulation.

Parameters:

timeLength - The length of the simulation.

See also:

<getTimeLength>
*/


function setTimeLength(timeLength) {
	setAttributeUndoable(
		getSetting(), "TimeLength",
		timeLength);
}

/*
Method: getPauseInterval

Gets the intervals at which to pause the simulation.

Returns:

The pause interval as a floating point number. Returns undefined if a pause interval has not been specified.

See also:

<setPauseInterval>
*/

function getPauseInterval() {
	return parseFloat(getSetting().getAttribute("TimePause"));
}


/*
Method: setPauseInterval

Sets the intervals at which to pause the simulation.

Parameters:

pauseInterval - The pause interval for the simulation.

See also:

<setPauseInterval>
*/


function setPauseInterval(pauseInterval) {
	setAttributeUndoable(
		getSetting(), "TimePause",
		pauseInterval);
}

/*
Method: getTimeUnits

Gets the time units of the simulation.

Returns:

The time units of the simulation (e.g. "Seconds", "Minutes", "Days", "Years").

See also:

<setTimeUnits>
*/


function getTimeUnits() {
	return getSetting().getAttribute("TimeUnits");
}


/*
Method: setTimeUnits

Sets the time units of the simulation.

Parameters:

units - The time units of the simulation (e.g. "Seconds", "Minutes", "Days", "Years").

See also:

<getTimeUnits>
*/


function setTimeUnits(units) {
	setAttributeUndoable(
		getSetting(), "TimeUnits",
		units);
}


/*
Method: getAlgorithm

Gets the algorithm for the simulation.

Returns:

The algorithm for the simulation as a string. "RK1" indicates Euler's method. "RK4" indicates a 4th order Runge-Kutta method.

See also:

<setAlgorithm>
*/


function getAlgorithm() {
	return getSetting().getAttribute("SolutionAlgorithm");
}


/*
Method: setAlgorithm

Sets the algorithm of the simulation.

Parameters:

algorithm - The algorithm for the simulation. "RK1" indicates Euler's method. "RK4" indicates a 4th order Runge-Kutta method.

See also:

<getAlgorithm>
*/


function setAlgorithm(algorithm) {
	setAttributeUndoable(
		getSetting(), "SolutionAlgorithm",
		algorithm);

}

/*
Method: getMacros

Gets the macros for the insight.

Returns:

The macros for the insight as a string.

See also:

<setMacros>
*/


function getMacros() {
	return getSetting().getAttribute("Macros");
}


/*
Method: setMacros

Sets the macros of the insight.

Parameters:

macros - The macros for the insight.

See also:

<getMacros>
*/


function setMacros(macros) {
	setAttributeUndoable(
		getSetting(), "Macros",
		macros);
}

/*

Group: Finding and Accessing Specific Primitives

*/

/*
Method: findName

Finds and returns a primitive by its name. If more than one primitive with the same name exists, returns an array of primitives.

Parameters:

name - The name of the primitive to return as a string. Also accepts an array of strings in which case all the primitives named in the array will be returned.

Return:

A primitive. If multiple primitives exist with the same name, an array of primitives will be returned. Returns null if no primitives are found.

See also:

<findType>, <findAll>, <findID>, <findNote>, <findValue>

*/


function findName(name) {
	var res = map(name, function(name) {
		var res = [];
		var myCells = findAll();
		for (var i = 0; i < myCells.length; i++) {
			if (isDefined(myCells[i].getAttribute("name")) && myCells[i].getAttribute("name").toLowerCase() == name.toLowerCase()) {
				res.push(myCells[i]);
			}
		}
		return res;
	});

	res = flatten(res);
	res = res.filter(function(val) {
		return val !== null;
	});

	if (name instanceof Array) {
		return res;
	} else {
		if (res.length == 0) {
			return null;
		} else if (res.length == 1) {
			return res[0];
		} else {
			return res;
		}

	}

}

/*
Method: findAll

Finds and returns all primitives in the model.

Return:

An array of primitives.

See also:

<findName>, <findType>, <findID>, <findNote>, <findValue>

*/


function findAll() {
	var all = primitives();
	var res = [];
	for (var i = 0; i < all.length; i++) {
		if (!(all[i].value.nodeName == "Setting" || all[i].value.nodeName == "Display")) {
			res.push(all[i]);
		}
	}
	return res;
}




/*
Method: findType

Finds and returns all primitives of a specific type.

Parameters:

type - The type of primitives to return. For instance: "Stock", "Flow", "Link", "Text", "Button", "Picture", "Converter" or "Variable". An array of type strings may also be passed.

Return:

An array of primitives of the specified type.

See also:

<findName>, <findAll>, <findID>, <findNote>, <findValue>

*/


function findType(type) {
	var res = map(type, function(type) {
		var t = type;
		return primitives(t);

	});
	res = flatten(res);
	return res;

}

/*
Method: findID

Finds and returns a primitive using its ID.

Parameters:

ID - The ID of the primitive to find. May also be an array of IDs.

Return:

A primitive. If an array of IDs was passed, returns an array of primitives.

See also:

<findName>, <findType>, <findAll>, <findValue>, <findNote>, <getID>

*/



function findID(id) {
	var myCells = primitives();
	var res = map(id, function(id) {
		for (var i = 0; i < myCells.length; i++) {
			if (myCells[i].id == id) {
				return myCells[i];
			}
		}
		return null;
	});
	if (res === null) {
		return res;
	}
	if (id instanceof Array) {
		return res;
	} else {
		if (res.length == 1) {
			return res[0];
		} else {
			return res;
		}
	}
}

/*
Method: findValue

Finds and returns all primitives whose values match a regular expression.

Parameters:

search - The regular expression to search for. Can also be a string in which case the primitive values will be tested for strict case-sensitive equality against the string. May also be an array of regular expressions and strings in which case any primitive with a value that matches one element of the array will be returned.

Return:

An array of primitives whose values match the regular expression. Returns an empty array if no primitives match.

Example:

> // Returns all primitives that use the log function
> var containingLog = findValue(/log\(/i);
>
> // Returns all primitives whose value is strictly "1"
> var isOne = findValue("1");

See also:

<findName>, <findType>, <findAll>, <findNote>, <getID>

*/


function findValue(search) {
	var myCells = findAll();


	var res = map(search, function(regEx) {
		var res = [];
		for (var i = 0; i < myCells.length; i++) {
			if (regEx instanceof RegExp) {
				if (regEx.test(getValue(myCells[i]))) {
					res.push(myCells[i]);
				}
			} else {
				if (getValue(myCells[i]) == regEx) {
					res.push(myCells[i]);
				}
			}
		}
		return res;
	});

	return uniquePrimitives(flatten(res));
}

/*
Method: findNote

Finds and returns all primitives whose notes match a regular expression.

Parameters:

search - The regular expression to search for. Can also be a string in which case the primitive notes will be tested for strict case-sensitive equality against the string. May also be an array of regular expressions and strings in which case any primitive with a note that matches one element of the array will be returned.

Return:

An array of primitives whose notes match the regular expression. Returns an empty array if no primitives match.

See also:

<findName>, <findType>, <findAll>, <findValue>, <getID>

*/


function findNote(search) {
	var myCells = findAll();


	var res = map(search, function(regEx) {
		var res = [];
		for (var i = 0; i < myCells.length; i++) {
			if (regEx instanceof RegExp) {
				if (regEx.test(getNote(myCells[i]))) {
					res.push(myCells[i]);
				}
			} else {
				if (getNote(myCells[i]) == regEx) {
					res.push(myCells[i]);
				}
			}
		}
		return res;
	});

	return uniquePrimitives(flatten(res));
}


/*

Group: Create and Delete Primitives

*/

/*
Method: createPrimitive

Creates a new primitive and adds it to the model. This function is only for node-type primitives not connectors (e.g. flows or links).

Parameters:

name - The name of the primitive to add.
type - The type of the primitive to add. For example, "Variable" or "Stock".
position - The location of the upper-left corner of the primitive in the form: [x, y].
size - The dimensions of the primitive in the form: [width, height].

Return:

The newly created primitive.

See also:

<createConnector>, <removePrimitive>

*/
var last_vertex;
function createPrimitive(name, type, position, size) {
	// name, type, poisition, size
	// size will be ignored in imdia
	//~ dpopup("create primitive");
	var t = type.toLowerCase();
	
	if(graph instanceof SimpleNode){
		var parent = graph.children[0].children[0];
		var vertex = simpleCloneNode(primitiveBank[t], parent);
		
		last_vertex=vertex;
		//~ vertex.value.children.push({"children":[{"attributes"}]
		//vertex.value.children[0].children[0].attributes
		
		parent.children.push(vertex);
		setSize(vertex,size);
		clearPrimitiveCache();
		defaultPrimitiveCreatedHandler(vertex);
		setPosition(vertex,position);
		//~ var new_primitive = new primitive_class(vertex.id,"stock",position[0],position[1]);
	}else{
		var parent = graph.getDefaultParent();
		
		var vertex = graph.insertVertex(parent, null, primitiveBank[t].cloneNode(true), position[0], position[1], size[0], size[1], t);
	}

	setName(vertex, name);

	if (vertex.value.nodeName == "Converter") {
		setConverterInit(vertex);
	}

	if (isValued(vertex) || vertex.value.nodeName == "Agents") {
		var displays = primitives("Display");
		for (var i = 0; i < displays.length; i++) {
			var d = displays[i];
			if (isTrue(d.getAttribute("AutoAddPrimitives")) && d.getAttribute("Type") != "Scatterplot" && (d.getAttribute("Type") != "Map" || vertex.value.nodeName == "Agents")) {
				var s = d.getAttribute("Primitives");
				if (typeof(s) == "undefined") {
					d.setAttribute("Primitives", vertex.id);
				} else {
					var items = s.split(",");
					items.push(vertex.id);
					d.setAttribute("Primitives", items.join(","));
				}
			}
		}
	}
	
	

	return vertex;
}

/*
Method: createConnector

Creates a new connector primitive and adds it to the model.

Parameters:

name - The name of the primitive to add.
type - The type of the primitive to add: "Link" or "Flow".
alpha - The primitive that will be at the start of the connector.
omega - The primitive that will be at the end of the connector.

Return:

The newly created connector primitive.

See also:

<createPrimitive>, <removePrimitive>

*/

function createConnector(name, type, alpha, omega) {
	//~ dpopup("create connector");
	//~ dpopup(name+" "+type+" "+alpha+" "+omega);

	var x;
	var usedTemp = false;


	var t = (type).toLowerCase();
	
	if(graph instanceof SimpleNode){
		var parent = graph.children[0].children[0];

		if(alpha){
			parent = alpha.parent;
		}
		if(omega){
			parent = omega.parent;
		}
		var edge = simpleCloneNode(primitiveBank[t], parent);
		parent.children.push(edge);
		setEnds(edge, [alpha, omega]);
		clearPrimitiveCache();
	}else{
		var parent = graph.getDefaultParent();
		
		if (omega == null && alpha == null) {
			usedTemp = true;
			x = createPrimitive("temp stock xyz", "Stock", [300, 300], [10, 10]);
			alpha = x;
			omega = x;
		} else if (alpha == null) {
			usedTemp = true;

			var pos = getPosition(omega);
			var size = getSize(omega);
			x = createPrimitive("temp stock xyz", "Stock", [pos[0] + size[0] / 2 - 5, pos[1] - 120], [10, 10]);

			alpha = x;

		} else if (omega == null) {
			usedTemp = true;

			var pos = getPosition(alpha);
			var size = getSize(alpha);
			x = createPrimitive("temp stock xyz", "Stock", [pos[0] + size[0] / 2 - 5, pos[1] + 120 + size[1]], [10, 10]);

			omega = x;
		}
	
		var edge = graph.insertEdge(parent, null, primitiveBank[t].cloneNode(true), alpha, omega, t);
	}
	
	


	setName(edge, name);

	if (usedTemp) {
		removePrimitive(x);
	}


	return edge;
}


/*
Method: removePrimitive

Removes a primitive from the model. You should not attempt to access or modify a primitive once it has been removed.

Parameters:

primitive - The primitive to delete, can also be an array of primitives.

See also:

<createPrimitive>, <createConnector>

*/

function removePrimitive(primitive) {
	if (!(primitive instanceof Array)) {
		primitive = [primitive];
	}
	
	if(graph instanceof SimpleNode){
		var connectors = findType(["Flow", "Transition", "Link"]);
		primitive.forEach(function(x){
			defaultPrimitiveBeforeDestroyHandler(x);
			x.parent.children.splice(x.parent.children.indexOf(x), 1);
			connectors.forEach(function(c){
				if(c.source == x){
					c.source = null;
					if(c.target && c.target.parent !== c.parent){
						setParent(c, c.target.parent);
					}
				}
				if(c.target == x){
					c.target = null;
					if(c.source && c.source.parent !== c.parent){
						setParent(c, c.source.parent);
					}
				}
			})
		});
		clearPrimitiveCache();
	}else{
		graph.removeCells(primitive, false);
	}

}

/*

Group: Primitive Selections

*/


/*
Method: highlight

Highlights a single primitive. Selects the primitive, expands any collapsed folders the primitive is in, and scrolls to the position of the primitive.

Parameters:

primitive - The primitive to highlight.

*/

function highlight(primitive) {
	if(graph instanceof SimpleNode){
		return;
	}
	
	var folder = getParent(primitive);
	while (folder) {
		if (getCollapsed(folder)) {
			expandFolder(folder);
		}
		folder = getParent(folder);
	}

	setSelected(primitive);
	graph.scrollCellToVisible(primitive);
}


/*
Method: getSelected

Finds and returns the currently selected primitives.

Return:

An array of the selected primitives.

See also:

<setSelected>, <isSelected>
*/

function getSelected() {
	return graph.getSelectionCells();
}

/*
Method: setSelected

Sets the currently selected primitives.

Parameters:

primitives - An array of primitives to select. Can also be a single primitive.

See also:

<getSelected>, <isSelected>

*/

function setSelected(primitives) {
	graph.allowButtonSelect = true;
	if (primitives instanceof Array) {
		graph.setSelectionCells(primitives);
	} else {
		graph.setSelectionCells([primitives]);
	}
	graph.allowButtonSelect = false;
}

/*
Method: isSelected

Indicates whether a primitive is selected.

Parameters:

primitive - A primitive to return the selection status for. May also be an array of primitives.

Return:

Whether the primitive is selected or not as a boolean. If an array of primitives was passed to the function, an array of booleans is returned.

See also:

<getSelected>, <setSelected>

*/

function isSelected(primitive) {
	var selected = getSelected();
	return map(primitive, function(primitive) {
		return (primitiveIndex(selected, primitive) > -1);
	});
}



/*

Group: General Primitive Functions

*/

/*
Method: getID

Gets the ID of the passed primitive. The ID remains constant even if the name of a primitive changes. The ID is a string.

Parameters:

primitive - The primitive for which the ID is requested. May also be an array of primitives.

Return:

The ID of the primitive as a string. If an array of primitives was passed, returns an array of IDs.

See also:

<findID>
*/



function getID(primitive) {
	return map(primitive, function(primitive) {
		return primitive.id;
	});
}

/*
Method: getType

Gets the type of the passed primitive.

Parameters:

primitive - The primitive for which the type is requested. May also be an array of primitives.

Return:

The type of the primitive as a string. If an array of primitives was passed, returns an array of IDs.

*/



function getType(primitive) {
	return map(primitive, function(primitive) {
		return primitive.value.nodeName;
	});
}



/*
Method: getName

Gets the name of the passed primitive.

Parameters:

primitive - The primitive for which the name is requested. May also be an array of primitives.

Return:

The name of the primitive as a string. If an array of primitives was passed, returns an array of names.

See also:

<setName>
*/

function getName(primitive) {
	return map(primitive, function(primitive) {
		return primitive.getAttribute("name");
	});
}

/*
Method: setName

Sets the name of the passed primitive.

Parameters:

primitive - The primitive for which the name will be set. May also be an array of primitives in which case they will all be set to the same name.
name - The new name for the primitive.

See also:

<getName>
*/

var debugobject;

function setName(primitive, name) {
	debugobject = primitive;
	//~ dpopup("setName "+primitive+" "+name);
	let success = map(arrify(primitive), function(primitive) {
		if (validPrimitiveName(String(name), primitive)) {
			//~ set_name(primitive.id,name);
			setAttributeUndoable(primitive, "name", String(name));
			propogateGhosts(primitive);
			return true;
		} else {
			return false;
		}
	});
	// Successful if no name change returned false 
	if(success.indexOf(false)==-1) {
		return true;
	} else {
		return false;
	}
}

/*
Method: getUnits

Gets the units of the passed primitive.

Parameters:

primitive - The primitive for which the units are requested. May also be an array of primitives.

Return:

The units of the primitive as a string. If an array of primitives was passed, returns an array of units.

See also:

<setUnits>
*/



function getUnits(primitive) {
	return map(primitive, function(primitive) {
		return primitive.getAttribute("Units");
	});
}

/*
Method: setUnits

Sets the units of the passed primitive.

Parameters:

primitive - The primitive for which the units will be set. May also be an array of primitives in which case they will all be set to the same units.
units - The new units for the primitive.

See also:

<getUnits>
*/


function setUnits(primitive, units) {

	map(primitive, function(primitive) {
		setAttributeUndoable(primitive, "Units", String(units));
	});

}

/*
Method: getConstraints

Gets the upper and lower bounds on the passed primitive to test against during simulation.

Parameters:

primitive - The primitive for which the constraints are requested. May also be an array of primitives.

Return:

The constraints of the primitive as an array. The format is [MinimumConstraint, MinimumConstraintMode, MaximumConstraint, MaximumConstraintMode]. Constraint mode is false to disable the constraint and true to enable it.

See also:

<setConstraints>
*/


function getConstraints(primitive) {
	return map(primitive, function(primitive) {
		return [primitive.getAttribute("MinConstraint"), isTrue(primitive.getAttribute("MinConstraintUsed")), primitive.getAttribute("MaxConstraint"), isTrue(primitive.getAttribute("MaxConstraintUsed"))];
	});
}

/*
Method: setConstraints

Sets the upper and lower bounds on the passed primitive to test against during simulation.

Parameters:

primitive - The primitive for which the units will be set. May also be an array of primitives in which case they will all be set to the same constraints.
constraints - The constraints of the primitive as an array. The format is [MinimumConstraint, MinimumConstraintMode, MaximumConstraint, MaximumConstraintMode]. Constraint mode is false to disable the constraint and true to enable it.


See also:

<getConstraints>
*/


function setConstraints(primitive, constraints) {
	map(primitive, function(primitive) {
		setAttributeUndoable(primitive, "MinConstraint", constraints[0]);
		setAttributeUndoable(primitive, "MinConstraintUsed", constraints[1]);
		setAttributeUndoable(primitive, "MaxConstraint", constraints[2]);
		setAttributeUndoable(primitive, "MaxConstraintUsed", constraints[3]);
	});

}

/*
Method: getNote

Gets the note of the passed primitive.

Parameters:

primitive - The primitive for which the note is requested. May also be an array of primitives.

Return:

The note of the primitive as a string. If an array of primitives was passed, returns an array of notes.

See also:

<setNote>
*/

function getNote(primitive) {
	return map(primitive, function(primitive) {
		return primitive.getAttribute("Note");
	});
}

/*
Method: setNote

Sets the note of the passed primitive.

Parameters:

primitive - The primitive for which the note will be set. May also be an array of primitives in which case they will all be set to the same note.
note - The new note for the primitive.

See also:

<getNote>
*/

function setNote(primitive, note) {

	map(primitive, function(primitive) {
		setAttributeUndoable(primitive, "Note", String(note));
	});

}

/*
Method: showNote

Shows the note for the passed primitive. The note is shown as a closable tooltip next to the primitive. If the note is empty, the note will not be shown.

Parameters:

primitive - The primitive for which the note will be shown. May also be an array of primitives in which case they will all have their notes shown.

See also:

<hideNote>
*/



function showNote(primitive) {
	return map(primitive, function(cell) {
		if (!(cell.value.getAttribute("Note", null) === null || cell.value.getAttribute("Note") == "")) {
			var x = Ext.getCmp("note" + cell.id);
			if (isUndefined(x)) {

				var state = graph.view.getState(cell);
				if (state) {
					var tooltip = new Ext.ToolTip({
						html: "<big>" + clean(cell.value.getAttribute("Note").replace(/\n/g, "<br/>")) + "</big>",
						autoHide: false,
						closable: true,
						width: 300,
						draggable: true,
						id: "note" + cell.id,
						title: clean(cell.value.getAttribute("name")),
						closeAction: "destroy"
					});

					tooltip.showAt([state.x + mxPanel.getEl().getLeft() + state.width + 4 - graph.container.scrollLeft, state.y + mxPanel.getEl().getTop() - graph.container.scrollTop]);
				}

			}
		}
	});
}

/*
Method: hideNote

Hides the note for the passed primitive. The note is shown as a closable tooltip next to the primitive.

Parameters:

primitive - The primitive for which the note will be hidden. May also be an array of primitives in which case they will all have their notes hidden.

See also:

<showNote>
*/



function hideNote(primitive) {
	return map(primitive, function(cell) {
		var x = Ext.getCmp("note" + cell.id);
		if (!isUndefined(x)) {
			x.destroy();
		}
	});
}

/*
Method: showEditor

Shows the value editor for the passed primitive.

Parameters:

primitive - The primitive for which the editor will be shown. 
annotations - An optional array containing a list of annotations. Only valid for primitives with equations.

Example:

> showEditor(primitive, [{type: "error", row: 7, text: "Incorrect syntax"}])

*/


function showEditor(primitive, annotations) {
	if(graph instanceof SimpleNode){
		if(typeof EditorControll != "undefined") {
			EditorControll.showEditor(primitive, annotations);
		}
		return;
	}
	
	if (primitive.value.nodeName == "Converter") {
		var editorWindow = new ConverterWindow({
			parent: "",
			cell: primitive,
			oldKeys: primitive.getAttribute("Data"),
			interpolation: primitive.getAttribute("Interpolation")
		});
		editorWindow.show();
	} else if(primitive.value.nodeName == "Stock"){
		var checkbox = new Ext.form.field.Checkbox({
			xtype: "checkboxfield",
			boxLabel: getText('Restrict this stock to positive values'),
			checked: getNonNegative(primitive),
			autoEl: {
                'data-qtip': "If checked, the value of the stock will not be allowed to fall below zero. The rates of outflows may be adjusted to ensure this condition is met."
            }
		});
				
		var editorWindow = new EquationWindow({
			parent: "",
			cell: primitive,
			equation: getValue(primitive),
			annotations: annotations,
			extra: checkbox,
			saveExtra: function(extra){
				setNonNegative(primitive, checkbox.getValue())
			}
		});
		editorWindow.show();
	} else if(primitive.value.nodeName == "Flow"){
		var checkbox = new Ext.form.field.Checkbox({
			xtype: "checkboxfield",
			boxLabel: getText('Restrict this flow to positive rates'),
			checked: getNonNegative(primitive),
			autoEl: {
                'data-qtip': "If checked, the flow will not be applied if the calculated rate is less than zero."
            }
		});
				
		var editorWindow = new EquationWindow({
			parent: "",
			cell: primitive,
			equation: getValue(primitive),
			annotations: annotations,
			extra: checkbox,
			saveExtra: function(extra){
				setNonNegative(primitive, checkbox.getValue());
			}
		});
		editorWindow.show();
	} else if(primitive.value.nodeName == "Transition"){
		var testVisibility = function(){
			var cond = trigger.getValue() == "Condition";
			recalculate.setDisabled(cond);
			repeat.setDisabled(cond);
		}
		
		var trigger = new Ext.form.ComboBox({
			triggerAction: "all",
			store: ['Timeout', 'Probability', 'Condition'],
			editable: false,
			selectOnFocus: false,
			value: getTriggerType(primitive),
			fieldLabel: 'Trigger Type',
			width: 240,
			listeners: {
				change: function(){
					testVisibility();
				}
			}
		});
		
		var recalculate = new Ext.form.field.Checkbox({
			xtype: "checkboxfield",
			boxLabel: getText('Recalculate each time step'),
			checked: getTriggerRecalculate(primitive),
			margin: '0 0 0 15',
			autoEl: {
                'data-qtip': "If this is not true, the equation will be evaluated once and the trigger time scheduled based on that calculation. If this is true, the timeout or probability will be recalculated as the state of the system changes."
            }
		});
		
		var repeat = new Ext.form.field.Checkbox({
			xtype: "checkboxfield",
			boxLabel: getText('Repeat after triggering'),
			checked: getTriggerRepeat(primitive),
			margin: '0 0 0 15',
			autoEl: {
                'data-qtip': "If this is true, the transition will be rescheduled after it is triggered. If this is not true, the transition will only be rescheduled if its source state becomes active again."
            }
		});
		
		var items = {
			xtype: 'container',
			layout: 'hbox',
			items: [trigger, recalculate, repeat]
		}
				
		testVisibility();
		
		var editorWindow = new EquationWindow({
			parent: "",
			cell: primitive,
			equation: getValue(primitive),
			annotations: annotations,
			extra: items,
			saveExtra: function(extra){
				setTriggerType(primitive, trigger.value);
				setTriggerRecalculate(primitive, recalculate.getValue());
				setTriggerRepeat(primitive, repeat.getValue());
			}
		});
		editorWindow.show();
	} else {
		var editorWindow = new EquationWindow({
			parent: "",
			cell: primitive,
			equation: getValue(primitive),
			annotations: annotations
		});
		editorWindow.show();
	}
}

/*
Method: getValue

Gets the value of the passed primitive. The value depends on the type of the primitive. For instance, the value of stock is its initial value while the value of a flow is its rate.

Parameters:

primitive - The primitive for which the value is requested. May also be an array of primitives.

Return:

The value of the primitive as a string. If an array of primitives was passed, returns an array of values.

See also:

<setValue>
*/



function getValue(primitive) {
	return map(primitive, function(primitive) {
		var n = primitive.value.nodeName;
		var v;
		if (n == "Stock") {
			v = primitive.getAttribute("InitialValue");
		} else if (n == "Flow") {
			v = primitive.getAttribute("FlowRate");
		} else if (n == "Transition") {
			v = primitive.getAttribute("Value");
		} else if (n == "State") {
			v = primitive.getAttribute("Active");
		} else if (n == "Variable") {
			v = primitive.getAttribute("Equation");
		} else if (n == "Button") {
			v = primitive.getAttribute("Function");
		} else if (n == "Converter") {
			v = primitive.getAttribute("Data");
		} else if (n == "Action") {
			v = primitive.getAttribute("Action");
		} else if (n == "Agents") {
			v = primitive.getAttribute("Size");
		}
		if (isDefined(v)) {
			return v;
		} else {
			return "";
		}
	});
}

/*
Method: setValue

Sets the value of the passed primitive. The value depends on the type of the primitive. For instance, the value of stock is its initial value while the value of a flow is its rate.

Parameters:

primitive - The primitive for which the value will be set. May also be an array of primitives in which case they will all be set to the same value.
value - The new value for the primitive. Can be a number or a string.

See also:

<getValue>
*/


function setValue(primitive, value) {

	map(primitive, function(primitive) {
		if (getValue(primitive) != value) {
			var n = primitive.value.nodeName;
			if (n == "Stock") {
				setAttributeUndoable(primitive, "InitialValue", String(value));
			} else if (n == "Flow") {
				setAttributeUndoable(primitive, "FlowRate", String(value));
			} else if (n == "Transition") {
				setAttributeUndoable(primitive, "Value", String(value));
			} else if (n == "State") {
				setAttributeUndoable(primitive, "Active", String(value));
			} else if (n == "Variable") {
				setAttributeUndoable(primitive, "Equation", String(value));
			} else if (n == "Button") {
				setAttributeUndoable(primitive, "Function", String(value));
			} else if (n == "Converter") {
				setAttributeUndoable(primitive, "Data", String(value));
			} else if (n == "Action") {
				setAttributeUndoable(primitive, "Action", String(value));
			} else if (n == "Agents") {
				if (value < 0 || Math.round(value) != value) {
					dpopup("The agent population size must be a non-negative integer.");
					return;
				}
				setAttributeUndoable(primitive, "Size", parseFloat(value));
			}


		}
	});

}

/*
Method: getSize

Gets the size of the passed primitive.

Parameters:

primitive - The primitive for which the position is requested. May also be an array of primitives.

Return:

The size as an array of the form: [width, height].

*/

function getSize(primitive) {
	return map(primitive, function(primitive) {
		if(graph instanceof SimpleNode){
			if(typeof primitive.value.children[0]=="undefined") {
				dpopup("No position data for "+primitive.id+" found");
				return [0,0];
			}
			var geometry = primitive.value.children[0].children[0].attributes;
			tgeometry = geometry;
			var width=parseInt(geometry.getNamedItem("width").value);
			var height=parseInt(geometry.getNamedItem("height").value);
			return [width,height];
		}
		var size = graph.getCellBounds(primitive);
		var scale = graph.view.getScale();

		return [size.width / scale, size.height / scale];
	});
}


/*
Method: getPosition

Gets the position of the passed primitive.

Parameters:

primitive - The primitive for which the position is requested. May also be an array of primitives.

Return:

The position as an array of the form [x, y]. The position is measured from the top-left corner of the graph.

See also:

<setPosition>
*/


function getCenterPosition(primitive) {
	var pos=getPosition(primitive);
	var size=getSize(primitive);
	return [pos[0]+(size[0]/2),pos[1]+(size[1]/2)];
}

function setCenterPosition(primitive,pos) {
	switch(getPositionType(primitive)) {
	case 1:
		var size=getSize(primitive);
		setPosition(primitive,[pos[0]-size[0]/2,pos[1]-size[1]/2]);
		break;
	case 2:
		// For connections setCenterPositon is the same thing (as we don't care about width)
		setPosition(primitive,pos);
		break;
	}
}

var tgeometry;
function getPosition(primitive) {
	//~ console.error("hoj");
	//~ console.error(primitive);
	return map(primitive, function(primitive) {
		if(graph instanceof SimpleNode){
			
			
			
			
			switch(getPositionType(primitive)) {
			case 1:
				if(typeof primitive.value.children[0]=="undefined") {
					dpopup("No position data for "+primitive.id+" found");
					return [0,0];
				}
				var geometry = primitive.value.children[0].children[0].attributes;
				tgeometry = geometry;
				
				var leftSide = 0;
				if(geometry.getNamedItem("x")) {
					leftSide = parseInt(geometry.getNamedItem("x").value);
				}
				
				var topSide = 0;
				if(geometry.getNamedItem("y")) {
					topSide = parseInt(geometry.getNamedItem("y").value);
				}
				// Try it with
				// a=getPosition(findName("S"));
				return [leftSide,topSide];
				//primtive.value.children[0].children[0].attributes.x
				// return [0,0];
				break;
			case 2:
				let sourcePosition = getSourcePosition(primitive);
				let targetPosition = getTargetPosition(primitive);
				let centerPosition = centerCoordinates([sourcePosition,targetPosition]);
				return centerPosition;
				break;
			}
		}
		var state = graph.view.getState(primitive);
		var scale = graph.view.getScale();

		return [state.x / scale, state.y / scale];
	});
}


function getXmlPoint(xmlPoint) {
	var x = xmlPoint.getAttribute("x");
	var y = xmlPoint.getAttribute("y");
	if(y==null) {
		y=0;
	} else {
		y=Number(y);
	}
	if(x==null) {
		x=0;
	} else {
		x=Number(x);
	}
	return [x,y];
}

function setXmlPoint(point,pos) {
	point.setAttribute("x",pos[0]);
	point.setAttribute("y",pos[1]);
}

function getSourcePosition(primitive) {
	ensureTwoPointerGemoetry(primitive);
	var sourcePoint = primitive.value.children[0].children[0].children[0];
	return getXmlPoint(sourcePoint);
}

function ensureTwoPointerGemoetry(primitive)  {
	if(primitive.value.children.length==0) {
		var cell = document.createElement("mxCell");
		var geometry = document.createElement("mxGeometry");
		var sourcePoint = document.createElement("mxPoint");
		var targetPoint = document.createElement("mxPoint");
		setXmlPoint(sourcePoint,[0,0]);
		setXmlPoint(targetPoint,[0,0]);
		geometry.appendChild(sourcePoint);
		geometry.appendChild(targetPoint);
		cell.appendChild(geometry);
		primitive.value.appendChild(cell);
	}
}

function getTargetPosition(primitive) {
	ensureTwoPointerGemoetry(primitive);
	var targetPoint = primitive.value.children[0].children[0].children[1];
	return getXmlPoint(targetPoint);
}

function setSourcePosition(primitive,pos) {
	ensureTwoPointerGemoetry(primitive);
	var sourcePoint = primitive.value.children[0].children[0].children[0];
	setXmlPoint(sourcePoint,pos);
}

function setTargetPosition(primitive,pos) {
	ensureTwoPointerGemoetry(primitive);
	var targetPoint = primitive.value.children[0].children[0].children[1];
	setXmlPoint(targetPoint,pos);
}

function getPositionType(primitive) {
	// Returns the number of position points for a type
	// E.g Flows and Links have 2 points. Stocks have 1 point
	switch(getType(primitive)) {
		case 'Flow':
			return 2;
			break;
		case 'Link':
			return 2;
			break;
		case 'Text':
			return 1;
			break;
		default:
			return 1;
	}
}




function setSize(primitive,size) {
	if(graph instanceof SimpleNode) {
		// Create child cell for storing location if nessecary
		if(typeof primitive.value.children[0]=="undefined") {
			primitive.value.appendChild(document.createElement("cell"));
			primitive.value.children[0].appendChild(document.createElement("cell"));
		}
		primitive.value.children[0].children[0].setAttribute("width",size[0]);
		primitive.value.children[0].children[0].setAttribute("height",size[1]);
	}
}

/*
Method: setPosition

Sets the position of the passed primitive.

Parameters:

primitive - The primitive for which the position will be set. May also be an array of primitives in which case they will all be set to the same position.
position - The new position for the primitive in the form [x, y]. The position is measured from the top-left corner of the graph.

See also:

<getPosition>
*/


function setPosition(primitive, position) {
	//~ dpopup("set position");
	//~ dpopup(primitive+" "+position[0]+" "+position[1]);
	
	if(graph instanceof SimpleNode) {
		switch(getPositionType(primitive)) {
		case 1:
			// Create child cell for storing location if nessecary
			if(typeof primitive.value.children[0]=="undefined") {
				primitive.value.appendChild(document.createElement("cell"));
				primitive.value.children[0].appendChild(document.createElement("cell"));
			}
			primitive.value.children[0].children[0].setAttribute("x",position[0]);
			primitive.value.children[0].children[0].setAttribute("y",position[1]);
			primitive.positionUpdate();
			break;
		case 2:
			let centerPosition = getPosition(primitive);
			let relativeSourcePosition = positionDifference(getSourcePosition(primitive),centerPosition);
			let relativeTargetPosition = positionDifference(getTargetPosition(primitive),centerPosition);
			
			setTargetPosition(primitive,positionSum(position,relativeTargetPosition));
			
			setSourcePosition(primitive,positionSum(position,relativeSourcePosition));
			primitive.positionUpdate();
			break;
		}
	} else {
		map(primitive, function(primitive) {
			var state = graph.view.getState(primitive);

			var scale = graph.view.getScale();

			var geo = primitive.geometry;

			var dx = state.x / scale - geo.x;
			var dy = state.y / scale - geo.y;

			var res = geo.clone();

			res.x = position[0] - dx;
			res.y = position[1] - dy;

			graph.getModel().setGeometry(primitive, res);
		});
	}
}

/*

Group: Primitive Styling Functions

*/

/*
Method: flash

Temporarily changes the opacity of a primitive. Opacity between 0 (invisible) to 100 (fully opaque).

Parameters:

primitive - The primitive which will be flashed. May also be an array of primitives.
opacity - Optional temporary opacity for the primitive. Defaults to 0.
duration - Optional duration the primitive will be at the temporary opacity in milliseconds. Defaults to 100.

Example:

> flash(getSelected());

*/

function flash(primitive, opacity, duration){
	map(primitive, function(primitive){
		if(primitive.value.nodeName == "Folder"){
			flash(getChildren(primitive, false), opacity, duration);
		}
		var orig = getOpacity(primitive);
		setOpacity(primitive, opacity || 0);
		setTimeout(function(){
			setOpacity(primitive, orig);
		}, duration || 100);
	})
}

/*
Method: getShowSlider

Gets the show slider property of the passed primitive.

Parameters:

primitive - The primitive for which the show slider property will be returned. May also be an array of primitives.

Return:

Whether to show the slider property of the primitive. A boolean.

*/

function getShowSlider(primitive) {
	return map(primitive, function(primitive) {
		return isTrue(primitive.getAttribute("ShowSlider"));
	});

}

/*
Method: setShowSlider

Sets the show slider property of the passed primitive. 

Parameters:

primitive - The primitive for which the show slider property will be set. May also be an array of primitives in which case they will all be set to the same show slider value.
showSlider - Boolean whether to show the slider.

*/

function setShowSlider(primitive, showSlider) {

	map(primitive, function(primitive) {
		setAttributeUndoable(primitive, "ShowSlider", showSlider);
	});

}

/*
Method: getSliderMin

Gets the slider min property of the passed primitive.

Parameters:

primitive - The primitive for which the slider min property will be returned. May also be an array of primitives.

Return:

The minimum allowed value for the slider

*/

function getSliderMin(primitive) {
	return map(primitive, function(primitive) {
		return primitive.getAttribute("SliderMin");
	});

}

/*
Method: setSliderMin

Sets the slider min property of the passed primitive. 

Parameters:

primitive - The primitive for which the slider property will be set. May also be an array of primitives in which case they will all be set to the same slider value.
sliderMin - The minimum value of the slider.

*/

function setSliderMin(primitive, sliderMin) {

	map(primitive, function(primitive) {
		setAttributeUndoable(primitive, "SliderMin", sliderMin);
	});

}

/*
Method: getSliderMax

Gets the slider max property of the passed primitive.

Parameters:

primitive - The primitive for which the slider max property will be returned. May also be an array of primitives.

Return:

The maximum allowed value for the slider

*/

function getSliderMax(primitive) {
	return map(primitive, function(primitive) {
		return primitive.getAttribute("SliderMax");
	});

}

/*
Method: setSliderMax

Sets the slider max property of the passed primitive. 

Parameters:

primitive - The primitive for which the slider property will be set. May also be an array of primitives in which case they will all be set to the same slider value.
sliderMax - The maximum value of the slider.

*/

function setSliderMax(primitive, sliderMax) {

	map(primitive, function(primitive) {
		setAttributeUndoable(primitive, "SliderMax", sliderMax);
	});

}

/*
Method: getSliderStep

Gets the slider step property of the passed primitive.

Parameters:

primitive - The primitive for which the slider property will be returned. May also be an array of primitives.

Return:

The step value for the slider

*/

function getSliderStep(primitive) {
	return map(primitive, function(primitive) {
		return primitive.getAttribute("SliderStep");
	});

}

/*
Method: setSliderStep

Sets the slider step property of the passed primitive. 

Parameters:

primitive - The primitive for which the slider property will be set. May also be an array of primitives in which case they will all be set to the same slider value.
sliderStep - The step value of the slider.

*/

function setSliderStep(primitive, sliderStep) {

	map(primitive, function(primitive) {
		setAttributeUndoable(primitive, "SliderStep", sliderStep);
	});

}


/*
Method: getOpacity

Gets the opacity of the passed primitive. Opacity is a value between 0 (invisible) to 100 (fully opaque).

Parameters:

primitive - The primitive for which the opacity will be returned. May also be an array of primitives.

Return:

The opacity of the primitive

*/

function getOpacity(primitive) {
	return map(primitive, function(primitive) {
		return graph.getCellStyle(primitive).opacity;
	});

}

/*
Method: setOpacity

Sets the opacity of the passed primitive. Opacity is a value between 0 (invisible) to 100 (fully opaque).

Parameters:

primitive - The primitive for which the opacity will be set. May also be an array of primitives in which case they will all be set to the same opacity.
opacity - The new opacity for the primitive.

*/

function setOpacity(primitive, opacity) {

	map(primitive, function(primitive) {
		var style = primitive.getStyle();
		style = mxUtils.setStyle(style, "opacity", opacity);
		style = mxUtils.setStyle(style, mxConstants.STYLE_TEXT_OPACITY, opacity);

		graph.getModel().execute(new mxStyleChange(graph.getModel(),
			primitive,
			style));

		propogateGhosts(primitive);

	});

}


/*
Method: getLineColor

Gets the line color of the passed primitive.

Parameters:

primitive - The primitive for which the line color will be returned. May also be an array of primitives.

Return:

The line color of the primitive

*/

function getLineColor(primitive) {
	if(graph instanceof SimpleNode){
		return "#000000";
	} else {
		return map(primitive, function(primitive) {
			return graph.getCellStyle(primitive).strokeColor;
		});
	}
}

/*
Method: setLineColor

Sets the line color of the passed primitive.

Parameters:

primitive - The primitive for which the line color will be set. May also be an array of primitives in which case they will all be set to the same color.
lineColor - The new line color for the primitive.

*/

function setLineColor(primitive, lineColor) {

	map(primitive, function(primitive) {
		var style = primitive.getStyle();
		style = mxUtils.setStyle(style, "strokeColor", lineColor);

		graph.getModel().execute(new mxStyleChange(graph.getModel(),
			primitive,
			style));

		propogateGhosts(primitive);

	});

}

/*
Method: getFontColor

Gets the font color of the passed primitive.

Parameters:

primitive - The primitive for which the font color will be returned. May also be an array of primitives.

Return:

The font color of the primitive

*/

function getFontColor(primitive) {
	return map(primitive, function(primitive) {
		return graph.getCellStyle(primitive).fontColor;
	});

}

/*
Method: setFontColor

Sets the font color of the passed primitive.

Parameters:

primitive - The primitive for which the font color will be set. May also be an array of primitives in which case they will all be set to the same color.
fontColor - The new font color for the primitive.

*/

function setFontColor(primitive, fontColor) {

	map(primitive, function(primitive) {
		var style = primitive.getStyle();
		style = mxUtils.setStyle(style, "fontColor", fontColor);

		graph.getModel().execute(new mxStyleChange(graph.getModel(),
			primitive,
			style));

		propogateGhosts(primitive);

	});

}

/*
Method: getFillColor

Gets the fill color of the passed primitive.

Parameters:

primitive - The primitive for which the fill color will be returned. May also be an array of primitives.

Return:

The fill color of the primitive

*/

function getFillColor(primitive) {
	return map(primitive, function(primitive) {
		return graph.getCellStyle(primitive).fillColor;
	});

}

/*
Method: setFillColor

Sets the fill color of the passed primitive.

Parameters:

primitive - The primitive for which the fill color will be set. May also be an array of primitives in which case they will all be set to the same color.
fillColor - The new fill color for the primitive.

*/

function setFillColor(primitive, fillColor) {

	map(primitive, function(primitive) {
		var style = primitive.getStyle();
		style = mxUtils.setStyle(style, "fillColor", fillColor);

		graph.getModel().execute(new mxStyleChange(graph.getModel(),
			primitive,
			style));

		propogateGhosts(primitive);

	});

}


/*
Method: getImage

Gets the image of the passed primitive.

Parameters:

primitive - The primitive for which the image will be returned. May also be an array of primitives.

Return:

The image of the primitive as a string

*/

function getImage(primitive) {
	return map(primitive, function(primitive) {
		return primitive.getAttribute("Image");
	});

}

/*
Method: setImage

Sets the image of the passed primitive.

Parameters:

primitive - The primitive for which the image will be set. May also be an array of primitives in which case they will all be set to the same image.
image - The image url or alias as a string.

*/

function setImage(primitive, image) {

	map(primitive, function(primitive) {
		primitive.setAttribute("Image", image);
		setPicture(primitive);
	});

}

/*

Group: Stocks

*/

/*
Method: getNonNegative

Gets the non-negative property of stocks (also applicable to flows). A non-negative stock will never become negative.

Parameters:

primitive - The stock for which the value is requested. May also be an array of stock.

Return:

The non-negative value of the stock. If an array of primitives was passed, returns an array of values.

See also:

<setNonNegative>
*/


function getNonNegative(primitive) {
	return map(primitive, function(primitive) {
		if (primitive.value.nodeName == "Stock") {
			return isTrue(primitive.getAttribute("NonNegative"));
		} else {
			return isTrue(primitive.getAttribute("OnlyPositive"));
		}
	});
}

/*
Method: setNonNegative

Sets the non-negative value of the passed stocks (also applicable to flows).

Parameters:

primitive - The stock for which the non-negative value will be set. May also be an array of stocks in which case they will all be set to the same value.
nonNegative - The new non-negative status for the stock. Either true or false.

See also:

<getNonNegative>
*/


function setNonNegative(primitive, nonNegative) {
	map(primitive, function(primitive) {
		if (primitive.value.nodeName == "Stock") {
			setAttributeUndoable(primitive, "NonNegative", nonNegative);
		} else {
			setAttributeUndoable(primitive, "OnlyPositive", nonNegative);
			if(!(primitive instanceof SimpleNode)){
				if (nonNegative) {
	                graph.setCellStyles(mxConstants.STYLE_STARTARROW, "", [primitive]);
	            } else {
	                graph.setCellStyles(mxConstants.STYLE_STARTARROW, "block", [primitive]);
	                graph.setCellStyles("startFill", 0, [primitive]);
	            }
			}
           
			
		}
	});
}

/*
Method: getStockType

Gets the type of the stock. The type affects the behavior of the stock and may either be "Store" (the default) or "Conveyor".

Parameters:

primitive - The stock for which the type is requested. May also be an array of stocks.

Return:

The type of the stock as a string. If an array of stocks was passed, returns an array of strings.

See also:

<setStockType>
*/

function getStockType(primitive) {
	return map(primitive, function(primitive) {
		return primitive.getAttribute("StockMode");
	});
}

/*
Method: setStockType

Sets the type of the passed stock.

Parameters:

primitive - The stock for which the type will be set. May also be an array of stocks in which case they will all be set to the same type.
type - The type of the stock as a string. Either "Store" (the default) or "Conveyor".

See also:

<getStockType>
*/

function setStockType(primitive, type) {
	map(primitive, function(primitive) {
		setAttributeUndoable(primitive, "StockMode", type);
	});
}


/*
Method: getDelay

Gets the delay length of conveyor stocks.

Parameters:

primitive - The stock for which the value is requested. May also be an array of stocks.

Return:

The delay length of the stock. If an array of stocks was passed, returns an array of lengths.

See also:

<setDelay>
*/

function getDelay(primitive) {
	return map(primitive, function(primitive) {
		return primitive.getAttribute("Delay");
	});
}

/*
Method: setDelay

Sets the delay length of the passed conveyor stock.

Parameters:

primitive - The stock for which the delay length will be set. May also be an array of stocks in which case they will all be set to the same value.
delay - The delay length for the stock.

See also:

<getDelay>
*/

function setDelay(primitive, delay) {
	map(primitive, function(primitive) {
		setAttributeUndoable(primitive, "Delay", delay);
	});

}

/* 

Group: Connectors

See <getNonNegative> and <setNonNegative> for setting the only-positive property of flows.

*/

/*
Method: getEnds

Gets the alpha and omega for the connector

Parameters:

connector - The connector for which the ends are requested. Can also be an array of connectors.

Return:

The alpha and omega as an array: [alpha, omega]. Array elements are returned as null if no connection exists.

See also:

<setEnds>
*/

function getEnds(connector) {
	return map(connector, function(primitive) {
		return [primitive.source, primitive.target];
	});
}

/*
Method: setEnds

Sets the alpha and omega for a connector.

Parameters:

connector - The connector for which the alpha and omega will be set. May also be an array of connectors.
ends - The new alpha and omega for the connector as an array: [alpha, omega]. Use null for either alpha or omega to disconnect an end.

See also:

<getEnds>
*/

function setEnds(connector, ends) {
	map(connector, function(primitive) {
		if(! (connector instanceof SimpleNode)){
			var edit = new mxTerminalChange(graph.model, primitive, ends[0], true);
			graph.getModel().execute(edit);
			edit = new mxTerminalChange(graph.model, primitive, ends[1], false);
			graph.getModel().execute(edit);
		}else{
			primitive.source = ends[0];
			primitive.target = ends[1];
			clearPrimitiveCache();
		}
		
	});
}

// Sometimes we can not use setEnds if we want to update only source or target but not both of them
// Therefor we also have setSource and setTarget
function setSource(connector,source) {
	connector.source = source;
	clearPrimitiveCache();	
}

function setTarget(connector,target) {
	connector.target = target;
	clearPrimitiveCache();	
}

/*
Method: connected

Determines two primitives are connected by a link, flow, or transition. Alternatively if one of the primitives is a connector, checks if it connects directly to the other primitive.

Parameters:

primitive1 - A primitive.
primitive2 - A primitive to test whether it is connected to primitive1.

Return:

A boolean. True if the primitives are connected, false otherwise.
*/

function connected(primitive1, primitive2) {
	//~ dpopup("connected");
	//~ dpopup(primitive1+" "+primitive2);
	if (primitive1.isEdge) {
		if (primitive1.source !== null && primitive1.source.id === primitive2.id) {
			return true;
		} else if (primitive1.target !== null && primitive1.target.id === primitive2.id) {
			return true;
		}
	}
	if (primitive2.isEdge) {
		if (primitive2.source !== null && primitive2.source.id === primitive1.id) {
			return true;
		} else if (primitive2.target !== null && primitive2.target.id === primitive1.id) {
			return true;
		}
	}
	var items = findType(["Flow", "Link", "Transition"]);
	for (var i = 0; i < items.length; i++) {
		if (items[i].source !== null && items[i].target !== null) {
			if (items[i].source.id === primitive1.id && items[i].target.id === primitive2.id) {
				return true;
			}
			if (items[i].target.id === primitive1.id && items[i].source.id === primitive2.id) {
				return true;
			}
		}
	}
	return false;
}

/* 

Group: States

*/


/*
Method: getResidency

Gets the residency property of a state primitive.

Parameters:

state - The state for which the residency property is requested. May also be an array of states.

Return:

The residency property as a string.

See also:

<setResidency>
*/

function getResidency(state) {
	return map(state, function(state) {
		return state.getAttribute("Residency");
	});
}

/*
Method: setResidency

Sets the residency property of a state primitive.

Parameters:

state - The state primitive for which the residency property will be set. May also be an array of states.
residency - The new value for the residency property.

See also:

<getResidency>
*/

function setResidency(state, residency) {
	map(state, function(primitive) {
		setAttributeUndoable(primitive, "Residency", residency);
	});
}

/* 

Group: Transitions and Actions

*/

/*
Method: getTriggerType

Gets the trigger type of a transition or action.

Parameters:

primitive - The transition or action for which the trigger is requested. May also be an array of transitions or actions.

Return:

The trigger mode as a string. May be "Timeout", "Probability" or "Condition".

See also:

<setTriggerType>
*/

function getTriggerType(primitive) {
	return map(primitive, function(primitive) {
		return primitive.getAttribute("Trigger");
	});
}

/*
Method: setTriggerType

Sets the trigger type for a transition or action.

Parameters:

primitive - The transition or action for which the trigger will be set. May also be an array of transitions or actions.
trigger - The new trigger for the transition or action. May be "Timeout" "Probability" or "Condition".

See also:

<getTriggerType>
*/

function setTriggerType(primitive, trigger) {
	map(primitive, function(primitive) {
		setAttributeUndoable(primitive, "Trigger", trigger);
	});
}

/*
Method: getTriggerValue

Gets the trigger value equation of a transition or action.

Parameters:

primitive - The transition or action for which the trigger value equation is requested. May also be an array of transitions or actions.

Return:

The trigger value equation as a string.

See also:

<setTriggerValue>
*/

function getTriggerValue(primitive) {
	return map(primitive, function(primitive) {
		return primitive.getAttribute("Value");
	});
}

/*
Method: setTriggerValue

Sets the trigger value for a transition or action.

Parameters:

primitive - The transition or action for which the trigger will be set. May also be an array of transitions or actions.
value - The new trigger value equation as a string.

See also:

<getTriggerValue>
*/

function setTriggerValue(primitive, value) {
	map(primitive, function(primitive) {
		setAttributeUndoable(primitive, "Value", value);
	});
}

/*
Method: getTriggerRepeat

Gets the trigger Repeat property of a transition or action.

Parameters:

primitive - The transition or action for which the property is requested. May also be an array of transitions or actions.

Return:

The trigger Repeat property as a boolean.

See also:

<setTriggerRepeat>
*/

function getTriggerRepeat(primitive) {
	return map(primitive, function(primitive) {
		return isTrue(primitive.getAttribute("Repeat"));
	});
}

/*
Method: setTriggerRepeat

Sets the trigger Repeat property for a transition or action.

Parameters:

primitive - The transition or action for which the Repeat property will be set. May also be an array of transitions or actions.
repeat - A boolean determining whether to repeat the trigger

See also:

<getTriggerRepeat>
*/

function setTriggerRepeat(primitive, repeat) {
	map(primitive, function(primitive) {
		setAttributeUndoable(primitive, "Repeat", repeat);
	});
}

/*
Method: getTriggerRecalculate

Gets the trigger Recalculate property of a transition or action.

Parameters:

primitive - The transition or action for which the property is requested. May also be an array of transitions or actions.

Return:

The trigger Recalculate property as a boolean.

See also:

<setTriggerRecalculate>
*/

function getTriggerRecalculate(primitive) {
	return map(primitive, function(primitive) {
		return isTrue(primitive.getAttribute("Recalculate"));
	});
}

/*
Method: setTriggerRecalculate

Sets the trigger Recalculate property for a transition or action.

Parameters:

primitive - The transition or action for which the Recalculate property will be set. May also be an array of transitions or actions.
recalculate - A boolean determining whether to recalculate each time step

See also:

<getTriggerRecalculate>
*/

function setTriggerRecalculate(primitive, recalculate) {
	map(primitive, function(primitive) {
		setAttributeUndoable(primitive, "Recalculate", recalculate);
	});
}

/* 

Group: Converters

*/

/*
Method: getData

Gets the data of a converter.

Parameters:

converter - The converter for which the data is requested. May also be an array of Converters.

Return:

The Converter data as a string. A set of input/output pairs separated by semicolons. Example data form: "1,1;2,4;3,9"

See also:

<setData>
*/

function getData(converter) {
	return map(converter, function(primitive) {
		return primitive.getAttribute("Data");
	});
}

/*
Method: setData

Sets the data of a converter.

Parameters:

converter - The converter for which the data will be set. May also be an array of Converters in which case they will all be set to the same value.
data - The data for the converter as a string. A set of input/output pairs separated by semicolons. Example data form: "1,1;2,4;3,9"

See also:

<getData>
*/

function setData(converter, data) {
	map(converter, function(primitive) {
		setAttributeUndoable(primitive, "Data", data);
	});
}


/*
Method: getConverterInput

Gets the input source of a converter.

Parameters:

converter - The converter for which the input source is requested. May also be an array of Converters.

Return:

The input source. If the input source is a primitive, returns the primitive. Otherwise returns null (indicating the use of time as the input source).

See also:

<setInputSource>
*/

function getConverterInput(converter) {
	return map(converter, function(primitive) {
		var x = primitive.getAttribute("Source");
		if (x == "Time") {
			return null;
		} else {
			return findID(x);
		}
	});
}

/*
Method: setConverterInput

Sets the input source of a converter.

Parameters:

converter - The converter for which the input source will be set. May also be an array of Converters in which case they will all be set to the same value.
input - The input source. Pass either a primitive or use null to indicate the usage of time as the input.

See also:

<getConverterInput>
*/

function setConverterInput(converter, input) {
	map(converter, function(primitive) {
		if (input == null) {
			setAttributeUndoable(primitive, "Source", "Time");
		} else {
			setAttributeUndoable(primitive, "Source", input.id);
		}
	});
}


/*
Method: getInterpolation

Gets the interpolation mode of a converter.

Parameters:

converter - The converter for which the interpolation is requested. May also be an array of Converters.

Return:

The interpolation mode as a string. May be "Linear" or "Discrete".

See also:

<setInterpolation>
*/

function getInterpolation(converter) {
	return map(converter, function(primitive) {
		return primitive.getAttribute("Interpolation");
	});
}

/*
Method: setInterpolation

Sets the interpolation mode of a converter.

Parameters:

converter - The converter for which the interpolation will be set. May also be an array of Converters in which case they will all be set to the same value.
interpolation - The interpolation mode for the converter as a string. May either be "Linear" or "Discrete".

See also:

<getInterpolation>
*/

function setInterpolation(converter, interpolation) {
	map(converter, function(primitive) {
		setAttributeUndoable(primitive, "Interpolation", interpolation);
	});
}


/* 

Group: Buttons

*/

/*
Method: pressButton

Simulates a press of the passed button(s) firing its action. Can be useful for chaining together methods.

Parameter:

button - The button to be pressed. Can also be an array of buttons.

*/



function pressButton(button) {
	"use strict";

	graph.getModel().beginUpdate();

	map(button, function(primitive) {
		runAction(primitive.getAttribute("Function"), '<p>There was an error with the Action for the button <i>' + primitive.getAttribute("name") + '</i>.</p><br/>', primitive);

	});

	graph.getModel().endUpdate();

}

function runAction(code, errHeader, button) {
	try {
		eval("\"use strict;\"\n\n" + code);
	} catch (err) {
		errHeader = errHeader || '';
		Ext.Msg.show({
			title: getText('Action Error'),
			msg: errHeader + '<p><tt>' + err + "</tt></p><p><b>Code:</b></p><p><tt><pre>" + code + "</pre></tt></p>",
			buttons: Ext.Msg.OK,
			icon: Ext.Msg.ERROR
		});

		if (button) {
			setTimeout(function() {
				highlight(button);
			}, 100)
		}
	}
}



/*

Group: Agents

*/


/*
Method: getPopulationSize

Gets the size of the agent population.

Parameters:

agents - The agent population for which the size will be returned. May also be an array of agent populations.

Return:

The population size.

See also:

<setPopulationSize>
*/

function getPopulationSize(agents) {
	return map(agents, function(primitive) {
		return primitive.getAttribute("Size");
	});
}

/*
Method: setPopulationSize

Sets the size of the agent population.

Parameters:

agents - The agent population for which the size will be set. May also be an array of agent populations.
size - The new population size.

See also:

<getPopulationSize>
*/

function setPopulationSize(agents, size) {
	map(agents, function(primitive) {
		setAttributeUndoable(primitive, "Size", size);
	});
}

/*
Method: getAgentBase

Gets the base agent for the population.

Parameters:

agents - The agent population for which the base agent will be returned. May also be an array of agent populations.

Return:

The base agent folder.

See also:

<setAgentBase>
*/

function getAgentBase(agents) {
	return map(agents, function(primitive) {
		return findID(primitive.getAttribute("Agent"));
	});
}

/*
Method: setAgentBase

Sets the base agent for the population.

Parameters:

agents - The agent population for which the base agent will be set. May also be an array of agent populations.
folder - The base agent folder. The type for this folder should be set to "Agent".

See also:

<getAgentBase>
*/

function setAgentBase(agents, folder) {
	map(agents, function(primitive) {
		setAttributeUndoable(primitive, "Agent", folder.id);
	});
}


/*
Method: getGeometryWrap

Whether the geometry should wrap across edges.

Parameters:

agents - The agent population for which the geometry wrap property will be returned. May also be an array of agent populations.

Return:

The wrap property as a boolean

See also:

<setGeometryWrap>
*/

function getGeometryWrap(agents) {
	return map(agents, function(primitive) {
		return isTrue(primitive.getAttribute("GeoWrap"));
	});
}

/*
Method: setGeometryWrap

Sets the wrap property for the population area geometry.

Parameters:

agents - The agent population for which geometry wrap property will be set. May also be an array of agent populations.
wrap - The wrap property for the geometry.

See also:

<getGeometryWrap>
*/

function setGeometryWrap(agents, wrap) {
	map(agents, function(primitive) {
		setAttributeUndoable(primitive, "GeoWrap", wrap);
	});
}

/*
Method: getGeometryUnits

Gets the units for the population area geometry.

Parameters:

agents - The agent population for which the units will be returned. May also be an array of agent populations.

Return:

The units as a string

See also:

<setGeometryUnits>
*/

function getGeometryUnits(agents) {
	return map(agents, function(primitive) {
		return primitive.getAttribute("GeoDimUnits");
	});
}

/*
Method: setGeometryUnits

Sets the units for the population area geometry.

Parameters:

agents - The agent population for which geometry units will be set. May also be an array of agent populations.
units - The units as a string.

See also:

<getGeometryUnits>
*/

function setGeometryUnits(agents, units) {
	map(agents, function(primitive) {
		setAttributeUndoable(primitive, "GeoDimUnits", units);
	});
}

/*
Method: getGeometryWidth

Gets the width for the population area geometry.

Parameters:

agents - The agent population for which the width will be returned. May also be an array of agent populations.

Return:

The width of the geometry

See also:

<setGeometryWidth>
*/

function getGeometryWidth(agents) {
	return map(agents, function(primitive) {
		return primitive.getAttribute("GeoWidth");
	});
}

/*
Method: setGeometryWidth

Sets the width for the population area geometry.

Parameters:

agents - The agent population for which geometry width will be set. May also be an array of agent populations.
width - The desired width.

See also:

<getGeometryWidth>
*/

function setGeometryWidth(agents, width) {
	map(agents, function(primitive) {
		setAttributeUndoable(primitive, "GeoWidth", width);
	});
}

/*
Method: getGeometryHeight

Gets the height for the population area geometry.

Parameters:

agents - The agent population for which the height will be returned. May also be an array of agent populations.

Return:

The height of the geometry

See also:

<setGeometryHeight>
*/

function getGeometryHeight(agents) {
	return map(agents, function(primitive) {
		return primitive.getAttribute("GeoHeight");
	});
}

/*
Method: setGeometryHeight

Sets the height for the population area geometry.

Parameters:

agents - The agent population for which geometry height will be set. May also be an array of agent populations.
height - The desired height.

See also:

<getGeometryHeight>
*/

function setGeometryHeight(agents, height) {
	map(agents, function(primitive) {
		setAttributeUndoable(primitive, "GeoHeight", height);
	});
}

/*
Method: getAgentPlacement

The placement method for the agent population.

Parameters:

agents - The agent population for which the placement method will be returned. May also be an array of agent populations.

Return:

The placement method for the agent population. One of "Random", "Network", "Grid" or "Custom Function".

See also:

<setAgentPlacement>
*/

function getAgentPlacement(agents) {
	return map(agents, function(primitive) {
		return primitive.getAttribute("Placement");
	});
}

/*
Method: setAgentPlacement

Sets the placement method for the agent population.

Parameters:

agents - The agent population for which placement method will be set. May also be an array of agent populations.
method - The desired placemennt method. One of "Random", "Network", "Grid" or "Custom Function".

See also:

<getAgentPlacement>
*/

function setAgentPlacement(agents, method) {
	map(agents, function(primitive) {
		setAttributeUndoable(primitive, "Placement", method);
	});
}

/*
Method: getAgentPlacementFunction

A custom placement function for the agent population.

Parameters:

agents - The agent population for which the custom placement function will be returned. May also be an array of agent populations.

Return:

The custom placement function for the agent population.

See also:

<setAgentPlacementFunction>
*/

function getAgentPlacementFunction(agents) {
	return map(agents, function(primitive) {
		return primitive.getAttribute("PlacementFunction");
	});
}

/*
Method: setAgentPlacementFunction

Sets the custom placement function for the agent population. The placement method should be set to "Custom Function" in order for this function to be used.

Parameters:

agents - The agent population for which the custom placement function will be set. May also be an array of agent populations.
func - The desired custom placement function.

See also:

<getAgentPlacementFunction>
*/

function setAgentPlacementFunction(agents, func) {
	map(agents, function(primitive) {
		setAttributeUndoable(primitive, "PlacementFunction", func);
	});
}

/*
Method: getAgentNetwork

The network method for the agent population.

Parameters:

agents - The agent population for which the network method will be returned. May also be an array of agent populations.

Return:

The network method for the agent population. One of "None" or "Custom Function".

See also:

<setAgentNetwork>
*/

function getAgentNetwork(agents) {
	return map(agents, function(primitive) {
		return primitive.getAttribute("Network");
	});
}

/*
Method: setAgentNetwork

Sets the network method for the agent population.

Parameters:

agents - The agent population for which network method will be set. May also be an array of agent populations.
method - The desired placemennt method. One of "None" or "Custom Function".

See also:

<getAgentNetwork>
*/

function setAgentNetwork(agents, method) {
	map(agents, function(primitive) {
		setAttributeUndoable(primitive, "Network", method);
	});
}

/*
Method: getAgentNetworkFunction

A custom network function for the agent population.

Parameters:

agents - The agent population for which the custom network function will be returned. May also be an array of agent populations.

Return:

The custom network function for the agent population.

See also:

<setAgentNetworkFunction>
*/

function getAgentNetworkFunction(agents) {
	return map(agents, function(primitive) {
		return primitive.getAttribute("NetworkFunction");
	});
}

/*
Method: setAgentNetworkFunction

Sets the custom network function for the agent population. The network method should be set to "Custom Function" in order for this function to be used.

Parameters:

agents - The agent population for which the custom network function will be set. May also be an array of agent populations.
func - The desired custom network function.

See also:

<getAgentNetworkFunction>
*/

function setAgentNetworkFunction(agents, func) {
	map(agents, function(primitive) {
		setAttributeUndoable(primitive, "NetworkFunction", func);
	});
}

/*

Group: Folders

*/

/*
Method: collapseFolder

Collapses a folder or an array of folders.

Parameter:

folder - Either a single folder primitive or an array of folder primitives.

See also:

<expandFolder>, <getCollapsed>

*/

function collapseFolder(folder) {

	map(folder, function(folder) {
		graph.foldCells(true, false, [folder]);
	});

}

/*
Method: expandFolder

Expands a folder or an array of folders.

Parameter:

folder - Either a single folder primitive or an array of folder primitives.

See also:

<collapseFolder>, <getCollapsed>
*/

function expandFolder(folder) {
	map(folder, function(folder) {
		graph.foldCells(false, false, [folder]);
	});
}

/*
Method: getCollapsed

Returns whether or not a given folder is collapsed.

Parameter:

folder - The folder for which the collapsed state is requested.

Return:

True is the folder is collapsed, false if it is expanded.

See also:

<collapseFolder>, <expandFolder>
*/

function getCollapsed(folder) {
	return map(folder, function(f) {
		return f.isCollapsed();
	});
}


/*
Method: getParent

Gets the parent folder for a primitive.

Parameters:

primitive - The primitive for which the parent folder will be returned. May also be an array of primitives.

Return:

The parent folder. Returns null if the primitive is not in a folder.

See also:

<setParent>
*/

function getParent(primitive) {
	var defaultID = "1"; //graph.getDefaultParent().id;
	return map(primitive, function(primitive) {
		
		var p = primitive.parentNode || primitive.parent;
		
		if ((p.value && p.value.nodeName =="root") || p.nodeName=="root" || p.id == defaultID) {
			return null;
		} else {
			return p;
		}
	});
}

/*
Method: setParent

Sets the parent folder for a primitive.

Parameters:

primitive - The primitive for which the parent folder will be set. May also be an array of primitives in which case they will all be set to the same parent.
parent - The parent folder primitive. Use null to remove the primitive from all folders.

See also:

<getParent>
*/

function setParent(primitive, parent, perserveLoc) {
	if(graph instanceof SimpleNode){
		if(parent == null){
			parent = graph.children[0].children[0];
		}
	}else{
		var p = (parent == null ? graph.getDefaultParent() : parent);
	}
	map(primitive, function(primitive) {

		if(graph instanceof SimpleNode){
			primitive.parent.children.splice(primitive.parent.children.indexOf(primitive),1);
			primitive.parent = parent;
			primitive.parentNode = parent;
			if(!parent.children){
				parent.children = [];
			}
			parent.children.push(primitive);
		}else{
			var loc = getPosition(primitive);
			var edit = new mxChildChange(graph.getModel(), p, primitive);
			graph.getModel().execute(edit);
			if (!perserveLoc) {
					setPosition(primitive, loc);
			}
		}
	});
}

/*
Method: getFrozen

Gets the frozen state for a primitive.

Parameters:

primitive - The primitive for which the frozen will be returned. May also be an array of primitives.

Return:

The frozen state for the primitive.

See also:

<setFrozen>
*/

function getFrozen(primitive) {
	return map(primitive, function(primitive) {
		
		return isTrue(primitive.getAttribute("Frozen"));
	});
}

/*
Method: setFrozen

Sets the frozen state for a primitive.

Parameters:

primitive - The primitive for which the frozen state will be set. May also be an array of primitives in which case they will all be set to the same frozen state.
frozen - The new frozen state for the primitive.

See also:

<getFrozen>
*/

function setFrozen(primitive, frozen) {
	
	map(primitive, function(primitive) {
		setAttributeUndoable(primitive, "Frozen", frozen);
	});
}


/*
Method: getChildren

Returns the children of a folder.

Parameters:

folder - The folder for which the children will be returned.
recursive - Optional. Whether the children of inner folders will be returned. Defaults to true.

Return:

The children primitves of the folder.

*/

function getChildren(folder, recursive) {
	if (isUndefined(recursive)) {
		recursive = true;
	}
	
	if(!folder.children){
		return [];
	}

	if (recursive) {
		return flatten(map(folder.children, function(x) {
			if (x.value.nodeName == "Folder") {
				return x.children.concat([x]);
			} else {
				return x;
			}
		}));
	} else {
		return folder.children;
	}
}

/*
Method: getFolderType

Gets the type of a folder.

Parameters:

folder - The folder for which the type is requested. May also be an array of folders.

Return:

The type mode as a string. May be "None" or "Agent".

See also:

<setFolderType>
*/

function getFolderType(folder) {
	return map(folder, function(primitive) {
		return primitive.getAttribute("Type");
	});
}

/*
Method: setFolderType

Sets the type of a folder.

Parameters:

folder - The folder for which the type will be set. May also be an array of folders.
type - The type mode as a string. May be "None" or "Agent".

See also:

<getFolderType>
*/

function setFolderType(folder, type) {
	map(folder, function(primitive) {
		setAttributeUndoable(primitive, "Type", type);
	});
}

/*
Method: getFolderAgentParent

Gets the agent parent of a folder.

Parameters:

folder - The folder for which the agent parent is requested. May also be an array of folders.

Return:

The agent parent as a string.

See also:

<setFolderAgentParent>
*/

function getFolderAgentParent(folder) {
	return map(folder, function(primitive) {
		return primitive.getAttribute("AgentBase");
	});
}

/*
Method: setFolderAgentParent

Sets the agent parent of a folder.

Parameters:

folder - The folder for which the type will be set. May also be an array of folders.
agentParent - The agent parent as a string.

See also:

<getFolderAgentParent>
*/

function setFolderAgentParent(folder, agentParent) {
	map(folder, function(primitive) {
		setAttributeUndoable(primitive, "AgentBase", agentParent);
	});
}


/*
Method: getFolderSolver

Gets the solver configuation for a folder. The configuration is an object with the properties:

enabled - true is the folder should have its own solver
algorithm - the solution algorithm. Current allowed values are "RK1" for Euler's method and "RK4" for a fourth order Runge-Kutta method
timeStep - the time step for the folder's solver

Parameters:

folder - The folder for which the solver is requested. May also be an array of folders.

Return:

The solver object

See also:

<setFolderSolver>
*/

function getFolderSolver(folder) {
	return map(folder, function(primitive) {
		return JSON.parse(primitive.getAttribute("Solver"));
	});
}

/*
Method: setFolderSolver

Sets the solver object for a folder

Parameters:

folder - The folder for which the solver will be set. May also be an array of folders.
solver - The solver object

See also:

<getFolderSolver>
*/

function setFolderSolver(folder, solver) {
	map(folder, function(primitive) {
		setAttributeUndoable(primitive, "Solver", JSON.stringify(solver));
	});
}


/*

Group: Utility Functions

*/


/*
Method: excludeType

Removes a specific type of primitive from an array of primitives.

Parameter:

array - An array of primitives.
type - The type of primitives to remove (e.g. "Flow" or "Stock"). May also be an array of types. 

Return:

A duplicate of the input array without any primitives of the specified type.

*/


function excludeType(array, type) {
	var removeSingle = function(array, type){
		if (array instanceof Array) {
			var res = [];
			for (var i = 0; i < array.length; i++) {
				if (array[i].value.nodeName != type) {
					res.push(array[i]);
				}
			}
			return res;
		} else {
			if (array == null) {
				return array;
			}
			if (array.value.nodeName == type) {
				return null
			}
			return array;
		}
	}
	
	if(Array.isArray(type)){
		for(var i = 0; i < type.length; i++){
			array = removeSingle(array, type[i]);
		}
		return array;
	}else{
		return removeSingle(array, type);
	}
	
}

/*
Method: primitiveIndex

Locates the index of a specific primitive in an array of primitives.

Parameter:

array - An array of primitives.
primitive - The specific primitive to find.

Return:

The index of the primitive in the array. Returns -1 if the primitive is not found.

*/


function primitiveIndex(array, primitive) {
	for (var i = 0; i < array.length; i++) {
		if (array[i].id == primitive.id) {
			return i;
		}
	}
	return -1;
}

/*
Method: uniquePrimitives

Returns the passed array with duplicated primitives removed

Parameter:

primitives - An array of primitives.

Return:

An array of primitives with any duplicated elements removed.

*/


function uniquePrimitives(primitives) {
	var res = [];
	for (var i = 0; i < primitives.length; i++) {
		var found = false;
		for (var r = 0; r < res.length; r++) {
			if (res[r].id == primitives[i].id) {
				found = true;
				break;
			}
		}
		if (!found) {
			res.push(primitives[i]);
		}
	}
	return res;
}

/*
Method: setGlobal

Sets the value of a global variable. This can allow communication between buttons or the storing of some state.

Parameter:

name - The name of the global variable.
value - The value of the global variable.

See also:

<getGlobal>


*/

var globalVarBank = {};

function setGlobal(name, value) {
	globalVarBank["_" + name] = value;
}

/*
Method: getGlobal

Gets the value of a global variable. This can allow communication between buttons or the storing of some state.

Parameter:

name - The name of the global variable for which to get the value.

Return:

The value of the global variable specified by name.

Example:

> setGlobal("Example Var 1", 42);
> setGlobal("Example Var 2", "test");
> var z = getGlobal("Example Var 1"); // z is now set to 42
> var y = getGlobal("Example Var 2"); // y is now set to "test"

See also:

<setGlobal>

*/

function getGlobal(name) {
	return globalVarBank["_" + name];
}



/*

Group: Insight Maker Interface

*/

/*
Method: topBarShown

Determines whether or not the Insight Maker top toolbar (which contains the Run Simulation button and other tools) is currently shown.

Return:

True if the top toolbar is shown, false otherwise.

See also:

<toggleTopBar>

*/

function topBarShown() {
	var toolbar = ribbonPanel.getDockedItems()[0];
	return toolbar.isVisible();
}

/*
Method: toggleTopBar

Toggles the visibility of the top toolbar. If it is currently shown, it is hidden. If it is currently hidden, it is shown.

See also:

<topBarShown>

*/

function toggleTopBar() {
	var toolbar = ribbonPanel.getDockedItems()[0];
	if (!toolbar.isVisible()) {
		toolbar.show();
		try {
			Ext.get("toolbarToggle").update("&uarr;");
			Ext.get("toplinks-holder").removeCls("collapsed");
		} catch (err) {}
	} else {
		toolbar.hide();
		try {
			Ext.get("toolbarToggle").update("&darr;");
			Ext.get("toplinks-holder").addCls("collapsed");
		} catch (err) {}
	}
}


/*
Method: sideBarShown

Determines whether or not the Insight Maker side panel (which contains parameter sliders and information about the selected primitive) is currently shown.

Return:

True if the side panel is shown, false otherwise.

See also:

<toggleSideBar>

*/

function sideBarShown() {
	return (!configPanel.collapsed);
}

/*
Method: toggleSideBar

Toggles the visibility of the side panel. If it is currently shown, it is hidden. If it is currently hidden, it is shown.

See also:

<sideBarShown>

*/

function toggleSideBar() {
	if (sideBarShown()) {
		configPanel.collapse(Ext.Component.DIRECTION_RIGHT, false);
	} else {
		configPanel.expand(false);
	}
}

/*
Method: updateSideBar

Refreshes the values in the side panel to reflect any changes in the model.

*/

function updateSideBar() {
	selectionChanged(true);
}

"use strict";
/*

Copyright 2010-2015 Scott Fortmann-Roe. All rights reserved.

This file may distributed and/or modified under the
terms of the Insight Maker Public License (https://InsightMaker.com/impl).

*/

/*

Lightweight shim for mxGraph when not using visualization components. Supports loading saved models and carrying out basic edit operations.

*/

// Override this in UI
var defaultAttributeChangeHandler=function(primitive,attributeName,value) {};
var defaultPositionChangeHandler=function(primitive) {};
var defaultPrimitiveCreatedHandler = function(primitive) {};
var defaultPrimitiveBeforeDestroyHandler = function(primitive) {};

class SimpleNode {
	constructor() {
		this.attributeSubscribers=[];
		this.positionSubscribers=[];
	}
	getAttribute(x) {
		return this.value.getAttribute(x);
	}
	setAttribute(x, value) {
		this.value.setAttribute(x,value);
		defaultAttributeChangeHandler(this,x,value);
		for(var i in this.attributeSubscribers) {
			this.attributeSubscribers[i](x,value);
		}
	}
	positionUpdate() {
		defaultPositionChangeHandler(this);
		for(var i in this.positionSubscribers) {
			this.positionSubscribers[i]();
		}
	}
	subscribeAttribute(handler) {
		this.attributeSubscribers.push(handler);
	}
	subscribePosition(handler) {
		this.positionSubscribers.push(handler);
	}
}



function loadXML(modelString) {
	var xmldocument;
	var oParser = new DOMParser();
	xmldocument = oParser.parseFromString(modelString, "text/xml");
	graph = mxGraphToJson(xmldocument);
	var string = (new XMLSerializer()).serializeToString(xmldocument);
	graph.children[0].value = {nodeName: 'root', id: 1};
	graph.children[0].id = 1;
	
	
	clearPrimitiveCache();
	var connectors = findType(["Flow", "Link", "Transition"]);
	var items = primitives();
	connectors.forEach(function(x){
		x.source = null;
		x.target = null;
		items.forEach(function(i){
			if(x.children[0].getAttribute("source") && x.children[0].getAttribute("source") == i.id){
				x.source = i;
			}
			if(x.children[0].getAttribute("target") && x.children[0].getAttribute("target") == i.id){
				x.target = i;
			}
		})
	});
	
	clearPrimitiveCache();
	
	function cleanCell(x){
		if(x.children){
			var cells = x.children.filter(function(c){
				return c.value.nodeName == "mxCell";
			});
		
			if(cells.length > 0){
				if(cells[0].getAttribute("parent")){
					setParent(x, findID(cells[0].getAttribute("parent")));
				}
			}
		
			x.children = x.children.filter(function(c){
				return c.value.nodeName != "mxCell";
			});
		
			for(var i = x.children.length - 1; i >= 0; i--){
				cleanCell(x.children[i]);
			};
		}
		
	}
	cleanCell(graph);
	
	clearPrimitiveCache();
	
	return graph;
}

function simpleCloneNode2(node, parent){
	var obj = new SimpleNode();
	//http://stackoverflow.com/questions/122102/what-is-the-most-efficient-way-to-deep-clone-an-object-in-javascript
	obj.value = node.value.cloneNode(true);
	obj.parent = parent;
	obj.parentNode= parent;

	// Generate new id for object. This must be done after attributes are set to not override it
	var currId = [1].concat(primitives().map(function(x){return x.id}).filter(function(x){return x}));
	var newId = Math.max.apply(null, currId) + 1;
	obj.id=newId;
	obj.setAttribute("id",newId);
	
	
	var parent = graph.children[0].children[0];
	parent.children.push(obj);	
	
	return obj;
}

function simpleCloneNode(node, parent){
	var obj = new SimpleNode();
	obj.value = node.cloneNode(true);
	obj.parent = parent;
	obj.parentNode= parent;
	

	var currId = [1].concat(primitives().map(function(x){return x.id}).filter(function(x){return x}));
	
	obj.setAttribute("id", Math.max.apply(null, currId) + 1);
	
	if (node.attributes.length > 0) {
		
		for (var j = 0; j < node.attributes.length; j++) {
			var attribute = node.attributes.item(j);
			obj.setAttribute(attribute.nodeName,attribute.nodeValue);
		}
		
	}
	obj.id = obj.getAttribute("id");
	
	
	return obj;
}

function mxGraphToJson(xml, parent) {
	// Create the return object
	var obj = new SimpleNode();
	obj.value = xml;
	obj["@nodeName"]=xml.nodeName;
	obj.parent = parent;
	obj.parentNode = parent;

	if (xml.nodeType == 1) { // element
		// do attributes
		if (xml.attributes.length > 0) {
			
			for (var j = 0; j < xml.attributes.length; j++) {
				var attribute = xml.attributes.item(j);
				
				obj.setAttribute(attribute.nodeName,attribute.nodeValue);
			}
			obj.id = obj.getAttribute("id");
			
		}
	} else if (xml.nodeType == 3) { // text
		return null;
	}

	if (xml.hasChildNodes()) {
		obj.children = [];
		for(var i = 0; i < xml.childNodes.length; i++) {
			var item = xml.childNodes.item(i);
			var nodeName = item.nodeName;
			var x = mxGraphToJson(item, obj);
			if(x){
				obj.children.push(x);
			}
		}
	}
	return obj;
};

function setAttributeUndoable(primitive, name, value){
	if(primitive instanceof SimpleNode){
		primitive.setAttribute(name, value);
		clearPrimitiveCache();
	}else{
		var edit = new mxCellAttributeChange(primitive, name, value);
		graph.getModel().execute(edit);
	}
}


{var CSS_PROP_BIT_QUANTITY=1,CSS_PROP_BIT_HASH_VALUE=2,CSS_PROP_BIT_NEGATIVE_QUANTITY=4,CSS_PROP_BIT_QSTRING_CONTENT=8,CSS_PROP_BIT_QSTRING_URL=16,CSS_PROP_BIT_HISTORY_INSENSITIVE=32,CSS_PROP_BIT_Z_INDEX=64,CSS_PROP_BIT_ALLOWED_IN_LINK=128,cssSchema=(function(){var
s=['rgb(?:\\(\\s*(?:\\d+|0|\\d+(?:\\.\\d+)?%)\\s*,\\s*(?:\\d+|0|\\d+(?:\\.\\d+)?%)\\s*,\\s*(?:\\d+|0|\\d+(?:\\.\\d+)?%)|a\\(\\s*(?:\\d+|0|\\d+(?:\\.\\d+)?%)\\s*,\\s*(?:\\d+|0|\\d+(?:\\.\\d+)?%)\\s*,\\s*(?:\\d+|0|\\d+(?:\\.\\d+)?%)\\s*,\\s*(?:\\d+|0(?:\\.\\d+)?|\\.\\d+|1(?:\\.0+)?|0|\\d+(?:\\.\\d+)?%)) *\\)'],c=[/^ *$/i,RegExp('^ *(?:\\s*'+s[0]+'|(?:\\s*'+s[0]+')?)+ *$','i'),RegExp('^ *\\s*'+s[0]+' *$','i'),RegExp('^ *\\s*'+s[0]+'\\s*'+s[0]+' *$','i')],L=[['aliceblue','antiquewhite','aqua','aquamarine','azure','beige','bisque','black','blanchedalmond','blue','blueviolet','brown','burlywood','cadetblue','chartreuse','chocolate','coral','cornflowerblue','cornsilk','crimson','cyan','darkblue','darkcyan','darkgoldenrod','darkgray','darkgreen','darkkhaki','darkmagenta','darkolivegreen','darkorange','darkorchid','darkred','darksalmon','darkseagreen','darkslateblue','darkslategray','darkturquoise','darkviolet','deeppink','deepskyblue','dimgray','dodgerblue','firebrick','floralwhite','forestgreen','fuchsia','gainsboro','ghostwhite','gold','goldenrod','gray','green','greenyellow','honeydew','hotpink','indianred','indigo','ivory','khaki','lavender','lavenderblush','lawngreen','lemonchiffon','lightblue','lightcoral','lightcyan','lightgoldenrodyellow','lightgreen','lightgrey','lightpink','lightsalmon','lightseagreen','lightskyblue','lightslategray','lightsteelblue','lightyellow','lime','limegreen','linen','magenta','maroon','mediumaquamarine','mediumblue','mediumorchid','mediumpurple','mediumseagreen','mediumslateblue','mediumspringgreen','mediumturquoise','mediumvioletred','midnightblue','mintcream','mistyrose','moccasin','navajowhite','navy','oldlace','olive','olivedrab','orange','orangered','orchid','palegoldenrod','palegreen','paleturquoise','palevioletred','papayawhip','peachpuff','peru','pink','plum','powderblue','purple','red','rosybrown','royalblue','saddlebrown','salmon','sandybrown','seagreen','seashell','sienna','silver','skyblue','slateblue','slategray','snow','springgreen','steelblue','tan','teal','thistle','tomato','turquoise','violet','wheat','white','whitesmoke','yellow','yellowgreen'],['all-scroll','col-resize','crosshair','default','e-resize','hand','help','move','n-resize','ne-resize','no-drop','not-allowed','nw-resize','pointer','progress','row-resize','s-resize','se-resize','sw-resize','text','vertical-text','w-resize','wait'],['-moz-inline-box','-moz-inline-stack','block','inline','inline-block','inline-table','list-item','run-in','table','table-caption','table-cell','table-column','table-column-group','table-footer-group','table-header-group','table-row','table-row-group'],['armenian','circle','decimal','decimal-leading-zero','disc','georgian','lower-alpha','lower-greek','lower-latin','lower-roman','square','upper-alpha','upper-latin','upper-roman'],['100','200','300','400','500','600','700','800','900','bold','bolder','lighter'],['condensed','expanded','extra-condensed','extra-expanded','narrower','semi-condensed','semi-expanded','ultra-condensed','ultra-expanded','wider'],['behind','center-left','center-right','far-left','far-right','left-side','leftwards','right-side','rightwards'],['large','larger','small','smaller','x-large','x-small','xx-large','xx-small'],['-moz-pre-wrap','-o-pre-wrap','-pre-wrap','nowrap','pre','pre-line','pre-wrap'],['dashed','dotted','double','groove','outset','ridge','solid'],['baseline','middle','sub','super','text-bottom','text-top'],['caption','icon','menu','message-box','small-caption','status-bar'],['fast','faster','slow','slower','x-fast','x-slow'],['above','below','higher','level','lower'],['border-box','contain','content-box','cover','padding-box'],['cursive','fantasy','monospace','sans-serif','serif'],['loud','silent','soft','x-loud','x-soft'],['no-repeat','repeat-x','repeat-y','round','space'],['blink','line-through','overline','underline'],['high','low','x-high','x-low'],['absolute','relative','static'],['capitalize','lowercase','uppercase'],['child','female','male'],['bidi-override','embed'],['bottom','top'],['clip','ellipsis'],['continuous','digits'],['hide','show'],['inside','outside'],['italic','oblique'],['left','right'],['ltr','rtl'],['no-content','no-display'],['suppress','unrestricted'],['thick','thin'],[','],['/'],['always'],['auto'],['avoid'],['both'],['break-word'],['center'],['code'],['collapse'],['fixed'],['hidden'],['inherit'],['inset'],['invert'],['justify'],['local'],['medium'],['mix'],['none'],['normal'],['once'],['repeat'],['scroll'],['separate'],['small-caps'],['spell-out'],['transparent'],['visible']];return{'-moz-border-radius':{'cssExtra':c[0],'cssPropBits':5,'cssLitGroup':[L[36]]},'-moz-border-radius-bottomleft':{'cssExtra':c[0],'cssPropBits':5},'-moz-border-radius-bottomright':{'cssExtra':c[0],'cssPropBits':5},'-moz-border-radius-topleft':{'cssExtra':c[0],'cssPropBits':5},'-moz-border-radius-topright':{'cssExtra':c[0],'cssPropBits':5},'-moz-box-shadow':{'cssExtra':c[1],'cssAlternates':['boxShadow'],'cssPropBits':7,'cssLitGroup':[L[0],L[35],L[48],L[54]]},'-moz-opacity':{'cssPropBits':1,'cssLitGroup':[L[47]]},'-moz-outline':{'cssExtra':c[3],'cssPropBits':7,'cssLitGroup':[L[0],L[9],L[34],L[46],L[47],L[48],L[49],L[52],L[54]]},'-moz-outline-color':{'cssExtra':c[2],'cssPropBits':2,'cssLitGroup':[L[0],L[47],L[49]]},'-moz-outline-style':{'cssPropBits':0,'cssLitGroup':[L[9],L[46],L[47],L[48],L[54]]},'-moz-outline-width':{'cssPropBits':5,'cssLitGroup':[L[34],L[47],L[52]]},'-o-text-overflow':{'cssPropBits':0,'cssLitGroup':[L[25]]},'-webkit-border-bottom-left-radius':{'cssExtra':c[0],'cssPropBits':5},'-webkit-border-bottom-right-radius':{'cssExtra':c[0],'cssPropBits':5},'-webkit-border-radius':{'cssExtra':c[0],'cssPropBits':5,'cssLitGroup':[L[36]]},'-webkit-border-radius-bottom-left':{'cssExtra':c[0],'cssPropBits':5},'-webkit-border-radius-bottom-right':{'cssExtra':c[0],'cssPropBits':5},'-webkit-border-radius-top-left':{'cssExtra':c[0],'cssPropBits':5},'-webkit-border-radius-top-right':{'cssExtra':c[0],'cssPropBits':5},'-webkit-border-top-left-radius':{'cssExtra':c[0],'cssPropBits':5},'-webkit-border-top-right-radius':{'cssExtra':c[0],'cssPropBits':5},'-webkit-box-shadow':{'cssExtra':c[1],'cssAlternates':['boxShadow'],'cssPropBits':7,'cssLitGroup':[L[0],L[35],L[48],L[54]]},'azimuth':{'cssPropBits':5,'cssLitGroup':[L[6],L[30],L[42],L[47]]},'background':{'cssExtra':RegExp('^ *(?:\\s*'+s[0]+'){0,2} *$','i'),'cssPropBits':23,'cssLitGroup':[L[0],L[14],L[17],L[24],L[30],L[35],L[36],L[38],L[42],L[45],L[47],L[51],L[54],L[57],L[58],L[62]]},'background-attachment':{'cssExtra':c[0],'cssPropBits':0,'cssLitGroup':[L[35],L[45],L[51],L[58]]},'background-color':{'cssExtra':c[2],'cssPropBits':130,'cssLitGroup':[L[0],L[47],L[62]]},'background-image':{'cssExtra':c[0],'cssPropBits':16,'cssLitGroup':[L[35],L[54]]},'background-position':{'cssExtra':c[0],'cssPropBits':5,'cssLitGroup':[L[24],L[30],L[35],L[42]]},'background-repeat':{'cssExtra':c[0],'cssPropBits':0,'cssLitGroup':[L[17],L[35],L[57]]},'border':{'cssExtra':c[3],'cssPropBits':7,'cssLitGroup':[L[0],L[9],L[34],L[46],L[47],L[48],L[52],L[54],L[62]]},'border-bottom':{'cssExtra':c[3],'cssPropBits':7,'cssLitGroup':[L[0],L[9],L[34],L[46],L[47],L[48],L[52],L[54],L[62]]},'border-bottom-color':{'cssExtra':c[2],'cssPropBits':2,'cssLitGroup':[L[0],L[47],L[62]]},'border-bottom-left-radius':{'cssExtra':c[0],'cssPropBits':5},'border-bottom-right-radius':{'cssExtra':c[0],'cssPropBits':5},'border-bottom-style':{'cssPropBits':0,'cssLitGroup':[L[9],L[46],L[47],L[48],L[54]]},'border-bottom-width':{'cssPropBits':5,'cssLitGroup':[L[34],L[47],L[52]]},'border-collapse':{'cssPropBits':0,'cssLitGroup':[L[44],L[47],L[59]]},'border-color':{'cssExtra':RegExp('^ *(?:\\s*'+s[0]+'){1,4} *$','i'),'cssPropBits':2,'cssLitGroup':[L[0],L[47],L[62]]},'border-left':{'cssExtra':c[3],'cssPropBits':7,'cssLitGroup':[L[0],L[9],L[34],L[46],L[47],L[48],L[52],L[54],L[62]]},'border-left-color':{'cssExtra':c[2],'cssPropBits':2,'cssLitGroup':[L[0],L[47],L[62]]},'border-left-style':{'cssPropBits':0,'cssLitGroup':[L[9],L[46],L[47],L[48],L[54]]},'border-left-width':{'cssPropBits':5,'cssLitGroup':[L[34],L[47],L[52]]},'border-radius':{'cssExtra':c[0],'cssPropBits':5,'cssLitGroup':[L[36]]},'border-right':{'cssExtra':c[3],'cssPropBits':7,'cssLitGroup':[L[0],L[9],L[34],L[46],L[47],L[48],L[52],L[54],L[62]]},'border-right-color':{'cssExtra':c[2],'cssPropBits':2,'cssLitGroup':[L[0],L[47],L[62]]},'border-right-style':{'cssPropBits':0,'cssLitGroup':[L[9],L[46],L[47],L[48],L[54]]},'border-right-width':{'cssPropBits':5,'cssLitGroup':[L[34],L[47],L[52]]},'border-spacing':{'cssExtra':c[0],'cssPropBits':5,'cssLitGroup':[L[47]]},'border-style':{'cssPropBits':0,'cssLitGroup':[L[9],L[46],L[47],L[48],L[54]]},'border-top':{'cssExtra':c[3],'cssPropBits':7,'cssLitGroup':[L[0],L[9],L[34],L[46],L[47],L[48],L[52],L[54],L[62]]},'border-top-color':{'cssExtra':c[2],'cssPropBits':2,'cssLitGroup':[L[0],L[47],L[62]]},'border-top-left-radius':{'cssExtra':c[0],'cssPropBits':5},'border-top-right-radius':{'cssExtra':c[0],'cssPropBits':5},'border-top-style':{'cssPropBits':0,'cssLitGroup':[L[9],L[46],L[47],L[48],L[54]]},'border-top-width':{'cssPropBits':5,'cssLitGroup':[L[34],L[47],L[52]]},'border-width':{'cssPropBits':5,'cssLitGroup':[L[34],L[47],L[52]]},'bottom':{'cssPropBits':5,'cssLitGroup':[L[38],L[47]]},'box-shadow':{'cssExtra':c[1],'cssPropBits':7,'cssLitGroup':[L[0],L[35],L[48],L[54]]},'caption-side':{'cssPropBits':0,'cssLitGroup':[L[24],L[47]]},'clear':{'cssPropBits':0,'cssLitGroup':[L[30],L[40],L[47],L[54]]},'clip':{'cssExtra':/^ *\s*rect\(\s*(?:0|[+\-]?\d+(?:\.\d+)?(?:[cem]m|ex|in|p[ctx])|auto)\s*,\s*(?:0|[+\-]?\d+(?:\.\d+)?(?:[cem]m|ex|in|p[ctx])|auto)\s*,\s*(?:0|[+\-]?\d+(?:\.\d+)?(?:[cem]m|ex|in|p[ctx])|auto)\s*,\s*(?:0|[+\-]?\d+(?:\.\d+)?(?:[cem]m|ex|in|p[ctx])|auto) *\) *$/i,'cssPropBits':0,'cssLitGroup':[L[38],L[47]]},'color':{'cssExtra':c[2],'cssPropBits':130,'cssLitGroup':[L[0],L[47]]},'content':{'cssPropBits':0},'counter-increment':{'cssExtra':c[0],'cssPropBits':5,'cssLitGroup':[L[47],L[54]]},'counter-reset':{'cssExtra':c[0],'cssPropBits':5,'cssLitGroup':[L[47],L[54]]},'cue':{'cssPropBits':16,'cssLitGroup':[L[47],L[54]]},'cue-after':{'cssPropBits':16,'cssLitGroup':[L[47],L[54]]},'cue-before':{'cssPropBits':16,'cssLitGroup':[L[47],L[54]]},'cursor':{'cssExtra':c[0],'cssPropBits':144,'cssLitGroup':[L[1],L[35],L[38],L[47]]},'direction':{'cssPropBits':0,'cssLitGroup':[L[31],L[47]]},'display':{'cssPropBits':32,'cssLitGroup':[L[2],L[47],L[54]]},'elevation':{'cssPropBits':5,'cssLitGroup':[L[13],L[47]]},'empty-cells':{'cssPropBits':0,'cssLitGroup':[L[27],L[47]]},'filter':{'cssExtra':/^ *(?:\s*alpha\(\s*opacity\s*=\s*(?:0|\d+(?:\.\d+)?%|[+\-]?\d+(?:\.\d+)?) *\))+ *$/i,'cssPropBits':32},'float':{'cssAlternates':['cssFloat','styleFloat'],'cssPropBits':32,'cssLitGroup':[L[30],L[47],L[54]]},'font':{'cssExtra':c[0],'cssPropBits':9,'cssLitGroup':[L[4],L[7],L[11],L[15],L[29],L[35],L[36],L[47],L[52],L[55],L[60]]},'font-family':{'cssExtra':c[0],'cssPropBits':8,'cssLitGroup':[L[15],L[35],L[47]]},'font-size':{'cssPropBits':1,'cssLitGroup':[L[7],L[47],L[52]]},'font-stretch':{'cssPropBits':0,'cssLitGroup':[L[5],L[55]]},'font-style':{'cssPropBits':0,'cssLitGroup':[L[29],L[47],L[55]]},'font-variant':{'cssPropBits':0,'cssLitGroup':[L[47],L[55],L[60]]},'font-weight':{'cssPropBits':0,'cssLitGroup':[L[4],L[47],L[55]]},'height':{'cssPropBits':37,'cssLitGroup':[L[38],L[47]]},'left':{'cssPropBits':37,'cssLitGroup':[L[38],L[47]]},'letter-spacing':{'cssPropBits':5,'cssLitGroup':[L[47],L[55]]},'line-height':{'cssPropBits':1,'cssLitGroup':[L[47],L[55]]},'list-style':{'cssPropBits':16,'cssLitGroup':[L[3],L[28],L[47],L[54]]},'list-style-image':{'cssPropBits':16,'cssLitGroup':[L[47],L[54]]},'list-style-position':{'cssPropBits':0,'cssLitGroup':[L[28],L[47]]},'list-style-type':{'cssPropBits':0,'cssLitGroup':[L[3],L[47],L[54]]},'margin':{'cssPropBits':5,'cssLitGroup':[L[38],L[47]]},'margin-bottom':{'cssPropBits':5,'cssLitGroup':[L[38],L[47]]},'margin-left':{'cssPropBits':5,'cssLitGroup':[L[38],L[47]]},'margin-right':{'cssPropBits':5,'cssLitGroup':[L[38],L[47]]},'margin-top':{'cssPropBits':5,'cssLitGroup':[L[38],L[47]]},'max-height':{'cssPropBits':1,'cssLitGroup':[L[38],L[47],L[54]]},'max-width':{'cssPropBits':1,'cssLitGroup':[L[38],L[47],L[54]]},'min-height':{'cssPropBits':1,'cssLitGroup':[L[38],L[47]]},'min-width':{'cssPropBits':1,'cssLitGroup':[L[38],L[47]]},'opacity':{'cssPropBits':33,'cssLitGroup':[L[47]]},'outline':{'cssExtra':c[3],'cssPropBits':7,'cssLitGroup':[L[0],L[9],L[34],L[46],L[47],L[48],L[49],L[52],L[54]]},'outline-color':{'cssExtra':c[2],'cssPropBits':2,'cssLitGroup':[L[0],L[47],L[49]]},'outline-style':{'cssPropBits':0,'cssLitGroup':[L[9],L[46],L[47],L[48],L[54]]},'outline-width':{'cssPropBits':5,'cssLitGroup':[L[34],L[47],L[52]]},'overflow':{'cssPropBits':32,'cssLitGroup':[L[38],L[46],L[47],L[58],L[63]]},'overflow-x':{'cssPropBits':0,'cssLitGroup':[L[32],L[38],L[46],L[58],L[63]]},'overflow-y':{'cssPropBits':0,'cssLitGroup':[L[32],L[38],L[46],L[58],L[63]]},'padding':{'cssPropBits':1,'cssLitGroup':[L[47]]},'padding-bottom':{'cssPropBits':33,'cssLitGroup':[L[47]]},'padding-left':{'cssPropBits':33,'cssLitGroup':[L[47]]},'padding-right':{'cssPropBits':33,'cssLitGroup':[L[47]]},'padding-top':{'cssPropBits':33,'cssLitGroup':[L[47]]},'page-break-after':{'cssPropBits':0,'cssLitGroup':[L[30],L[37],L[38],L[39],L[47]]},'page-break-before':{'cssPropBits':0,'cssLitGroup':[L[30],L[37],L[38],L[39],L[47]]},'page-break-inside':{'cssPropBits':0,'cssLitGroup':[L[38],L[39],L[47]]},'pause':{'cssPropBits':5,'cssLitGroup':[L[47]]},'pause-after':{'cssPropBits':5,'cssLitGroup':[L[47]]},'pause-before':{'cssPropBits':5,'cssLitGroup':[L[47]]},'pitch':{'cssPropBits':5,'cssLitGroup':[L[19],L[47],L[52]]},'pitch-range':{'cssPropBits':5,'cssLitGroup':[L[47]]},'play-during':{'cssExtra':c[0],'cssPropBits':16,'cssLitGroup':[L[38],L[47],L[53],L[54],L[57]]},'position':{'cssPropBits':32,'cssLitGroup':[L[20],L[47]]},'quotes':{'cssExtra':c[0],'cssPropBits':0,'cssLitGroup':[L[47],L[54]]},'richness':{'cssPropBits':5,'cssLitGroup':[L[47]]},'right':{'cssPropBits':37,'cssLitGroup':[L[38],L[47]]},'speak':{'cssPropBits':0,'cssLitGroup':[L[47],L[54],L[55],L[61]]},'speak-header':{'cssPropBits':0,'cssLitGroup':[L[37],L[47],L[56]]},'speak-numeral':{'cssPropBits':0,'cssLitGroup':[L[26],L[47]]},'speak-punctuation':{'cssPropBits':0,'cssLitGroup':[L[43],L[47],L[54]]},'speech-rate':{'cssPropBits':5,'cssLitGroup':[L[12],L[47],L[52]]},'stress':{'cssPropBits':5,'cssLitGroup':[L[47]]},'table-layout':{'cssPropBits':0,'cssLitGroup':[L[38],L[45],L[47]]},'text-align':{'cssPropBits':0,'cssLitGroup':[L[30],L[42],L[47],L[50]]},'text-decoration':{'cssPropBits':0,'cssLitGroup':[L[18],L[47],L[54]]},'text-indent':{'cssPropBits':5,'cssLitGroup':[L[47]]},'text-overflow':{'cssPropBits':0,'cssLitGroup':[L[25]]},'text-shadow':{'cssExtra':c[1],'cssPropBits':7,'cssLitGroup':[L[0],L[35],L[48],L[54]]},'text-transform':{'cssPropBits':0,'cssLitGroup':[L[21],L[47],L[54]]},'text-wrap':{'cssPropBits':0,'cssLitGroup':[L[33],L[54],L[55]]},'top':{'cssPropBits':37,'cssLitGroup':[L[38],L[47]]},'unicode-bidi':{'cssPropBits':0,'cssLitGroup':[L[23],L[47],L[55]]},'vertical-align':{'cssPropBits':5,'cssLitGroup':[L[10],L[24],L[47]]},'visibility':{'cssPropBits':32,'cssLitGroup':[L[44],L[46],L[47],L[63]]},'voice-family':{'cssExtra':c[0],'cssPropBits':8,'cssLitGroup':[L[22],L[35],L[47]]},'volume':{'cssPropBits':1,'cssLitGroup':[L[16],L[47],L[52]]},'white-space':{'cssPropBits':0,'cssLitGroup':[L[8],L[47],L[55]]},'width':{'cssPropBits':33,'cssLitGroup':[L[38],L[47]]},'word-spacing':{'cssPropBits':5,'cssLitGroup':[L[47],L[55]]},'word-wrap':{'cssPropBits':0,'cssLitGroup':[L[41],L[55]]},'z-index':{'cssPropBits':69,'cssLitGroup':[L[38],L[47]]},'zoom':{'cssPropBits':1,'cssLitGroup':[L[55]]}}})(),decodeCss,html,html4,html_sanitize,lexCss,parseCssDeclarations,parseCssStylesheet,sanitizeCssProperty,sanitizeStylesheet;typeof
window!=='undefined'&&(window['cssSchema']=cssSchema),(function(){var ATKEYWORD,BOM,CDC,CDO,CHAR,CMP_OPS,COMMENT,CSS_TOKEN,DASHMATCH,DIMENSION,ESCAPE,ESCAPE_TAIL,FUNCTION,HASH,IDENT,INCLUDES,NAME,NL,NMCHAR,NMSTART,NONASCII,NUM,NUMBER,NUMERIC_VALUE,PERCENTAGE,PREFIXMATCH,S,STRING,STRINGCHAR,SUBSTRINGMATCH,SUFFIXMATCH,SURROGATE_PAIR,UNICODE,UNICODE_RANGE,UNICODE_TAIL,URI,URLCHAR,W,WC,WORD_TERM,cssStrChars,cssUrlChars;function
decodeCssEscape(s){var i=parseInt(s.substring(1),16);return i>65535?(i-=65536,String.fromCharCode(55296+(i>>10),56320+(i&1023))):i==i?String.fromCharCode(i):s[1]<' '?'':s[1]}function
escapeCssString(s,replacer){return'\"'+s.replace(/[\u0000-\u001f\\\"\x3c\x3e]/g,replacer)+'\"'}function
escapeCssStrChar(ch){return cssStrChars[ch]||(cssStrChars[ch]='\\'+ch.charCodeAt(0).toString(16)+' ')}function
escapeCssUrlChar(ch){return cssUrlChars[ch]||(cssUrlChars[ch]=(ch<'\x10'?'%0':'%')+ch.charCodeAt(0).toString(16))}cssStrChars={'\\':'\\\\'},cssUrlChars={'\\':'%5c'},WC='[\\t\\n\\f ]',W=WC+'*',NL='[\\n\\f]',SURROGATE_PAIR='[\\ud800-\\udbff][\\udc00-\\udfff]',NONASCII='[\\u0080-\\ud7ff\\ue000-\\ufffd]|'+SURROGATE_PAIR,UNICODE_TAIL='[0-9a-fA-F]{1,6}'+WC+'?',UNICODE='\\\\'+UNICODE_TAIL,ESCAPE_TAIL='(?:'+UNICODE_TAIL+'|[\\u0020-\\u007e\\u0080-\\ud7ff\\ue000\\ufffd]|'+SURROGATE_PAIR+')',ESCAPE='\\\\'+ESCAPE_TAIL,URLCHAR='(?:[\\t\\x21\\x23-\\x26\\x28-\\x5b\\x5d-\\x7e]|'+NONASCII+'|'+ESCAPE+')',STRINGCHAR='[^\'\"\\n\\f\\\\]|\\\\[\\s\\S]',STRING='\"(?:\'|'+STRINGCHAR+')*\"'+'|\'(?:\"|'+STRINGCHAR+')*\'',NUM='[-+]?(?:[0-9]+(?:[.][0-9]+)?|[.][0-9]+)',NMSTART='(?:[a-zA-Z_]|'+NONASCII+'|'+ESCAPE+')',NMCHAR='(?:[a-zA-Z0-9_-]|'+NONASCII+'|'+ESCAPE+')',NAME=NMCHAR+'+',IDENT='-?'+NMSTART+NMCHAR+'*',ATKEYWORD='@'+IDENT,HASH='#'+NAME,NUMBER=NUM,WORD_TERM='(?:@?-?'+NMSTART+'|#)'+NMCHAR+'*',PERCENTAGE=NUM+'%',DIMENSION=NUM+IDENT,NUMERIC_VALUE=NUM+'(?:%|'+IDENT+')?',URI='url[(]'+W+'(?:'+STRING+'|'+URLCHAR+'*)'+W+'[)]',UNICODE_RANGE='U[+][0-9A-F?]{1,6}(?:-[0-9A-F]{1,6})?',CDO='\x3c!--',CDC='--\x3e',S=WC+'+',COMMENT='/(?:[*][^*]*[*]+(?:[^/][^*]*[*]+)*/|/[^\\n\\f]*)',FUNCTION='(?!url[(])'+IDENT+'[(]',INCLUDES='~=',DASHMATCH='[|]=',PREFIXMATCH='[^]=',SUFFIXMATCH='[$]=',SUBSTRINGMATCH='[*]=',CMP_OPS='[~|^$*]=',CHAR='[^\"\'\\\\/]|/(?![/*])',BOM='\\uFEFF',CSS_TOKEN=new
RegExp(([BOM,UNICODE_RANGE,URI,FUNCTION,WORD_TERM,STRING,NUMERIC_VALUE,CDO,CDC,S,COMMENT,CMP_OPS,CHAR].join('|')),'gi'),decodeCss=function(css){return css.replace(new
RegExp(('\\\\(?:'+ESCAPE_TAIL+'|'+NL+')'),'g'),decodeCssEscape)},lexCss=function(cssText){var
cc,i,j,last,len,n,tok,tokens;cssText=''+cssText,tokens=cssText.replace(/\r\n?/g,'\n').match(CSS_TOKEN)||[],j=0,last=' ';for(i=0,n=tokens.length;i<n;++i)tok=decodeCss(tokens[i]),len=tok.length,cc=tok.charCodeAt(0),tok=cc=='\"'.charCodeAt(0)||cc=='\''.charCodeAt(0)?escapeCssString(tok.substring(1,len-1),escapeCssStrChar):cc=='/'.charCodeAt(0)&&len>1||tok=='\\'||tok==CDC||tok==CDO||tok=='\ufeff'||cc<=' '.charCodeAt(0)?' ':/url\(/i.test(tok)?'url('+escapeCssString(tok.replace(new
RegExp(('^url\\('+W+'[\"\']?|[\"\']?'+W+'\\)$'),'gi'),''),escapeCssUrlChar)+')':tok,(last!=tok||tok!=' ')&&(tokens[j++]=last=tok);return tokens.length=j,tokens}})(),typeof
window!=='undefined'&&(window['lexCss']=lexCss,window['decodeCss']=decodeCss),sanitizeCssProperty=(function(){var
NOEFFECT_URL='url(\"about:blank\")',NORM_URL_REGEXP=/[\n\f\r\"\'()*\x3c\x3e]/g,NORM_URL_REPLACEMENTS={'\n':'%0a','\f':'%0c','\r':'%0d','\"':'%22','\'':'%27','(':'%28',')':'%29','*':'%2a','\x3c':'%3c','\x3e':'%3e'},ALLOWED_LITERAL,ALLOWED_URI_SCHEMES,URI_SCHEME_RE;function
normalizeUrl(s){return'string'===typeof s?'url(\"'+s.replace(NORM_URL_REGEXP,normalizeUrlChar)+'\")':NOEFFECT_URL}function
normalizeUrlChar(ch){return NORM_URL_REPLACEMENTS[ch]}URI_SCHEME_RE=new RegExp('^(?:([^:/?# ]+):)?'),ALLOWED_URI_SCHEMES=/^(?:https?|mailto)$/i;function
safeUri(uri,prop,naiveUriRewriter){var parsed;return naiveUriRewriter?(parsed=(''+uri).match(URI_SCHEME_RE),parsed&&(!parsed[1]||ALLOWED_URI_SCHEMES.test(parsed[1]))?naiveUriRewriter(uri,prop):null):null}function
unionArrays(arrs){var map={},arr,i,j;for(i=arrs.length;--i>=0;){arr=arrs[i];for(j=arr.length;--j>=0;)map[arr[j]]=ALLOWED_LITERAL}return map}function
normalizeFunctionCall(tokens,start){var parenDepth=1,end=start+1,n=tokens.length,token;while(end<n&&parenDepth)token=tokens[end++],parenDepth+=token==='('?1:token===')'?-1:0;return end}return ALLOWED_LITERAL={},function(property,propertySchema,tokens,opt_naiveUriRewriter){var
propBits=propertySchema.cssPropBits,qstringBits=propBits&(CSS_PROP_BIT_QSTRING_CONTENT|CSS_PROP_BIT_QSTRING_URL),lastQuoted=NaN,i=0,k=0,cc,cc1,cc2,end,isnum1,isnum2,litGroup,litMap,token;for(;i<tokens.length;++i)token=tokens[i].toLowerCase(),cc=token.charCodeAt(0),token=cc===' '.charCodeAt(0)?'':cc==='\"'.charCodeAt(0)?qstringBits===CSS_PROP_BIT_QSTRING_URL&&opt_naiveUriRewriter?normalizeUrl(safeUri(decodeCss(tokens[i].substring(1,token.length-1)),property,opt_naiveUriRewriter)):qstringBits===CSS_PROP_BIT_QSTRING_CONTENT?token:'':cc==='#'.charCodeAt(0)&&/^#(?:[0-9a-f]{3}){1,2}$/.test(token)?propBits&CSS_PROP_BIT_HASH_VALUE?token:'':'0'.charCodeAt(0)<=cc&&cc<='9'.charCodeAt(0)?propBits&CSS_PROP_BIT_QUANTITY?propBits&CSS_PROP_BIT_Z_INDEX?token.match(/^\d{1,7}$/)?token:'':token:'':(cc1=token.charCodeAt(1),cc2=token.charCodeAt(2),isnum1='0'.charCodeAt(0)<=cc1&&cc1<='9'.charCodeAt(0),isnum2='0'.charCodeAt(0)<=cc2&&cc2<='9'.charCodeAt(0),cc==='+'.charCodeAt(0)&&(isnum1||cc1==='.'.charCodeAt(0)&&isnum2))?propBits&CSS_PROP_BIT_QUANTITY?propBits&CSS_PROP_BIT_Z_INDEX?token.match(/^\+\d{1,7}$/)?token:'':(isnum1?'':'0')+token.substring(1):'':cc==='-'.charCodeAt(0)&&(isnum1||cc1==='.'.charCodeAt(0)&&isnum2)?propBits&CSS_PROP_BIT_NEGATIVE_QUANTITY?propBits&CSS_PROP_BIT_Z_INDEX?token.match(/^\-\d{1,7}$/)?token:'':(isnum1?'-':'-0')+token.substring(1):propBits&CSS_PROP_BIT_QUANTITY?'0':'':cc==='.'.charCodeAt(0)&&isnum1?propBits&CSS_PROP_BIT_QUANTITY?'0'+token:'':'url('===token.substring(0,4)?opt_naiveUriRewriter&&qstringBits&CSS_PROP_BIT_QSTRING_URL?normalizeUrl(safeUri(tokens[i].substring(5,token.length-2),property,opt_naiveUriRewriter)):'':(token.charAt(token.length-1)==='('&&(end=normalizeFunctionCall(tokens,i),tokens.splice(i,end-i,token=tokens.slice(i,end).join(' '))),litGroup=propertySchema.cssLitGroup,litMap=litGroup?propertySchema.cssLitMap||(propertySchema.cssLitMap=unionArrays(litGroup)):ALLOWED_LITERAL,litMap[token]===ALLOWED_LITERAL||propertySchema.cssExtra&&propertySchema.cssExtra.test(token))?token:/^\w+$/.test(token)&&qstringBits===CSS_PROP_BIT_QSTRING_CONTENT?lastQuoted+1===k?(tokens[lastQuoted]=tokens[lastQuoted].substring(0,tokens[lastQuoted].length-1)+' '+token+'\"',token=''):(lastQuoted=k,'\"'+token+'\"'):'',token&&(tokens[k++]=token);k===1&&tokens[0]===NOEFFECT_URL&&(k=0),tokens.length=k}})();function
sanitizeCssSelectors(selectors,suffix){var historySensitiveSelectors=[],historyInsensitiveSelectors=[],k=0,i,n,start;for(i=0;i<selectors.length;++i)selectors[i]==' '&&(selectors[i-1]=='\x3e'||selectors[i+1]=='\x3e')||(selectors[k++]=selectors[i]);selectors.length=k,n=selectors.length,start=0;for(i=0;i<n;++i)selectors[i]==','&&(processSelector(start,i),start=i+1);processSelector(start,n);function
processSelector(start,end){var historySensitive=false,elSelector,i,isChild,lastOperator,out,safeSelector,tok;selectors[start]===' '&&++start,end-1!==start&&selectors[end]===' '&&--end,out=[],lastOperator=start,elSelector='';for(i=start;i<end;++i){tok=selectors[i],isChild=tok==='\x3e';if(isChild||tok===' '){elSelector=processElementSelector(lastOperator,i,false);if(!elSelector||isChild&&/^html/i.test(elSelector))return;lastOperator=i+1,out.push(elSelector,isChild?' \x3e ':' ')}}elSelector=processElementSelector(lastOperator,end,true);if(!elSelector)return;out.push(elSelector);function
processElementSelector(start,end,last){var debugStart=start,debugEnd=end,classId,elType,element,pseudoSelector,tok;element='',start<end&&(tok=selectors[start].toLowerCase(),(tok==='*'||tok==='body'&&start+1!==end&&!last||'number'===typeof(elType=html4.ELEMENTS[tok])&&!(elType&html4.eflags['UNSAFE']))&&(++start,element=tok)),classId='';while(start<end){tok=selectors[start];if(tok.charAt(0)==='#'){if(/^#_|__$|[^#0-9A-Za-z:_\-]/.test(tok))return null;classId+=tok+'-'+suffix}else
if(tok==='.')if(++start<end&&/^[0-9A-Za-z:_\-]+$/.test(tok=selectors[start])&&!/^_|__$/.test(tok))classId+='.'+tok;else
return null;else break;++start}pseudoSelector='';if(start<end&&selectors[start]===':'){tok=selectors[++start];if(tok==='visited'||tok==='link'){if(!/^[a*]?$/.test(element))return null;historySensitive=true,pseudoSelector=':'+tok,element='a',++start}}return start===end?element+classId+pseudoSelector:null}safeSelector=out.join(''),/^body\b/.test(safeSelector)?(safeSelector='.vdoc-body___.'+suffix+safeSelector.substring(4)):(safeSelector='.'+suffix+' '+safeSelector),(historySensitive?historySensitiveSelectors:historyInsensitiveSelectors).push(safeSelector)}return[historyInsensitiveSelectors,historySensitiveSelectors]}sanitizeStylesheet=(function(){var
allowed={},cssMediaTypeWhitelist={'braille':allowed,'embossed':allowed,'handheld':allowed,'print':allowed,'projection':allowed,'screen':allowed,'speech':allowed,'tty':allowed,'tv':allowed};function
sanitizeHistorySensitive(blockOfProperties){var elide=false,i,n,token;for(i=0,n=blockOfProperties.length;i<n-1;++i)token=blockOfProperties[i],':'===blockOfProperties[i+1]&&(elide=!(cssSchema[token].cssPropBits&CSS_PROP_BIT_ALLOWED_IN_LINK)),elide&&(blockOfProperties[i]=''),';'===token&&(elide=false);return blockOfProperties.join('')}return function(cssText,suffix,opt_naiveUriRewriter){var
safeCss=void 0,blockStack=[],elide=false;parseCssStylesheet(cssText,{'startStylesheet':function(){safeCss=[]},'endStylesheet':function(){},'startAtrule':function(atIdent,headerArray){elide?(atIdent=null):atIdent==='@media'?(headerArray=headerArray.filter(function(mediaType){return cssMediaTypeWhitelist[mediaType]==allowed}),headerArray.length?safeCss.push(atIdent,headerArray.join(','),'{'):(atIdent=null)):(atIdent==='@import'&&(window.console&&window.console.log('@import '+headerArray.join(' ')+' elided')),atIdent=null),elide=!atIdent,blockStack.push(atIdent)},'endAtrule':function(){var
atIdent=blockStack.pop();elide||safeCss.push(';'),checkElide()},'startBlock':function(){elide||safeCss.push('{')},'endBlock':function(){elide||(safeCss.push('}'),elide=true)},'startRuleset':function(selectorArray){var
historySensitiveSelectors=void 0,removeHistoryInsensitiveSelectors=false,historyInsensitiveSelectors,selector,selectors;elide||(selectors=sanitizeCssSelectors(selectorArray,suffix),historyInsensitiveSelectors=selectors[0],historySensitiveSelectors=selectors[1],!historyInsensitiveSelectors.length&&!historySensitiveSelectors.length?(elide=true):(selector=historyInsensitiveSelectors.join(', '),selector||(selector='head \x3e html',removeHistoryInsensitiveSelectors=true),safeCss.push(selector,'{'))),blockStack.push(elide?null:{'historySensitiveSelectors':historySensitiveSelectors,'endOfSelectors':safeCss.length-1,'removeHistoryInsensitiveSelectors':removeHistoryInsensitiveSelectors})},'endRuleset':function(){var
rules=blockStack.pop(),propertiesEnd=safeCss.length,extraSelectors,propertyGroupTokens;elide||(safeCss.push('}'),rules&&(extraSelectors=rules.historySensitiveSelectors,extraSelectors.length&&(propertyGroupTokens=safeCss.slice(rules.endOfSelectors),safeCss.push(extraSelectors.join(', '),sanitizeHistorySensitive(propertyGroupTokens))))),rules&&rules.removeHistoryInsensitiveSelectors&&safeCss.splice(rules.endOfSelectors-1,propertiesEnd+1),checkElide()},'declaration':function(property,valueArray){var
schema;elide||(schema=cssSchema[property],schema&&(sanitizeCssProperty(property,schema,valueArray,opt_naiveUriRewriter),valueArray.length&&safeCss.push(property,':',valueArray.join(' '),';')))}});function
checkElide(){elide=blockStack.length!==0&&blockStack[blockStack.length-1]!==null}return safeCss.join('')}})(),typeof
window!=='undefined'&&(window['sanitizeCssProperty']=sanitizeCssProperty,window['sanitizeCssSelectors']=sanitizeCssSelectors,window['sanitizeStylesheet']=sanitizeStylesheet);if('I'.toLowerCase()!=='i')throw'I/i problem';(function(){var
ident;parseCssStylesheet=function(cssText,handler){var toks=lexCss(cssText),i,n;handler.startStylesheet&&handler.startStylesheet();for(i=0,n=toks.length;i<n;)i=toks[i]===' '?i+1:statement(toks,i,n,handler);handler.endStylesheet&&handler.endStylesheet()};function
statement(toks,i,n,handler){var tok;return i<n?(tok=toks[i],tok.charAt(0)==='@'?atrule(toks,i,n,handler,true):ruleset(toks,i,n,handler)):i}function
atrule(toks,i,n,handler,blockok){var start=i++,e,s;while(i<n&&toks[i]!=='{'&&toks[i]!==';')++i;return i<n&&(blockok||toks[i]===';')&&(s=start+1,e=i,s<n&&toks[s]===' '&&++s,e>s&&toks[e-1]===' '&&--e,handler.startAtrule&&handler.startAtrule(toks[start].toLowerCase(),toks.slice(s,e)),i=toks[i]==='{'?block(toks,i,n,handler):i+1,handler.endAtrule&&handler.endAtrule()),i}function
block(toks,i,n,handler){var ch;++i,handler.startBlock&&handler.startBlock();while(i<n){ch=toks[i].charAt(0);if(ch=='}'){++i;break}ch===' '||ch===';'?(i=i+1):ch==='@'?(i=atrule(toks,i,n,handler,false)):ch==='{'?(i=block(toks,i,n,handler)):(i=ruleset(toks,i,n,handler))}return handler.endBlock&&handler.endBlock(),i}function
ruleset(toks,i,n,handler){var s=i,e=selector(toks,i,n,true),tok;if(e<0)return e=~e,i===e?e+1:e;i=e,e>s&&toks[e-1]===' '&&--e,tok=toks[i],++i;if(tok!=='{')return i;handler.startRuleset&&handler.startRuleset(toks.slice(s,e));while(i<n){tok=toks[i];if(tok==='}'){++i;break}tok===' '?(i=i+1):(i=declaration(toks,i,n,handler))}return handler.endRuleset&&handler.endRuleset(),i<n?i+1:i}function
selector(toks,i,n,allowSemi){var s=i,brackets=[],stackLast=-1,tok;for(;i<n;++i){tok=toks[i].charAt(0);if(tok==='['||tok==='(')brackets[++stackLast]=tok;else
if(tok===']'&&brackets[stackLast]==='['||tok===')'&&brackets[stackLast]==='(')--stackLast;else
if(tok==='{'||tok==='}'||tok===';'||tok==='@'||tok===':'&&!allowSemi)break}return stackLast>=0&&(i=~(i+1)),i}ident=/^-?[a-z]/i;function
declaration(toks,i,n,handler){var property=toks[i++],e,j,s,tok,value,valuelen;if(!ident.test(property))return i+1;i<n&&toks[i]===' '&&++i;if(i==n||toks[i]!==':'){while(i<n&&(tok=toks[i])!==';'&&tok!=='}')++i;return i}++i,i<n&&toks[i]===' '&&++i,s=i,e=selector(toks,i,n,false);if(e<0)e=~e;else{value=[],valuelen=0;for(j=s;j<e;++j)tok=toks[j],tok!==' '&&(value[valuelen++]=tok);if(e<n){do{tok=toks[e];if(tok===';'||tok==='}')break;valuelen=0}while(++e<n);tok===';'&&++e}valuelen&&handler.declaration&&handler.declaration(property.toLowerCase(),value)}return e}parseCssDeclarations=function(cssText,handler){var
toks=lexCss(cssText),i,n;for(i=0,n=toks.length;i<n;)i=toks[i]!==' '?declaration(toks,i,n,handler):i+1}})(),typeof
window!=='undefined'&&(window['parseCssStylesheet']=parseCssStylesheet,window['parseCssDeclarations']=parseCssDeclarations),html4={},html4.atype={'NONE':0,'URI':1,'URI_FRAGMENT':11,'SCRIPT':2,'STYLE':3,'ID':4,'IDREF':5,'IDREFS':6,'GLOBAL_NAME':7,'LOCAL_NAME':8,'CLASSES':9,'FRAME_TARGET':10},html4.ATTRIBS={'*::class':9,'*::dir':0,'*::id':4,'*::lang':0,'*::onclick':2,'*::ondblclick':2,'*::onkeydown':2,'*::onkeypress':2,'*::onkeyup':2,'*::onload':2,'*::onmousedown':2,'*::onmousemove':2,'*::onmouseout':2,'*::onmouseover':2,'*::onmouseup':2,'*::style':3,'*::title':0,'a::accesskey':0,'a::coords':0,'a::href':1,'a::hreflang':0,'a::name':7,'a::onblur':2,'a::onfocus':2,'a::rel':0,'a::rev':0,'a::shape':0,'a::tabindex':0,'a::target':0,'a::type':0,'area::accesskey':0,'area::alt':0,'area::coords':0,'area::href':1,'area::nohref':0,'area::onblur':2,'area::onfocus':2,'area::shape':0,'area::tabindex':0,'area::target':10,'bdo::dir':0,'blockquote::cite':1,'br::clear':0,'button::accesskey':0,'button::disabled':0,'button::name':8,'button::onblur':2,'button::onfocus':2,'button::tabindex':0,'button::type':0,'button::value':0,'canvas::height':0,'canvas::width':0,'caption::align':0,'col::align':0,'col::char':0,'col::charoff':0,'col::span':0,'col::valign':0,'col::width':0,'colgroup::align':0,'colgroup::char':0,'colgroup::charoff':0,'colgroup::span':0,'colgroup::valign':0,'colgroup::width':0,'del::cite':1,'del::datetime':0,'dir::compact':0,'div::align':0,'dl::compact':0,'font::color':0,'font::face':0,'font::size':0,'form::accept':0,'form::action':1,'form::autocomplete':0,'form::enctype':0,'form::method':0,'form::name':7,'form::onreset':2,'form::onsubmit':2,'form::target':10,'h1::align':0,'h2::align':0,'h3::align':0,'h4::align':0,'h5::align':0,'h6::align':0,'hr::align':0,'hr::noshade':0,'hr::size':0,'hr::width':0,'iframe::align':0,'iframe::frameborder':0,'iframe::height':0,'iframe::marginheight':0,'iframe::marginwidth':0,'iframe::width':0,'img::align':0,'img::alt':0,'img::border':0,'img::height':0,'img::hspace':0,'img::ismap':0,'img::name':7,'img::src':1,'img::usemap':11,'img::vspace':0,'img::width':0,'input::accept':0,'input::accesskey':0,'input::align':0,'input::alt':0,'input::autocomplete':0,'input::checked':0,'input::disabled':0,'input::ismap':0,'input::maxlength':0,'input::name':8,'input::onblur':2,'input::onchange':2,'input::onfocus':2,'input::onselect':2,'input::readonly':0,'input::size':0,'input::src':1,'input::tabindex':0,'input::type':0,'input::usemap':11,'input::value':0,'ins::cite':1,'ins::datetime':0,'label::accesskey':0,'label::for':5,'label::onblur':2,'label::onfocus':2,'legend::accesskey':0,'legend::align':0,'li::type':0,'li::value':0,'map::name':7,'menu::compact':0,'ol::compact':0,'ol::start':0,'ol::type':0,'optgroup::disabled':0,'optgroup::label':0,'option::disabled':0,'option::label':0,'option::selected':0,'option::value':0,'p::align':0,'pre::width':0,'q::cite':1,'select::disabled':0,'select::multiple':0,'select::name':8,'select::onblur':2,'select::onchange':2,'select::onfocus':2,'select::size':0,'select::tabindex':0,'table::align':0,'table::bgcolor':0,'table::border':0,'table::cellpadding':0,'table::cellspacing':0,'table::frame':0,'table::rules':0,'table::summary':0,'table::width':0,'tbody::align':0,'tbody::char':0,'tbody::charoff':0,'tbody::valign':0,'td::abbr':0,'td::align':0,'td::axis':0,'td::bgcolor':0,'td::char':0,'td::charoff':0,'td::colspan':0,'td::headers':6,'td::height':0,'td::nowrap':0,'td::rowspan':0,'td::scope':0,'td::valign':0,'td::width':0,'textarea::accesskey':0,'textarea::cols':0,'textarea::disabled':0,'textarea::name':8,'textarea::onblur':2,'textarea::onchange':2,'textarea::onfocus':2,'textarea::onselect':2,'textarea::readonly':0,'textarea::rows':0,'textarea::tabindex':0,'tfoot::align':0,'tfoot::char':0,'tfoot::charoff':0,'tfoot::valign':0,'th::abbr':0,'th::align':0,'th::axis':0,'th::bgcolor':0,'th::char':0,'th::charoff':0,'th::colspan':0,'th::headers':6,'th::height':0,'th::nowrap':0,'th::rowspan':0,'th::scope':0,'th::valign':0,'th::width':0,'thead::align':0,'thead::char':0,'thead::charoff':0,'thead::valign':0,'tr::align':0,'tr::bgcolor':0,'tr::char':0,'tr::charoff':0,'tr::valign':0,'ul::compact':0,'ul::type':0},html4.eflags={'OPTIONAL_ENDTAG':1,'EMPTY':2,'CDATA':4,'RCDATA':8,'UNSAFE':16,'FOLDABLE':32,'SCRIPT':64,'STYLE':128},html4.ELEMENTS={'a':0,'abbr':0,'acronym':0,'address':0,'applet':16,'area':2,'article':16,'aside':16,'audio':16,'b':0,'base':18,'basefont':18,'bdi':16,'bdo':0,'big':0,'blockquote':0,'body':49,'br':2,'button':0,'canvas':0,'caption':0,'center':0,'cite':0,'code':0,'col':2,'colgroup':1,'data':16,'datalist':16,'dd':1,'del':0,'details':16,'dfn':0,'dir':0,'div':0,'dl':0,'dt':1,'em':0,'fieldset':0,'figcaption':16,'figure':16,'font':0,'footer':16,'form':0,'frame':18,'frameset':16,'h1':0,'h2':0,'h3':0,'h4':0,'h5':0,'h6':0,'head':49,'header':16,'hgroup':16,'hr':2,'html':49,'i':0,'iframe':4,'img':2,'input':2,'ins':0,'isindex':18,'kbd':0,'label':0,'legend':0,'li':1,'link':18,'map':0,'mark':16,'menu':0,'meta':18,'meter':16,'nav':0,'nobr':0,'noembed':4,'noframes':20,'noscript':20,'object':16,'ol':0,'optgroup':0,'option':1,'output':16,'p':1,'param':18,'pre':0,'progress':16,'q':0,'s':0,'samp':0,'script':84,'section':16,'select':0,'small':0,'span':0,'strike':0,'strong':0,'style':148,'sub':0,'summary':16,'sup':0,'table':0,'tbody':1,'td':1,'textarea':8,'tfoot':1,'th':1,'thead':1,'time':16,'title':24,'tr':1,'tt':0,'u':0,'ul':0,'var':0,'video':16},html4.ueffects={'NOT_LOADED':0,'SAME_DOCUMENT':1,'NEW_DOCUMENT':2},html4.URIEFFECTS={'a::href':2,'area::href':2,'blockquote::cite':0,'body::background':1,'del::cite':0,'form::action':2,'img::src':1,'input::src':1,'ins::cite':0,'q::cite':0},html4.ltypes={'UNSANDBOXED':2,'SANDBOXED':1,'DATA':0},html4.LOADERTYPES={'a::href':2,'area::href':2,'blockquote::cite':2,'body::background':1,'del::cite':2,'form::action':2,'img::src':1,'input::src':1,'ins::cite':2,'q::cite':2},html4['ATTRIBS']=html4.ATTRIBS,html4['ELEMENTS']=html4.ELEMENTS,html4['URIEFFECTS']=html4.URIEFFECTS,html4['LOADERTYPES']=html4.LOADERTYPES,html4['atype']=html4.atype,html4['eflags']=html4.eflags,html4['ltypes']=html4.ltypes,html4['ueffects']=html4.ueffects,typeof
window!=='undefined'&&(window['html4']=html4);if('I'.toLowerCase()!=='i')throw'I/i problem';html=(function(html4){var
ALLOWED_URI_SCHEMES,ATTR_RE,EFLAGS_TEXT,ENTITIES,ENTITY_RE,URI_SCHEME_RE,ampRe,continuationMarker,cssSchema,decimalEscapeRe,endTagRe,entityRe,gtRe,hexEscapeRe,html,looseAmpRe,ltRe,nulRe,parseCssDeclarations,quotRe,sanitizeCssProperty,splitWillCapture;'undefined'!==typeof
window&&(parseCssDeclarations=window['parseCssDeclarations'],sanitizeCssProperty=window['sanitizeCssProperty'],cssSchema=window['cssSchema']),ENTITIES={'lt':'\x3c','gt':'\x3e','amp':'\x26','nbsp':'\xa0','quot':'\"','apos':'\''},decimalEscapeRe=/^#(\d+)$/,hexEscapeRe=/^#x([0-9A-Fa-f]+)$/;function
lookupEntity(name){var m;return name=name.toLowerCase(),ENTITIES.hasOwnProperty(name)?ENTITIES[name]:(m=name.match(decimalEscapeRe),m?String.fromCharCode(parseInt(m[1],10)):(m=name.match(hexEscapeRe))?String.fromCharCode(parseInt(m[1],16)):'')}function
decodeOneEntity(_,name){return lookupEntity(name)}nulRe=/\0/g;function stripNULs(s){return s.replace(nulRe,'')}entityRe=/\x26(#\d+|#x[0-9A-Fa-f]+|\w+);/g;function
unescapeEntities(s){return s.replace(entityRe,decodeOneEntity)}ampRe=/\x26/g,looseAmpRe=/\x26([^a-z#]|#(?:[^0-9x]|x(?:[^0-9a-f]|$)|$)|$)/gi,ltRe=/[\x3c]/g,gtRe=/\x3e/g,quotRe=/\"/g;function
escapeAttrib(s){return(''+s).replace(ampRe,'\x26amp;').replace(ltRe,'\x26lt;').replace(gtRe,'\x26gt;').replace(quotRe,'\x26#34;')}function
normalizeRCData(rcdata){return rcdata.replace(looseAmpRe,'\x26amp;$1').replace(ltRe,'\x26lt;').replace(gtRe,'\x26gt;')}ATTR_RE=new
RegExp('^\\s*([a-z][-\\w]*)(?:\\s*(=)\\s*((\")[^\"]*(\"|$)|(\')[^\']*(\'|$)|(?=[a-z][-\\w]*\\s*=)|[^\"\'\\s]*))?','i'),ENTITY_RE=/^(#[0-9]+|#x[0-9a-f]+|\w+);/i,splitWillCapture='a,b'.split(/(,)/).length===3,EFLAGS_TEXT=html4.eflags['CDATA']|html4.eflags['RCDATA'];function
makeSaxParser(handler){var hcopy={'cdata':handler.cdata||handler['cdata'],'comment':handler.comment||handler['comment'],'endDoc':handler.endDoc||handler['endDoc'],'endTag':handler.endTag||handler['endTag'],'pcdata':handler.pcdata||handler['pcdata'],'rcdata':handler.rcdata||handler['rcdata'],'startDoc':handler.startDoc||handler['startDoc'],'startTag':handler.startTag||handler['startTag']};return function(htmlText,param){return parse(htmlText,hcopy,param)}}continuationMarker={};function
parse(htmlText,handler,param){var parts=htmlSplit(htmlText),state={'noMoreGT':false,'noMoreEndComments':false},m,p,tagName;parseCPS(handler,parts,0,state,param)}function
continuationMaker(h,parts,initial,state,param){return function(){parseCPS(h,parts,initial,state,param)}}function
parseCPS(h,parts,initial,state,param){var comment,current,eflags,end,m,next,p,pos,tag,tagName;try{h.startDoc&&initial==0&&h.startDoc(param);for(pos=initial,end=parts.length;pos<end;){current=parts[pos++],next=parts[pos];switch(current){case'\x26':ENTITY_RE.test(next)?(h.pcdata&&h.pcdata('\x26'+next,param,continuationMarker,continuationMaker(h,parts,pos,state,param)),++pos):h.pcdata&&h.pcdata('\x26amp;',param,continuationMarker,continuationMaker(h,parts,pos,state,param));break;case'\x3c/':(m=/^(\w+)[^\'\"]*/.exec(next))?m[0].length===next.length&&parts[pos+1]==='\x3e'?(pos+=2,tagName=m[1].toLowerCase(),h.endTag&&h.endTag(tagName,param,continuationMarker,continuationMaker(h,parts,pos,state,param))):(pos=parseEndTag(parts,pos,h,param,continuationMarker,state)):h.pcdata&&h.pcdata('\x26lt;/',param,continuationMarker,continuationMaker(h,parts,pos,state,param));break;case'\x3c':(m=/^(\w+)\s*\/?/.exec(next))?m[0].length===next.length&&parts[pos+1]==='\x3e'?(pos+=2,tagName=m[1].toLowerCase(),h.startTag&&h.startTag(tagName,[],param,continuationMarker,continuationMaker(h,parts,pos,state,param)),eflags=html4.ELEMENTS[tagName],eflags&EFLAGS_TEXT&&(tag={'name':tagName,'next':pos,'eflags':eflags},pos=parseText(parts,tag,h,param,continuationMarker,state))):(pos=parseStartTag(parts,pos,h,param,continuationMarker,state)):h.pcdata&&h.pcdata('\x26lt;',param,continuationMarker,continuationMaker(h,parts,pos,state,param));break;case'\x3c!--':if(!state.noMoreEndComments){for(p=pos+1;p<end;++p)if(parts[p]==='\x3e'&&/--$/.test(parts[p-1]))break;p<end?(h.comment&&(comment=parts.slice(pos,p).join(''),h.comment(comment.substr(0,comment.length-2),param,continuationMarker,continuationMaker(h,parts,p+1,state,param))),pos=p+1):(state.noMoreEndComments=true)}state.noMoreEndComments&&(h.pcdata&&h.pcdata('\x26lt;!--',param,continuationMarker,continuationMaker(h,parts,pos,state,param)));break;case'\x3c!':if(!/^\w/.test(next))h.pcdata&&h.pcdata('\x26lt;!',param,continuationMarker,continuationMaker(h,parts,pos,state,param));else{if(!state.noMoreGT){for(p=pos+1;p<end;++p)if(parts[p]==='\x3e')break;p<end?(pos=p+1):(state.noMoreGT=true)}state.noMoreGT&&(h.pcdata&&h.pcdata('\x26lt;!',param,continuationMarker,continuationMaker(h,parts,pos,state,param)))}break;case'\x3c?':if(!state.noMoreGT){for(p=pos+1;p<end;++p)if(parts[p]==='\x3e')break;p<end?(pos=p+1):(state.noMoreGT=true)}state.noMoreGT&&(h.pcdata&&h.pcdata('\x26lt;?',param,continuationMarker,continuationMaker(h,parts,pos,state,param)));break;case'\x3e':h.pcdata&&h.pcdata('\x26gt;',param,continuationMarker,continuationMaker(h,parts,pos,state,param));break;case'':break;default:h.pcdata&&h.pcdata(current,param,continuationMarker,continuationMaker(h,parts,pos,state,param))}}h.endDoc&&h.endDoc(param)}catch(e){if(e!==continuationMarker)throw e}}function
htmlSplit(str){var re=/(\x3c\/|\x3c\!--|\x3c[!?]|[\x26\x3c\x3e])/g,lastPos,m,parts;str+='';if(splitWillCapture)return str.split(re);parts=[],lastPos=0;while((m=re.exec(str))!==null)parts.push(str.substring(lastPos,m.index)),parts.push(m[0]),lastPos=m.index+m[0].length;return parts.push(str.substring(lastPos)),parts}function
parseEndTag(parts,pos,h,param,continuationMarker,state){var tag=parseTagAndAttrs(parts,pos);return tag?(h.endTag&&h.endTag(tag.name,param,continuationMarker,continuationMaker(h,parts,pos,state,param)),tag.next):parts.length}function
parseStartTag(parts,pos,h,param,continuationMarker,state){var tag=parseTagAndAttrs(parts,pos);return tag?(h.startTag&&h.startTag(tag.name,tag.attrs,param,continuationMarker,continuationMaker(h,parts,tag.next,state,param)),tag.eflags&EFLAGS_TEXT?parseText(parts,tag,h,param,continuationMarker,state):tag.next):parts.length}endTagRe={};function
parseText(parts,tag,h,param,continuationMarker,state){var end=parts.length,buf,first,p,re;endTagRe.hasOwnProperty(tag.name)||(endTagRe[tag.name]=new
RegExp(('^'+tag.name+'(?:[\\s\\/]|$)'),'i')),re=endTagRe[tag.name],first=tag.next,p=tag.next+1;for(;p<end;++p)if(parts[p-1]==='\x3c/'&&re.test(parts[p]))break;p<end&&(p-=1),buf=parts.slice(first,p).join('');if(tag.eflags&html4.eflags['CDATA'])h.cdata&&h.cdata(buf,param,continuationMarker,continuationMaker(h,parts,p,state,param));else
if(tag.eflags&html4.eflags['RCDATA'])h.rcdata&&h.rcdata(normalizeRCData(buf),param,continuationMarker,continuationMaker(h,parts,p,state,param));else
throw new Error('bug');return p}function parseTagAndAttrs(parts,pos){var m=/^(\w+)/.exec(parts[pos]),tag={},aName,aValue,abuf,attrs,buf,end,p,quote,sawQuote;tag.name=m[1].toLowerCase(),tag.eflags=html4.ELEMENTS[tag.name],buf=parts[pos].substr(m[0].length),p=pos+1,end=parts.length;for(;p<end;++p){if(parts[p]==='\x3e')break;buf+=parts[p]}if(end<=p)return;attrs=[];while(buf!==''){m=ATTR_RE.exec(buf);if(!m)buf=buf.replace(/^[\s\S][^a-z\s]*/,'');else
if(m[4]&&!m[5]||m[6]&&!m[7]){quote=m[4]||m[6],sawQuote=false,abuf=[buf,parts[p++]];for(;p<end;++p){if(sawQuote){if(parts[p]==='\x3e')break}else
if(0<=parts[p].indexOf(quote))sawQuote=true;abuf.push(parts[p])}if(end<=p)break;buf=abuf.join('');continue}else
aName=m[1].toLowerCase(),aValue=m[2]?decodeValue(m[3]):aName,attrs.push(aName,aValue),buf=buf.substr(m[0].length)}return tag.attrs=attrs,tag.next=p+1,tag}function
decodeValue(v){var q=v.charCodeAt(0);return(q===34||q===39)&&(v=v.substr(1,v.length-2)),unescapeEntities(stripNULs(v))}function
makeHtmlSanitizer(tagPolicy){var emit=function(text,out){ignoring||out.push(text)},ignoring,stack;return makeSaxParser({'startDoc':function(_){stack=[],ignoring=false},'startTag':function(tagName,attribs,out){var
attribName,eflags,i,n,value;if(ignoring)return;if(!html4.ELEMENTS.hasOwnProperty(tagName))return;eflags=html4.ELEMENTS[tagName];if(eflags&html4.eflags['FOLDABLE'])return;attribs=tagPolicy(tagName,attribs);if(!attribs)return ignoring=!(eflags&html4.eflags['EMPTY']),void
0;eflags&html4.eflags['EMPTY']||stack.push(tagName),out.push('\x3c',tagName);for(i=0,n=attribs.length;i<n;i+=2)attribName=attribs[i],value=attribs[i+1],value!==null&&value!==void
0&&out.push(' ',attribName,'=\"',escapeAttrib(value),'\"');out.push('\x3e')},'endTag':function(tagName,out){var
eflags,i,index,stackEl;if(ignoring)return ignoring=false,void 0;if(!html4.ELEMENTS.hasOwnProperty(tagName))return;eflags=html4.ELEMENTS[tagName];if(!(eflags&(html4.eflags['EMPTY']|html4.eflags['FOLDABLE']))){if(eflags&html4.eflags['OPTIONAL_ENDTAG'])for(index=stack.length;--index>=0;){stackEl=stack[index];if(stackEl===tagName)break;if(!(html4.ELEMENTS[stackEl]&html4.eflags['OPTIONAL_ENDTAG']))return}else
for(index=stack.length;--index>=0;)if(stack[index]===tagName)break;if(index<0)return;for(i=stack.length;--i>index;)stackEl=stack[i],html4.ELEMENTS[stackEl]&html4.eflags['OPTIONAL_ENDTAG']||out.push('\x3c/',stackEl,'\x3e');stack.length=index,out.push('\x3c/',tagName,'\x3e')}},'pcdata':emit,'rcdata':emit,'cdata':emit,'endDoc':function(out){for(;stack.length;--stack.length)out.push('\x3c/',stack[stack.length-1],'\x3e')}})}URI_SCHEME_RE=new
RegExp('^(?:([^:/?# ]+):)?'),ALLOWED_URI_SCHEMES=/^(?:https?|mailto)$/i;function
safeUri(uri,naiveUriRewriter){var parsed;return naiveUriRewriter?(parsed=(''+uri).match(URI_SCHEME_RE),parsed&&(!parsed[1]||ALLOWED_URI_SCHEMES.test(parsed[1]))?naiveUriRewriter(uri):null):null}function
log(opt_logger,tagName,attribName,oldValue,newValue){var changed;attribName||opt_logger(tagName+' removed',{'change':'removed','tagName':tagName}),oldValue!==newValue&&(changed='changed',oldValue&&!newValue?(changed='removed'):!oldValue&&newValue&&(changed='added'),opt_logger(tagName+'.'+attribName+' '+changed,{'change':changed,'tagName':tagName,'attribName':attribName,'oldValue':oldValue,'newValue':newValue}))}function
sanitizeAttribs(tagName,attribs,opt_naiveUriRewriter,opt_nmTokenPolicy,opt_logger){var
attribKey,attribName,atype,i,oldValue,sanitizedDeclarations,value;for(i=0;i<attribs.length;i+=2){attribName=attribs[i],value=attribs[i+1],oldValue=value,atype=null,((attribKey=tagName+'::'+attribName,html4.ATTRIBS.hasOwnProperty(attribKey))||(attribKey='*::'+attribName,html4.ATTRIBS.hasOwnProperty(attribKey)))&&(atype=html4.ATTRIBS[attribKey]);if(atype!==null)switch(atype){case
html4.atype['NONE']:break;case html4.atype['SCRIPT']:value=null,opt_logger&&log(opt_logger,tagName,attribName,oldValue,value);break;case
html4.atype['STYLE']:if('undefined'===typeof parseCssDeclarations){value=null,opt_logger&&log(opt_logger,tagName,attribName,oldValue,value);break}sanitizedDeclarations=[],parseCssDeclarations(value,{'declaration':function(property,tokens){var
normProp=property.toLowerCase(),schema=cssSchema[normProp];if(!schema)return;sanitizeCssProperty(normProp,schema,tokens,opt_naiveUriRewriter),sanitizedDeclarations.push(property+': '+tokens.join(' '))}}),value=sanitizedDeclarations.length>0?sanitizedDeclarations.join(' ; '):null,opt_logger&&log(opt_logger,tagName,attribName,oldValue,value);break;case
html4.atype['ID']:case html4.atype['IDREF']:case html4.atype['IDREFS']:case html4.atype['GLOBAL_NAME']:case
html4.atype['LOCAL_NAME']:case html4.atype['CLASSES']:value=opt_nmTokenPolicy?opt_nmTokenPolicy(value):value,opt_logger&&log(opt_logger,tagName,attribName,oldValue,value);break;case
html4.atype['URI']:value=safeUri(value,opt_naiveUriRewriter),opt_logger&&log(opt_logger,tagName,attribName,oldValue,value);break;case
html4.atype['URI_FRAGMENT']:value&&'#'===value.charAt(0)?(value=value.substring(1),value=opt_nmTokenPolicy?opt_nmTokenPolicy(value):value,value!==null&&value!==void
0&&(value='#'+value)):(value=null),opt_logger&&log(opt_logger,tagName,attribName,oldValue,value);break;default:value=null,opt_logger&&log(opt_logger,tagName,attribName,oldValue,value)}else
value=null,opt_logger&&log(opt_logger,tagName,attribName,oldValue,value);attribs[i+1]=value}return attribs}function
makeTagPolicy(opt_naiveUriRewriter,opt_nmTokenPolicy,opt_logger){return function(tagName,attribs){if(!(html4.ELEMENTS[tagName]&html4.eflags['UNSAFE']))return sanitizeAttribs(tagName,attribs,opt_naiveUriRewriter,opt_nmTokenPolicy,opt_logger);opt_logger&&log(opt_logger,tagName,undefined,undefined,undefined)}}function
sanitizeWithPolicy(inputHtml,tagPolicy){var outputArray=[];return makeHtmlSanitizer(tagPolicy)(inputHtml,outputArray),outputArray.join('')}function
sanitize(inputHtml,opt_naiveUriRewriter,opt_nmTokenPolicy,opt_logger){var tagPolicy=makeTagPolicy(opt_naiveUriRewriter,opt_nmTokenPolicy,opt_logger);return sanitizeWithPolicy(inputHtml,tagPolicy)}return html={},html.escapeAttrib=html['escapeAttrib']=escapeAttrib,html.makeHtmlSanitizer=html['makeHtmlSanitizer']=makeHtmlSanitizer,html.makeSaxParser=html['makeSaxParser']=makeSaxParser,html.makeTagPolicy=html['makeTagPolicy']=makeTagPolicy,html.normalizeRCData=html['normalizeRCData']=normalizeRCData,html.sanitize=html['sanitize']=sanitize,html.sanitizeAttribs=html['sanitizeAttribs']=sanitizeAttribs,html.sanitizeWithPolicy=html['sanitizeWithPolicy']=sanitizeWithPolicy,html.unescapeEntities=html['unescapeEntities']=unescapeEntities,html})(html4),html_sanitize=html['sanitize'],typeof
window!=='undefined'&&(window['html']=html,window['html_sanitize']=html_sanitize)}

function clean(txt){
	if(! txt){
		return txt;
	}else{
		return html_sanitize(txt,function urlX(url) { return url }, function idX(id) { return id });
	}
}
"use strict";
/*

Copyright 2010-2015 Scott Fortmann-Roe. All rights reserved.

This file may distributed and/or modified under the
terms of the Insight Maker Public License (https://InsightMaker.com/impl).

*/


// This function is used for applying backword compability to older versions of insightmaker models
function updateModel(){
	alert("in update model");
	var mySetting = getSetting();

	if (mySetting.getAttribute("Version") < 3) {
		var converters = primitives("Converter");
		for (var i = 0; i < converters.length; i++) {
			var inps = converters[i].getAttribute("Inputs").split(",");
			var outs = converters[i].getAttribute("Outputs").split(",");
			var s = "";
			for (var j = 0; j < inps.length; j++) {
				if (j > 0) {
					s = s + ";";
				}
				s = s + inps[j] + "," + outs[j];
			}
			converters[i].setAttribute("Data", s);
		}
		mySetting.setAttribute("Version", 3);
	}
	if (mySetting.getAttribute("Version") < 4) {
		mySetting.setAttribute("SolutionAlgorithm", "RK1");
		mySetting.setAttribute("Version", 4)
	}

	if (mySetting.getAttribute("Version") < 5) {
		var stocks = primitives("Stock");
		for (var i = 0; i < stocks.length; i++) {
			stocks[i].setAttribute("NonNegative", false);
		}
		mySetting.setAttribute("Version", 5);
	}

	if (mySetting.getAttribute("Version") < 6) {
		var pictures = primitives("Picture");
		for (var i = 0; i < pictures.length; i++) {
			pictures[i].setAttribute("FlipHorizontal", false);
			pictures[i].setAttribute("FlipVertical", false);
		}
		mySetting.setAttribute("Version", 6);
	}

	if (mySetting.getAttribute("Version") < 7) {
		var links = primitives("Link");
		for (var i = 0; i < links.length; i++) {
			links[i].setAttribute("BiDirectional", false);
		}
		mySetting.setAttribute("Version", 7);
	}

	if (mySetting.getAttribute("Version") < 8) {
		var items = primitives("Stock").concat(primitives("Parameter"), primitives("Converter"));
		for (var i = 0; i < items.length; i++) {
			items[i].setAttribute("Image", "None");
		}
		items = primitives("Display");
		for (var i = 0; i < items.length; i++) {
			items[i].setAttribute("Image", "Display");
		}
		mySetting.setAttribute("Version", 8);
	}

	if (mySetting.getAttribute("Version") < 9) {
		mySetting.setAttribute("BackgroundColor", "white");
		mySetting.setAttribute("Version", 9);
	}

	if (mySetting.getAttribute("Version") < 10) {
		var displays = primitives("Display");

		for (var i = 0; i < displays.length; i++) {
			displays[i].setVisible(false);
		}
		mySetting.setAttribute("Version", 10);
		graph.refresh()
	}

	if (mySetting.getAttribute("Version") < 11) {
		var cells = primitives("Stock").concat(primitives("Parameter"), primitives("Converter"), primitives("Text"));

		if(! (graph instanceof SimpleNode)){
			graph.setCellStyles(mxConstants.STYLE_LABEL_BACKGROUNDCOLOR, mxConstants.NONE, cells);
		}

		mySetting.setAttribute("Version", 11);
	}

	if (mySetting.getAttribute("Version") < 12) {
		var cells = primitives("Stock").concat(primitives("Parameter"), primitives("Converter"));
		var pics = primitives("Picture");

		for (var i = 0; i < pics.length; i++) {
			pics[i].setAttribute("LabelPosition", "Bottom");
		}

		for (var i = 0; i < cells.length; i++) {
			cells[i].setAttribute("LabelPosition", "Middle");
		}

		mySetting.setAttribute("Version", 12);
	}

	if (mySetting.getAttribute("Version") < 13) {
		var items = primitives("Folder");
		for (var i = 0; i < items.length; i++) {
			items[i].setAttribute("Image", "None");
			items[i].setAttribute("LabelPosition", "Middle");
		}
		mySetting.setAttribute("Version", 13);
	}

	if (mySetting.getAttribute("Version") < 14) {
		var pictures = primitives("Stock").concat(primitives("Parameter"), primitives("Converter"), primitives("Folder"));
		for (var i = 0; i < pictures.length; i++) {
			pictures[i].setAttribute("FlipHorizontal", false);
			pictures[i].setAttribute("FlipVertical", false);
		}
		mySetting.setAttribute("Version", 14);
	}

	if (mySetting.getAttribute("Version") < 15) {
		var buttons = primitives("Button");
		for (var i = 0; i < buttons.length; i++) {
			var action = buttons[i].getAttribute("Function");
			action = action.replace(/getName/g, "findName");
			action = action.replace(/getType/g, "findType");
			action = action.replace(/getAll/g, "findAll");
			buttons[i].setAttribute("Function", action);
		}
		mySetting.setAttribute("Version", 15);
	}

	if (mySetting.getAttribute("Version") < 16) {
		var vars = primitives("Parameter");
		for (var i = 0; i < vars.length; i++) {
			vars[i].value = changeNodeName(vars[i].value, "Variable");
		}
		mySetting.setAttribute("Version", 16);
	}

	if (mySetting.getAttribute("Version") < 17) {
		mySetting.setAttribute("Throttle", -1);
		mySetting.setAttribute("Version", 17);
	}

	if (mySetting.getAttribute("Version") < 18) {
		var displays = primitives("Display");

		for (var i = 0; i < displays.length; i++) {
			displays[i].setAttribute("yAxis2", "");
			displays[i].setAttribute("Primitives2", "");
		}

		mySetting.setAttribute("Version", 18);

	}

	if (mySetting.getAttribute("Version") < 19) {
		mySetting.setAttribute("Macros", "");
		mySetting.setAttribute("Version", 19);
	}

	if (mySetting.getAttribute("Version") < 20) {
		var u = mySetting.getAttribute("Units");
		if (isDefined(u)) {
			mySetting.setAttribute("Units", u.replace(/,/g, "*"));
		}
		mySetting.setAttribute("Version", 20);
	}

	if (mySetting.getAttribute("Version") < 21) {
		var displays = primitives("Display");
		for (var i = 0; i < displays.length; i++) {
			if (displays[i].getAttribute('Type') == "Scatterplot") {
				displays[i].setAttribute("showMarkers", true);
				displays[i].setAttribute("showLines", false);
			} else {
				displays[i].setAttribute("showMarkers", false);
				displays[i].setAttribute("showLines", true);
			}
		}

		mySetting.setAttribute("Version", 21);
	}


	if (mySetting.getAttribute("Version") < 22) {

		mySetting.setAttribute("SensitivityPrimitives", "");
		mySetting.setAttribute("SensitivityRuns", 50);
		mySetting.setAttribute("SensitivityBounds", "50, 80, 95, 100");
		mySetting.setAttribute("SensitivityShowRuns", "false");

		mySetting.setAttribute("Version", 22);
	}

	if (mySetting.getAttribute("Version") < 23) {

		var obsolete = findValue([/\bmin\(\s*</i, /\bmax\(\s*</i, /\bmean\(\s*</i, /\bmedian\(\s*</i, /\bstddev\(\s*</i]);

		if (obsolete.length > 0) {
			if(window.Ext){
				var msg = '<p>Insight Maker has received an update that removes the need for the <i>&lt;Primitive&gt;</i> notation. You may now use the <i>[Primitive]</i> in place of it.</p> ';
				msg += '<br/><p>A side effect of this update is that the usage of the Min(), Max(), Mean(), Median() and StdDev() statistical functions for aggregating over a primitive\'s history have been renamed to PastMin(), PastMax(), etc... (the usage of these function for values is unchanged; e.g. Max(1, 4, 2) is still correct).</p>';
				msg += '<br/><p>To correct this you need to change equations like:</p>';
				msg += '<br/><b>Max(&lt;x&gt;)</b></p>';
				msg += '<br/>to</p>';
				msg += '<br/><b>PastMax([x])</b></p>';
				msg += '<br/><p>The following of your primitives appear to use these function and need to be updated to work correctly with this change. You can adjust their equations manually:</p>';
				msg += '<br/><p><b>' + Ext.Array.map(obsolete, function(x) {
					return x.getAttribute("name")
				}).join(", ") + '</b></p>';

				Ext.Msg.show({
					icon: Ext.MessageBox.WARNING,
					title: 'Model Update Required',
					msg: msg,
					buttons: Ext.MessageBox.OK
				});
			}
			

		}


		mySetting.setAttribute("Version", 23);
	}

	if (mySetting.getAttribute("Version") < 24) {
	
		var folders = primitives("Folder");
		for (var i = 0; i < folders.length; i++) {
			folders[i].setAttribute("Type", "None");
		}
	
		var displays = primitives("Display");
		for (var i = 0; i < displays.length; i++) {
			displays[i].setAttribute("showArea", false);
		}
	
		var texts = primitives("Text");
		for (var i = 0; i < texts.length; i++) {
			texts[i].setAttribute('LabelPosition', "Middle");
		}

		mySetting.setAttribute("Version", 24);
	}


	if (mySetting.getAttribute("Version") < 25) {
	
		if(!(graph instanceof SimpleNode )){
			setAllConnectable();
		}

		mySetting.setAttribute("Version", 25);
	}

	if (mySetting.getAttribute("Version") < 26) {
	
		var flows = primitives("Flow");
		for (var i = 0; i < flows.length; i++) {
			if(! (graph instanceof SimpleNode)){
		        if (! isTrue(flows[i].getAttribute("OnlyPositive"))) {
		            graph.setCellStyles(mxConstants.STYLE_STARTARROW, "block", [flows[i]]);
		            graph.setCellStyles("startFill", 0, [flows[i]]);
		        }
			}
	        
		}
	

		mySetting.setAttribute("Version", 26);
	}

	if (mySetting.getAttribute("Version") < 27) {
	
	
		var displays = primitives("Display");
		for (var i = 0; i < displays.length; i++) {
			displays[i].setAttribute("legendPosition", "Automatic");
		}
	
		mySetting.setAttribute("Version", 27);
	}

	if (mySetting.getAttribute("Version") < 28) {
	
		var items = primitives();
		for (var i = 0; i < items.length; i++) {
			if("ShowSlider" in items[i]){
				items[i].setAttribute("SliderStep", "");
			}
		}
	
		mySetting.setAttribute("Version", 28);
	}

	if (mySetting.getAttribute("Version") < 29) {

		var obsolete = excludeType(findValue(/[A-Za-z0-9_]\s+\(/i), "Button");
		if(window.Ext){
			if(viewConfig.allowEdits){
				if (obsolete.length > 0) {

					var msg = '<p>Insight Maker has received a significant update to its equation engine providing improved flexibility and power.</p>';
					msg += '<br/><p>A side effect of this update is that function names must now immediately be followed by a parenthesis. Thus, for instance, "Max&nbsp;&nbsp(1,2)" is no longer valid and needs to be replaced with  "Max(1,2)." This also improves the clarity and readability of equations.</p> ';
					msg += '<br/><p>The following of your primitives appear to use an unsupported format. Their equations will automatically be updated to use the correct format:</p>';
					msg += '<br/><p><b>' + Ext.Array.map(obsolete, function(x) {
						return x.getAttribute("name")
					}).join(", ") + '</b></p>';
		
					msg += '<br/><p>You may save your model to keep these updates.</p>'

					Ext.Msg.show({
						icon: Ext.MessageBox.WARNING,
						title: 'Model Update Required',
						msg: msg,
						buttons: Ext.MessageBox.OK
					});

				}
			}
		}

		if(obsolete.length>0){
			obsolete.map(function(x){
				setValue(x, getValue(x).replace(/([A-Za-z0-9_])\s+\(/gi, "$1("));
			});
		}

		mySetting.setAttribute("Version", 29);
	}

	if (mySetting.getAttribute("Version") < 30) {
		var folders = primitives("Folder");

		for (var i = 0; i < folders.length; i++) {
			folders[i].setAttribute("Solver", defaultSolver);
		}

		mySetting.setAttribute("Version", 30);
	}

	if (mySetting.getAttribute("Version") < 31) {
		var agents = primitives("Agents");

		for (var i = 0; i < agents.length; i++) {
			agents[i].setAttribute('ShowSlider', false);
			agents[i].setAttribute('SliderMax', 100);
			agents[i].setAttribute('SliderMin', 0);
			agents[i].setAttribute('SliderStep', 1);
		}

		mySetting.setAttribute("Version", 31);
	}

	if (mySetting.getAttribute("Version") < 32) {
		var folders = primitives("Folder");

		for (var i = 0; i < folders.length; i++) {
			folders[i].setAttribute("AgentBase", "");
		}

		mySetting.setAttribute("Version", 32);
	}

	if (mySetting.getAttribute("Version") < 33) {
		
		var actions = primitives("Action");
		for (var i = 0; i < actions.length; i++) {
			actions[i].setAttribute("Repeat", true);
			actions[i].setAttribute("Recalculate", true);
		}
	
		var transitions = primitives("Transition");
		for (var i = 0; i < transitions.length; i++) {
			transitions[i].setAttribute("Repeat", false);
			transitions[i].setAttribute("Recalculate", true);
		}
		
		var states = primitives("State");
		for (var i = 0; i < states.length; i++) {
			states[i].setAttribute("Residency", "0");
		}

		mySetting.setAttribute("Version", 33);
	}
	
	if (mySetting.getAttribute("Version") < 34) {

		var obsolete = excludeType(findValue(/\[self\]/i), "Button");

		if(window.Ext){
			if(viewConfig.allowEdits){
				if (obsolete.length > 0) {

					var msg = '<p>Insight Maker has received a significant update to its equation engine improving Agent Based Modeling..</p>';
					msg += '<br/><p>A side effect of this update is that the "Self" agent must always be referred to using the variable syntax -- <i>Self</i> -- instead of the old primitive syntax -- <i>[Self]</i>.</p> ';
					msg += '<br/><p>The following of your primitives appear to use the outdated format. Their equations will automatically be updated to use the correct format:</p>';
					msg += '<br/><p><b>' + Ext.Array.map(obsolete, function(x) {
						return x.getAttribute("name")
					}).join(", ") + '</b></p>';
		
					msg += '<br/><p>You may save your model to keep these updates.</p>'

					Ext.Msg.show({
						icon: Ext.MessageBox.WARNING,
						title: 'Model Update Required',
						msg: msg,
						buttons: Ext.MessageBox.OK
					});

				}
			}
		}

		if(obsolete.length>0){
			obsolete.map(function(x){
				setValue(x, getValue(x).replace(/\[Self\]/gi, "Self"));
			});
		}

		mySetting.setAttribute("Version", 34);
	}
	
	if (mySetting.getAttribute("Version") < 35) {

		mySetting.setAttribute("article", '{"comments":true, "facebookUID": ""}');

		mySetting.setAttribute("Version", 35);
	}
	
	if (mySetting.getAttribute("Version") < 36) {

		mySetting.setAttribute("StyleSheet", '{}');

		mySetting.setAttribute("Version", 36);
	}

}


"use strict";
/*

Copyright 2010-2016 Scott Fortmann-Roe. All rights reserved.

This file may distributed and/or modified under the
terms of the Insight Maker Public License (http://insightMaker.com/impl).

*/




var test;
var errorCount = 0 ;
var testCount = 0;
function runTests(){

	testCount = 0;

	errorCount = 0;

	if(window.ribbonPanel){
		testUI();
	}

	testCreate();
	testClearModel();
	testFolders();
	testPrimitiveGetSet();
	testFind();
	testUnitFunctions();
	testSimulationGetSet();
	testSimulation();
	testUnitsAndConstraints();
	testMacros();
	testTimeShift();
	testRunModel();

	clearModel();

	console.log("Tests complete!\n\n Errors: "+errorCount+"/"+testCount);
	alert("Tests complete! \n\n Errors: "+errorCount+"/"+testCount);
}

function testError(txt){
	console.log(txt);
	errorCount++;
}

function assertEqual(type, a, b) {
	testCount++;
	console.log("- "+test+" - "+type);
	if(a != b){
		testError(" *** FAILED  ***  " + test + " " + type + ". Found (" + a + ") expected (" + b + ")");
	}
}
function assertUnequal(type, a, b) {
	testCount++;
	console.log("- "+test+" - "+type);
	if(a == b){
		testError(" *** FAILED ***  " + test + " " + type + ". Found (" + a + ") expected not (" + b + ")");
	}
}
function assertNull(type, a) {
	testCount++;
	console.log("- "+test+" - "+type);
	if(a !== null){
		testError(" *** FAILED *** " + test + " " + type + ". Found (" + a + ") expected null.");
	}
}
function assertNotNull(type, a) {
	testCount++;
	console.log("- "+test+" - "+type);
	if(a === null){
		testError(" *** FAILED *** " + test + " " + type + ". Found null expected (" + a + ").");
	}
}

function testRunModel(){

	test = "RunModel";

	clearModel();

	var v = createPrimitive("Var", "Variable", [100,100], [100,100]);
	setTimeUnits("Years");
	setTimeStep(1);
	setTimeLength(10);
	setValue(v, "Years()^2");

	var res = runModel(true);
	assertEqual("Old Silent", res.value(v)[2], 4);

	setPauseInterval(1);
	var res = runModel(true);
	assertEqual("Pause Interval", res.value(v)[2], 4);
	setPauseInterval(0);

	runModel({silent: true, onSuccess: function(x){
		assertEqual("Silent Callback", x.value(v)[2], 4);
	}});

	setValue(v, "sds");
	var res = runModel(true)
	assertUnequal("Old Silent Error", res.error, "none");


	runModel({silent: true, onError: function(x){
		assertUnequal("Silent Callback Error", x.error, "none");
	}});

	if(!(graph instanceof SimpleNode)){
		runModel({silent: false, onError: function(x){
			assertUnequal("Non-Silent Callback Error", x.error, "none");
		}});
	}

	clearModel();

	//Test Pausing
	setTimeout(function(){
		//Test Pausing Simulations
		var p = createPrimitive("p", "Variable", [100,100], [100,100]);
		setShowSlider(p, true);
		setPauseInterval(2);
		setValue(p, 1);
		var counter = 1;
		runModel({
			silent: true,
			onPause: function(res){
				assertEqual("Pause "+counter, res.lastValue(p), counter);

				counter++;
				res.setValue(p, counter);

				res.resume()
			},
			onSuccess: function(res){
				assertEqual("Pause "+counter, res.lastValue(p), counter);
				assertEqual("Pause done", true, true);
			},
			onError: function(){
				assertEqual("Pause failed", true, false);
			}
		});

	}, 1000);

	clearModel();

}

function testBothAgents(){
	setAlgorithm("RK1");
	console.log("---RK1---")
	testAgents();

	setAlgorithm("RK4");
	console.log("---RK4---")
	testAgents();
}

function testSubscripting(){
	var prevTest = test;
	var prevTimeLength = getTimeLength();
	var prevTimeUnits = getTimeUnits();

	setTimeUnits("Years")
	setTimeLength(20)
	test = "Subscripting";

	var RK4 = getAlgorithm()=="RK4";

	clearModel();

	var res = runModel(true);
	assertEqual("Blank Model", res.error, "none");


	var p = createPrimitive("Population", "Stock", [100, 100], [100, 100]);
	var r = createPrimitive("Rate", "Variable", [100, 100], [100, 100]);
	var f = createConnector("Growth", "Flow", null, p);
	createConnector("Link", "Link", r, f);

	var a = createPrimitive("Aggregate", "Variable", [100, 100], [100, 100]);
	var b = createPrimitive("Aggregate 2", "Variable", [100, 100], [100, 100]);
	createConnector("Link", "Link", p, a);
	createConnector("Link", "Link", p, b);

	setValue(p, "«'a': 10, 'b': 5»");
	setValue(f, "[Rate]");
	setValue(r, "«a: 2, b: 1»");
	setValue(a, '[Population]{"a"}');
	setValue(b, '[Population]«"b"»');

	var res = runModel(true);
	assertEqual("Subscripting 1", res.value(a)[10], 30);
	assertEqual("Subscripting 2", res.value(b)[10], 15);


	setValue(a, '[Population]«mean»');
	setValue(b, '[Population]«max»');
	var res = runModel(true);
	assertEqual("Subscripting 3", res.value(a)[10], 45/2);
	assertEqual("Subscripting 4", res.value(b)[10], 30);

	setValue(r, "2");
	var res = runModel(true);
	assertUnequal("Subscripting Error 1", runModel(true).error, "none");

	setValue(r, "repeat(2, <<'a', 'b'>>)");
	var res = runModel(true);
	assertEqual("Subscripting 5", res.value(a)[10], 55/2);
	assertEqual("Subscripting 6", res.value(b)[10], 30);

	setValue(p, "«'males': «canada:1, usa:2,'mexico':3», 'females': «'usa':20, 'canada':10, 'mexico': 30» »");

	setValue(a, '([Population]«"males", *»).usa');
	setValue(b, '[Population]«"females", "mexico"»');
	var res = runModel(true);
	assertUnequal("Subscripting Error 2", runModel(true).error, "none");

	setValue(r, "repeat(repeat(2, <<'canada', 'usa', 'mexico'>>), <<'males', 'females'>>)");
	var res = runModel(true);
	assertEqual("Subscripting 7", res.value(a)[10], 2+20);
	assertEqual("Subscripting 8", res.value(b)[10], 30+20);

	setValue(a, '[Population]«"males", max»');
	setValue(b, '[Population]«min, "canada"»');
	var res = runModel(true);
	assertEqual("Subscripting 9", res.value(a)[10], 3+20);
	assertEqual("Subscripting 10", res.value(b)[10], 1+20);

	setValue(a, '([Population]«"males", *»)«"USA"»');
	setValue(b, '([Population]«* , "mexico"»)«"Females"»');
	var res = runModel(true);
	assertEqual("Subscripting 11", res.value(a)[10], 2+20);
	assertEqual("Subscripting 12", res.value(b)[10], 30+20);

	setValue(a, '([Population]{"males", *}){"USA"}');
	setValue(b, '([Population]{* , "mexico"}).Females');
	var res = runModel(true);
	assertEqual("Subscripting 13", res.value(a)[10], 2+20);
	assertEqual("Subscripting 14", res.value(b)[10], 30+20);


	setValue(r, "{males: repeat(3, {'canada', 'usa', 'mexico'}), females: repeat(1, {'canada', 'usa', 'mexico'})}");
	var res = runModel(true);
	assertEqual("Subscripting 15", res.value(a)[10], 2+30);
	assertEqual("Subscripting 16", res.value(b)[10], 30+10);

	setNonNegative(p, false);
	setNonNegative(f, true);
	setValue(r, "«'males': repeat(3, <<'canada', 'usa', 'mexico'>>), 'females': repeat(-4, <<'canada', 'usa', 'mexico'>>)»");
	var res = runModel(true);
	assertEqual("Flow OnlyPositive 1", res.value(a)[10], 2+30);
	assertEqual("Flow OnlyPositive  2", res.value(b)[10], 30+0);

	setNonNegative(f, false);
	var res = runModel(true);
	assertEqual("Flow OnlyPositive  3", res.value(a)[10], 2+30);
	assertEqual("Flow OnlyPositive  4", res.value(b)[10], 30-40);

	setNonNegative(p, true);
	var res = runModel(true);
	assertEqual("Stock Non Negative 1", res.value(a)[10], 2+30);
	assertEqual("Stock Non Negative 2", res.value(b)[10], 0);

	setNonNegative(p, false);
	setConstraints(p, [-100, true, 100, true]);
	var res = runModel(true);
	assertEqual("Constraints 1", runModel(true).error, "none");

	setConstraints(p, [-5, true, 100, true]);
	var res = runModel(true);
	assertUnequal("Constraints 2", runModel(true).error, "none");
	setConstraints(p, [-100, true, 31, true]);
	var res = runModel(true);
	assertUnequal("Constraints 3", runModel(true).error, "none");


	setConstraints(p, [-100, false, 31, false]);
	var res = runModel(true);
	assertEqual("Constraints 4", runModel(true).error, "none");

	setUnits([p,a,b], "Widgets");
	setUnits([f,r], "Widgets/Year");var res = runModel(true);
	var res = runModel(true);
	assertEqual("Units 1", runModel(true).error, "none");

	setValue(p, "«'males': «'canada':1,'usa':{2 cats},'mexico':3», 'females': «'usa':20, 'canada':10, 'mexico': 30» »");
	var res = runModel(true);
	assertUnequal("Units 2", runModel(true).error, "none");

	setValue(p, "«'males': «'canada':1,'usa':{2 widgets},'mexico':3», 'females': «'usa':20, 'canada':10, 'mexico': 30» »");
	var res = runModel(true);
	assertEqual("Units 3", runModel(true).error, "none");


	setStockType(p, "Conveyor");
	setDelay(p, 5);
	var res = runModel(true);
	assertEqual("Conveyor 1", res.value(a)[14], 2+30);
	assertEqual("Conveyor 2", Math.round(res.value(b)[14]*100000), (30-40)*100000);


	setValue(a, '([Population]«"males", *»)«"India"»');
	var res = runModel(true);
	assertUnequal("Errors 1", runModel(true).error, "none");
	setValue(a, '([Population]«"foobar", *»)«"USA"»');
	var res = runModel(true);
	assertUnequal("Errors 2", runModel(true).error, "none");

	clearModel();

	var p = createPrimitive("Population", "Stock", [100, 100], [100, 100]);
	var p2 = createPrimitive("Population 2", "Stock", [100, 100], [100, 100]);
	var r = createPrimitive("Rate", "Variable", [100, 100], [100, 100]);
	var f = createConnector("Growth", "Flow", p, p2);
	createConnector("Link", "Link", r, f);

	var a = createPrimitive("Aggregate", "Variable", [100, 100], [100, 100]);
	createConnector("Link", "Link", p2, a);
	var b = createPrimitive("Aggregate 2", "Variable", [100, 100], [100, 100]);
	createConnector("Link", "Link", p, b);

	setValue(p, 100);
	setValue(p2, 0);
	setValue(f, "[Rate]");
	setValue(r, "<<'dogs':1, 'cats':2>>");
	var res = runModel(true);
	assertEqual("Collapsing 1", res.value(p)[10], 100-10*3);
	assertEqual("Collapsing 2", res.value(p2)[10], 0+10*3);

	setValue(p2, "<<'dogs':5, 'cats':4>>");
	setValue(a, "[population 2]<<'dogs'>>");
	var res = runModel(true);
	assertEqual("Collapsing 3", res.value(p)[10], 100-10*3);
	assertEqual("Collapsing 4", res.value(a)[10], 5+10*1);

	setValue(r, "<<'dogs': <<'x': 1, 'y':2>>, 'cats': <<'x':3, 'y':4>> >>")
	var res = runModel(true);
	assertEqual("Collapsing 5", res.value(p)[10], 100-10*10);
	assertEqual("Collapsing 6", res.value(a)[10], 5+10*3);

	setValue(p, "<<x:40, y:60>>");
	setValue(b, "[Population]<<'x'>>");
	var res = runModel(true);
	assertEqual("Collapsing 7", res.value(b)[10], 40-4*10);
	assertEqual("Collapsing 8", res.value(a)[10], 5+10*3);

	setValue(p2, "<<'dogs':5, 'cats':4, rats:6>>");
	setValue(r, "<<'dogs': <<'x': 1, 'y':2>>, 'cats': <<'x':3, 'y':4>>, 'rats': <<'x':9, 'y':10>> >>")
	var res = runModel(true);
	assertEqual("Collapsing 9", res.value(b)[10], 40-13*10);
	assertEqual("Collapsing 10", res.value(a)[10], 5+10*3);

	setEnds(f, [p2, p]);
	var res = runModel(true);
	assertEqual("Collapsing 11", res.value(b)[10], 40+13*10);
	assertEqual("Collapsing 12", res.value(a)[10], 5-10*3);


	clearModel();

	test = prevTest;

	setTimeUnits(prevTimeUnits)
	setTimeLength(prevTimeLength)
}

function testAgents(){
	var prevTest = test;
	test = "Agents";

	var RK4 = getAlgorithm()=="RK4";

	clearModel();

	var s = createPrimitive("My State", "State", [100,100], [100,100]);
	var s2  = createPrimitive("My State 2", "State", [100,100], [100,100]);
	setValue(s, "false || true");
	setValue(s2, "false || 0");
	var res = runModel(true);
	assertEqual("State Start 1", res.value(s)[0], 1);
	assertEqual("State Start 2", res.value(s2)[0], 0);
	assertEqual("State Start 3", res.value(s)[10], 1);
	assertEqual("State Start 4", res.value(s2)[10], 0);

	setValue(s, "true");
	setValue(s2, "false");

	var act = createPrimitive("Action 1", "Action", [100,100], [100,100]);
	setValue(act, "[My State] <- false")
	setTriggerType(act, "Timeout");
	setTriggerValue(act, 5);
	var act2 = createPrimitive("Action 2", "Action", [100,100], [100,100]);
	setTriggerType(act2, "Timeout");
	setTriggerValue(act2, 100);
	setValue(act2, "[My State 2] <- true")
	var l = createConnector("Link", "Link", s, act);
	var l2 = createConnector("Link", "Link", s2, act2);

	var res = runModel(true);
	assertEqual("State Start 5", res.value(s)[0], 1);
	assertEqual("State Start 6", res.value(s2)[0], 0);
	assertEqual("State Start 7", res.value(s)[10], 0);
	assertEqual("State Start 8", res.value(s2)[10], 0);


	removePrimitive(act);
	removePrimitive(act2);

	removePrimitive(l);
	removePrimitive(l2);

	setValue(s, "false || true");
	setValue(s2, "false || 0");

	var t = createConnector("My Transition", "Transition", null, s2);
	var t2 = createConnector("My Transition", "Transition", s2, null);

	setTriggerType(t, "Timeout");
	setTriggerValue(t, "{2 years}");
	setTriggerType(t2, "Timeout");
	setTriggerValue(t2, "{3 years}");

	var res = runModel(true);
	assertEqual("Transition T Dangle 1", res.value(s)[0], 1);
	assertEqual("Transition T Dangle 2", res.value(s2)[0], 0);
	assertEqual("Transition T Dangle 3", res.value(s)[3], 1);
	assertEqual("Transition T Dangle 4", res.value(s2)[3], 1);
	assertEqual("Transition T Dangle 5", res.value(s2)[8], 0);

	removePrimitive(t)
	removePrimitive(t2);

	var t = createConnector("My Transition", "Transition", s, s2);
	var t2 = createConnector("My Transition", "Transition", s2, s);

	setTriggerType(t, "Timeout");
	setTriggerValue(t, "{10 Years} - Time()");
	setTriggerType(t2, "Timeout");
	setTriggerValue(t2, "{100 years}");

	var res = runModel(true);
	assertEqual("Recalculate 1", res.value(s)[0], 1);
	assertEqual("Recalculate 2", res.value(s2)[0], 0);
	assertEqual("Recalculate 3", res.value(s)[3], 1);
	assertEqual("Recalculate 4", res.value(s2)[3], 0);
	assertEqual("Recalculate 5", res.value(s)[6], 1);
	assertEqual("Recalculate 6", res.value(s2)[6], 0);

	setTriggerRecalculate(t, true);
	var res = runModel(true);
	assertEqual("Recalculate 7", res.value(s)[0], 1);
	assertEqual("Recalculate 8", res.value(s2)[0], 0);
	assertEqual("Recalculate 9", res.value(s)[3], 1);
	assertEqual("Recalculate 10", res.value(s2)[3], 0);
	assertEqual("Recalculate 11", res.value(s)[6], 0);
	assertEqual("Recalculate 12", res.value(s2)[6], 1);

	setTriggerRecalculate(t, false);

	setTriggerType(t, "Probability");
	setTriggerValue(t, "IfThenElse(years < 2, 0, 1)");

	var res = runModel(true);
	assertEqual("Recalculate 13", res.value(s)[0], 1);
	assertEqual("Recalculate 14", res.value(s2)[0], 0);
	assertEqual("Recalculate 15", res.value(s)[3], 1);
	assertEqual("Recalculate 16", res.value(s2)[3], 0);
	assertEqual("Recalculate 17", res.value(s)[6], 1);
	assertEqual("Recalculate 18", res.value(s2)[6], 0);

	setTriggerRecalculate(t, true);
	var res = runModel(true);
	assertEqual("Recalculate 19", res.value(s)[0], 1);
	assertEqual("Recalculate 20", res.value(s2)[0], 0);
	assertEqual("Recalculate 21", res.value(s)[3], 0);
	assertEqual("Recalculate 22", res.value(s2)[3], 1);
	assertEqual("Recalculate 23", res.value(s)[6], 0);
	assertEqual("Recalculate 24", res.value(s2)[6], 1);

	setTriggerRecalculate(t, false);


	setTriggerType(t, "Timeout");
	setTriggerValue(t, "{2 years}");
	setTriggerType(t2, "Timeout");
	setTriggerValue(t2, "{3 years}");

	var res = runModel(true);
	assertEqual("Transition T 1", res.value(s)[0], 1);
	assertEqual("Transition T 2", res.value(s2)[0], 0);
	assertEqual("Transition T 3", res.value(s)[3], 0);
	assertEqual("Transition T 4", res.value(s2)[3], 1);
	assertEqual("Transition T 5", res.value(s)[6], 1);
	assertEqual("Transition T 6", res.value(s2)[6], 0);

	setTriggerValue(t, "2");
	setTriggerValue(t2, "3");
	var res = runModel(true);
	assertEqual("Transition T 1.2", res.value(s)[0], 1);
	assertEqual("Transition T 2.2", res.value(s2)[0], 0);
	assertEqual("Transition T 3.2", res.value(s)[3], 0);
	assertEqual("Transition T 4.2", res.value(s2)[3], 1);
	assertEqual("Transition T 5.2", res.value(s)[6], 1);
	assertEqual("Transition T 6.2", res.value(s2)[6], 0);

	setResidency(s, "2");
	var res = runModel(true);
	assertEqual("Residency 1", res.value(s)[0], 1);
	assertEqual("Residency 2", res.value(s2)[0], 0);
	assertEqual("Residency 3", res.value(s)[3], 1);
	assertEqual("Residency 4", res.value(s2)[3], 0);
	assertEqual("Residency 5", res.value(s)[6], 0);
	assertEqual("Residency 6", res.value(s2)[6], 1);

	setResidency(s, "{2 years}");
	var res = runModel(true);
	assertEqual("Residency 7", res.value(s)[0], 1);
	assertEqual("Residency 8", res.value(s2)[0], 0);
	assertEqual("Residency 9", res.value(s)[3], 1);
	assertEqual("Residency 10", res.value(s2)[3], 0);
	assertEqual("Residency 11", res.value(s)[6], 0);
	assertEqual("Residency 12", res.value(s2)[6], 1);

	setResidency(s, "0");

	setTriggerType(t, "Probability");
	setTriggerValue(t, "1");
	setTriggerType(t2, "Timeout");
	setTriggerValue(t2, "{100 years}");
	var res = runModel(true);
	assertEqual("Transition P 1", res.value(s)[0], 1);
	assertEqual("Transition P 2", res.value(s2)[0], 0);
	assertEqual("Transition P 3", res.value(s)[2], 0);
	assertEqual("Transition P 4", res.value(s2)[2], 1);
	assertEqual("Transition P 5", res.value(s)[10], 0);
	assertEqual("Transition P 6", res.value(s2)[10], 1);
	setTriggerValue(t, "2");
	var res = runModel(true);
	assertUnequal(res.error, "none");
	setTriggerValue(t, "-1");
	var res = runModel(true);
	assertUnequal(res.error, "none");
	setTriggerValue(t, "0");
	var res = runModel(true);
	assertEqual("Transition P 1.3", res.value(s)[0], 1);
	assertEqual("Transition P 2.3", res.value(s2)[0], 0);
	assertEqual("Transition P 3.3", res.value(s)[2], 1);
	assertEqual("Transition P 4.3", res.value(s2)[2], 0);


	setTriggerType(t, "Condition");
	setTriggerValue(t, "years = 5");
	setTriggerType(t2, "Condition");
	setTriggerValue(t2, "years = 7");
	res = runModel(true);
	assertEqual("Transition C 1", res.value(s)[0], 1);
	assertEqual("Transition C 2", res.value(s2)[0], 0);
	assertEqual("Transition C 3", res.value(s)[6], 0);
	assertEqual("Transition C 4", res.value(s2)[6], 1);
	assertEqual("Transition C 5", res.value(s)[7], 0);
	assertEqual("Transition C 6", res.value(s2)[7], 1);
	assertEqual("Transition C 7", res.value(s)[8], 1);
	assertEqual("Transition C 8", res.value(s2)[8], 0);


	setTriggerRepeat(t, true);
	setTriggerRepeat(t2, true);
	res = runModel(true);
	assertEqual("Transition C Repeat 1", res.value(s)[0], 1);
	assertEqual("Transition C Repeat 2", res.value(s2)[0], 0);
	assertEqual("Transition C Repeat 3", res.value(s)[6], 0);
	assertEqual("Transition C Repeat 4", res.value(s2)[6], 1);
	assertEqual("Transition C Repeat 5", res.value(s)[7], 0);
	assertEqual("Transition C Repeat 6", res.value(s2)[7], 1);
	assertEqual("Transition C Repeat 7", res.value(s)[8], 1);
	assertEqual("Transition C Repeat 8", res.value(s2)[8], 0);


	clearModel();

	var s = createPrimitive("State", "State", [100,100], [100,100]);
	var v  = createPrimitive("Variable", "State", [300,100], [100,100]);
	var l = createConnector("My Link", "Link", s, v);

	setValue(s, "true");
	setValue(v, "ifThenElse([State], 1, 0)");
	res = runModel(true);
	assertEqual("State Values 1", res.value(s)[0], 1);
	assertEqual("State Values 2", res.value(v)[0], 1);
	setValue(s, "false");
	res = runModel(true);
	assertEqual("State Values 3", res.value(s)[0], 0);
	assertEqual("State Values 4", res.value(v)[0], 0);
	setValue(v, "if [State] then\n 1\nelse\n 0\nend if");
	res = runModel(true);
	assertEqual("State Values 5", res.value(s)[0], 0);
	assertEqual("State Values 6", res.value(v)[0], 0);
	setValue(s, "true");
	res = runModel(true);
	assertEqual("State Values 7", res.value(s)[5], 1);
	assertEqual("State Values 8", res.value(v)[5], 1);

	clearModel();


	var s = createPrimitive("State 1", "State", [100,100], [100,100]);
	var s2  = createPrimitive("State 2", "State", [100,100], [100,100]);
	var l = createConnector("My Link", "Link", s, s2);
	var t = createConnector("My Transition", "Transition", s, s2);
	var t2 = createConnector("My Transition", "Transition", s2, s);

	setTriggerType(t, "Timeout");
	setTriggerValue(t, "{2 years}");
	setTriggerType(t2, "Condition");
	setTriggerValue(t2, "false");
	setValue(s, "1");
	setValue(s2, "! [State 1]")

	var f = createPrimitive("My Agent", "Folder", [200,150], [400,400]);
	setParent([s, s2, l, t, t2], f);
	setFolderType(f, "Agent");

	var pop = createPrimitive("Population", "Agents", [1210,0], [200,200])
	createConnector("Link","Link", f, pop);
	setAgentBase(pop, f);
	setPopulationSize(pop, 10);

	var v = createPrimitive("My Variable", "Variable", [1200,150], [150,100]);
	var v2 = createPrimitive("My Variable 2", "Variable", [1200,150], [150,100]);
	setValue(v, "Count(FindAll([Population]))")
	setValue(v2, "PopulationSize([Population])+1")
	var l2 = createConnector("My Link", "Link", pop, v);
	var l3 = createConnector("My Link", "Link", pop, v2);

	res = runModel(true);
	assertEqual("Pop 1", res.value(v)[0], 10);
	assertEqual("Pop 2", res.value(v)[8], 10);
	assertEqual("Pop 2.1", res.value(v2)[0], 11);
	assertEqual("Pop 2.2", res.value(v2)[8], 11);

	setValue(v, "[Population].FindAll().length()")
	setValue(v2, "[Population].PopulationSize()+1")

	res = runModel(true);
	assertEqual("Pop 1 (Obj)", res.value(v)[0], 10);
	assertEqual("Pop 2 (Obj)", res.value(v)[8], 10);
	assertEqual("Pop 2.1 (Obj)", res.value(v2)[0], 11);
	assertEqual("Pop 2.2 (Obj)", res.value(v2)[8], 11);

	setValue(v, "Count(FindState([Population], [State 1]))")
	setValue(v2, "Count(FindState([Population], [State 2]))")

	res = runModel(true);
	assertEqual("Pop 3", res.value(v)[0], 10);
	assertEqual("Pop 4", res.value(v2)[0], 0);
	assertEqual("Pop 5", res.value(v)[8], 0);
	assertEqual("Pop 6", res.value(v2)[8], 10);

	setValue(v, "[Population].findState([State 1]).length()")
	setValue(v2, "[Population].findState([State 2]).length()")

	res = runModel(true);
	assertEqual("Pop 3 (Obj)", res.value(v)[0], 10);
	assertEqual("Pop 4 (Obj)", res.value(v2)[0], 0);
	assertEqual("Pop 5 (Obj)", res.value(v)[8], 0);
	assertEqual("Pop 6 (Obj)", res.value(v2)[8], 10);


	var v3 = createPrimitive("My Variable 3", "Variable", [1200,150], [150,100]);
	var l4 = createConnector("My Link", "Link", pop, v3);
	var l5 = createConnector("My Link", "Link", v3, v2);

	setValue(v3, "FindState([Population], [State 2])");
	setValue(v2, "Count([My Variable 3])")

	res = runModel(true);
	assertEqual("Pop 6.1", res.value(v)[0], 10);
	assertEqual("Pop 6.2", res.value(v2)[0], 0);
	assertEqual("Pop 6.3", res.value(v)[8], 0);
	assertEqual("Pop 6.4", res.value(v2)[8], 10);
	assertEqual("Pop 6.5", res.error, "none");

	setValue(v3, "[Population].findState([State 2])");
	setValue(v2, "[My Variable 3].length()")

	res = runModel(true);
	assertEqual("Pop 6.1 (Obj)", res.value(v)[0], 10);
	assertEqual("Pop 6.2 (Obj)", res.value(v2)[0], 0);
	assertEqual("Pop 6.3 (Obj)", res.value(v)[8], 0);
	assertEqual("Pop 6.4 (Obj)", res.value(v2)[8], 10);
	assertEqual("Pop 6.5 (Obj)", res.error, "none");



	setValue(v, "Count(FindNotState([Population], [State 1]))");
	setValue(v2, "Count(FindNotState([Population], [State 2]))");

	res = runModel(true);
	assertEqual("Pop 6.6", res.error, "none");

	setValue(v, "Count([Population].FindNotState([State 1]))");
	setValue(v2, "Count([Population].FindNotState([State 2]))");
	res = runModel(true);
	assertEqual("Pop 6.6 (Obj)", res.error, "none");


	setValue(v3, "FindState([Population], [State 2])+1");
	res = runModel(true);
	assertUnequal("Pop 6.7", res.error, "none");

	setValue(v3, "[Population].FindState([State 2])+1");
	res = runModel(true);
	assertUnequal("Pop 6.7 (Obj)", res.error, "none");

	setValue(v3, "[Population]+1");
	res = runModel(true);
	assertUnequal("Pop 6.8", res.error, "none");

	removePrimitive(v3);

	setTriggerType(t2, "Timeout");
	setTriggerValue(t2, "5");
	setTriggerType(t2, "Condition");
	setTriggerValue(t2, "index(self)=1 and years=7");

	res = runModel(true);
	assertEqual("Pop 7", res.value(v)[0], 0);
	assertEqual("Pop 8", res.value(v2)[0], 10);
	assertEqual("Pop 9", res.value(v)[8], 9);
	assertEqual("Pop 10", res.value(v2)[8], 1);

	setTriggerValue(t2, "self.index()=1 and years=7");

	res = runModel(true);
	assertEqual("Pop 7 (obj)", res.value(v)[0], 0);
	assertEqual("Pop 8 (obj)", res.value(v2)[0], 10);
	assertEqual("Pop 9 (obj)", res.value(v)[8], 9);
	assertEqual("Pop 10 (obj)", res.value(v2)[8], 1);


	var v3 = createPrimitive("Var", "Variable", [200,150], [150,100]);
	setParent(v3, f);

	var v4 = createPrimitive("Outside Var", "Variable", [200,150], [150,100]);
	setParent(v4, f);
	setValue(v4, "IfThenElse(years<5, 1, 0)");

	createConnector("Link", "Link", v4, v3);
	setValue(v3, "[Outside Var]*2");


	setValue(v, "Min(Value([Population], [Var]))")
	setValue(v2, "Max(Value([Population], [Var]))")
	res = runModel(true);
	assertEqual("Pop 10.1", res.value(v)[0], 2);
	assertEqual("Pop 10.2", res.value(v)[8], 0);

	setValue(v, "[Population].value([Var]).min()")
	setValue(v2, "Max([Population].Value([Var]))")
	res = runModel(true);
	assertEqual("Pop 10.1 (obj)", res.value(v)[0], 2);
	assertEqual("Pop 10.2 (obj)", res.value(v)[8], 0);

	setMacros("counter <- 0");

	var act = createPrimitive("Action", "Action", [200,150], [150, 100]);
	setTriggerType(act, "Condition");
	setTriggerValue(act, "true");
	setValue(act, "Counter <- counter + 1");
	setValue(v3, "counter*3")

	res = runModel(true);
	assertEqual("Pop 10.3", res.value(v)[0], 0);
	assertEqual("Pop 10.4", res.value(v)[8], 24);

	setTriggerRepeat(act, false);
	res = runModel(true);
	assertEqual("Repeat Off 1", res.value(v)[0], 0);
	assertEqual("Repeat Off 2", res.value(v)[8], 3);

	setTriggerRepeat(act, true);

	setTriggerValue(act, "false");
	res = runModel(true);
	assertEqual("Pop 10.5", res.value(v)[0], 0);
	assertEqual("Pop 10.6", res.value(v)[8], 0);

	setTriggerType(act, "Condition");
	setTriggerValue(act, "true");
	res = runModel(true);
	assertEqual("Pop 10.7", res.value(v)[0], 0);
	assertEqual("Pop 10.8", res.value(v)[8], 24);

	setTriggerValue(act, "false");
	res = runModel(true);
	assertEqual("Pop 10.9", res.value(v)[0], 0);
	assertEqual("Pop 10.10", res.value(v)[8], 0);

	setTriggerType(act, "Timeout");
	setTriggerValue(act, "100");
	res = runModel(true);
	assertEqual("Pop 10.11", res.value(v)[0], 0);
	assertEqual("Pop 10.12", res.value(v)[8], 0);
	setTriggerValue(act, "{100 years}");
	res = runModel(true);
	assertEqual("Pop 10.13", res.value(v)[0], 0);
	assertEqual("Pop 10.14", res.value(v)[8], 0);
	setTriggerType(act, "Condition");
	setTriggerValue(act, "true");

	var st = createPrimitive("Count", "Stock", [200,150], [150,100]);
	setParent([act, st], f);
	setValue(st, 10);
	setValue(act, "[Count] <- [Count] + 2");
	var l = createConnector("Link", "Link",st, v3);
	var l2 = createConnector("Link", "Link",st, act);
	setValue(v3, "[Count]");

	res = runModel(true);
	assertEqual("Pop 10.17", res.value(v)[0], 10);
	assertEqual("Pop 10.18", res.value(v)[8], 10+2*8);

	removePrimitive(act);
	removePrimitive(st);
	removePrimitive(l);
	removePrimitive(l2);

	setValue(v3, "index(self)");


	res = runModel(true);
	assertEqual("Pop 11", res.value(v)[0], 1);
	assertEqual("Pop 12", res.value(v2)[8], 10);

	setValue(v, "PopulationSize([Population])")
	setValue(v2, "Count(Value([Population], [Var]))")
	res = runModel(true);
	assertEqual("Pop 12.1", res.value(v)[0], res.value(v2)[0]);
	assertEqual("Pop 12.2", res.value(v)[8], res.value(v2)[8]);

	setValue(v, "[Population].PopulationSize()")
	setValue(v2, "Count([Population].Value([Var]))")
	res = runModel(true);
	assertEqual("Pop 12.1 (Obj)", res.value(v)[0], res.value(v2)[0]);
	assertEqual("Pop 12.2 (Obj)", res.value(v)[8], res.value(v2)[8]);

	setValue(v, "Count(Join(FindState([Population], [State 1]), FindState([Population], [State 2])))");
	setValue(v2, "Min(Value(Join(FindState([Population], [State 1]), FindState([Population], [State 2])), [Var]))");
	res = runModel(true);
	assertEqual("Pop 13", res.value(v)[0], 10);
	assertEqual("Pop 14", res.value(v2)[8], 1);

	setValue(v, "Join([Population].FindState([State 1]), [Population].FindState([State 2])).Length()");
	setValue(v2, "Join([Population].FindState([State 1]), [Population].FindState([State 2])).Value([Var]).Min()");
	res = runModel(true);
	assertEqual("Pop 13 (Obj)", res.value(v)[0], 10);
	assertEqual("Pop 14 (Obj)", res.value(v2)[8], 1);

	setValue(v, "Count(Join(Filter(FindAll([Population]), value(x, [Var])>8), Filter(FindAll([Population]), value(x, [Var]) <=3)))");
	setValue(v2, "Count(Union(Filter(FindAll([Population]), value(x, [Var])>8), Filter(FindAll([Population]), value(x, [Var]) <=3)))");
	res = runModel(true);
	assertEqual("Pop 14.1", res.value(v)[0], 5);
	assertEqual("Pop 14.2", res.value(v2)[8], 5);

	setValue(v, "Join(Filter([Population].FindAll(), value(x, [Var])>8), Filter(FindAll([Population]), value(x, [Var]) <=3)).Length()");
	setValue(v2, "Union([Population].FindAll().Filter(x.value([Var])>8), [Population].FindAll().Filter(x.value([Var]) <=3)).Length()");
	res = runModel(true);
	assertEqual("Pop 14.1 (Obj)", res.value(v)[0], 5);
	assertEqual("Pop 14.2 (Obj)", res.value(v2)[8], 5);

	setValue(v, "Count(Intersection(Filter(FindAll([Population]), value(x, [Var])>8), Filter(FindAll([Population]), value(x, [Var])<=3)))");
	setValue(v2, "Count(Difference(Filter(FindAll([Population]), value(x, [Var])>8), Filter(FindAll([Population]), value(x, [Var])<=3)))");
	res = runModel(true);
	assertEqual("Pop 14.3", res.value(v)[0], 0);
	assertEqual("Pop 14.4", res.value(v2)[8], 5);

	setValue(v, "Distance(FindNearest([Population], FindIndex([population], 1)), FindIndex([population], 1)) = Min(map(Select(FindAll([Population]),join(false, repeat(true,9))), distance(x, FindIndex([population],1))))");
	setValue(v2, "Distance(FindFurthest([Population], FindIndex([population], 1)), FindIndex([population], 1)) = Max(map(Select(FindAll([Population]),join(false, repeat(true,9))), distance(x, FindIndex([population],1))))");
	res = runModel(true);
	assertEqual("Pop 14.5", res.value(v)[0], 1);
	assertEqual("Pop 14.6", res.value(v2)[8], 1);

	setValue(v, "Distance([Population].FindNearest([population].FindIndex(1)), [population].FindIndex(1)) = Min(map(Select([Population].FindAll(),join(false, repeat(true,9))), distance(x, [population].FindIndex(1))))");
	setValue(v2, "Distance([Population].FindFurthest([population].FindIndex(1)), [population].FindIndex(1)) = Max(map(Select(FindAll([Population]),join(false, repeat(true,9))), distance(x, [population].FindIndex(1))))");
	res = runModel(true);
	assertEqual("Pop 14.5 (Obj)", res.value(v)[0], 1);
	assertEqual("Pop 14.6 (Obj)", res.value(v2)[8], 1);

	setValue(v, "Distance(select(FindNearest([Population], FindIndex([population], 1),2),2), FindIndex([population], 1)) = Min(map(Select(FindAll([Population]),join(false, repeat(true,9))), distance(x, FindIndex([population],1))))");
	setValue(v2, "Distance(select(FindFurthest([Population], FindIndex([population], 1),3),2), FindIndex([population], 1)) = Max(map(Select(FindAll([Population]),join(false, repeat(true,9))), distance(x, FindIndex([population],1))))");
	res = runModel(true);
	assertEqual("Pop 14.5.2", res.value(v)[0], 0);
	assertEqual("Pop 14.6.2", res.value(v2)[8], 0);

	setValue(v, "Count(FindNearby([Population], FindIndex([Population], 1), 400))");
	setValue(v2, "Count(FindNearby([Population], FindIndex([Population], 1), 0))");
	res = runModel(true);
	assertEqual("Pop 14.7", res.value(v)[0], 9);
	assertEqual("Pop 14.8", res.value(v2)[8], 0);

	setValue(v, "[Population].FindNearby([Population].FindIndex(1), 400).length()");
	setValue(v2, "[Population].FindNearby([Population].FindIndex(1), 0).length()");
	res = runModel(true);
	assertEqual("Pop 14.7 (Obj)", res.value(v)[0], 9);
	assertEqual("Pop 14.8 (Obj)", res.value(v2)[8], 0);

	setValue(v, "[Population].FindNearby( {0,0}, 400).length()");
	setValue(v2, "[Population].FindNearby({0,0}, 0).length()");
	res = runModel(true);
	assertEqual("Pop 14.7.2", res.value(v)[0], 10);
	assertEqual("Pop 14.8.2", res.value(v2)[8], 0);

	setValue(v, "[Population].FindNearby( {0}, 400).length()");
	res = runModel(true);
	assertUnequal("Pop 14.7.3", res.error, "none");


	setValue(v, "[Population].FindNearby( {0,0}, 400).length()");
	setValue(v2, "[Population].FindNearby({0}, 0).length()");
	res = runModel(true);
	assertUnequal("Pop 14.8.3", res.error, "none");

	setValue(v2, "[Population].FindNearby({0,0}, 0).length()");
	res = runModel(true);
	assertEqual("Pop 14.7.4", res.value(v)[0], 10);
	assertEqual("Pop 14.8.4", res.value(v2)[8], 0);


	setValue(v, "[Population].FindNearby( 'abc', 400).length()");
	res = runModel(true);
	assertUnequal("Pop 14.8.5", res.error, "none");


	setValue(v, "width([Population])")
	setValue(v2, "height([Population])")
	res = runModel(true);
	assertEqual("Pop 14.9", res.value(v)[0], 200);
	assertEqual("Pop 14.10", res.value(v2)[8], 100);

	setValue(v, "[Population].FindIndex(2) == [Population].FindIndex(2)");
	setValue(v2, "[Population].FindIndex(2) == [Population].FindIndex(3)");
	res = runModel(true);
	assertEqual("Comparison 1", res.value(v)[0], true);
	assertEqual("Comparison 2", res.value(v2)[8], false);

	setValue(v, "[Population].FindIndex(2) != [Population].FindIndex(2)");
	setValue(v2, "[Population].FindIndex(2) != [Population].FindIndex(3)");
	res = runModel(true);
	assertEqual("Comparison 3", res.value(v)[0], false);
	assertEqual("Comparison 4", res.value(v2)[8], true);

	setValue(v, "[Population].FindIndex(2) > [Population].FindIndex(2)");
	res = runModel(true);
	assertUnequal("Comparison 5", res.error, "none");
	setValue(v, "[Population].FindIndex(2) >= [Population].FindIndex(2)");
	res = runModel(true);
	assertUnequal("Comparison 6", res.error, "none");
	setValue(v, "[Population].FindIndex(2) < [Population].FindIndex(2)");
	res = runModel(true);
	assertUnequal("Comparison 7", res.error, "none");
	setValue(v, "[Population].FindIndex(2) <= [Population].FindIndex(2)");
	res = runModel(true);
	assertUnequal("Comparison 8", res.error, "none");


	setAgentPlacement(pop, "Grid");
	setValue(v, "IfThenElse(Select(Location(FindIndex([Population], 1)),1)==Select(Location(FindIndex([Population], 2)),1), 1, 0)");
	setValue(v2, "IfThenElse(Select(Location(FindIndex([Population], 1)),2)==Select(Location(FindIndex([Population], 2)),2), 1, 0)");
	res = runModel(true);
	assertEqual("Grid Loc 15", res.value(v)[0], 0);
	assertEqual("Grid Loc 16", res.value(v2)[8], 1);

	setAgentPlacement(pop, "Ellipse");
	setValue(v, "IfThenElse(Select(Location(FindIndex([Population], 1)),1)==Select(Location(FindIndex([Population], 2)),1), 1, 0)");
	setValue(v2, "IfThenElse(Select(Location(FindIndex([Population], 1)),2)==Select(Location(FindIndex([Population], 2)),2), 1, 0)");
	res = runModel(true);
	assertEqual("Grid Loc 16.1", res.value(v)[0], 0);
	assertEqual("Grid Loc 16.2", res.value(v2)[8], 0);


	setAgentPlacement(pop, "Network");
	setValue(v, "IfThenElse(Select(Location(FindIndex([Population], 1)),1)==Select(Location(FindIndex([Population], 2)),1), 1, 0)");
	setValue(v2, "IfThenElse(Select(Location(FindIndex([Population], 1)),2)==Select(Location(FindIndex([Population], 2)),2), 1, 0)");
	res = runModel(true);
	assertEqual("Network Loc 17", res.value(v)[0], 0);
	assertEqual("Network Loc 18", res.value(v2)[8], 0);

	setAgentPlacement(pop, "Custom Function");
	setValue(v, "IfThenElse(Select(Location(FindIndex([Population], 1)),1)==Select(Location(FindIndex([Population], 2)),1), 1, 0)");
	setValue(v2, "IfThenElse(Select(Location(FindIndex([Population], 1)),2)==Select(Location(FindIndex([Population], 2)),2), 1, 0)");
	res = runModel(true);
	assertEqual("Custom Loc 19", res.value(v)[0], 0);
	assertEqual("Custom Loc 20", res.value(v2)[8], 0);

	setAgentPlacementFunction(pop, "<<index(Self)*10,index(Self)*20>>");
	setValue(v, "Location(FindIndex([Population], 1)).x");
	setValue(v2, "Location(FindIndex([Population], 2)).y");
	res = runModel(true);
	assertEqual("Custom Loc 21", res.value(v)[0], 10);
	assertEqual("Custom Loc 22", res.value(v2)[8], 40);

	setAgentPlacementFunction(pop, "{index(Self)*10, Self.index()*20}");
	res = runModel(true);
	assertEqual("Custom Loc 21 (Self)", res.value(v)[0], 10);
	assertEqual("Custom Loc 22 (Self)", res.value(v2)[8], 40);

	setAgentPlacementFunction(pop, "<<Self.index()*10,Self.index()*20>>");
	setValue(v, "[Population].FindIndex(1).Location().x");
	setValue(v2, "[Population].FindIndex(2).Location().y");
	res = runModel(true);
	assertEqual("Custom Loc 21 (Obj)", res.value(v)[0], 10);
	assertEqual("Custom Loc 22 (Obj)", res.value(v2)[8], 40);


	var mover = createPrimitive("Mover", "Action", [200,150], [150,100]);
	setParent(mover, f);
	setTriggerType(mover, "Condition");
	setTriggerValue(mover, "true")
	setValue(mover, "move(Self, {10, 20})");
	res = runModel(true);
	assertEqual("Custom Move 22", res.value(v)[2], 10+2*10);
	assertEqual("Custom Move 23", res.value(v2)[9], 40+9*20);

	setValue(mover, "Self.move({10, 20})");
	res = runModel(true);
	assertEqual("Custom Move 22 (Obj)", res.value(v)[2], 10+2*10);
	assertEqual("Custom Move 23 (Obj)", res.value(v2)[9], 40+9*20);


	setValue(mover, "Self.setLocation({11, 21})");
	res = runModel(true);
	assertEqual("Custom Move 24 (Obj)", res.value(v)[2], 11);
	assertEqual("Custom Move 25 (Obj)", res.value(v2)[9], 21);


	setFolderAgentParent(f, "x <- new AgentBase\n x.doMove <- function() self.move({10, 20})\n x")
	setValue(mover, "Self.doMove()");
	res = runModel(true);
	assertEqual("Custom Agent Parent 1", res.value(v)[2], 10+2*10);
	assertEqual("Custom Agent Parent 2", res.value(v2)[9], 40+9*20);

	setMacros("mover <- new AgentBase\n mover.doMove <- function(dist) self.move(dist*{1, 2})")
	setFolderAgentParent(f, "mover")
	setValue(mover, "Self.doMove(10)");
	res = runModel(true);
	assertEqual("Custom Agent Parent 3", res.value(v)[2], 10+2*10);
	assertEqual("Custom Agent Parent 4", res.value(v2)[9], 40+9*20);


	setGeometryWrap(pop, true);
	res = runModel(true);
	assertEqual("Custom Move 24", res.value(v)[2], (10+2*10) % 200);
	assertEqual("Custom Move 25", res.value(v2)[9], (40+9*20) % 100);

	createConnector("Link","Link", pop, mover);
	setAgentPlacementFunction(pop, "{index(Self)*10, 1}");

	setValue(mover, "moveTowards(Self, findIndex([Population], 1), 1)");
	setValue(v2, "Location(FindIndex([Population], 2)).x")
	res = runModel(true);
	assertEqual("Custom Move 26", res.value(v)[2], 10);
	assertEqual("Custom Move 27", res.value(v)[9], 10);
	assertEqual("Custom Move 27.1", res.value(v2)[2], 20-2*1);
	assertEqual("Custom Move 27.2", res.value(v2)[9], 20-9*1);

	setValue(mover, "Self.moveTowards([Population].findIndex(1), 1)");
	setValue(v2, "[Population].FindIndex(2).Location().x")
	res = runModel(true);
	assertEqual("Custom Move 26 (Obj)", res.value(v)[2], 10);
	assertEqual("Custom Move 27 (Obj)", res.value(v)[9], 10);
	assertEqual("Custom Move 27.1 (Obj)", res.value(v2)[2], 20-2*1);
	assertEqual("Custom Move 27.2 (Obj)", res.value(v2)[9], 20-9*1);



	setValue(mover, "1");


	setAgentNetwork(pop, "Custom Function");
	setAgentNetworkFunction(pop, "ifThenElse(index(a)=1 || index(b)=1, true, false)");
	setValue(v, "count(connected(findIndex([Population], 1)))")
	setValue(v2, "count(connected(findIndex([Population], 3)))")
	res = runModel(true);
	assertEqual("Custom Network 28", res.value(v)[0], 9);
	assertEqual("Custom Network 29", res.value(v2)[8], 1);

	setValue(v, "count(connectionWeight(findIndex([Population], 1), connected(findIndex([Population], 1))))")
	setValue(v2, "connectionWeight(findIndex([Population], 3), connected(findIndex([Population], 3))){1}")
	res = runModel(true);
	assertEqual("Custom Network 29.1", res.value(v)[0], 9);
	assertEqual("Custom Network 29.2", res.value(v2)[8], 1);


	setValue(v, "setConnectionWeight(findIndex([Population], 1), connected(findIndex([Population], 1)), 5)")
	setValue(v2, "connectionWeight(findIndex([Population], 1), connected(findIndex([Population], 1))){1}")
	res = runModel(true);
	assertEqual("Custom Network 29.3", res.value(v)[0], 1);
	assertEqual("Custom Network 29.4", res.value(v2)[8], 5);

	setValue(v, "[Population].findIndex(1).connected().length()")
	setValue(v2, "[Population].findIndex(3).connected().length()")
	res = runModel(true);
	assertEqual("Custom Network 28 (Obj)", res.value(v)[0], 9);
	assertEqual("Custom Network 29 (Obj)", res.value(v2)[8], 1);


	setValue(mover, "ifthenelse( index(self)==3, unconnect(self, findIndex([population], 1)), 0)");
	res = runModel(true);
	assertEqual("Custom Network 30", res.value(v)[0], 9);
	assertEqual("Custom Network 31", res.value(v2)[0], 1);
	assertEqual("Custom Network 32", res.value(v)[8], 8);
	assertEqual("Custom Network 33", res.value(v2)[8], 0);

	setValue(mover, "ifthenelse( index(self)==3, self.unconnect([population].findIndex(1)), 0)");
	res = runModel(true);
	assertEqual("Custom Network 30 (Obj)", res.value(v)[0], 9);
	assertEqual("Custom Network 31 (Obj)", res.value(v2)[0], 1);
	assertEqual("Custom Network 32 (Obj)", res.value(v)[8], 8);
	assertEqual("Custom Network 33 (Obj)", res.value(v2)[8], 0);


	setValue(mover, "ifthenelse(index(self)==3, connect(self, findIndex([population], 2)),0)");
	res = runModel(true);
	assertEqual("Custom Network 34", res.value(v)[0], 9);
	assertEqual("Custom Network 35", res.value(v2)[0], 1);
	assertEqual("Custom Network 36", res.value(v)[8], 9);
	assertEqual("Custom Network 37", res.value(v2)[8], 2);

	setValue(mover, "IfThenElse(self.index()==3, self.connect([population].findIndex(2)),0)");
	res = runModel(true);
	assertEqual("Custom Network 34 (Obj)", res.value(v)[0], 9);
	assertEqual("Custom Network 35 (Obj)", res.value(v2)[0], 1);
	assertEqual("Custom Network 36 (Obj)", res.value(v)[8], 9);
	assertEqual("Custom Network 37 (Obj)", res.value(v2)[8], 2);

	setValue(mover, "ifthenelse(index(self)==3, connect(self, true),0)");
	res = runModel(true);
	assertUnequal("Custom Network 38", res.error, "none");


	setValue(mover, "ifthenelse(index(self)==3, self.connect(true),0)");
	res = runModel(true);
	assertUnequal("Custom Network 38 (Obj)", res.error, "none");

	setValue(mover, "ifthenelse(index(self)==3, connect(self, 1),0)");
	res = runModel(true);
	assertUnequal("Custom Network 39", res.error, "none");

	setTriggerType(mover, "Condition");
	setTriggerValue(mover, "((index(self)==3 && years>=2) || (index(self)==5 && years>=5))");
	setValue(mover, "remove(self)");
	setValue(v, "populationSize([Population])")
	setValue(v2, "count(connected(findIndex([Population], 1)))")
	res = runModel(true);
	assertEqual("Add/Remove 1", res.value(v)[0], 10);
	assertEqual("Add/Remove 2", res.value(v)[4], 9);
	assertEqual("Add/Remove 3", res.value(v)[8], 8);

	setTriggerValue(mover, "((self.index()==3 && years==2) || (self.index()==5 && years==5))");
	setValue(mover, "self.remove()");
	setValue(v, "[Population].populationSize()")
	setValue(v2, "[Population].findIndex(1).connected().length()")
	res = runModel(true);
	assertEqual("Add/Remove 1 (Obj)", res.value(v)[0], 10);
	assertEqual("Add/Remove 2 (Obj)", res.value(v)[4], 9);
	assertEqual("Add/Remove 3 (Obj)", res.value(v)[8], 8);

	setTriggerValue(mover, "((index(self)==3 && years==2) || (index(self)==5 && years==5))");
	setValue(mover, "add([Population])");
	setValue(v, "populationSize([Population])")
	setValue(v2, "count(connected(findIndex([Population], 3)))")
	res = runModel(true);
	assertEqual("Add/Remove 5", res.value(v)[0], 10);
	assertEqual("Add/Remove 6", res.value(v)[4], 11);
	assertEqual("Add/Remove 7", res.value(v)[8], 12);

	setValue(mover, "[Population].add()");
	assertEqual("Add/Remove 5 (Obj)", res.value(v)[0], 10);
	assertEqual("Add/Remove 6 (Obj)", res.value(v)[4], 11);
	assertEqual("Add/Remove 7 (Obj)", res.value(v)[8], 12);

	setTriggerValue(mover, "((index(self)==3 && years==2) || (index(self)==5 && years==5))");
	setValue(mover, "add([Population], Self)");
	setValue(v, "populationSize([Population])")
	res = runModel(true);
	assertEqual("Add/Remove 8", res.value(v)[0], 10);
	assertEqual("Add/Remove 9", res.value(v)[4], 11);
	assertEqual("Add/Remove 10", res.value(v)[8], 12);

	setValue(mover, "[Population].add(Self)");
	assertEqual("Add/Remove 8 (Obj)", res.value(v)[0], 10);
	assertEqual("Add/Remove 9 (Obj)", res.value(v)[4], 11);
	assertEqual("Add/Remove 10 (Obj)", res.value(v)[8], 12);

	setAgentPlacement(pop, "Random");

	setPopulationSize(pop, 1);
	setTriggerValue(mover, "years == 5 ");
	setValue(mover, "[Population].add()");
	setValue(v, "populationSize([Population])")
	setValue(v2, "IfThenElse(populationsize([Population])==2, Select(Location(FindIndex([Population], 1)),2)==Select(Location(FindIndex([Population], 2)),2), -1)")

	res = runModel(true);
	assertEqual("Add/Remove 11", res.value(v)[0], 1);
	assertEqual("Add/Remove 12", res.value(v)[8], 2);
	assertEqual("Add/Remove 13", res.value(v2)[0], -1);
	assertEqual("Add/Remove 14", res.value(v2)[7], 0); //not clone

	setPopulationSize(pop, 1);
	setValue(mover, "add([Population], Self)");
	setValue(v, "populationSize([Population])")
	setValue(v2, "ifthenElse(populationsize([Population])==2, Select(Location(FindIndex([Population], 1)),2)==Select(Location(FindIndex([Population], 2)),2), -1)")
	res = runModel(true);
	assertEqual("Add/Remove 15", res.value(v)[0], 1);
	assertEqual("Add/Remove 16", res.value(v)[8], 2);
	assertEqual("Add/Remove 17", res.value(v2)[0], -1);
	assertEqual("Add/Remove 18", res.value(v2)[7], 1); //clone

	setPopulationSize(pop, 0);
	setParent(mover);
	setTriggerValue(mover, "years == 5 or years==3");
	setValue(mover, "add([Population])");
	setValue(v, "populationSize([Population])")
	setValue(v2, "IfThenElse(populationsize([Population])==2, Select(Location(FindIndex([Population], 1)),2)==Select(Location(FindIndex([Population], 2)),2), -1)")
	res = runModel(true);
	assertEqual("Add/Remove 19", res.value(v)[0], 0);
	assertEqual("Add/Remove 20", res.value(v)[8], 2);
	assertEqual("Add/Remove 21", res.value(v2)[0], -1);
	assertEqual("Add/Remove 22", res.value(v2)[7], 0); // not clone

	setPopulationSize(pop, 3);
	createConnector("Link", "Link", pop, t);
	setValue(mover, 1);
	setTriggerType(t, "Condition");
	setTriggerValue(t, "Distance(self, [Population].findIndex(1)) > 1");
	setTriggerRepeat(t, false);
	setTriggerRepeat(t2, false);
	res = runModel(true);
	assertEqual("Init Position With State", res.error, "none");

	setPopulationSize(pop, 2);
	removePrimitive(t);
	removePrimitive(t2);
	setParent(mover);
	setValue(s, "false");
	setTriggerValue(mover, "years == 5 ");
	setValue(mover, "SetValue([Population], [State 1], true)");
	setValue(v, "select(value([Population], [State 1]), 1)");
	setValue(v2, "select(value([Population],[State 1]), 2)")
	res = runModel(true);
	assertEqual("SetValue 1", res.value(v)[3], 0);
	assertEqual("SetValue 2", res.value(v)[8], 1);
	assertEqual("SetValue 3", res.value(v2)[3], 0);
	assertEqual("SetValue 4", res.value(v2)[8], 1);

	setValue(mover, "[Population].SetValue([State 1], true)");
	setValue(v, "[Population].value([State 1]){1}");
	setValue(v2, "[Population].value([State 1]){2}")
	res = runModel(true);
	assertEqual("SetValue 1 (Obj)", res.value(v)[3], 0);
	assertEqual("SetValue 2 (Obj)", res.value(v)[8], 1);
	assertEqual("SetValue 3 (Obj)", res.value(v2)[3], 0);
	assertEqual("SetValue 4 (Obj)", res.value(v2)[8], 1);


	setGeometryWidth(pop, "{1 Meter}");
	res = runModel(true);
	assertUnequal("Geo Units 1", res.error, "none");

	setGeometryWidth(pop, "2");
	setGeometryHeight(pop, "{2 Kilometers}");
	res = runModel(true);
	assertUnequal("Geo Units 2", res.error, "none");


	setGeometryUnits(pop, "Meters")
	res = runModel(true);
	assertEqual("Geo Units 3", res.error, "none");

	setGeometryWidth(pop, "{1 Meter}");
	res = runModel(true);
	assertEqual("Geo Units 4", res.error, "none");

	setGeometryWidth(pop, "{1 Dog}");
	res = runModel(true);
	assertUnequal("Geo Units 5", res.error, "none");


	clearModel()

	var v = createPrimitive("Var", "Variable", [350,350], [200,200]);
	var v2 = createPrimitive("Var2", "Variable", [0,300], [200,100]);
	var f = createPrimitive("Agent", "Folder", [300,300], [300,300]);
	setFolderType(f, "Agent");
	setParent(v,f);
	var p = createPrimitive("Population", "Agents", [0,0],[200,100]);
	var a = createPrimitive("Action", "Action", [300,0],[200,100]);
	createConnector("Link","Link", f,p);
	createConnector("Link","Link", p,v);
	createConnector("Link","Link", p,v2);
	createConnector("Link","Link", p,a);
	setAgentBase(p, f)
	setPopulationSize(p,5)
	setValue(v, "PopulationSize([Population])")
	setTriggerType(a, "Condition");
	setTriggerValue(a, "years=5");
	setValue(a, "repeat(add([Population]),10)");
	setValue(v2, "Count(unique(Value([Population],[Var])))")

	res = runModel(true);
	assertEqual("Additional Add 1", res.value(v2)[0], 1);
	assertEqual("Additional Add 2", res.value(v2)[5], 1);
	assertEqual("Additional Add 3", res.value(v2)[6], 1);
	assertEqual("Additional Add 4", res.value(v2)[7], 1);


	setValue(a, "repeat([Population].add(),10)");
	setValue(v2, "[Population].Value([Var]).unique().length()")
	res = runModel(true);
	assertEqual("Additional Add 1 (Obj)", res.value(v2)[0], 1);
	assertEqual("Additional Add 2 (Obj)", res.value(v2)[5], 1);
	assertEqual("Additional Add 3 (Obj)", res.value(v2)[6], 1);
	assertEqual("Additional Add 4 (Obj)", res.value(v2)[7], 1);

	setValue(v2, "max(Value([Population],[Var]))")
	res = runModel(true);
	assertEqual("Additional Add 5", res.value(v2)[0], 5);
	assertEqual("Additional Add 6", res.value(v2)[5], 5);
	assertEqual("Additional Add 7", res.value(v2)[6], 15);
	assertEqual("Additional Add 8", res.value(v2)[7], 15);

	setValue(v2, "[Population].value([Var]).max()")
	res = runModel(true);
	assertEqual("Additional Add 5 (Obj)", res.value(v2)[0], 5);
	assertEqual("Additional Add 6 (Obj)", res.value(v2)[5], 5);
	assertEqual("Additional Add 7 (Obj)", res.value(v2)[6], 15);
	assertEqual("Additional Add 8 (Obj)", res.value(v2)[7], 15);


	clearModel();

	// Test cross boundary flows

	var v = createPrimitive("Stock1", "Stock", [350,350], [200,200]);
	var v2 = createPrimitive("Stock2", "Stock", [0,300], [200,100]);
	var f = createPrimitive("Agent", "Folder", [300,300], [300,300]);
	setFolderType(f, "Agent");
	setParent(v,f);
	var p = createPrimitive("Population", "Agents", [0,0],[200,100]);
	var flow = createConnector("Flow","Flow", v,v2);
	setAgentBase(p, f)
	setPopulationSize(p,5)

	res = runModel(true);
	assertUnequal("Cross Boundary Flow 1", res.error, "none");
	setParent(v2,f);
	setParent(flow,f);
	res = runModel(true);
	assertEqual("Cross Boundary Flow 2", res.error, "none");
	removePrimitive(v2);
	res = runModel(true);
	assertEqual("Cross Boundary Flow 3", res.error, "none");
	var v2 = createPrimitive("Stock2", "Stock", [0,300], [200,100]);
	setEnds(f, v, v2);
	setParent(flow,null);
	removePrimitive(v2);
	res = runModel(true);
	assertUnequal("Cross Boundary Flow 4", res.error, "none");

	clearModel()

	test = prevTest;

}

function testUI(){
	test = "UI";

	var s = topBarShown();
	toggleTopBar();
	assertEqual("Top bar 1", topBarShown(), ! s);
	toggleTopBar();
	assertEqual("Top bar 2", topBarShown(), s);

	s = sideBarShown();
	toggleSideBar();
	assertEqual("Side bar 1", sideBarShown(), ! s);
	toggleSideBar();
	assertEqual("Side bar 2", sideBarShown(), s);


}

function testMacros(){

	test = "Macros";

	clearModel();

	var mString  = "a <- 52\nf(x)<-x^2";

	setMacros(mString);
	assertEqual("Get Macros", getMacros(), mString);


	var p1  = createPrimitive("p1", "Variable",[200,0],[100,100]);
	var p2  = createPrimitive("p2", "Variable",[0,0],[100,100]);
	setValue(p1, "a");
	setValue(p2, "f(2)");
	var res = runModel(true);
	assertEqual("Constant", res.value(p1)[3],52);
	assertEqual("Function", res.value(p2)[3],4);
}


function testUnitFunctions(){

	test = "Units Functions";

	clearModel();
	var p1  = createPrimitive("p1", "Variable",[200,0],[100,100]);
	var p2  = createPrimitive("p2", "Variable",[0,0],[100,100]);
	var p3  = createPrimitive("p3", "Variable",[0,0],[100,100]);
	var p4  = createPrimitive("p4", "Variable",[0,0],[100,100]);
	var p5  = createPrimitive("p5", "Variable",[0,0],[100,100]);
	var p6  = createPrimitive("p6", "Variable",[0,0],[100,100]);
	var p7  = createPrimitive("p7", "Variable",[0,0],[100,100]);
	setValue(p1, "Years");
	setValue(p2, "Months");
	setValue(p3, "Weeks");
	setValue(p4, "Days");
	setValue(p5, "Hours");
	setValue(p6, "Minutes");
	setValue(p7, "Seconds");
	var res = runModel(true);
	assertEqual("Y", res.value(p1)[3],3);
	assertEqual("Mo", res.value(p2)[3],3*12);
	assertEqual("W", Math.floor(res.value(p3)[3]), 3*52);
	assertEqual("D", res.value(p4)[3],3*365);
	assertEqual("H", res.value(p5)[3],3*365*24);
	assertEqual("Mi", res.value(p6)[3],3*365*24*60);
	assertEqual("S", res.value(p7)[3],3*365*24*60*60);

	setValue(p1, "Years(time*2)");
	setValue(p2, "Months(time*2)");
	setValue(p3, "Weeks(time*2)");
	setValue(p4, "Days(time*2)");
	setValue(p5, "Hours(time*2)");
	setValue(p6, "Minutes(time*2)");
	setValue(p7, "Seconds(time*2)");
	res = runModel(true);
	assertEqual("Y", res.value(p1)[3],2*3);
	assertEqual("Mo", res.value(p2)[3],2*3*12);
	assertEqual("W", Math.floor(res.value(p3)[3]),2*3*52);
	assertEqual("D", res.value(p4)[3],2*3*365);
	assertEqual("H", res.value(p5)[3],2*3*365*24);
	assertEqual("Mi", res.value(p6)[3],2*3*365*24*60);
	assertEqual("S", res.value(p7)[3],2*3*365*24*60*60);

	setValue(p1, "unitless(TimeStart)");
	setValue(p2, "unitless(TimeLength)");
	setValue(p3, "unitless(TimeStep)");
	setValue(p4, "unitless(TimeEnd)");
	res = runModel(true);
	assertEqual("Time Start", res.value(p1)[3], getTimeStart());
	assertEqual("Time Length", res.value(p2)[3], getTimeLength());
	assertEqual("Time Step", res.value(p3)[3], getTimeStep());
	assertEqual("Time End", res.value(p4)[3], getTimeStart()+getTimeLength());


}


function testUnitsAndConstraints(){

	test = "Units and Constraints";

	clearModel();

	var x = createPrimitive("tester", "Variable", [0,0], [100,10]);
	setValue(x, "time");
	setUnits(x, "Seconds");

	assertEqual("No error", runModel(true).error, "none");
	setUnits(x, "Qubits");
	assertUnequal("Units Error", runModel(true).error, "none");
	setUnits(x, "Minutes");
	assertEqual("No error Units", runModel(true).error, "none");

	setConstraints(x, [10, true, 5, false]);
	assertUnequal("Constraints Error", runModel(true).error, "none");
	setConstraints(x, [10, false, 5, false]);
	assertEqual("Constraints Error", runModel(true).error, "none");
	setConstraints(x, [10, false, 5, true]);
	assertUnequal("Constraints Error", runModel(true).error, "none");
	setConstraints(x, [10, false, 5, false]);
	assertEqual("Constraints Error", runModel(true).error, "none");


}


function testPrimitiveGetSet(){
	test = "Primitive Get Set";

	setupComplexDummy();

	var x = findName("x");
	setName(x, "xyz");
	assertEqual("Name", getName(x), "xyz");
	setNote(x, "abc");
	assertEqual("Note", getNote(x), "abc");
	setValue(x, "123");
	assertEqual("SetValue", getValue(x), "123");
	setValue(findName("My Flow"), "098");
	assertEqual("SetValue", getValue(findName("My Flow")), "098");
	setUnits(findName("My Flow"), "Qubits");
	assertEqual("SetUnits", getUnits(findName("My Flow")), "Qubits");
	setShowSlider(x, true);
	assertEqual("ShowSlider 1", getShowSlider(x), true);
	setShowSlider(x, false);
	assertEqual("ShowSlider 2", getShowSlider(x), false);
	setSliderMax(x, 72);
	assertEqual("SliderMax", getSliderMax(x), 72);
	setSliderMin(x, 12);
	assertEqual("SliderMin", getSliderMin(x), 12);
	setSliderStep(x, 15);
	assertEqual("SliderStep", getSliderStep(x), 15);

	if(!(graph instanceof SimpleNode)){
		setFillColor(x, "green");
		assertEqual("Fill Color", getFillColor(x), "green");
		setFontColor(x, "red");
		assertEqual("Font Color", getFontColor(x), "red");
		setLineColor(x, "yellow");
		assertEqual("Line Color", getLineColor(x), "yellow");
		setOpacity(x, 50);
		assertEqual("Opacity", getOpacity(x), 50);

		setImage(x, "http://testimage.com/image.png");
		assertEqual("Image", getImage(x), "http://testimage.com/image.png");
	}



	var f = findName("My Flow");
	setConstraints(f, [-10, true, 10, false]);
	assertEqual("SetConstraints", getConstraints(f)[0], -10);
	assertEqual("SetConstraints", getConstraints(f)[1], true);
	assertEqual("SetConstraints", getConstraints(f)[2], 10);
	assertEqual("SetConstraints", getConstraints(f)[3], false);
	setConstraints(findName("My Flow"), [-10, false, 10, true]);
	assertEqual("SetConstraints", getConstraints(f)[1], false);
	assertEqual("SetConstraints", getConstraints(f)[3], true);

	setNonNegative(f, true);
	assertEqual("Set Non Negative Flow", getNonNegative(f), true);
	setNonNegative(f, false);
	assertEqual("Set Non Negative Flow", getNonNegative(f), false);

	var s = findName("My Stock");
	setNonNegative(s, true);
	assertEqual("Set Non Negative Stock", getNonNegative(s), true);
	setNonNegative(s, false);
	assertEqual("Set Non Negative Stock", getNonNegative(s), false);
	setDelay(s, 5);
	assertEqual("Set Delay", getDelay(s), 5);
	setStockType(s, "Conveyor");
	assertEqual("Set Type", getStockType(s), "Conveyor");
	setStockType(s, "Store");
	assertEqual("Set Type", getStockType(s), "Store");


	var c = findName("My Converter");
	setData(c, "fdsgsdg");
	assertEqual("Set Data", getData(c), "fdsgsdg");
	setConverterInput(c, s);
	assertEqual("Set Source", getConverterInput(c).id, s.id);
	setConverterInput(c, null);
	assertNull("Set Source 2", getConverterInput(c));
	setInterpolation(c, "fdsf");
	assertEqual("Set Interpolation", getInterpolation(c), "fdsf");

	var state = createPrimitive("My State", "State", [100,60],[100,100]);
	setValue(state, "abc");
	assertEqual("State Set Value", getValue(state), "abc");
	assertEqual("State Get Residency", getResidency(state), "0");
	setResidency(state, "xyz");
	assertEqual("State Set Residency", getResidency(state), "xyz");

	var transition = createConnector("My Transition", "Transition", state, null);
	setValue(transition, "abc1");
	assertEqual("Transition Set Value", getValue(transition), "abc1");
	setTriggerValue(transition, "abc12");
	assertEqual("Transition Set Value 2", getTriggerValue(transition), "abc12");
	assertEqual("Transition Get Trigger 1", getTriggerType(transition), "Timeout");
	setTriggerType(transition, "Condition");
	assertEqual("Transition Get Trigger 2", getTriggerType(transition), "Condition");
	assertEqual("Transition Get Trigger Repeat 1", getTriggerRepeat(transition), false);
	setTriggerRepeat(transition, true);
	assertEqual("Transition Get Trigger Repeat 2", getTriggerRepeat(transition), true);
	assertEqual("Transition Get Trigger Recalculate 1", getTriggerRecalculate(transition), false);
	setTriggerRecalculate(transition, true);
	assertEqual("Transition Get Trigger Recalculate 2", getTriggerRecalculate(transition), true);

	var action = createPrimitive("My Action", "Action", [100,60],[100,100]);
	setValue(action, "abc1");
	assertEqual("Action Set Value", getValue(action), "abc1");
	setTriggerValue(action, "abc123");
	assertEqual("Action Set Value 2", getTriggerValue(action), "abc123");
	assertEqual("Action Set Value 3", getValue(action), "abc1");
	assertEqual("Action Get Trigger 1", getTriggerType(action), "Probability");
	setTriggerType(action, "Timeout");
	assertEqual("Action Get Trigger 2", getTriggerType(action), "Timeout");
	assertEqual("Action Get Trigger Repeat 1", getTriggerRepeat(action), true);
	setTriggerRepeat(action, false);
	assertEqual("Action Get Trigger Repeat 2", getTriggerRepeat(action), false);
	assertEqual("Action Get Trigger Recalculate 1", getTriggerRecalculate(action), false);
	setTriggerRecalculate(action, true);
	assertEqual("Action Get Trigger Recalculate 2", getTriggerRecalculate(action), true);


	var agents = createPrimitive("My Agents", "Agents", [300,300],[200,100]);
	setPopulationSize(agents, 123);
	assertEqual("Agents Size", getPopulationSize(agents), 123);
	setGeometryUnits(agents, "foo bar");
	assertEqual("Agents Units", getGeometryUnits(agents), "foo bar");
	setGeometryHeight(agents, "foo bar 1");
	assertEqual("Agents Height", getGeometryHeight(agents), "foo bar 1");
	setGeometryWidth(agents, "foo bar 2");
	assertEqual("Agents Width", getGeometryWidth(agents), "foo bar 2");
	setAgentPlacement(agents, "foo bar 3");
	assertEqual("Agents Placement", getAgentPlacement(agents), "foo bar 3");
	setAgentPlacementFunction(agents, "foo bar 4");
	assertEqual("Agents Placement Function", getAgentPlacementFunction(agents), "foo bar 4");
	setAgentNetwork(agents, "foo bar 5");
	assertEqual("Agents Network", getAgentNetwork(agents), "foo bar 5");
	setAgentNetworkFunction(agents, "foo bar 6");
	assertEqual("Agents Network Function", getAgentNetworkFunction(agents), "foo bar 6");
	setGeometryWrap(agents, true);
	assertEqual("Agents Wrap 1", getGeometryWrap(agents), true);
	setGeometryWrap(agents, false);
	assertEqual("Agents Wrap 2", getGeometryWrap(agents), false);

	var f = createPrimitive("f", "Folder", [200,150], [150,100]);
	createConnector("Link","Link", f, agents);
	setAgentBase(agents, f);
	assertEqual("Agents Base", getAgentBase(agents).id, f.id);
	setFolderSolver(f, {a:1});
	assertEqual("Folder Solver", getFolderSolver(f).a, 1);


}

function testSimulationGetSet(){

	test = "Simulation Get Set";

	setAlgorithm("x")
	assertEqual("Algorithm", getAlgorithm(), "x");

	setTimeStep(72)
	assertEqual("Time Step", getTimeStep(), 72);

	setTimeLength(43)
	assertEqual("Time Length", getTimeLength(), 43);

	setTimeStart(32)
	assertEqual("Time Start", getTimeStart(), 32);

	setPauseInterval(2)
	assertEqual("Pause Interval", getPauseInterval(), 2);

	setTimeUnits("foo")
	assertEqual("Time Units", getTimeUnits(), "foo");

}

function testSimulation(){

	test = "Simulation Test";

	setTimeUnits("Years")
	setTimeStep(1);
	setTimeStart(0);
	setTimeLength(10);

	var algorithms = ["RK1", "RK4"];
	for( var i=0; i<algorithms.length; i++){
		console.log("--- Using Algorithm: "+algorithms[i])
		setAlgorithm(algorithms[i]);
		setTimeLength(10);
		clearModel();

		var s = createPrimitive("My Stock", "Stock", [10,10], [140, 50]);
		var f = createConnector("My Flow", "Flow", s, null);
		setValue(s, "100");
		setValue(f, "0.1*[Alpha]");

		var res = runModel(true);
		assertEqual("Length", res.Time.length, 11);
		assertEqual("Time Start", res.Time[0], 0);
		assertEqual("Time End", res.Time[10], 10);
		assertEqual("Stock Start", res.value(s)[0], 100);
		clearModel();

		//Mathematica Parity Tests
		clearModel();

		var mathimaticaScale = 100000;

		setTimeStep(.1);
		setTimeLength(2);


		var y = createPrimitive("Y", "Stock", [10,10], [140, 50]);
		var by = createConnector("My Flow", "Flow",  null, y);
		setValue(y, "100");
		setValue(by, "0.04*[Y]");

		res = runModel(true);
		if(algorithms[i]=="RK1"){
			assertEqual("Mathematica ExpGrow Small Time", Math.round(res.value(y)[20]*mathimaticaScale), Math.round(108.31142163*mathimaticaScale) );
		}else if(algorithms[i]=="RK4"){
			assertEqual("Mathematica ExpGrow Small Time", Math.round(res.value(y)[20]*mathimaticaScale), Math.round(108.328706767*mathimaticaScale) );
		}

		setTimeStart(.12);
		res = runModel(true);
		if(algorithms[i]=="RK1"){
			assertEqual("Mathematica ExpGrow Start Time", Math.round(res.value(y)[20]*mathimaticaScale), Math.round(108.31142163*mathimaticaScale) );
		}else if(algorithms[i]=="RK4"){
			assertEqual("Mathematica ExpGrow Start Time", Math.round(res.value(y)[20]*mathimaticaScale), Math.round(108.328706767*mathimaticaScale) );
		}
		assertEqual("Mathematica ExpGrow Start Time 2", res.times[0], .12);
		assertEqual("Mathematica ExpGrow Start Time 3", res.times[1], .22);


		setTimeStart(0)
		setTimeLength(100);
		setTimeStep(1);

		res = runModel(true);
		if(algorithms[i]=="RK1"){
			assertEqual("Mathematica ExpGrow", Math.round(res.value(y)[100]*mathimaticaScale), Math.round(5050.49481843*mathimaticaScale) );
		}else if(algorithms[i]=="RK4"){
			assertEqual("Mathematica ExpGrow", Math.round(res.value(y)[100]*mathimaticaScale), Math.round(5459.81455268*mathimaticaScale) );
		}




		setValue(by, "0.02*[Y]*(1-[Y]/100)*Sin(Years/3)^2");
		setValue(y, 2);
		res = runModel(true);
		if(algorithms[i]=="RK1"){
			assertEqual("Mathematica LogGrow", Math.round(res.value(y)[100]*mathimaticaScale), Math.round(5.2233233649*mathimaticaScale) );
		}else if(algorithms[i]=="RK4"){
			assertEqual("Mathematica LogGrow", Math.round(res.value(y)[100]*mathimaticaScale), Math.round(5.30387612074*mathimaticaScale) );
		}

		setValue(by, "0.02*[Y]*(1-[Y]/100)*Sin({Years/3 Radians})^2");
		setValue(y, 2);
		res = runModel(true);
		if(algorithms[i]=="RK1"){
			assertEqual("Mathematica LogGrow 2", Math.round(res.value(y)[100]*mathimaticaScale), Math.round(5.2233233649*mathimaticaScale) );
		}else if(algorithms[i]=="RK4"){
			assertEqual("Mathematica LogGrow 2", Math.round(res.value(y)[100]*mathimaticaScale), Math.round(5.30387612074*mathimaticaScale) );
		}

		var x = createPrimitive("X", "Stock", [10,10], [140, 50]);
		var bx = createConnector("My Flow", "Flow", null, x);
		var dx = createConnector("My Flow", "Flow", x, null);
		var dy = createConnector("My Flow", "Flow", y, null);
		createConnector("Link", "Link", x, by);
		createConnector("Link", "Link", y, dx);

		setValue(by, "[Y]*0.001*[X]");
		setValue(dy, "[Y]*0.1");
		setValue(bx, "[X]*0.1");
		setValue(dx, "[X]*0.0001*[Y]");
		setValue(x, 200);
		setValue(y, 100);

		res = runModel(true);
		if(algorithms[i]=="RK1"){
			assertEqual("Mathematica LV", Math.round(res.value(y)[100]*mathimaticaScale), Math.round(15.2517207902*mathimaticaScale) );
		}else if(algorithms[i]=="RK4"){
			assertEqual("Mathematica LV", Math.round(res.value(y)[100]*mathimaticaScale), Math.round(4118.37647504*mathimaticaScale) );
		}



		setTimeLength(10);
		clearModel();
		//End Mathematica Parity Tests

		var x = createPrimitive("X", "Stock", [10,10], [140, 50]);
		var v = createPrimitive("V", "Variable", [10,10], [140, 50]);
		var bx = createConnector("Flow", "Flow", null, x);
		var lx = createConnector("Link", "Link", bx, v);

		setValue(bx, "[X]*0.1");
		setValue(x, 200);
		setValue(v, "[Flow]");

		res = runModel(true);
		if(algorithms[i]=="RK1"){
			assertEqual("Flow Time Correct 1", Math.round(res.value(bx)[0]*mathimaticaScale), Math.round(20*mathimaticaScale) );
			assertEqual("Flow Time Correct 2", Math.round(res.value(v)[0]*mathimaticaScale), Math.round(20*mathimaticaScale) );
		}else if(algorithms[i]=="RK4"){
			assertEqual("Flow Time Correct 1", Math.round(res.value(bx)[0]*mathimaticaScale), Math.round(21.03416666*mathimaticaScale) );
			assertEqual("Flow Time Correct 2", Math.round(res.value(v)[0]*mathimaticaScale), Math.round(21.03416666*mathimaticaScale) );
		}

		clearModel();



		var p = createPrimitive("p","Variable", [0,0], [100,100]);
		setValue(p, "years");
		res = runModel(true);
		assertEqual("Generic Units 1", res.value(p)[4], 4);
		setValue(p, "months");
		res = runModel(true);
		assertEqual("Generic Units 2", res.value(p)[4], 4*12);

		clearModel()

		setTimeLength(100);


		if(algorithms[i]=="RK1"){
			// More flow scaling tests

			var p = createPrimitive("My Variable", "Variable", [100, 100], [140, 50]);
			var f = createConnector("My Flow", "Flow", null, null);
			var l = createConnector("link", "Link", f, p);

			setUnits(f, "euros/seconds");
			setUnits(p, "euros");

			setValue(f, "years*{1 euros/seconds}");
			setValue(p, "[My Flow]*{1 seconds}");
			res = runModel(true);
			assertEqual("More Flow Scaling 1", res.value(p)[20], 20);
			setUnits(f, "euros/years");
			res = runModel(true);
			assertEqual("More Flow Scaling 2", res.value(p)[20], 20);

			setUnits(f, "euros per years");
			res = runModel(true);
			assertEqual("More Flow Scaling 2", res.value(p)[20], 20);

			setValue(f, "years");
			setUnits(p, "euros/years");
			setValue(p, "[My Flow]");
			res = runModel(true);
			assertEqual("More Flow Scaling 3", res.value(p)[20], 20);

			clearModel();

			var p = createPrimitive("My Variable", "Variable", [100, 100], [140, 50]);
			var f = createConnector("My Flow", "Flow", null, null);
			var l = createConnector("link", "Link", f, p);

			setUnits(f, "");
			setUnits(p, "");


			setNonNegative(f, false);

			setValue(f, "10-years");
			setValue(p, "[My Flow]");
			res = runModel(true);
			assertEqual("PositiveOnly with Units", res.value(p)[20], -10);

			clearModel();
		}

		testAgents();

		clearModel();

		testSubscripting();

		clearModel();

		var p = createPrimitive("My Variable", "Variable", [100, 100], [140, 50]);
		var f = createConnector("My Flow", "Flow", null, null);
		var l = createConnector("link", "Link", f, p);

		setUnits(f, "euros/seconds");
		setUnits(p, "euros/seconds");

		setValue(f, "10-years");
		setValue(p, "[My Flow]");
		res = runModel(true);
		assertEqual("PositiveOnly with Units", res.value(p)[20], 0);

		clearModel()

		var s = createPrimitive("My Stock", "Stock", [100, 100], [140, 50]);
		var f = createConnector("My Flow", "Flow", null, s);

		setUnits(f, "euros/year");
		setUnits(s, "euros");

		setValue(f, "10");
		setValue(s, "1");
		res = runModel(true);
		assertEqual("Unit Flows 1", res.value(s)[10], 10*10+1);

		setValue(f, "{10 Euros/years}");
		setValue(s, "{1 Euros}");
		res = runModel(true);
		assertEqual("Unit Flows 2", res.value(s)[10], 10*10+1);

		clearModel()

		// Test fixing of values
		p = createPrimitive("My Variable", "Variable", [100, 100], [140,50]);

		setValue(p, "Fix(years+12)");
		res = runModel(true);
		assertEqual("Fix 1", res.value(p)[15], 12);

		setValue(p, "Fix(years+12, 5)");
		res = runModel(true);
		assertEqual("Fix 2", res.value(p)[14], 22);

		setValue(p, "Fix(years+13, {5 years})");
		res = runModel(true);
		assertEqual("Fix 3", res.value(p)[14], 23);

		clearModel()


		//General Tests
		s = createPrimitive("My Stock", "Stock", [100, 100], [140,50]);
		f = createConnector("My Flow", "Flow", null, s);
		p = createPrimitive("My Variable", "Variable", [100, 100], [140,50]);
		l = createConnector("My Link", "Link", s, p)
		setValue(f, "1");
		setValue(s, "0");

		setStockType(s, "Conveyor");
		setDelay(s, 5);
		setValue(p,"[[My Stock]]");

		res = runModel(true);

		assertEqual("Conveyor 1", res.value(s)[2], 0);
		assertEqual("Conveyor 2", res.value(s)[4], 0);
		assertEqual("Conveyor 3", res.value(s)[12], 8);
		assertEqual("Conveyor 4", res.value(p)[2], 2);
		assertEqual("Conveyor 5", res.value(p)[12], 12);

		setDelay(s, "{5 years}");

		res = runModel(true);

		assertEqual("Conveyor Units 1", res.value(s)[2], 0);
		assertEqual("Conveyor Units 2", res.value(s)[4], 0);
		assertEqual("Conveyor Units 3", res.value(s)[12], 8);
		assertEqual("Conveyor Units 4", res.value(p)[2], 2);
		assertEqual("Conveyor Units 5", res.value(p)[12], 12);

		setDelay(s, "{365 days}*5");

		res = runModel(true);

		assertEqual("Conveyor Units 6", res.value(s)[2], 0);
		assertEqual("Conveyor Units 7", res.value(s)[4], 0);
		assertEqual("Conveyor Units 8", res.value(s)[12], 8);
		assertEqual("Conveyor Units 9", res.value(p)[2], 2);
		assertEqual("Conveyor Units 10", res.value(p)[12], 12);


		setValue(p, "[[My Stock]]-[My Stock]")
		var outF = createConnector("Outflow", "Flow", s, null);
		setValue(outF, "[Alpha]");
		//outF.timeIndependent=true
		setValue(f, "2");
		res = runModel(true);
		assertEqual("FSF 1", Math.round(res.lastValue(s)*1000), 2*1000);
		assertEqual("FSF 2", res.lastValue(p), 8);
		assertEqual("FSF 3", res.value(p)[3], 6);
		assertEqual("FSF 4", Math.round(res.lastValue(outF)*1000), 2*1000);
		assertEqual("FSF 5", res.value(outF)[3], 0);
		assertEqual("FSF 6", res.lastValue(f), 2);


		clearModel();

		s = createPrimitive("My Stock", "Stock", [100, 100], [140,50]);
		f = createConnector("My Flow", "Flow", null, s);
		var f2 = createConnector("My Flow", "Flow", s, null);
		p = createPrimitive("My Variable", "Variable", [100, 100], [140,50]);
		l = createConnector("My Link", "Link", s, p)
		setValue(f, "10");
		setValue(s, "50");
		setValue(f2, "[My Stock]");

		setStockType(s, "Conveyor");
		setDelay(s, 5);
		setValue(p,"[[My Stock]]");


		res = runModel(true);

		assertEqual("Conveyor 11", res.value(p)[0], 50);
		assertEqual("Conveyor 12", res.value(p)[1], 50);
		assertEqual("Conveyor 13", res.value(p)[2], 50);
		assertEqual("Conveyor 14", res.value(p)[12], 50);
		assertEqual("Conveyor 15", res.value(s)[0], 10);
		assertEqual("Conveyor 16", res.value(s)[1], 10);
		assertEqual("Conveyor 17", res.value(s)[2], 10);
		assertEqual("Conveyor 18", res.value(s)[5], 10);
		assertEqual("Conveyor 19", res.value(s)[12], 10);




		clearModel()

		s = createPrimitive("My Stock", "Stock", [100, 100], [140,50]);
		s2 = createPrimitive("My Stock", "Stock", [100, 100], [140,50]);
		f = createConnector("My Flow", "Flow", s, s2);
		setValue(f, "1");
		setValue(s, "0");
		setValue(s2, "0");

		res = runModel(true);
		assertEqual("Same Name 1", res.value(s)[5], -5);
		assertEqual("Same Name 2", res.value(s2)[5], 5);
		assertEqual("Same Name 3", res.value(s)[10], -10);
		assertEqual("Same Name 4", res.value(s2)[10], 10);


		clearModel()

		// Test flow values

		p = createPrimitive("My Variable", "Variable", [100, 100], [140, 50]);
		f = createConnector("My Flow", "Flow", null, null);
		l = createConnector("link", "Link", f, p);

		setValue(f, 10);
		setValue(p, "[My Flow]");
		res = runModel(true);
		assertEqual("Flow Value Default", res.value(p)[20], 10);

		clearModel()

		var s1 = createPrimitive("Stock 1", "Stock", [100, 100], [140, 50]);
		var s2 = createPrimitive("Stock 2", "Stock", [100, 100], [140, 50]);
		var s3 = createPrimitive("Stock 3", "Stock", [100, 100], [140, 50]);
		var s4 = createPrimitive("Stock 4", "Stock", [100, 100], [140, 50]);
		var s5 = createPrimitive("Stock 5", "Stock", [100, 100], [140, 50]);

		var f1 = createConnector("Flow 1", "Flow", null, s1);
		var f2 = createConnector("Flow 2", "Flow", null, s2);
		var f3 = createConnector("Flow 3", "Flow", null, s3);
		var f4 = createConnector("Flow 4", "Flow", null, s4);
		var f5 = createConnector("Flow 5", "Flow", null, s5);

		setValue(f1, 1);
		setUnits(f2, "unitless");
		setValue(f2, 7);
		setUnits(f2, "1/years");
		setValue(f3, 3);
		setUnits(f3, "dollars/years");
		setUnits(s3, "dollars");
		setValue(f4, "{200 centimeters/year}");
		setUnits(f4, "meters/years");
		setUnits(s4, "centimeters")
		setValue(f5, 5);
		setUnits(f5, "1/days");
		res = runModel(true);
		assertEqual("Flow Value 1", Math.round(res.value(f1)[20]*1000), 1*1000);
		assertEqual("Flow Value 2", Math.round(res.value(f2)[20]*1000), 7*1000);
		assertEqual("Flow Value 3", Math.round(res.value(f3)[20]*1000), 3*1000);
		assertEqual("Flow Value 4", Math.round(res.value(f4)[20]*1000), 2*1000);
		assertEqual("Flow Value 5", Math.round(res.value(f5)[20]*1000), 5*1000);

		assertEqual("Flow Stock Value 1", res.value(s1)[2], 1*2);
		assertEqual("Flow Stock Value 2", Math.round(res.value(s2)[2]), 7*2);
		assertEqual("Flow Stock Value 3", res.value(s3)[2], 3*2);
		assertEqual("Flow Stock Value 4", res.value(s4)[2], 200*2);
		assertEqual("Flow Stock Value 5", Math.round(res.value(s5)[2]), 5*365*2);


		clearModel()



		// Test non-negative stocks

		s = createPrimitive("My Stock", "Stock", [100, 100], [140, 50]);
		s2 = createPrimitive("My Stock 2", "Stock", [100, 100], [140, 50]);
		f = createConnector("My Flow", "Flow", s, s2);

		setValue(s, 10);
		setValue(s2, 0);
		setValue(f, 1);
		res = runModel(true);
		assertEqual("Non Negative Stock 1", res.value(s)[20], -10);
		assertEqual("Non Negative Stock 2", res.value(s2)[20], 20);
		setNonNegative(s, true);
		res = runModel(true);
		assertEqual("Non Negative Stock 3", res.value(s)[20], 0);
		assertEqual("Non Negative Stock 4", res.value(s2)[20], 10);

		clearModel();

		// Test ordering of non-negative flow's in and out

		var s = createPrimitive("My Stock", "Stock", [100, 100], [140, 50]);
		var outflow = createConnector("Outflow", "Flow", s, null);
		var inflow = createConnector("Inflow", "Flow", null, s);
		setNonNegative(s, true);

		function testNonNegative(i) {
			setValue(s, 50);
			setValue(outflow, 110);
			setValue(inflow, 100);
			res = runModel(true);
			assertEqual("Non Negative Stock " + (i+1), res.value(s)[2], 30);
			assertEqual("Non Negative Stock " + (i+2), res.value(s)[10], 0);

			setValue(s, "{a:50, b:30}");
			setValue(outflow, "{a:-10, b:110}");
			setValue(inflow, "{a:-10, b:100}");
			res = runModel(true);
			assertEqual("Non Negative Stock " + (i+3), res.value(s)[2].a, 50);
			assertEqual("Non Negative Stock " + (i+4), res.value(s)[10].a, 50);
			assertEqual("Non Negative Stock " + (i+5), res.value(s)[2].b, 10);
			assertEqual("Non Negative Stock " + (i+6), res.value(s)[10].b, 0);

			clearModel();
		}

		testNonNegative(4);

		var s = createPrimitive("My Stock", "Stock", [100, 100], [140, 50]);
		var inflow = createConnector("Inflow", "Flow", null, s); // Flip order
		var outflow = createConnector("Outflow", "Flow", s, null);
		setNonNegative(s, true);

		testNonNegative(10);


		// Test stock with functions in the initial value

		s = createPrimitive("My Stock", "Stock", [100, 100], [140, 50]);

		setValue(s, "years+10");
		res = runModel(true);
		assertEqual("Stock Function Value 1", res.value(s)[20], 10);

		clearModel()


		// Test non-negative flows

		s = createPrimitive("My Stock", "Stock", [100, 100], [140, 50]);
		f = createConnector("My Flow", "Flow", null, s);

		setValue(s, 10);
		setValue(f, "years-10");
		setNonNegative(f, false);
		res = runModel(true);
		if(algorithms[i]=="RK1"){
			assertEqual("Non Negative Flow 1 - stock", res.value(s)[1], 0);
			assertEqual("Non Negative Flow 2", Math.round(res.value(f)[0]*1000), -10*1000);
		}
		setNonNegative(f, true);
		res = runModel(true);
		assertEqual("Non Negative Flow 3 -stock", res.value(s)[2], 10);
		assertEqual("Non Negative Flow 4", res.value(f)[1], 0);

		// Test Converter

		clearModel();

		var c = createPrimitive("my converter", "Converter", [0,0], [100,40]);

		setData(c, "1,1.1;1.5,4;2,4;3,9;4,16;100,200");


		p = createPrimitive("Param", "Variable",[0,0],[100,40]);
		l = createConnector("link", "Link",p,c);
		setValue(p,"years+40");
		setConverterInput(c, p);

		res = runModel(true);
		assertEqual("Primitive Input Value", 200, res.value(c)[60])

		setConverterInput(c, null)

		res = runModel(true);
		assertEqual("Time Input Value",1.1, res.value(c)[1]);

		setData(c, "0,2;20,4");

		res = runModel(true);
		assertEqual("Interpolation",res.value(c)[10],3);
		setInterpolation(c, "Discrete");
		res = runModel(true);
		assertEqual("No Interpolation",res.value(c)[10],2)
		setInterpolation(c, "Linear");
		res = runModel(true);
		assertEqual("Interpolation 2",res.value(c)[10],3)



		l = createConnector("link", "Link", c, p);

		setValue(p, "[my converter]+[my converter]");

		res = runModel(true);
		assertEqual("Converter Addition", res.value(p)[10], 6);
		assertEqual("Converter Addition", res.value(p)[20], 8);
		assertEqual("Converter Addition", res.value(p)[21], 8);

		setUnits(p, "Years");
		setUnits(c, "Years");
		res = runModel(true);
		assertEqual("Converter Addition", res.value(p)[10], 6);
		assertEqual("Converter Addition", res.value(p)[20], 8);
		assertEqual("Converter Addition", res.value(p)[21], 8);


		//Test stock initial values
		clearModel()
		var p  = createPrimitive("My Stock 1", "Stock",[0,0],[100,100]);
		var p2  = createPrimitive("My Stock 2", "Stock",[0,0],[100,100]);
		var l = createConnector("Link","Link", p, p2);
		setValue(p,"10");
		setValue(p2, "[My Stock 1]");
		res = runModel(true);
		assertEqual("Stock Init 1", res.value(p)[0],10);
		assertEqual("Stock Init 2", res.value(p2)[0], 10)

		var l = createConnector("Link","Link", p2, p);
		setValue(p,"[My Stock 2]");
		setValue(p2, "20");
		res = runModel(true);
		assertEqual("Stock Init 3", res.value(p)[0],20);
		assertEqual("Stock Init 4", res.value(p2)[0], 20)

		//Test Units Being Copied function
		clearModel()
		var p  = createPrimitive("My Variable 1", "Variable",[0,0],[100,100]);
		var p2  = createPrimitive("My Variable 2", "Variable",[0,0],[100,100]);
		var l = createConnector("Link","Link",p,p2);
		setValue(p,"10");
		setUnits(p2, "Rabbits");
		setValue(p2, "[My Variable 1]");
		res = runModel(true);
		assertEqual("Unit Conversion Vars 1", res.value(p)[3],10);
		assertEqual("Unit Conversion Vars 2", res.value(p2)[3], 10);

		//Test Units Being Copied function
		clearModel()
		var p  = createPrimitive("My Variable 1", "Variable",[0,0],[100,100]);
		var p2  = createPrimitive("My Variable 2", "Variable",[0,0],[100,100]);
		var p3  = createPrimitive("My Variable 3", "Variable",[0,0],[100,100]);
		var l = createConnector("Link","Link",p,p2);
		var l = createConnector("Link","Link",p2,p3);
		setValue(p,"{a: 1.2, b:3.2}");
		setValue(p2, "round([My Variable 1])");
		setValue(p3, "[My Variable 2].b");
		res = runModel(true);
		assertEqual("Recurse Function", res.value(p3)[3],3);

		//Test Frozen Folders
		clearModel();
		var p  = createPrimitive("My Param", "Variable",[0,0],[100,100]);
		var p2  = createPrimitive("Derived", "Variable",[0,0],[100,100]);
		var l = createConnector("Link","Link",p,p2);
		setValue(p, "Years");
		setValue(p2, "[My Param] + Years");
		var f = createPrimitive("Folder", "Folder",[0,0],[100,100]);
		setParent(p, f);
		setFrozen(f, false);
		res = runModel(true);
		assertEqual("Frozen 1", res.value(p)[3], 3);
		assertEqual("Frozen 2", res.value(p2)[3], 6);
		setFrozen(f, true);
		res = runModel(true);
		assertEqual("Frozen 3", res.value(p)[3], 0);
		assertEqual("Frozen 4", res.value(p2)[3], 3);




		//Test Delay function
		clearModel()
		var p  = createPrimitive("My Param", "Variable",[0,0],[100,100]);
		var p2  = createPrimitive("Delayed", "Variable",[0,0],[100,100]);
		var l = createConnector("Link","Link",p,p2);
		setValue(p,"Years");
		setValue(p2, "Delay([My Param], 5, -3)");
		res = runModel(true);
		assertEqual("Initial Value", res.value(p2)[3],-3);
		assertEqual("End Delay", res.value(p)[res.periods-6], res.lastValue(p2));

		setValue(p2, "Delay([My Param], 0)");
		res = runModel(true);
		assertEqual("0 Delay", res.value(p2)[3], res.value(p)[3]);

		setValue(p,"Years");
		setValue(p2, "Delay([My Param], 5, -3)");
		res = runModel(true);
		assertEqual("[ Initial Value", res.value(p2)[3],-3);
		assertEqual("[ End Delay", res.value(p)[res.periods-6], res.lastValue(p2));

		setValue(p2, "Delay([My Param], 0)");
		res = runModel(true);
		assertEqual("[ 0 Delay", res.value(p2)[3], res.value(p)[3]);


		//Test Pulse function
		clearModel()
		p  = createPrimitive("My Param", "Variable",[0,0],[100,100]);
		setValue(p, "Pulse(10,2,5)");
		res = runModel(true);
		assertEqual("Pulse 1",res.value(p)[5],0);
		assertEqual("Pulse 2",res.value(p)[12],2);
		assertEqual("Pulse 3",res.value(p)[16],0);
		setValue(p, "Pulse(20,.5,2,10)");
		res = runModel(true);
		assertEqual("Pulse 4",res.value(p)[28],0);
		assertEqual("Pulse 5",res.value(p)[20],0.5);
		assertEqual("Pulse 6",res.value(p)[30],0.5);

		//Test If Then Else
		setValue(p, "IfThenElse(Years<20 and Years >= 10, 1, 0)");
		res = runModel(true);
		assertEqual("IfThenElse 1",res.value(p)[5],0);
		assertEqual("IfThenElse 2",res.value(p)[11],1);

		//Test Ramp function
		setValue(p, "Ramp(10, 15, 10)");
		res = runModel(true);
		assertEqual("Ramp 1", res.value(p)[5], 0);
		assertEqual("Ramp 2", res.value(p)[12], 4);
		assertEqual("Ramp 3", res.value(p)[16], 10);

		//Test Stochastic
		res = runModel(true);
		assertEqual("Stochastic 1", res.stochastic, false);
		setValue(p, "Ramp(10, 15, 10)*rand()");
		res = runModel(true);
		assertEqual("Stochastic 2", res.stochastic, true);
		setValue(p, "Ramp(10, 15, 10)");
		res = runModel(true);
		assertEqual("Stochastic 3", res.stochastic, false);

		//Test Staircase function
		setValue(p, "Step(10,3)");
		res = runModel(true);
		assertEqual("Step 1",res.value(p)[5], 0);
		assertEqual("Step 2", res.value(p)[12], 3);
		assertEqual("Step 3", res.value(p)[16], 3);

		//Test Staircase function Vectorized
		setValue(p, "Step({a: 10, b:20, c:7}, {a:1, b:20, c:14}).c");
		res = runModel(true);
		assertEqual("Step Vec 1",res.value(p)[5], 0);
		assertEqual("Step Vec 2", res.value(p)[12], 14);
		assertEqual("Step Vec 3", res.value(p)[16], 14);

		//Test Staircase function Vectorized
		setValue(p, "Step(7, {a:1, b:20, c:12}).c");
		res = runModel(true);
		assertEqual("Step Vec 4",res.value(p)[5], 0);
		assertEqual("Step Vcc 5", res.value(p)[12], 12);
		assertEqual("Step Vec 6", res.value(p)[16], 12);

		setValue(p, "Step(7, {1, 20, 14}).c");
		res = runModel(true);
		assertUnequal("Step Vec 7", res.error, "none");

		setValue(p, "Step({a: 10, b:20, c:5}, {a:1, b:20, d:14}).b");
		res = runModel(true);
		assertUnequal("Step Vec 8", res.error, "none");

		// Units: pulse ramp step
		setUnits(p, "cows");
		setValue(p, "{1 cows} + Pulse(10,{2 cows},5)");
		res = runModel(true);
		assertEqual("Pulse Units 1",res.value(p)[5],1);
		assertEqual("Pulse Units 2",res.value(p)[12],3);
		assertEqual("Pulse Units 3",res.value(p)[16],1);
		setValue(p, "{1 cows} + Pulse(20,{.5 cows},2,10)");
		res = runModel(true);
		assertEqual("Pulse Units 4",res.value(p)[28],1);
		assertEqual("Pulse Units 5",res.value(p)[20],1.5);
		assertEqual("Pulse Units 6",res.value(p)[30],1.5);


		//Test Ramp function
		setValue(p, "{1 cows} + Ramp(10, 15, {10 cows})");
		res = runModel(true);
		assertEqual("Ramp Units 1", res.value(p)[5], 1);
		assertEqual("Ramp Units 2", res.value(p)[12], 5);
		assertEqual("Ramp Units 3", res.value(p)[16], 11);

		//Test Staircase function
		setValue(p, "{1 cows} + Step(10, {3 cows})");
		res = runModel(true);
		assertEqual("Step Units 1",res.value(p)[5], 1);
		assertEqual("Step Units 2", res.value(p)[12], 4);
		assertEqual("Step Units 3", res.value(p)[16], 4);

		//Test Mean, Median, Max, Min, StdDev functions
		clearModel()
		p  = createPrimitive("x", "Variable",[0,0],[100,100]);
		p2  = createPrimitive("y", "Variable",[0,0],[100,100]);
		l = createConnector("Link","Link",p,p2);
		setValue(p, "(Years-60)^2");
		setValue(p2, "PastMean([x])");
		res = runModel(true);
		assertEqual("Mean",res.lastValue(p2),950);
		setValue(p2, "[x].PastMean()");
		res = runModel(true);
		assertEqual("Mean (Obj)",res.lastValue(p2),950);

		setValue(p2, "PastMedian([x])");
		res = runModel(true);
		assertEqual("Median",Math.round(res.lastValue(p2)),625);
		setValue(p2, "[x].PastMedian()");
		res = runModel(true);
		assertEqual("Median (Obj)",Math.round(res.lastValue(p2)),625);

		setValue(p2, "Median(PastValues([x]))");
		res = runModel(true);
		assertEqual("Median 2",Math.round(res.lastValue(p2)),625);
		setValue(p2, "[x].PastValues().Median()");
		res = runModel(true);
		assertEqual("Median 2 (Obj)",Math.round(res.lastValue(p2)),625);

		setValue(p2, "PastStdDev([x])");
		res = runModel(true);
		assertEqual("StdDev", Math.round(res.lastValue(p2)*10), Math.round(962.8*10));
		setValue(p2, "[x].PastStdDev()");
		res = runModel(true);
		assertEqual("StdDev (Obj)", Math.round(res.lastValue(p2)*10), Math.round(962.8*10));

		setValue(p2, "PastMax([x])");
		res = runModel(true);
		assertEqual("Max", Math.round(res.lastValue(p2)), 3600);
		setValue(p2, "[x].PastMax()");
		res = runModel(true);
		assertEqual("Max (Obj)", Math.round(res.lastValue(p2)), 3600);

		setValue(p2, "PastMin([x])");
		res = runModel(true);
		assertEqual("Min", res.lastValue(p2),0);
		setValue(p2, "[x].PastMin()");
		res = runModel(true);
		assertEqual("Min (Obj)", res.lastValue(p2),0);

		setValue(p, "(Years-60)^2");
		setValue(p2, "Mean(1,2,3)");
		res = runModel(true);
		assertEqual("Mean",res.lastValue(p2),2);

		setValue(p2, "Median(1,2,4)");
		res = runModel(true);
		assertEqual("Median",Math.round(res.lastValue(p2)),2);

		setValue(p2, "Max(1,5,7,6)");
		res = runModel(true);
		assertEqual("Max", Math.round(res.lastValue(p2)), 7);

		setValue(p2, "Min(1,0,7,6)");
		res = runModel(true);
		assertEqual("Min", res.lastValue(p2),0);


		//Test Smooth function
		clearModel()
		p  = createPrimitive("My Param", "Variable",[0,0],[100,100]);
		p2  = createPrimitive("Smoothed", "Variable",[0,0],[100,100]);
		l = createConnector("Link","Link",p,p2);
		setValue(p, "StairCase(40, 3)");
		setValue(p2, "Smooth([My Param],20, 5)");
		res = runModel(true);
		assertEqual("Smooth 1", res.value(p2)[0], 5);
		assertEqual("Smooth 2", Math.round(res.value(p2)[40]*1000), Math.round(0.64256*1000));
		assertEqual("Smooth 3", Math.round(res.value(p2)[59]*1000), Math.round(2.110412*1000));
		setValue(p2, "[My Param].Smooth(20, 5)");
		res = runModel(true);
		assertEqual("Smooth 1 (Obj)", res.value(p2)[0],5);
		assertEqual("Smooth 2 (Obj)", Math.round(res.value(p2)[40]*1000), Math.round(0.64256*1000));
		assertEqual("Smooth 3 (obj)", Math.round(res.value(p2)[59]*1000), Math.round(2.110412*1000));


		setValue(p, "years");
		setValue(p2, "Smooth([My Param], 20, 5)");
		res = runModel(true);
		assertEqual("Smooth 4", res.value(p2)[0], 5);
		assertEqual("Smooth 5", res.value(p2)[1], 4.75);
		assertEqual("Smooth 6", Math.round(res.value(p2)[10]*1000), Math.round(4.96842*1000));

		setValue(p2, "Smooth([My Param], 20)");
		res = runModel(true);
		assertEqual("Smooth 4", res.value(p2)[0], 0);
		assertEqual("Smooth 5", res.value(p2)[1], 0);
		assertEqual("Smooth 6", Math.round(res.value(p2)[10]*1000), Math.round(1.97474*1000));

		//Test ExpDelay function
		clearModel()
		p  = createPrimitive("x", "Variable",[0,0],[100,100]);
		p2  = createPrimitive("ExpValue", "Variable",[0,0],[100,100]);
		l = createConnector("Link","Link",p,p2);
		setValue(p, "Staircase(20)");
		setValue(p2, "Delay3([x],10,2)");
		res = runModel(true);
		if(algorithms[i]=="RK1"){
			assertEqual("ExpDelay 1", Math.round(res.value(p2)[3]*100), Math.round(1.946*100));
			assertEqual("ExpDelay 2", Math.round(res.value(p2)[2]*100), Math.round(2*100));
			assertEqual("ExpDelay 3",Math.round( res.value(p2)[26]*100), Math.round(0.269*100));
		}else if(algorithms[i]=="RK4"){
			assertEqual("ExpDelay 1", Math.floor(res.value(p2)[3]*10), Math.floor(1.946*10));
		}
		setValue(p2, "[x].Delay3(10,2)");
		res = runModel(true);
		if(algorithms[i]=="RK1"){
			assertEqual("ExpDelay 1 (Obj)", Math.round(res.value(p2)[3]*100), Math.round(1.946*100));
			assertEqual("ExpDelay 2 (Obj)", Math.round(res.value(p2)[2]*100), Math.round(2*100));
			assertEqual("ExpDelay 3 (Obj)",Math.round( res.value(p2)[26]*100), Math.round(0.269*100));
		}else if(algorithms[i]=="RK4"){
			assertEqual("ExpDelay 1 (Obj)", Math.floor(res.value(p2)[3]*10), Math.floor(1.946*10));
		}

		//Test Rand Functions
		clearModel()
		p  = createPrimitive("RandParam", "Variable",[0,0],[100,100]);
		p2  = createPrimitive("HalfRand", "Variable",[0,0],[100,100]);
		s  = createPrimitive("HalfRand", "Stock",[0,0],[100,100]);
		l = createConnector("Link","Link",p, p2);
		l = createConnector("Link","Link",p, s);
		setValue(p, "Rand");
		setValue(p2, "[RandParam]/2");
		setValue(s, "[RandParam]/4");
		res = runModel(true);
		assertEqual("Rand Cached Value", Math.round(res.lastValue(p)*10000), Math.round(res.lastValue(p2)*2*10000));
    if (algorithms[i]=="RK1") {
		  assertEqual("Rand Stock", Math.round(res.value(p)[0]*10000), Math.round(res.value(s)[0]*4*10000));
    }


		res = runModel(true);
		var r1 = res.lastValue(p);
		res = runModel(true);
		assertUnequal("Set Rand Seed 1",res.lastValue(p),r1);

		setMacros("SetRandSeed(1)");
		res = runModel(true);
		var r1 = res.lastValue(p);
		res = runModel(true);
		assertEqual("Set Rand Seed 2",res.lastValue(p),r1);

		setMacros("SetRandSeed(3)");
		res = runModel(true);
		assertUnequal("Set Rand Seed 3", res.lastValue(p2),r1);
		setMacros("");


		//Test Misc Function using tagged time units
		clearModel()
		p  = createPrimitive("x", "Variable",[0,0],[100,100]);
		p2  = createPrimitive("y", "Variable",[0,0],[100,100]);
		l = createConnector("Link","Link",p,p2);
		setValue(p, "Years");
		setValue(p2, "Delay([x], {3 Years} )");
		res = runModel(true);
		assertEqual("Time Units Delay 1", Math.round(res.value(p2)[6]*10000), Math.round(3*10000));

		setValue(p2, "Delay([x], {x: {3 years}, y: {5 years}} ).x");
		res = runModel(true);
		assertEqual("Time Units Delay Vec 1", Math.round(res.value(p2)[6]*10000), Math.round(3*10000));

		setValue(p2, "Delay([x], {x: 2, y: 4} ).y");
		res = runModel(true);
		assertEqual("Time Units Delay Vec 2", Math.round(res.value(p2)[6]*10000), Math.round(2*10000));


		var p3  = createPrimitive("z", "Variable",[0,0],[100,100]);
		setValue(p3, "{x: 2, y: 4}");
		l = createConnector("Link","Link", p3, p2);
		setValue(p2, "Delay([x], [z]).y");
		res = runModel(true);
		assertEqual("Time Units Delay Vec 3", Math.round(res.value(p2)[6]*10000), Math.round(2*10000));

		setValue(p2, "Delay([x], {x: -1, y: 4} ).y"); // Can't have negative delay
		res = runModel(true);
		assertUnequal("Time Units Delay Vec 4", res.error, "none");


		setValue(p2, "[x].Delay({3 Years} )");
		res = runModel(true);
		assertEqual("Time Units Delay 1 (Obj)", Math.round(res.value(p2)[6]*10000), Math.round(3*10000));

		setValue(p2, "Delay([x], {48 Months})");
		res = runModel(true);
		assertEqual("Time Units Delay 2", Math.round(res.value(p2)[6]*10000), Math.round(2*10000));

		setValue(p2, "PastMean([x], {48 Months})");
		res = runModel(true);
		assertEqual("Time Units Mean 1", Math.round(res.value(p2)[6]*10000), Math.round((6+5+4+3+2)/5*10000));

		setValue(p2, "Mean(PastValues([x], {48 Months}))");
		res = runModel(true);
		assertEqual("Time Units Mean 2", Math.round(res.value(p2)[6]*10000), Math.round((6+5+4+3+2)/5*10000));

		setValue(p2, "PastMean([x], {3 Years})");
		res = runModel(true);
		assertEqual("Time Units Mean 3", Math.round(res.value(p2)[6]*10000), Math.round((6+5+4+3)/4*10000));

		setValue(p2, "PastCorrelation([x],[x])");
		res = runModel(true);
		assertEqual("Correlation", Math.round(res.value(p2)[6]*10000), 10000);

		setValue(p2, "PastCorrelation([x],[x], {3 Years})");
		res = runModel(true);
		assertEqual("Correlation", Math.round(res.value(p2)[6]*10000), 10000);




		// Test Units and Variables

		clearModel();

		var p1 = createPrimitive("x1", "Variable", [0,0], [100,100]);
		var p2 = createPrimitive("x2", "Variable", [0,0], [100,100]);
		var p3 = createPrimitive("y", "Variable", [0,0], [100,100]);
		var l = createConnector("l", "Link", p1, p3);
		var l2 = createConnector("l2", "Link", p2, p3);

		setUnits(p1,"Centimeters");
		setUnits(p2, "Meters^2");
		setUnits(p3, "Meters^3")
		setValue(p1, "200");
		setValue(p2, "3");
		setValue(p3, "[x1]*[x2]");
		var res = runModel(true);

		assertEqual("Variable Units Conversion 1",res.value(p3)[50], 6)
		setUnits(p1, "Seconds")
		res = runModel(true);
		assertUnequal("Variable Units Conversion 2", res.error, "none");

		clearModel();

		var p1 = createPrimitive("y1", "Variable", [0,0], [100,100]);
		var p2 = createPrimitive("y2", "Variable", [0,0], [100,100]);
		var p3 = createPrimitive("x", "Variable", [0,0], [100,100]);
		var l = createConnector("l", "Link", p3, p1);
		var l2 = createConnector("l2", "Link", p3, p2);

		setUnits(p2,"Centimeters");
		setValue(p3, "years");
		setValue(p1, "delay([x],3)");
		setValue(p2, "delay([x],5)");
		var res = runModel(true);

		assertEqual("Past Values Clone Check 1",res.value(p1)[10], 7)
		assertEqual("Past Values Clone Check 2",res.value(p2)[10], 5)
		assertEqual("Past Values Clone Check 3",res.value(p3)[10], 10)

		setValue(p1, "delay1([x],2)");
		setValue(p2, "delay1([x],2)");
		var res = runModel(true);

		assertEqual("Past Values Clone Check 4", res.error, "none");

		setValue(p1, "delay3([x],2)");
		setValue(p2, "delay3([x],2)");
		var res = runModel(true);

		assertEqual("Past Values Clone Check 5", res.error, "none");

		setValue(p1, "smooth([x],2)");
		setValue(p2, "smooth([x],2)");
		var res = runModel(true);

		assertEqual("Past Values Clone Check 6", res.error, "none");


		clearModel();


		p1 = createPrimitive("x", "Variable", [0,0], [100,100]);
		p2 = createPrimitive("y", "Variable", [0,0], [100,100]);

		l = createConnector("l", "Link", p1, p2);

		setValue(p1,"{36 Meters}");
		setValue(p2, "1");

		setUnits(p2,"Qubits");

		res = runModel(true);
		assertUnequal("Variable Units Scaling 1", res.error, "none");

		setUnits(p1, "Meters")
		res = runModel(true);
		assertEqual("Variable Units Scaling 2", res.error, "none");

		setValue(p2, "[x]");
		res = runModel(true);
		assertUnequal("Variable Units Scaling 3", res.error, "none");
	}
}


function testClearModel(){

	test = "ClearModel";

	setupDummy();
	assertUnequal("Initial", findAll().length, 0);
	clearModel();
	assertEqual("Final", findAll().length, 0);

}

function testTimeShift(){
	var oldTest = test;
	test = "Time Shift";

	clearModel();

	var A = createPrimitive("A", "Stock", [200,200], [140,30]);
	var B = createPrimitive("B", "Stock", [400,200], [140,30]);
	var flow_A = createConnector("Flow A", "Flow", null, A);
	var flow_B = createConnector("Flow B", "Flow", null, B);

	setValue(A, 10)
	setValue(B, 10)
	setValue(flow_A, "0.1*[A]");
	setValue(flow_B, "0.1*[B]");


	var fA = createPrimitive("f A", "Folder", [200,150], [150,100]);
	var fB = createPrimitive("f B", "Folder", [200,150], [150,100]);

	setParent([A, flow_A], fA);
	setParent([B, flow_B], fB);

	setTimeLength(10);
	setTimeStep(1);
	setAlgorithm("RK1");

	var res = runModel(true);
	assertEqual("Base 1", res.value(A)[1], 11);
	assertEqual("Base 2", res.value(B)[1], 11);

	setFolderSolver(fA, {enabled:true, algorithm: "RK4", timeStep: 1});
	res = runModel(true);
	assertEqual("Switch 1", Math.round(res.value(A)[1]*1000), Math.round(11.051708*1000));
	assertEqual("Switch 2", res.value(B)[1], 11);

	setFolderSolver(fB, {enabled:true, algorithm: "RK1", timeStep: 2.5});
	res = runModel(true);
	assertEqual("Switch 3", Math.round(res.value(A)[1]*1000), Math.round(11.051708*1000));
	assertEqual("Switch 4", isUndefined(res.value(B)[1]), true);
	assertEqual("Switch 5", res.value(B)[3], 12.5);
	assertEqual("Switch 6", isUndefined(res.value(A)[3]), true);

	setFolderSolver(fA, {enabled:true, algorithm: "RK4", timeStep: 2.5});
	setFolderSolver(fB, {enabled:true, algorithm: "RK1", timeStep: 1});
	res = runModel(true);
	assertEqual("Switch 7", isUndefined(res.value(A)[1]), true);
	assertEqual("Switch 8", res.value(B)[1], 11);
	assertEqual("Switch 9", Math.round(res.value(A)[3]*1000), Math.round(12.8401699*1000));
	assertEqual("Switch 10", isUndefined(res.value(B)[3]), true);


	test = oldTest;
}

function testFolders(){
	test = "Folders";

	var s = createPrimitive("s", "Stock", [300,200], [140,30]);
	var f = createPrimitive("f", "Folder", [200,150], [150,100]);

	assertNull("Parent Null", getParent(s));
	setParent(s, f);
	assertEqual("Set Parent", getID(getParent(s)), getID(f));

	if(!(graph instanceof SimpleNode)){
		assertEqual("Default Folder", getCollapsed(f), false);
		collapseFolder(f);
		assertEqual("Collapse Folder", getCollapsed(f), true);
		expandFolder(f);
		assertEqual("Expand Folder", getCollapsed(f), false);
	}

	setParent(s, null);
	assertNull("Set Parent Null", getParent(s));

	assertEqual("Get Initial Type 1", getFolderType(f), "None");
	setFolderType(f, "Agent")
	assertEqual("Get Initial Type 2", getFolderType(f), "Agent");

	setFolderAgentParent(f, "abc");
	assertEqual("Agent Parent", getFolderAgentParent(f), "abc");

	clearModel();
}


function testCreate(){
	test = "Create";

	var x = createPrimitive("Test Stock", "Stock", [300,200], [140,30]);
	assertEqual("Name", getName(x), "Test Stock");
	assertEqual("Type", getType(x), "Stock");

	if(!(graph instanceof SimpleNode)){
		var p = getPosition(x);
		assertEqual("Position x", p[0], 300);
		assertEqual("Position y", p[1], 200);

		setPosition(x, [100, 400]);
		p = getPosition(x);
		assertEqual("Position x 2", p[0], 100);
		assertEqual("Position y 2", p[1], 400);
	}


	x = createPrimitive("Test Variable", "Variable", [400,200], [140,30]);
	assertEqual("Type", getType(x), "Variable");

	x = createConnector("Test Link", "Link", findName("Test Stock"), findName("Test Variable"));
	assertEqual("Type", getType(x), "Link");

}

function testFind(){
	test = "Find";

	setupComplexDummy();

	assertEqual("findType", findType("Stock").length, 4);
	assertEqual("findNote", findNote("foo").length, 0);
	setNote(findType("Stock"), "foo")
	assertEqual("findNote", findNote("foo").length, 4);

	assertEqual("findType", findType(["Stock","Variable"]).length, 6);
	assertEqual("findType", findType(["dsfsdf"]).length, 0);
	assertEqual("findType", findType("dsfsdf").length, 0);

	assertEqual("findAll", findAll().length, 10);

	assertNull("findName", findName("fdfsdgfg"));
	assertNotNull("findName", findName("y"));
	assertEqual("findName", findName("y").length, 2);
	assertEqual("findName", findName(["x","y","fvdf"]).length, 3);


	var id = getID(findName("x"));
	assertNotNull("findID", findID(id));
	assertNotNull("findID", findID([id]));
	assertNull("findID", findID("gfdgdfg"));


}

function setupDummy(){
	clearModel();
	var x = createPrimitive("x", "Stock", [200,200], [140,30]);
}

function setupComplexDummy(){
	clearModel();

	createPrimitive("My Converter", "Converter", [200,200], [140,30]);

	createPrimitive("x", "Stock", [200,200], [140,30]);
	createPrimitive("y", "Stock", [100,200], [140,30]);
	createPrimitive("My Stock", "Stock", [200,100], [140,30]);
	createPrimitive("y", "Stock", [200,100], [140,30]);

	createPrimitive("a", "Variable", [300,200], [140,30]);
	createPrimitive("b", "Variable", [300,100], [140,30]);

	createConnector("Link", "Link", findName("x"), findName("b"));
	createConnector("Link 2", "Link", findName("x"), findName("My Converter"));
	createConnector("My Flow", "Flow", findName("x"), findName("My Stock"));
}

"use strict";

/* 
Third party: http://www.crockford.com/javascript/inheritance.html
*/

Function.prototype.method = function (name, func) {
    this.prototype[name] = func;
    return this;
};


Function.method('inherits', function (parent) {
    var d = {}, p = (this.prototype = new parent());
    this.method('uber', function uber(name) {
        if (!(name in d)) {
            d[name] = 0;
        }        
        var f, r, t = d[name], v = parent.prototype;
        if (t) {
            while (t) {
                v = v.constructor.prototype;
                t -= 1;
            }
            f = v[name];
        } else {
            f = p[name];
            if (f == this[name]) {
                f = v[name];
            }
        }
        d[name] += 1;
        r = f.apply(this, Array.prototype.slice.apply(arguments, [1]));
        d[name] -= 1;
        return r;
    });
    return this;
});
"use strict";
/*

Copyright 2010-2015 Scott Fortmann-Roe. All rights reserved.

This file may distributed and/or modified under the
terms of the Insight Maker Public License (https://InsightMaker.com/impl).

*/

var unitsBank = {};

function sortAndCollapseUnits(names, exponents){
	if (names.length <= 1) {
		if (names.length == 1) {
			names[0] = names[0].toLowerCase();
		}
	} else {
		var sorter = [];
		for (var i = 0; i < names.length; i++) {
			sorter.push({
				name: names[i].toLowerCase(),
				exponent: exponents[i]
			});
		}
		sorter.sort(function(a, b) {
			return a.name.localeCompare(b.name);
		});
		names = [];
		exponents = [];
		for (var i = 0; i < sorter.length; i++) {
			names.push(sorter[i].name);
			exponents.push(sorter[i].exponent);
		}
		for (var i = 0; i < names.length; i++) {
			for (var j = i + 1; j < names.length; j++) {
				if (names[i] === names[j]) {
					exponents[i] = exponents[i] + exponents[j];

					names.splice(j, 1);
					exponents.splice(j, 1);

					j--;
				}
			}
			
			if (exponents[i] == 0) {
				names.splice(i, 1);
				exponents.splice(i, 1)
				i--;
			}
		}
	}
	
	return {names: names, exponents: exponents};
}

function getUnitStore(names, exponents, checkNames) {
	if (checkNames) {
		var x = sortAndCollapseUnits(names, exponents);
		names = x.names;
		exponents = x.exponents;
		
	}

	if (names.length == 0) {
		return undefined;
	}

	var id = getUnitsId(names, exponents);
	
	if (!unitsBank[id]) {
		
		unitsBank[id] = new UnitStore(names, exponents);
	}
	
	return unitsBank[id];
}

function getUnitsId(names, exponents) {
	return names.join(",") + exponents.join(",");
}


function UnitStore(names, exponents) {
	this.names = names;
	this.exponents = exponents;
	this.toBase = null;
	this.baseUnits = null;
	this.multiples = {};
	this.id = getUnitsId(this.names, this.exponents);
}

UnitStore.prototype.addBase = function() {

	
	if (this.toBase) {
		return;
	}
	
	this.toBase = 1;
	
	
	var names = this.names.slice();
	var exponents =  this.exponents.slice();
	
	var modified = true;
	while (modified) {
		modified = false;
		
		for (var i = names.length - 1; i >= 0; i--) {
			var j = findSourceIndex(names[i]);
			if (j !== -1 && ! ( conUnitTargets[j].names.length == 1 && conUnitTargets[j].names[0] == names[i] )) {
				this.toBase = fn["*"](this.toBase, fn.expt(conScalings[j], exponents[i]));
				names = names.concat(conUnitTargets[j].names);
				names.splice(i, 1);
				exponents = exponents.concat(conUnitTargets[j].exponents.map(function(x){ return x*exponents[i] }))
				exponents.splice(i, 1);
				modified = true;
				break;
			}
		}
	}
	//console.log(names)
	//console.log(exponents)
	var x = sortAndCollapseUnits(names, exponents);
	
	this.baseUnits =  getUnitStore(x.names, x.exponents);
	
}

UnitStore.prototype.power = function(exponent){
	var names = this.names.slice();
	var exponents = this.exponents.slice();
	for(var i = 0; i < exponents.length; i++){
		exponents[i] = exponents[i]*exponent;
	}
	return getUnitStore(names, exponents);
}


UnitStore.prototype.toStringShort = function() {
  var s = "";
  for (var i = 0; i < this.names.length; i++) {
    if (s != "") {
      s = s + ",";
    }
    s = s + this.names[i];
    if (this.exponents[i] != 1) {
      s = s + "^" + this.exponents[i];
    }
  }
  return s;
}

UnitStore.prototype.multiply = function(rhs, exponent) {
	var id = rhs.id+";"+exponent;
	
	
	if(! this.multiples[id]){
		if(! this.toBase){
			this.addBase();
		}
		if(! rhs.toBase){
			rhs.addBase();
		}
		
		if(this.baseUnits){
			var names = this.baseUnits.names.slice();
			var exponents = this.baseUnits.exponents.slice();
		

			if(rhs.baseUnits){
				for (var i = 0; i < rhs.baseUnits.names.length; i++) {
					var j = names.indexOf(rhs.baseUnits.names[i]);
					if (j != -1) {
						exponents[j] = exponents[j] + rhs.baseUnits.exponents[i] * exponent;
					} else {
						var found = false;
						for(var k = 0; k < names.length; k++){
							if(rhs.baseUnits.names[i] < names[k]){
								names.splice(k, 0, rhs.baseUnits.names[i]);
								exponents.splice(k, 0, rhs.baseUnits.exponents[i] * exponent)
								found = true;
								break;
							}
						}
						if(! found){
							names.push(rhs.baseUnits.names[i]);
							exponents.push(rhs.baseUnits.exponents[i] * exponent);
						}
					}
				}
		
				for(var i = exponents.length-1; i >= 0; i--){
					if( exponents[i] == 0){
						exponents.splice(i, 1);
						names.splice(i, 1);
					}
				}
			}
		}else{
			var names = rhs.baseUnits.names.slice();
			var exponents = rhs.baseUnits.exponents.slice();
		}
		this.multiples[id] = getUnitStore(names, exponents);
	}

	return this.multiples[id];
}

function unitsFromString(expandString) {
	var names = [];
	var exponents = [];
	if (expandString != "") {
		var expandItems = expandString.split(",");
		for (var j = 0; j < expandItems.length; j++) {
			names.push(expandItems[j].split("^")[0]);
			if (expandItems[j].indexOf("^") != -1) {
				exponents.push(parseFloat(expandItems[j].split("^")[1]));
			} else {
				exponents.push(1);
			}
		}
	}
	return getUnitStore(names, exponents, true);
}

var titleCaseReg = /\w\S*/g;
var titleCaseFunc = function(txt) {
	return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();
};

function toTitleCase(str) {
	return str.replace(titleCaseReg, titleCaseFunc);
}
UnitStore.prototype.toString = function() {
	var n = "",
		den = "";
	var numItems = 0,
		denItems = 0;
	for (var i = 0; i < this.names.length; i++) {
		if (this.names[i] != "") {
			var item = "<span class=\"unit\">" + toTitleCase(this.names[i]) + "</span>";
			if (this.exponents[i] != 1 && this.exponents[i] != -1) {
				item = item + "<span class='markup'>^</span><sup>" + Math.abs(this.exponents[i]) + "</sup>";
			}
			if (this.exponents[i] > 0) {
				if (numItems > 0) {
					n = n + "<span class='markup'>*</span>";
				}
				n = n + item;
				numItems = numItems + 1;
			} else {
				if (denItems > 0) {
					den = den + "<span class='markup'>*</span>";
				}
				den = den + item;
				denItems = denItems + 1;
			}
		}
	}
		
		
	if (n == "") {
		n = "Unitless";
	}
	if (den == "") {
		return "<div class=\"units\">" + n + "</div>";
	} else {
		if (n == "Unitless") {
			n = "1";
		}
		return "<span class=\"units\">" + n + "<hr/><span class='markup'>/(</span>" + den + "<span class='markup'>)</span></span>";
	}
}


function convertUnits(source, target, loose) {
	if(source === target) {
		return 1;
	}
	if((source && (! target)) || (target && (! source))){
		if(loose){
			return 1
		}else{
			return 0;
		}
	}
	
	if(! source.toBase){
		source.addBase()
	}
	if(! target.toBase){
		target.addBase()
	}

	if (source.baseUnits !== target.baseUnits) {
		return 0;
	}
	
	return fn["/"](source.toBase, target.toBase);
}


"use strict";
/*

Copyright 2010-2015 Scott Fortmann-Roe. All rights reserved.

This file may distributed and/or modified under the
terms of the Insight Maker Public License (https://InsightMaker.com/impl).

*/


var baseSources = ["Degree", "Radians?","Ampere","Gram","Second","Meter","(Meters? ?Squared?|Squared? ?Meters?)", "(Centimeters? ?Squared?|Squared? ?Centimeters?)", "(Centimeters? ?Cubed?|Cubic ?Centimeters?)", "(Meters? Cubed?|Cubic ?Meters?)", "(Kilometers? ?Cubed?|Cubic ?Kilometers?)", "(Inches? Squared?|Squared? ?Inches?)", "(Miles? ?Squared?|Squared? ?Miles?)", "(Kilometers? Squared?|Squared? ?Kilometers?)", "Acre? ?(Feet|Foot)", "Meters? ?per ?Seconds?", "Meters? ?per ?Seconds? ?Squared?", "(Foot|Feet) ?per ?Seconds?", "(Foot|Feet) ?per ?Seconds? ?Squared?", "Miles? ?per ?Hours?", "Miles? ?per ?Hours? ?Squared?", "Kilometers? ?per ?Hours?", "Kilometers? ?per ?Hours? ?Squared?", "Liters? ?per ?Seconds?", "(Cubic ?Meters?|Meters? ?Cubed?) ?per ?Seconds?", "(Squared? ?Yards?|Yards? ?Squared?)", "(Squared? ?(Feet|Foot)|(Feet|Foot) ?Squared?)", "(Squared? Millimeters?|Millimeters? ?Squared?)", "(Millimeters? ?Cubed?|Cubic ?Millimeters?)", "Gallons? ?per ?Seconds?", "Gallons? ?per ?Minutes?", "Pounds? ?per ?Seconds?", "Kilograms? ?per ?Seconds?", "Dollars? ?per ?Seconds?", "Dollars? ?per ?Hours?", "Dollars? ?per ?Days?", "Dollars? ?per ?Weeks?", "Dollars? ?per ?Months?", "Dollars? ?per ?Quarters?", "Dollars? ?per ?Years?", "Euros? ?per ?Seconds?", "Euros? ?per ?Hours?", "Euros? ?per ?Days?", "Euros? ?per ?Weeks?", "Euros? ?per ?Months?", "Euros? ?per ?Quarters?", "Euros? ?per ?Years?", "Centimeters?", "Millimeters?", "Kilometers?", "Inch(es)?", "(Foot|Feet)", "Yards?", "Miles?", "Acres?", "Hectares?", "Liters?", "Gallons?", "Quarts?", "Fluid ?Ounces?", "Years?", "Quarters?", "Months?", "Weeks?", "Days?", "Hours?", "Minutes?", "Kilograms?", "Milligrams?", "Ounces?", "Pounds?", "Tonnes?", "Tons?", "Watts?", "Kilowatts?", "Megawatts?", "Gigawatts?", "Calories?", "Kilocalories?", "(BTUs?|British ?Thermal ?units?)", "Kilojoules?", "Joules?", "Coulombs?", "Volts?", "Millivolts?", "Kilovolts?", "Newtons?", "Pounds? ?Force", "Atoms?", "Molecules?", "Farads?", "Pascals?", "Kilopascals?", "Bars?", "Atmospheres?", "Pounds? ?per ?Squared? ?Inch(es)?"];
var baseTargets = ["Degrees", "Degrees", "Amperes","Grams","Seconds","Meters","Meters^2", "Centimeters^2", "Centimeters^3", "Meters^3", "Kilometers^3", "Inches^2", "Miles^2", "Kilometers^2", "Acres,Feet", "Meters,Seconds^-1", "Meters,Seconds^-2", "Feet,Seconds^-1", "Feet,Seconds^-2", "Miles,Hours^-1", "Miles,Hours^-2", "Kilometers,Hours^-1", "Kilometers,Hours^-2", "Liters,Seconds^-1", "Meters^3,Seconds^-1", "Yards^2", "Feet^2", "Millimeters^2", "Millimeters^3", "Gallons,Seconds^-1", "Gallons,Minutes^-1", "Pounds,Seconds^-1", "Kilograms,Seconds^-1", "Dollars,Seconds^-1", "Dollars,Hours^-1", "Dollars,Days^-1", "Dollars,Weeks^-1", "Dollars,Months^-1", "Dollars,Quarters^-1", "Dollars,Years^-1", "Euros,Seconds^-1", "Euros,Hours^-1", "Euros,Days^-1", "Euros,Weeks^-1", "Euros,Months^-1", "Euros,Quarters^-1", "Euros,Years^-1", "Meters", "Meters", "Meters", "Meters", "Meters", "Meters", "Meters", "Meters^2", "Meters^2", "Meters^3", "Meters^3", "Meters^3", "Meters^3", "Seconds", "Seconds", "Seconds", "Seconds", "Seconds", "Seconds", "Seconds", "Grams", "Grams", "Grams", "Grams", "Grams", "Grams", "Joules,Seconds^-1", "Watts", "Watts", "Watts", "Joules", "Joules", "Joules", "Joules", "Newtons,Meters", "Amperes,Seconds", "Watts,Amperes^-1", "Volts", "Volts", "Kilograms,Meters,Seconds^-2", "Pounds,Feet per Second Squared", "Moles", "Moles", "Joules,Volts^-2", "Newton,Meters^-2", "Pascals", "Pascals", "Pascals", "Pascals"];
var baseScalings = [1, 180/Math.PI, 1, 1, 1, 1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, (0.01), (0.001), (1000), (0.0254), (0.3048), (0.9144), (1609.344), (4046.85642), (10000), (0.001), (0.003785), (0.000946), (0.00003), (31536000), (7884000), (2628000), (604800), (86400), (3600), (60), (1000), (0.001), (28.349523), (453.59237), (1000000), (907184.74),  1, (1000), (1000000), (1000000000), (4.184), (4184), (1055.05585), (1000),  1,  1,  1, (0.001), (1000),  1, (32.17405), (0.0), (0.0),  1,  1, (1000), (100000), (101325), (6894)];

var conScalings = [];
var conTargets = [];
var conSourceNames = [];
var conUnitTargets = [];
var conSourceRegEx = [];
function loadUnits(addedSources, addedTargets, addedScalings){
	conScalings = addedScalings;
	conTargets = addedTargets;
	conSourceNames = addedSources;
	for(var i = 0; i < baseSources.length; i++){
		conScalings.push(baseScalings[i]);
		conTargets.push(baseTargets[i]);
		conSourceNames.push(baseSources[i]);
	}
	
	conSourceRegEx = [];
	conUnitTargets= [];
	cachedUnits = {};
	unitsBank = {};
	for (var uk = 0; uk < conTargets.length; uk++) {
		conUnitTargets.push(unitsFromString(conTargets[uk].toLowerCase()));
  		conSourceRegEx.push(new RegExp("^"+conSourceNames[uk]+"$", "i"));
	}
}
loadUnits([], [], []);

var cachedUnits = {};

var findSourceIndex = function(name){
	if(name in cachedUnits){
		return cachedUnits[name];//memonization
	}
	for(var i = conSourceNames.length-1; i >= 0 ; i--){
		if(cachedUnits[i] != "" && conSourceRegEx[i].test(name)){
			cachedUnits[name] = i;
			return i;
		}
	}
	cachedUnits[name] = -1;
	return -1;
}

function Material(value, units) {
	this.value =  value;
  	this.units = units;
}

Material.prototype.toNum = function(){
	return this;
};

Material.prototype.toString = function(){
	if(this.units){
		return "<span class='markup'>{</span>"+this.value+"&nbsp"+this.units.toString()+"<span class='markup'>}</span>";
	}else{
		return this.value+"";
	}
}

Material.prototype.fullClone = function(){
	return new Material(this.value, this.units);
}

Material.prototype.forceUnits = function(newUnits){
	if(! this.units){
		this.units = newUnits;
	}else{
		var scale = convertUnits(this.units, newUnits);
		if (scale == 0) {
			unitAlert(this.units, newUnits, "forceUnits");
		} else {
			this.value = fn["*"](this.value, scale);
			this.units = newUnits;
		}
	}
	return this;
}


function unitAlert(lhs, rhs, type){
	throw "MSG: Incompatible units for the "+type+" of "+(lhs?lhs.toString():"unitless")+" and "+(rhs?rhs.toString():"unitless")+".";
}

"use strict";
/*

Copyright 2010-2015 Scott Fortmann-Roe. All rights reserved.

This file may distributed and/or modified under the
terms of the Insight Maker Public License (https://InsightMaker.com/impl).

*/

var notsupportedfn = function(){
	console.log("Not supported");
}
var sn = function(x){
	if(x[0]=="#"){
		return parseFloat(x.substr(2));
	}else{
		return parseFloat(x);
	}
}
var fn = {
	"+": function(a,b){return a+b},
	"-": function(a,b){if(isDefined(b)){return a-b}else{return -a;}},
	"*": function(a,b){return a*b},
	"/": function(a,b){return a/b},
	"=": function(a,b){return a==b},
	"<": function(a,b){return a<b},
	"<=": function(a,b){return a<=b},
	">": function(a,b){return a>b},
	">=": function(a,b){return a>=b},
	"mod": function(a,b){return a % b},
	"expt": function(a,b){return Math.pow(a,b)},
	"abs": Math.abs,
	"sin": Math.sin,
	"asin": Math.asin,
	"cos": Math.cos,
	"acos": Math.acos,
	"tan": Math.tan,
	"atan": Math.atan,
	"sqrt": Math.sqrt,
	"log": function(a, b){if(isDefined(b)){return Math.log(a)/Math.log(b)}else{return Math.log(a);}},
	"exp": Math.exp,
	"round": Math.round,
	"floor": Math.floor,
	"ceiling": Math.ceil,
	"angle": notsupportedfn,
	"magnitude": notsupportedfn,
	"real-part": function(x){return x}
}

/*
Copyright (c) 2003-2008 Terence Parr. All rights reserved.
Code licensed under the BSD License:
http://www.antlr.org/license.html

Some parts of the ANTLR class:
Copyright (c) 2008, Yahoo! Inc. All rights reserved.
Code licensed under the BSD License:
http://developer.yahoo.net/yui/license.txt
*/
if(typeof org=="undefined"||!org){var org={}}if(typeof org.antlr=="undefined"||!org.antlr){org.antlr={}}org.antlr.global=(function(){return this}).call(null);org.antlr.namespace=function(){var A=arguments,E=null,C,B,D;for(C=0;C<A.length;C=C+1){D=A[C].split(".");E=org.antlr.global;for(B=0;B<D.length;B=B+1){E[D[B]]=E[D[B]]||{};E=E[D[B]]}}return E};org.antlr.env=org.antlr.env||{};org.antlr.env.ua=function(){var D={ie:0,opera:0,gecko:0,webkit:0,mobile:null,air:0,rhino:false};var B,A;try{B=navigator.userAgent;if((/KHTML/).test(B)){D.webkit=1}A=B.match(/AppleWebKit\/([^\s]*)/);if(A&&A[1]){D.webkit=parseFloat(A[1]);if(/ Mobile\//.test(B)){D.mobile="Apple"}else{A=B.match(/NokiaN[^\/]*/);if(A){D.mobile=A[0]}}A=B.match(/AdobeAIR\/([^\s]*)/);if(A){D.air=A[0]}}if(!D.webkit){A=B.match(/Opera[\s\/]([^\s]*)/);if(A&&A[1]){D.opera=parseFloat(A[1]);A=B.match(/Opera Mini[^;]*/);if(A){D.mobile=A[0]}}else{A=B.match(/MSIE\s([^;]*)/);if(A&&A[1]){D.ie=parseFloat(A[1])}else{A=B.match(/Gecko\/([^\s]*)/);if(A){D.gecko=1;A=B.match(/rv:([^\s\)]*)/);if(A&&A[1]){D.gecko=parseFloat(A[1])}}}}}}catch(C){}try{if(typeof window=="undefined"&&loadClass){D.rhino=true}}catch(C){}return D}();org.antlr.namespace("org.antlr.runtime.tree");org.antlr.lang=org.antlr.lang||{isArray:function(B){if(B){var A=org.antlr.lang;return A.isNumber(B.length)&&A.isFunction(B.splice)}return false},isBoolean:function(A){return typeof A==="boolean"},isFunction:function(A){return typeof A==="function"},isNull:function(A){return A===null},isNumber:function(A){return typeof A==="number"&&isFinite(A)},isObject:function(A){return(A&&(typeof A==="object"||org.antlr.lang.isFunction(A)))||false},isString:function(A){return typeof A==="string"},isUndefined:function(A){return typeof A==="undefined"},_IEEnumFix:function(C,B){if(org.antlr.env.ua.ie){var E=["toString","valueOf"],A;for(A=0;A<E.length;A=A+1){var F=E[A],D=B[F];if(org.antlr.lang.isFunction(D)&&D!=Object.prototype[F]){C[F]=D}}}},extend:function(D,E,C){if(!E||!D){throw new Error("org.antlr.lang.extend failed, please check that all dependencies are included.")}var B=function(){};B.prototype=E.prototype;D.prototype=new B();D.prototype.constructor=D;D.superclass=E.prototype;if(E.prototype.constructor==Object.prototype.constructor){E.prototype.constructor=E}if(C){for(var A in C){D.prototype[A]=C[A]}org.antlr.lang._IEEnumFix(D.prototype,C)}},augmentObject:function(E,D){if(!D||!E){throw new Error("Absorb failed, verify dependencies.")}var A=arguments,C,F,B=A[2];if(B&&B!==true){for(C=2;C<A.length;C=C+1){E[A[C]]=D[A[C]]}}else{for(F in D){if(B||!E[F]){E[F]=D[F]}}org.antlr.lang._IEEnumFix(E,D)}},augmentProto:function(D,C){if(!C||!D){throw new Error("Augment failed, verify dependencies.")}var A=[D.prototype,C.prototype];for(var B=2;B<arguments.length;B=B+1){A.push(arguments[B])}org.antlr.lang.augmentObject.apply(this,A)},merge:function(){var D={},B=arguments;for(var C=0,A=B.length;C<A;C=C+1){org.antlr.lang.augmentObject(D,B[C],true)}return D},isValue:function(B){var A=org.antlr.lang;return(A.isObject(B)||A.isString(B)||A.isNumber(B)||A.isBoolean(B))},array:{peek:function(B){if(!org.antlr.lang.isArray(B)){throw new Error("org.antlr.lang.array.peek: a is not an array.")}var A=B.length;if(A<=0){throw new Error("org.antlr.lang.array.peek: a is empty.")}return B[A-1]}}};org.antlr.runtime.RecognizerSharedState=function(){this.following=[];this._fsp=-1;this.errorRecovery=false;this.lastErrorIndex=-1;this.failed=false;this.syntaxErrors=0;this.backtracking=0;this.ruleMemo=null;this.token=null;this.tokenStartCharIndex=-1;this.text=null};org.antlr.runtime.IndexOutOfBoundsException=function(A){org.antlr.runtime.IndexOutOfBoundsException.superclass.constructor.call(this,A)};org.antlr.lang.extend(org.antlr.runtime.IndexOutOfBoundsException,Error,{name:"org.antlr.runtime.IndexOutOfBoundsException"});org.antlr.runtime.RecognitionException=function(A){org.antlr.runtime.RecognitionException.superclass.constructor.call(this);this.input=A;this.index=A.index();if(A instanceof org.antlr.runtime.CommonTokenStream){this.token=A.LT(1);this.line=this.token.getLine();this.charPositionInLine=this.token.getCharPositionInLine()}if(A instanceof org.antlr.runtime.tree.TreeNodeStream){this.extractInformationFromTreeNodeStream(A)}else{if(A instanceof org.antlr.runtime.ANTLRStringStream){this.c=A.LA(1);this.line=A.getLine();this.charPositionInLine=A.getCharPositionInLine()}else{this.c=A.LA(1)}}this.message=this.toString()};org.antlr.lang.extend(org.antlr.runtime.RecognitionException,Error,{input:null,index:null,token:null,node:null,c:null,line:null,name:"org.antlr.runtime.RecognitionException",charPositionInLine:null,approximateLineInfo:null,extractInformationFromTreeNodeStream:function(F){var A=F,E,I,D,H,C;this.node=A.LT(1);var B=A.getTreeAdaptor(),G=B.getToken(this.node);if(G){this.token=G;if(G.getLine()<=0){C=-1;E=A.LT(C);while(E){priorPayload=B.getToken(E);if(priorPayload&&priorPayload.getLine()>0){this.line=priorPayload.getLine();this.charPositionInLine=priorPayload.getCharPositionInLine();this.approximateLineInfo=true;break}--C;E=A.LT(C)}}else{this.line=G.getLine();this.charPositionInLine=G.getCharPositionInLine()}}else{if(this.node instanceof org.antlr.runtime.tree.CommonTree){this.line=this.node.getLine();this.charPositionInLine=this.node.getCharPositionInLine();if(this.node instanceof org.antlr.runtime.tree.CommonTree){this.token=this.node.token}}else{D=B.getType(this.node);H=B.getText(this.node);this.token=new org.antlr.runtime.CommonToken(D,H)}}},getUnexpectedType:function(){if(this.input instanceof org.antlr.runtime.CommonTokenStream){return this.token.getType()}else{if(this.input instanceof org.antlr.runtime.tree.TreeNodeStream){var A=this.input;var B=A.getTreeAdaptor();return B.getType(this.node)}else{return this.c}}}});org.antlr.runtime.MismatchedTokenException=function(B,A){if(arguments.length===0){this.expecting=org.antlr.runtime.Token.INVALID_TOKEN_TYPE}else{org.antlr.runtime.MismatchedTokenException.superclass.constructor.call(this,A);this.expecting=B}};org.antlr.lang.extend(org.antlr.runtime.MismatchedTokenException,org.antlr.runtime.RecognitionException,{toString:function(){return"MismatchedTokenException("+this.getUnexpectedType()+"!="+this.expecting+")"},name:"org.antlr.runtime.MismatchedTokenException"});org.antlr.runtime.UnwantedTokenException=function(B,A){if(arguments.length>0){org.antlr.runtime.UnwantedTokenException.superclass.constructor.call(this,B,A)}};org.antlr.lang.extend(org.antlr.runtime.UnwantedTokenException,org.antlr.runtime.MismatchedTokenException,{getUnexpectedToken:function(){return this.token},toString:function(){var A=", expected "+this.expecting;if(this.expecting===org.antlr.runtime.Token.INVALID_TOKEN_TYPE){A=""}if(!org.antlr.lang.isValue(this.token)){return"UnwantedTokenException(found="+A+")"}return"UnwantedTokenException(found="+this.token.getText()+A+")"},name:"org.antlr.runtime.UnwantedTokenException"});org.antlr.runtime.MissingTokenException=function(B,A,C){if(arguments.length>0){org.antlr.runtime.MissingTokenException.superclass.constructor.call(this,B,A);this.inserted=C}};org.antlr.lang.extend(org.antlr.runtime.MissingTokenException,org.antlr.runtime.MismatchedTokenException,{getMissingType:function(){return this.expecting},toString:function(){if(org.antlr.lang.isValue(this.inserted)&&org.antlr.lang.isValue(this.token)){return"MissingTokenException(inserted "+this.inserted+" at "+this.token.getText()+")"}if(org.antlr.lang.isValue(this.token)){return"MissingTokenException(at "+this.token.getText()+")"}return"MissingTokenException"},name:"org.antlr.runtime.MissingTokenException"});org.antlr.runtime.NoViableAltException=function(C,B,D,A){org.antlr.runtime.NoViableAltException.superclass.constructor.call(this,A);this.grammarDecisionDescription=C;this.decisionNumber=B;this.stateNumber=D};org.antlr.lang.extend(org.antlr.runtime.NoViableAltException,org.antlr.runtime.RecognitionException,{toString:function(){if(this.input instanceof org.antlr.runtime.ANTLRStringStream){return"NoViableAltException('"+this.getUnexpectedType()+"'@["+this.grammarDecisionDescription+"])"}else{return"NoViableAltException("+this.getUnexpectedType()+"@["+this.grammarDecisionDescription+"])"}},name:"org.antlr.runtime.NoViableAltException"});org.antlr.runtime.EarlyExitException=function(B,A){org.antlr.runtime.EarlyExitException.superclass.constructor.call(this,A);this.decisionNumber=B};org.antlr.lang.extend(org.antlr.runtime.EarlyExitException,org.antlr.runtime.RecognitionException,{name:"org.antlr.runtime.EarlyExitException"});org.antlr.runtime.MismatchedSetException=function(B,A){org.antlr.runtime.MismatchedSetException.superclass.constructor.call(this,A);this.expecting=B};org.antlr.lang.extend(org.antlr.runtime.MismatchedSetException,org.antlr.runtime.RecognitionException,{toString:function(){return"MismatchedSetException("+this.getUnexpectedType()+"!="+this.expecting+")"},name:"org.antlr.runtime.MismatchedSetException"});org.antlr.runtime.MismatchedNotSetException=function(B,A){org.antlr.runtime.MismatchedNotSetException.superclass.constructor.call(this,B,A)};org.antlr.lang.extend(org.antlr.runtime.MismatchedNotSetException,org.antlr.runtime.MismatchedSetException,{toString:function(){return"MismatchedNotSetException("+this.getUnexpectedType()+"!="+this.expecting+")"},name:"org.antlr.runtime.MismatchedNotSetException"});org.antlr.runtime.MismatchedRangeException=function(B,A,C){if(arguments.length===0){return this}org.antlr.runtime.MismatchedRangeException.superclass.constructor.call(this,C);this.a=B;this.b=A};org.antlr.lang.extend(org.antlr.runtime.MismatchedRangeException,org.antlr.runtime.RecognitionException,{toString:function(){return"MismatchedRangeException("+this.getUnexpectedType()+" not in ["+this.a+","+this.b+"])"},name:"org.antlr.runtime.MismatchedRangeException"});org.antlr.runtime.FailedPredicateException=function(A,C,B){org.antlr.runtime.FailedPredicateException.superclass.constructor.call(this,A);this.ruleName=C;this.predicateText=B};org.antlr.lang.extend(org.antlr.runtime.FailedPredicateException,org.antlr.runtime.RecognitionException,{toString:function(){return"FailedPredicateException("+this.ruleName+",{"+this.predicateText+"}?)"},name:"org.antlr.runtime.FailedPredicateException"});org.antlr.runtime.BitSet=function(A){if(!A){A=org.antlr.runtime.BitSet.BITS}if(org.antlr.lang.isArray(A)){this.bits=A}else{if(org.antlr.lang.isNumber(A)){this.bits=[]}}};org.antlr.lang.augmentObject(org.antlr.runtime.BitSet,{BITS:32,LOG_BITS:5,MOD_MASK:31,bitMask:function(B){var A=B&org.antlr.runtime.BitSet.MOD_MASK;return 1<<A},numWordsToHold:function(A){return(A>>org.antlr.runtime.BitSet.LOG_BITS)+1},wordNumber:function(A){return A>>org.antlr.runtime.BitSet.LOG_BITS},of:function(D,A){var B,F,C,E;if(org.antlr.lang.isNumber(D)){if(org.antlr.lang.isNumber(A)){C=new org.antlr.runtime.BitSet(A+1);for(B=D;B<=A;B++){F=org.antlr.runtime.BitSet.wordNumber(B);C.bits[F]|=org.antlr.runtime.BitSet.bitMask(B)}return C}else{C=new org.antlr.runtime.BitSet(D+1);C.add(D);return C}}else{if(org.antlr.lang.isArray(D)){C=new org.antlr.runtime.BitSet();for(B=D.length-1;B>=0;B--){C.add(D[B])}return C}else{if(D instanceof org.antlr.runtime.BitSet){if(!D){return null}return D}else{if(D instanceof org.antlr.runtime.IntervalSet){if(!D){return null}C=new org.antlr.runtime.BitSet();C.addAll(D);return C}else{if(org.antlr.lang.isObject(D)){E=[];for(B in D){if(org.antlr.lang.isNumber(B)){E.push(B)}}return org.antlr.runtime.BitSet.of(E)}}}}}}});org.antlr.runtime.BitSet.prototype={add:function(A){var B=org.antlr.runtime.BitSet.wordNumber(A);if(B>=this.bits.length){this.growToInclude(A)}this.bits[B]|=org.antlr.runtime.BitSet.bitMask(A)},addAll:function(C){var A,B,D;if(C instanceof org.antlr.runtime.BitSet){this.orInPlace(C)}else{if(C instanceof org.antlr.runtime.IntervalSet){A=C}else{if(org.antlr.lang.isArray(C)){for(B=0;B<C.length;B++){D=C[B];this.add(D)}}else{return }}}},and:function(A){var B=this.clone();B.andInPlace(A);return B},andInPlace:function(A){var C=Math.min(this.bits.length,A.bits.length),B;for(B=C-1;B>=0;B--){this.bits[B]&=A.bits[B]}for(B=C;B<this.bits.length;B++){this.bits[B]=0}},clear:function(B){if(arguments.length===0){var A;for(A=this.bits.length-1;A>=0;A--){this.bits[A]=0}return }var C=org.antlr.runtime.BitSet.wordNumber(B);if(C>=this.bits.length){this.growToInclude(B)}this.bits[C]&=~org.antlr.runtime.BitSet.bitMask(B)},clone:function(){var C,B,A=[];for(C=0,B=this.bits.length;C<B;C++){A[C]=this.bits[C]}return new org.antlr.runtime.BitSet(A)},size:function(){var B=0,A,C,D;for(A=this.bits.length-1;A>=0;A--){C=this.bits[A];if(C!==0){for(D=org.antlr.runtime.BitSet.BITS-1;D>=0;D--){if((C&(1<<D))!==0){B++}}}}return B},equals:function(A){if(!A||!(A instanceof org.antlr.runtime.BitSet)){return false}var B=A,C,D=Math.min(this.bits.length,B.bits.length);for(C=0;C<D;C++){if(this.bits[C]!=B.bits[C]){return false}}if(this.bits.length>D){for(C=D+1;C<this.bits.length;C++){if(this.bits[C]!==0){return false}}}else{if(B.bits.length>D){for(C=D+1;C<B.bits.length;C++){if(B.bits[C]!==0){return false}}}}return true},growToInclude:function(D){var A=Math.max(this.bits.length<<1,org.antlr.runtime.BitSet.numWordsToHold(D)),C=[],B;for(B=0,len=this.bits.length;B<len;B++){C[B]=this.bits[B]}this.bits=C},member:function(A){var B=org.antlr.runtime.BitSet.wordNumber(A);if(B>=this.bits.length){return false}return(this.bits[B]&org.antlr.runtime.BitSet.bitMask(A))!==0},getSingleElement:function(){var A;for(A=0;A<(this.bits.length<<org.antlr.runtime.BitSet.LOG_BITS);A++){if(this.member(A)){return A}}return -1},isNil:function(){var A;for(A=this.bits.length-1;A>=0;A--){if(this.bits[A]!==0){return false}}return true},complement:function(B){if(B){return B.subtract(this)}else{var A=this.clone();A.notInPlace();return A}},notInPlace:function(){var A,D,B,C;if(arguments.length===0){for(B=this.bits.length-1;B>=0;B--){this.bits[B]=~this.bits[B]}}else{if(arguments.length===1){A=0;D=arguments[0]}else{A=arguments[0];D=arguments[1]}this.growToInclude(D);for(B=A;B<=D;B++){C=org.antlr.runtime.BitSet.wordNumber(B);this.bits[C]^=org.antlr.runtime.BitSet.bitMask(B)}}},or:function(A){if(!A){return this}var B=this.clone();B.orInPlace(A);return B},orInPlace:function(A){if(!A){return }if(A.bits.length>this.bits.length){this.setSize(A.bits.length)}var C=Math.min(this.bits.length,A.bits.length),B;for(B=C-1;B>=0;B--){this.bits[B]|=A.bits[B]}},remove:function(A){var B=org.antlr.runtime.BitSet.wordNumber(A);if(B>=this.bits.length){this.growToInclude(A)}this.bits[B]&=~org.antlr.runtime.BitSet.bitMask(A)},setSize:function(A){var B=A-this.bits.length;while(B>=0){this.bits.push(0);B--}},numBits:function(){return this.bits.length<<org.antlr.runtime.BitSet.LOG_BITS},lengthInLongWords:function(){return this.bits.length},subset:function(A){if(!A){return false}return this.and(A).equals(this)},subtractInPlace:function(A){if(!A){return }var B;for(B=0;B<this.bits.length&&B<A.bits.length;B++){this.bits[B]&=~A.bits[B]}},subtract:function(A){if(!A||!(A instanceof org.antlr.runtime.BitSet)){return null}var B=this.clone();B.subtractInPlace(A);return B},toArray:function(){var A=[],C,B=0;for(C=0;C<(this.bits.length<<org.antlr.runtime.BitSet.LOG_BITS);C++){if(this.member(C)){A[B++]=C}}return A},toPackedArray:function(){return this.bits},toString:function(){if(arguments.length===0){return this.toString1(null)}else{if(org.antlr.lang.isString(arguments[0])){if(!org.antlr.lang.isValue(arguments[1])){return this.toString1(null)}else{return this.toString2(arguments[0],arguments[1])}}else{return this.toString1(arguments[0])}}},toString1:function(D){var A="{",E=",",B,C=false;for(B=0;B<(this.bits.length<<org.antlr.runtime.BitSet.LOG_BITS);B++){if(this.member(B)){if(B>0&&C){A+=E}if(D){A+=D.getTokenDisplayName(B)}else{A+=B.toString()}C=true}}return A+"}"},toString2:function(C,B){var D="",A;for(A=0;A<(this.bits.length<<org.antlr.runtime.BitSet.LOG_BITS);A++){if(this.member(A)){if(D.length>0){D+=C}if(A>=B.size()){D+="'"+A+"'"}else{if(!org.antlr.lang.isValue(B.get(A))){D+="'"+A+"'"}else{D+=B.get(A)}}}}return D}};org.antlr.runtime.CharStream={EOF:-1};org.antlr.runtime.CommonToken=function(){var A;this.charPositionInLine=-1;this.channel=0;this.index=-1;if(arguments.length==1){if(org.antlr.lang.isNumber(arguments[0])){this.type=arguments[0]}else{A=arguments[0];this.text=A.getText();this.type=A.getType();this.line=A.getLine();this.index=A.getTokenIndex();this.charPositionInLine=A.getCharPositionInLine();this.channel=A.getChannel();if(A instanceof org.antlr.runtime.CommonToken){this.start=A.start;this.stop=A.stop}}}else{if(arguments.length==2){this.type=arguments[0];this.text=arguments[1];this.channel=0}else{if(arguments.length==5){this.input=arguments[0];this.type=arguments[1];this.channel=arguments[2];this.start=arguments[3];this.stop=arguments[4]}}}};org.antlr.runtime.CommonToken.prototype={getType:function(){return this.type},setLine:function(A){this.line=A},getText:function(){if(org.antlr.lang.isString(this.text)){return this.text}if(!this.input){return null}this.text=this.input.substring(this.start,this.stop);return this.text},setText:function(A){this.text=A},getLine:function(){return this.line},getCharPositionInLine:function(){return this.charPositionInLine},setCharPositionInLine:function(A){this.charPositionInLine=A},getChannel:function(){return this.channel},setChannel:function(A){this.channel=A},setType:function(A){this.type=A},getStartIndex:function(){return this.start},setStartIndex:function(A){this.start=A},getStopIndex:function(){return this.stop},setStopIndex:function(A){this.stop=A},getTokenIndex:function(){return this.index},setTokenIndex:function(A){this.index=A},getInputStream:function(){return this.input},setInputStream:function(A){this.input=A},toString:function(){var B="";if(this.channel>0){B=",channel="+this.channel}var A=this.getText();if(!org.antlr.lang.isNull(A)){A=A.replace(/\n/g,"\\\\n");A=A.replace(/\r/g,"\\\\r");A=A.replace(/\t/g,"\\\\t")}else{A="<no text>"}return"[@"+this.getTokenIndex()+","+this.start+":"+this.stop+"='"+A+"',<"+this.type+">"+B+","+this.line+":"+this.getCharPositionInLine()+"]"}};org.antlr.runtime.Token=function(){};org.antlr.lang.augmentObject(org.antlr.runtime.Token,{EOR_TOKEN_TYPE:1,DOWN:2,UP:3,MIN_TOKEN_TYPE:4,EOF:org.antlr.runtime.CharStream.EOF,EOF_TOKEN:new org.antlr.runtime.CommonToken(org.antlr.runtime.CharStream.EOF),INVALID_TOKEN_TYPE:0,INVALID_TOKEN:new org.antlr.runtime.CommonToken(0),SKIP_TOKEN:new org.antlr.runtime.CommonToken(0),DEFAULT_CHANNEL:0,HIDDEN_CHANNEL:99});org.antlr.lang.augmentObject(org.antlr.runtime.CommonToken,org.antlr.runtime.Token);org.antlr.runtime.tree.RewriteCardinalityException=function(A){this.elementDescription=A};org.antlr.lang.extend(org.antlr.runtime.tree.RewriteCardinalityException,Error,{getMessage:function(){if(org.antlr.lang.isString(this.elementDescription)){return this.elementDescription}return null},name:function(){return"org.antlr.runtime.tree.RewriteCardinalityException"}});org.antlr.runtime.tree.RewriteEmptyStreamException=function(B){var A=org.antlr.runtime.tree.RewriteEmptyStreamException.superclass;A.constructor.call(this,B)};org.antlr.lang.extend(org.antlr.runtime.tree.RewriteEmptyStreamException,org.antlr.runtime.tree.RewriteCardinalityException,{name:function(){return"org.antlr.runtime.tree.RewriteEmptyStreamException"}});org.antlr.runtime.tree.RewriteEarlyExitException=function(B){var A=org.antlr.runtime.tree.RewriteEarlyExitException.superclass;if(org.antlr.lang.isUndefined(B)){B=null}A.constructor.call(this,B)};org.antlr.lang.extend(org.antlr.runtime.tree.RewriteEarlyExitException,org.antlr.runtime.tree.RewriteCardinalityException,{name:function(){return"org.antlr.runtime.tree.RewriteEarlyExitException"}});org.antlr.runtime.MismatchedTreeNodeException=function(B,A){if(B&&A){org.antlr.runtime.MismatchedTreeNodeException.superclass.constructor.call(this,A);this.expecting=B}};org.antlr.lang.extend(org.antlr.runtime.MismatchedTreeNodeException,org.antlr.runtime.RecognitionException,{toString:function(){return"MismatchedTreeNodeException("+this.getUnexpectedType()+"!="+this.expecting+")"},name:"org.antlr.runtime.MismatchedTreeNodeException"});org.antlr.runtime.tree.BaseTree=function(){};org.antlr.runtime.tree.BaseTree.prototype={getChild:function(A){if(!this.children||A>=this.children.length){return null}return this.children[A]},getChildren:function(){return this.children},getFirstChildWithType:function(C){var B,A;for(B=0;this.children&&B<this.children.length;B++){A=this.children[B];if(A.getType()===C){return A}}return null},getChildCount:function(){if(!this.children){return 0}return this.children.length},addChild:function(B){if(!org.antlr.lang.isValue(B)){return }var C=B,E,A,D;if(C.isNil()){if(this.children&&this.children==C.children){throw new Error("attempt to add child list to itself")}if(C.children){if(this.children){E=C.children.length;for(A=0;A<E;A++){D=C.children[A];this.children.push(D);D.setParent(this);D.setChildIndex(this.children.length-1)}}else{this.children=C.children;this.freshenParentAndChildIndexes()}}}else{if(!this.children){this.children=this.createChildrenList()}this.children.push(B);C.setParent(this);C.setChildIndex(this.children.length-1)}},addChildren:function(A){var C,B;for(C=0;C<A.length;C++){B=A[C];this.addChild(B)}},setChild:function(B,A){if(!A){return }if(A.isNil()){throw new Error("Can't set single child to a list")}if(!this.children){this.children=this.createChildrenList()}this.children[B]=A;A.setParent(this);A.setChildIndex(B)},deleteChild:function(B){if(!this.children){return null}if(B<0||B>=this.children.length){throw new Error("Index out of bounds.")}var A=this.children.splice(B,1)[0];this.freshenParentAndChildIndexes(B);return A},replaceChildren:function(H,I,P){if(!this.children){throw new Error("indexes invalid; no children in list")}var O=I-H+1;var A;var K=P;var D=null;if(K.isNil()){D=K.children}else{D=[];D.push(K)}A=D.length;var B=D.length;var N=O-A;var F,G,C,E,M,J,L;if(N===0){F=0;for(G=H;G<=I;G++){C=D[F];this.children[G]=C;C.setParent(this);C.setChildIndex(G);F++}}else{if(N>0){for(F=0;F<B;F++){this.children[H+F]=D[F]}E=H+B;for(M=E;M<=I;M++){J=this.children.splice(E,1)[0]}this.freshenParentAndChildIndexes(H)}else{for(F=0;F<O;F++){this.children[H+F]=D[F]}L=A-O;for(F=O;F<A;F++){this.children.splice(H+F,0,D[F])}this.freshenParentAndChildIndexes(H)}}},createChildrenList:function(){return[]},isNil:function(){return false},freshenParentAndChildIndexes:function(A){if(!org.antlr.lang.isNumber(A)){A=0}var D=this.getChildCount(),C,B;for(C=A;C<D;C++){B=this.getChild(C);B.setChildIndex(C);B.setParent(this)}},sanityCheckParentAndChildIndexes:function(B,A){if(arguments.length===0){B=null;A=-1}if(B!==this.getParent()){throw new Error("parents don't match; expected "+B+" found "+this.getParent())}if(A!==this.getChildIndex()){throw new Error("child indexes don't match; expected "+A+" found "+this.getChildIndex())}var E=this.getChildCount(),D,C;for(D=0;D<E;D++){C=this.getChild(D);C.sanityCheckParentAndChildIndexes(this,D)}},getChildIndex:function(){return 0},setChildIndex:function(A){},getParent:function(){return null},setParent:function(A){},getTree:function(){return this},toStringTree:function(){if(!this.children||this.children.length===0){return this.toString()}var A="",C,B;if(!this.isNil()){A+="(";A+=this.toString();A+=" "}for(C=0;this.children&&C<this.children.length;C++){B=this.children[C];if(C>0){A+=" "}A+=B.toStringTree()}if(!this.isNil()){A+=")"}return A},getLine:function(){return 0},getCharPositionInLine:function(){return 0}};org.antlr.runtime.tree.CommonTree=function(A){this.startIndex=-1;this.stopIndex=-1;this.childIndex=-1;this.parent=null;this.token=null;if(A instanceof org.antlr.runtime.tree.CommonTree){org.antlr.runtime.tree.CommonTree.superclass.constructor.call(this,A);this.token=A.token;this.startIndex=A.startIndex;this.stopIndex=A.stopIndex}else{if(A instanceof org.antlr.runtime.CommonToken){this.token=A}}};org.antlr.lang.extend(org.antlr.runtime.tree.CommonTree,org.antlr.runtime.tree.BaseTree,{getToken:function(){return this.token},dupNode:function(){return new org.antlr.runtime.tree.CommonTree(this)},isNil:function(){return !this.token},getType:function(){if(!this.token){return org.antlr.runtime.Token.INVALID_TOKEN_TYPE}return this.token.getType()},getText:function(){if(!this.token){return null}return this.token.getText()},getLine:function(){if(!this.token||this.token.getLine()===0){if(this.getChildCount()>0){return this.getChild(0).getLine()}return 0}return this.token.getLine()},getCharPositionInLine:function(){if(!this.token||this.token.getCharPositionInLine()===-1){if(this.getChildCount()>0){return this.getChild(0).getCharPositionInLine()}return 0}return this.token.getCharPositionInLine()},getTokenStartIndex:function(){if(this.token){return this.token.getTokenIndex()}return this.startIndex},setTokenStartIndex:function(A){this.startIndex=A},getTokenStopIndex:function(){if(this.token){return this.token.getTokenIndex()}return this.stopIndex},setTokenStopIndex:function(A){this.stopIndex=A},getChildIndex:function(){return this.childIndex},getParent:function(){return this.parent},setParent:function(A){this.parent=A},setChildIndex:function(A){this.childIndex=A},toString:function(){if(this.isNil()){return"nil"}if(this.getType()===org.antlr.runtime.Token.INVALID_TOKEN_TYPE){return"<errornode>"}if(!this.token){return null}return this.token.getText()}});org.antlr.runtime.tree.Tree={INVALID_NODE:new org.antlr.runtime.tree.CommonTree(org.antlr.runtime.Token.INVALID_TOKEN)};org.antlr.runtime.tree.CommonErrorNode=function(A,D,B,C){if(!B||(B.getTokenIndex()<D.getTokenIndex()&&B.getType()!=org.antlr.runtime.Token.EOF)){B=D}this.input=A;this.start=D;this.stop=B;this.trappedException=C};org.antlr.lang.extend(org.antlr.runtime.tree.CommonErrorNode,org.antlr.runtime.tree.CommonTree,{isNil:function(){return false},getType:function(){return org.antlr.runtime.Token.INVALID_TOKEN_TYPE},getText:function(){var C=null;if(this.start instanceof org.antlr.runtime.CommonToken){var B=this.start.getTokenIndex();var A=this.stop.getTokenIndex();if(this.stop.getType()===org.antlr.runtime.Token.EOF){A=this.input.size()}C=this.input.toString(B,A)}else{if(this.start instanceof org.antlr.runtime.tree.CommonTree){C=this.input.toString(this.start,this.stop)}else{C="<unknown>"}}return C},toString:function(){if(this.trappedException instanceof org.antlr.runtime.MissingTokenException){return"<missing type: "+this.trappedException.getMissingType()+">"}else{if(this.trappedException instanceof org.antlr.runtime.UnwantedTokenException){return"<extraneous: "+this.trappedException.getUnexpectedToken()+", resync="+this.getText()+">"}else{if(this.trappedException instanceof org.antlr.runtime.MismatchedTokenException){return"<mismatched token: "+this.trappedException.token+", resync="+this.getText()+">"}else{if(this.trappedException instanceof org.antlr.runtime.NoViableAltException){return"<unexpected: "+this.trappedException.token+", resync="+this.getText()+">"}}}}return"<error: "+this.getText()+">"}});org.antlr.runtime.tree.BaseTreeAdaptor=function(){this.uniqueNodeID=1};org.antlr.runtime.tree.BaseTreeAdaptor.prototype={nil:function(){return this.create(null)},errorNode:function(A,E,C,D){var B=new org.antlr.runtime.tree.CommonErrorNode(A,E,C,D);return B},isNil:function(A){return A.isNil()},dupTree:function(B,C){if(arguments.length===1){C=null}if(!B){return null}var D=this.dupNode(B);this.setChildIndex(D,this.getChildIndex(B));this.setParent(D,C);var G=this.getChildCount(B),A,F,E;for(A=0;A<G;A++){F=this.getChild(B,A);E=this.dupTree(F,B);this.addChild(D,E)}return D},addChild:function(A,B){if(A&&org.antlr.lang.isValue(B)){A.addChild(B)}},becomeRoot:function(D,C){if(D instanceof org.antlr.runtime.CommonToken||!D){D=this.create(D)}var A=D,B=C;if(!C){return D}if(A.isNil()){if(A.getChildCount()>1){throw new Error("more than one node as root (TODO: make exception hierarchy)")}A=A.getChild(0)}A.addChild(B);return A},rulePostProcessing:function(A){var B=A;if(B&&B.isNil()){if(B.getChildCount()===0){B=null}else{if(B.getChildCount()===1){B=B.getChild(0);B.setParent(null);B.setChildIndex(-1)}}}return B},create:function(C,B){var D,A;if(arguments.length===2){if(org.antlr.lang.isString(arguments[1])){D=arguments[1];B=this.createToken(C,D);A=this.create(B);return A}else{B=this.createToken(B);B.setType(C);A=this.create(B);return A}}else{if(arguments.length===3){D=arguments[2];B=this.createToken(B);B.setType(C);B.setText(D);A=this.create(B);return A}}},getType:function(A){A.getType();return 0},setType:function(A,B){throw new Error("don't know enough about Tree node")},getText:function(A){return A.getText()},setText:function(A,B){throw new Error("don't know enough about Tree node")},getChild:function(B,A){return B.getChild(A)},setChild:function(B,A,C){B.setChild(A,C)},deleteChild:function(B,A){return B.deleteChild(A)},getChildCount:function(A){return A.getChildCount()},getUniqueID:function(B){if(!this.treeToUniqueIDMap){this.treeToUniqueIDMap={}}var C=this.treeToUniqueIDMap[B];if(org.antlr.lang.isValue(C)){return C}var A=this.uniqueNodeID;this.treeToUniqueIDMap[B]=A;this.uniqueNodeID++;return A}};org.antlr.runtime.tree.CommonTreeAdaptor=function(){};org.antlr.lang.extend(org.antlr.runtime.tree.CommonTreeAdaptor,org.antlr.runtime.tree.BaseTreeAdaptor,{dupNode:function(A){if(!org.antlr.lang.isValue(A)){return null}return A.dupNode()},create:function(A){if(arguments.length>1){return org.antlr.runtime.tree.CommonTreeAdaptor.superclass.create.apply(this,arguments)}return new org.antlr.runtime.tree.CommonTree(A)},createToken:function(A){if(arguments.length===2){return new org.antlr.runtime.CommonToken(arguments[0],arguments[1])}else{return new org.antlr.runtime.CommonToken(arguments[0])}},setTokenBoundaries:function(C,E,A){if(!org.antlr.lang.isValue(C)){return }var D=0,B=0;if(org.antlr.lang.isValue(E)){if(E.getTokenIndex){D=E.getTokenIndex()}else{if(E.getStartIndex){D=E.getStartIndex()}else{D=E.getTokenStartIndex()}}}if(org.antlr.lang.isValue(A)){if(B.getTokenIndex){B=A.getTokenIndex()}else{if(A.getStopIndex){B=A.getStopIndex()}else{B=A.getTokenStopIndex()}}}C.setTokenStartIndex(D);C.setTokenStopIndex(B)},getTokenStartIndex:function(A){if(!A){return -1}return A.getTokenStartIndex()},getTokenStopIndex:function(A){if(!A){return -1}return A.getTokenStopIndex()},getText:function(A){if(!A){return null}return A.getText()},getType:function(A){if(!A){return org.antlr.runtime.Token.INVALID_TOKEN_TYPE}return A.getType()},getToken:function(A){if(A instanceof org.antlr.runtime.tree.CommonTree){return A.getToken()}return null},getChild:function(B,A){if(!B){return null}return B.getChild(A)},getChildCount:function(A){if(!A){return 0}return A.getChildCount()},getParent:function(A){return A.getParent()},setParent:function(A,B){A.setParent(B)},getChildIndex:function(A){return A.getChildIndex()},setChildIndex:function(B,A){B.setChildIndex(A)},replaceChildren:function(D,B,A,C){if(D){D.replaceChildren(B,A,C)}}});org.antlr.runtime.ANTLRStringStream=function(A){this.p=0;this.line=1;this.charPositionInLine=0;this.markDepth=0;this.markers=null;this.lastMarker=null;this.data=A;this.n=A.length};org.antlr.runtime.ANTLRStringStream.prototype={reset:function(){this.p=0;this.line=1;this.charPositionInLine=0;this.markDepth=0},consume:function(){if(this.p<this.n){this.charPositionInLine++;if(this.data.charAt(this.p)==="\n"){this.line++;this.charPositionInLine=0}this.p++}},LA:function(B){if(B<0){B++}var A=this.p+B-1;if(A>=this.n||A<0){return org.antlr.runtime.CharStream.EOF}return this.data.charAt(A)},index:function(){return this.p},size:function(){return this.n},mark:function(){if(!this.markers){this.markers=[];this.markers.push(null)}this.markDepth++;var A=null;if(this.markDepth>=this.markers.length){A={};this.markers.push(A)}else{A=this.markers[this.markDepth]}A.p=this.p;A.line=this.line;A.charPositionInLine=this.charPositionInLine;this.lastMarker=this.markDepth;return this.markDepth},rewind:function(A){if(!org.antlr.lang.isNumber(A)){A=this.lastMarker}var B=this.markers[A];this.seek(B.p);this.line=B.line;this.charPositionInLine=B.charPositionInLine;this.release(A)},release:function(A){this.markDepth=A;this.markDepth--},seek:function(A){if(A<=this.p){this.p=A;return }while(this.p<A){this.consume()}},substring:function(B,A){return this.data.substr(B,A-B+1)},getLine:function(){return this.line},getCharPositionInLine:function(){return this.charPositionInLine},setLine:function(A){this.line=A},setCharPositionInLine:function(A){this.charPositionInLine=A},getSourceName:function(){return null}};org.antlr.runtime.ANTLRStringStream.LT=org.antlr.runtime.ANTLRStringStream.LA;org.antlr.runtime.CommonTokenStream=function(A,B){this.p=-1;this.channel=org.antlr.runtime.Token.DEFAULT_CHANNEL;this.v_discardOffChannelTokens=false;this.tokens=[];if(arguments.length>=2){this.channel=B}else{if(arguments.length===1){this.tokenSource=A}}};org.antlr.runtime.CommonTokenStream.prototype={setTokenSource:function(A){this.tokenSource=A;this.tokens=[];this.p=-1;this.channel=org.antlr.runtime.Token.DEFAULT_CHANNEL},fillBuffer:function(){var B=0,C=this.tokenSource.nextToken(),A,D;while(org.antlr.lang.isValue(C)&&C.getType()!=org.antlr.runtime.CharStream.EOF){A=false;if(this.channelOverrideMap){D=this.channelOverrideMap[C.getType()];if(org.antlr.lang.isValue(D)){C.setChannel(D)}}if(this.discardSet&&this.discardSet[C.getType()]){A=true}else{if(this.v_discardOffChannelTokens&&C.getChannel()!=this.channel){A=true}}if(!A){C.setTokenIndex(B);this.tokens.push(C);B++}C=this.tokenSource.nextToken()}this.p=0;this.p=this.skipOffTokenChannels(this.p)},consume:function(){if(this.p<this.tokens.length){this.p++;this.p=this.skipOffTokenChannels(this.p)}},skipOffTokenChannels:function(A){var B=this.tokens.length;while(A<B&&(this.tokens[A]).getChannel()!=this.channel){A++}return A},skipOffTokenChannelsReverse:function(A){while(A>=0&&(this.tokens[A]).getChannel()!=this.channel){A--}return A},setTokenTypeChannel:function(B,A){if(!this.channelOverrideMap){this.channelOverrideMap={}}this.channelOverrideMap[B]=A},discardTokenType:function(A){if(!this.discardSet){this.discardSet={}}this.discardSet[A]=true},discardOffChannelTokens:function(A){this.v_discardOffChannelTokens=A},getTokens:function(F,D,C){if(this.p===-1){this.fillBuffer()}if(arguments.length===0){return this.tokens}if(org.antlr.lang.isArray(C)){C=new org.antlr.runtime.BitSet(C)}else{if(org.antlr.lang.isNumber(C)){C=org.antlr.runtime.BitSet.of(C)}}if(D>=this.tokens.length){D=this.tokens.length-1}if(F<0){F=0}if(F>D){return null}var E=[],B,A;for(B=F;B<=D;B++){A=this.tokens[B];if(!this.types||C.member(A.getType())){E.push(A)}}if(E.length===0){E=null}return E},LT:function(A){if(this.p===-1){this.fillBuffer()}if(A===0){return null}if(A<0){return this.LB(-1*A)}if((this.p+A-1)>=this.tokens.length){return org.antlr.runtime.Token.EOF_TOKEN}var B=this.p,C=1;while(C<A){B=this.skipOffTokenChannels(B+1);C++}if(B>=this.tokens.length){return org.antlr.runtime.Token.EOF_TOKEN}return this.tokens[B]},LB:function(A){if(this.p===-1){this.fillBuffer()}if(A===0){return null}if((this.p-A)<0){return null}var B=this.p,C=1;while(C<=A){B=this.skipOffTokenChannelsReverse(B-1);C++}if(B<0){return null}return this.tokens[B]},get:function(A){return this.tokens[A]},LA:function(A){return this.LT(A).getType()},mark:function(){if(this.p===-1){this.fillBuffer()}this.lastMarker=this.index();return this.lastMarker},release:function(A){},size:function(){return this.tokens.length},index:function(){return this.p},rewind:function(A){if(!org.antlr.lang.isNumber(A)){A=this.lastMarker}this.seek(A)},reset:function(){this.p=-1;this.lastMarker=0},seek:function(A){this.p=A},getTokenSource:function(){return this.tokenSource},getSourceName:function(){return this.getTokenSource().getSourceName()},toString:function(D,C){if(arguments.length===0){if(this.p===-1){this.fillBuffer()}D=0;C=this.tokens.length-1}if(!org.antlr.lang.isNumber(D)&&!org.antlr.lang.isNumber(C)){if(org.antlr.lang.isValue(D)&&org.antlr.lang.isValue(C)){D=D.getTokenIndex();C=C.getTokenIndex()}else{return null}}var A="",B;if(D<0||C<0){return null}if(this.p==-1){this.fillBuffer()}if(C>=this.tokens.length){C=this.tokens.length-1}for(B=D;B<=C;B++){t=this.tokens[B];A=A+this.tokens[B].getText()}return A}};org.antlr.runtime.TokenRewriteStream=function(){var A=org.antlr.runtime.TokenRewriteStream.superclass;this.programs=null;this.lastRewriteTokenIndexes=null;if(arguments.length===0){this.init()}else{A.constructor.apply(this,arguments);this.init()}};(function(){var A=org.antlr.runtime.TokenRewriteStream;org.antlr.lang.augmentObject(A,{DEFAULT_PROGRAM_NAME:"default",PROGRAM_INIT_SIZE:100,MIN_TOKEN_INDEX:0});A.RewriteOperation=function(B,C){this.index=B;this.text=C};A.RewriteOperation.prototype={execute:function(B){return this.index},toString:function(){return this.text}};A.InsertBeforeOp=function(B,C){A.InsertBeforeOp.superclass.constructor.call(this,B,C)};org.antlr.lang.extend(A.InsertBeforeOp,A.RewriteOperation,{execute:function(B){B.push(this.text);return this.index}});A.ReplaceOp=function(D,C,B){A.ReplaceOp.superclass.constructor.call(this,D,B);this.lastIndex=C};org.antlr.lang.extend(A.ReplaceOp,A.RewriteOperation,{execute:function(B){if(org.antlr.lang.isValue(this.text)){B.push(this.text)}return this.lastIndex+1}});A.DeleteOp=function(C,B){A.DeleteOp.superclass.constructor.call(this,C,B)};org.antlr.lang.extend(A.DeleteOp,A.ReplaceOp);org.antlr.lang.extend(A,org.antlr.runtime.CommonTokenStream,{init:function(){this.programs={};this.programs[A.DEFAULT_PROGRAM_NAME]=[];this.lastRewriteTokenIndexes={}},rollback:function(){var B,C;if(arguments.length===1){B=A.DEFAULT_PROGRAM_NAME;C=arguments[0]}else{if(arguments.length===2){B=arguments[0];C=arguments[1]}}var D=this.programs[B];if(D){programs[B]=D.slice(A.MIN_TOKEN_INDEX,this.instructionIndex)}},deleteProgram:function(B){B=B||A.DEFAULT_PROGRAM_NAME;this.rollback(B,A.MIN_TOKEN_INDEX)},addToSortedRewriteList:function(){var H,E;if(arguments.length===1){H=A.DEFAULT_PROGRAM_NAME;E=arguments[0]}else{if(arguments.length===2){H=arguments[0];E=arguments[1]}}var F=this.getProgram(H);var G,I,D,J,B,C;for(I=0,G=F.length;I<G;I++){D=F[I];if(D.index===E.index){if(E instanceof A.ReplaceOp){J=false;for(C=I;C<F.length;C++){B=F[I];if(B.index!==E.index){break}if(B instanceof A.ReplaceOp){F[I]=E;J=true;break}}if(!J){F.splice(C,0,E)}}else{F.splice(I,0,E)}break}else{if(D.index>E.index){F.splice(I,0,E);break}}}if(I===G){F.push(E)}},insertAfter:function(){var C,B,D;if(arguments.length===2){B=A.DEFAULT_PROGRAM_NAME;C=arguments[0];D=arguments[1]}else{if(arguments.length===3){B=arguments[0];C=arguments[1];D=arguments[2]}}if(C instanceof org.antlr.runtime.CommonToken){C=C.index}this.insertBefore(B,C+1,D)},insertBefore:function(){var C,B,D;if(arguments.length===2){B=A.DEFAULT_PROGRAM_NAME;C=arguments[0];D=arguments[1]}else{if(arguments.length===3){B=arguments[0];C=arguments[1];D=arguments[2]}}if(C instanceof org.antlr.runtime.CommonToken){C=C.index}this.addToSortedRewriteList(B,new A.InsertBeforeOp(C,D))},replace:function(){var B,E,C,D;if(arguments.length===2){B=A.DEFAULT_PROGRAM_NAME;E=arguments[0];C=arguments[0];D=arguments[1]}else{if(arguments.length===3){B=A.DEFAULT_PROGRAM_NAME;E=arguments[0];C=arguments[1];D=arguments[2]}}if(arguments.length===4){B=arguments[0];E=arguments[1];C=arguments[2];D=arguments[3]}if(E instanceof org.antlr.runtime.CommonToken){E=E.index}if(C instanceof org.antlr.runtime.CommonToken){C=C.index}if(E>C||C<0||E<0){return }this.addToSortedRewriteList(B,new A.ReplaceOp(E,C,D))},remove:function(){var B=[],C=arguments.length-1;while(C>=0){B[C]=arguments[C];C--}B.push("");this.replace.apply(this,B)},getLastRewriteTokenIndex:function(B){B=B||A.DEFAULT_PROGRAM_NAME;return this.lastRewriteTokenIndexes[B]||-1},setLastRewriteTokenIndex:function(B,C){this.lastRewriteTokenIndexes[B]=C},getProgram:function(B){var C=this.programs[B];if(!C){C=this.initializeProgram(B)}return C},initializeProgram:function(B){var C=[];this.programs[B]=C;return C},toOriginalString:function(E,B){if(!org.antlr.lang.isNumber(E)){E=A.MIN_TOKEN_INDEX}if(!org.antlr.lang.isNumber(B)){B=this.size()-1}var C=[],D;for(D=E;D>=A.MIN_TOKEN_INDEX&&D<=B&&D<this.tokens.length;D++){C.push(this.get(D).getText())}return C.join("")},toString:function(){var J,B,F;if(arguments.length===0){J=A.DEFAULT_PROGRAM_NAME;B=A.MIN_TOKEN_INDEX;F=this.size()-1}else{if(arguments.length===1){J=arguments[0];B=A.MIN_TOKEN_INDEX;F=this.size()-1}else{if(arguments.length===2){J=A.DEFAULT_PROGRAM_NAME;B=arguments[0];F=arguments[1]}}}var H=this.programs[J];if(!H||H.length===0){return this.toOriginalString(B,F)}var E=0,D=B,C=[],G;while(D>=A.MIN_TOKEN_INDEX&&D<=F&&D<this.tokens.length){if(E<H.length){G=H[E];while(G.index<D&&E<H.length){E++;if(E<H.length){G=H[E]}}while(D===G.index&&E<H.length){D=G.execute(C);E++;if(E<H.length){G=H[E]}}}if(D<=F){C.push(this.get(D).getText());D++}}var I;for(I=E;I<H.length;I++){G=H[I];if(G.index>=this.size()){G.execute(C)}}return C.join("")},toDebugString:function(E,B){if(!org.antlr.lang.isNumber(E)){E=A.MIN_TOKEN_INDEX}if(!org.antlr.lang.isNumber(B)){B=this.size()-1}var C=[],D;for(D=E;D>=A.MIN_TOKEN_INDEX&&D<=B&&D<this.tokens.length;D++){C.push(this.get(D))}return C.join("")}})})();org.antlr.runtime.tree.TreeNodeStream=function(){};org.antlr.runtime.tree.CommonTreeNodeStream=function(D,A,B){if(arguments.length===1){A=D;D=new org.antlr.runtime.tree.CommonTreeAdaptor()}if(arguments.length<=2){B=org.antlr.runtime.tree.CommonTreeNodeStream.DEFAULT_INITIAL_BUFFER_SIZE}this.uniqueNavigationNodes=false;this.p=-1;var C=org.antlr.runtime.Token;this.root=A;this.adaptor=D;this.nodes=[];this.down=this.adaptor.create(C.DOWN,"DOWN");this.up=this.adaptor.create(C.UP,"UP");this.eof=this.adaptor.create(C.EOF,"EOF")};org.antlr.lang.augmentObject(org.antlr.runtime.tree.CommonTreeNodeStream,{DEFAULT_INITIAL_BUFFER_SIZE:100,INITIAL_CALL_STACK_SIZE:10});org.antlr.lang.extend(org.antlr.runtime.tree.CommonTreeNodeStream,org.antlr.runtime.tree.TreeNodeStream,{StreamIterator:function(){var C=0,B=this.nodes,A=this.eof;return{hasNext:function(){return C<B.length},next:function(){var D=C;C++;if(D<B.length){return B[D]}return A},remove:function(){throw new Error("cannot remove nodes from stream")}}},fillBuffer:function(C){var B=false;if(org.antlr.lang.isUndefined(C)){C=this.root;B=true}var A=this.adaptor.isNil(C);if(!A){this.nodes.push(C)}var F=this.adaptor.getChildCount(C);if(!A&&F>0){this.addNavigationNode(org.antlr.runtime.Token.DOWN)}var E,D;for(E=0;E<F;E++){D=this.adaptor.getChild(C,E);this.fillBuffer(D)}if(!A&&F>0){this.addNavigationNode(org.antlr.runtime.Token.UP)}if(B){this.p=0}},getNodeIndex:function(C){if(this.p==-1){this.fillBuffer()}var B,A;for(B=0;B<this.nodes.length;B++){A=this.nodes[B];if(A===C){return B}}return -1},addNavigationNode:function(B){var A=null;if(B===org.antlr.runtime.Token.DOWN){if(this.hasUniqueNavigationNodes()){A=this.adaptor.create(org.antlr.runtime.Token.DOWN,"DOWN")}else{A=this.down}}else{if(this.hasUniqueNavigationNodes()){A=this.adaptor.create(org.antlr.runtime.Token.UP,"UP")}else{A=this.up}}this.nodes.push(A)},get:function(A){if(this.p===-1){this.fillBuffer()}return this.nodes[A]},LT:function(A){if(this.p===-1){this.fillBuffer()}if(A===0){return null}if(A<0){return this.LB(-1*A)}if((this.p+A-1)>=this.nodes.length){return this.eof}return this.nodes[this.p+A-1]},getCurrentSymbol:function(){return this.LT(1)},LB:function(A){if(A===0){return null}if((this.p-A)<0){return null}return this.nodes[this.p-A]},getTreeSource:function(){return this.root},getSourceName:function(){return this.getTokenStream().getSourceName()},getTokenStream:function(){return this.tokens},setTokenStream:function(A){this.tokens=A},getTreeAdaptor:function(){return this.adaptor},setTreeAdaptor:function(A){this.adaptor=A},hasUniqueNavigationNodes:function(){return this.uniqueNavigationNodes},setUniqueNavigationNodes:function(A){this.uniqueNavigationNodes=A},consume:function(){if(this.p===-1){this.fillBuffer()}this.p++},LA:function(A){return this.adaptor.getType(this.LT(A))},mark:function(){if(this.p===-1){this.fillBuffer()}this.lastMarker=this.index();return this.lastMarker},release:function(A){},index:function(){return this.p},rewind:function(A){if(!org.antlr.lang.isNumber(A)){A=this.lastMarker}this.seek(A)},seek:function(A){if(this.p===-1){this.fillBuffer()}this.p=A},push:function(A){if(!this.calls){this.calls=[]}this.calls.push(this.p);this.seek(A)},pop:function(){var A=this.calls.pop();this.seek(A);return A},reset:function(){this.p=-1;this.lastMarker=0;if(this.calls){this.calls=[]}},size:function(){if(this.p===-1){this.fillBuffer()}return this.nodes.length},iterator:function(){if(this.p===-1){this.fillBuffer()}return this.StreamIterator()},replaceChildren:function(D,B,A,C){if(D){this.adaptor.replaceChildren(D,B,A,C)}},toTokenString:function(E,D){if(this.p===-1){this.fillBuffer()}var A="",C,B;for(C=E;C<this.nodes.length&&C<=D;C++){B=this.nodes[C];A+=" "+this.adaptor.getToken(B)}return A},toString:function(H,D){var A="",E,C,B;if(arguments.length===0){if(this.p===-1){this.fillBuffer()}for(B=0;B<this.nodes.length;B++){C=this.nodes[B];A+=" ";A+=this.adaptor.getType(C)}return A}else{if(!org.antlr.lang.isNumber(H)||!org.antlr.lang.isNumber(D)){return null}if(this.p===-1){this.fillBuffer()}if(H instanceof org.antlr.runtime.tree.CommonTree){}else{}if(D instanceof org.antlr.runtime.tree.CommonTree){}else{}var G,F;if(this.tokens){G=this.adaptor.getTokenStartIndex(H);F=this.adaptor.getTokenStopIndex(D);if(this.adaptor.getType(D)===org.antlr.runtime.Token.UP){F=this.adaptor.getTokenStopIndex(H)}else{if(this.adaptor.getType(D)==org.antlr.runtime.Token.EOF){F=this.size()-2}}return this.tokens.toString(G,F)}C=null;B=0;for(;B<this.nodes.length;B++){C=this.nodes[B];if(C===H){break}}A=E="";C=this.nodes[B];while(C!==D){E=this.adaptor.getText(C);if(!org.antlr.lang.isString(E)){E=" "+this.adaptor.getType(C).toString()}A+=E;B++;C=nodes[B]}E=this.adaptor.getText(D);if(!org.antlr.lang.isString(E)){E=" "+this.adaptor.getType(D).toString()}A+=E;return A}}});org.antlr.runtime.tree.RewriteRuleElementStream=function(C,B,A){this.cursor=0;this.dirty=false;this.elementDescription=B;this.adaptor=C;if(A){if(org.antlr.lang.isArray(A)){this.singleElement=null;this.elements=A}else{this.add(A)}}};org.antlr.runtime.tree.RewriteRuleElementStream.prototype={reset:function(){this.cursor=0;this.dirty=true},add:function(A){if(!org.antlr.lang.isValue(A)){return }if(this.elements){this.elements.push(A);return }if(!org.antlr.lang.isValue(this.singleElement)){this.singleElement=A;return }this.elements=[];this.elements.push(this.singleElement);this.singleElement=null;this.elements.push(A)},nextTree:function(){var B=this.size(),A;if(this.dirty||(this.cursor>=B&&B==1)){A=this._next();return this.dup(A)}A=this._next();return A},_next:function(){var B=this.size();if(B===0){throw new org.antlr.runtime.tree.RewriteEmptyStreamException(this.elementDescription)}if(this.cursor>=B){if(B===1){return this.toTree(this.singleElement)}throw new org.antlr.runtime.tree.RewriteCardinalityException(this.elementDescription)}if(org.antlr.lang.isValue(this.singleElement)){this.cursor++;return this.toTree(this.singleElement)}var A=this.toTree(this.elements[this.cursor]);this.cursor++;return A},toTree:function(A){if(A&&A.getTree){return A.getTree()}return A},hasNext:function(){return(org.antlr.lang.isValue(this.singleElement)&&this.cursor<1)||(this.elements&&this.cursor<this.elements.length)},size:function(){var A=0;if(org.antlr.lang.isValue(this.singleElement)){A=1}if(this.elements){return this.elements.length}return A},getDescription:function(){return this.elementDescription}};org.antlr.runtime.tree.RewriteRuleNodeStream=function(C,B,A){org.antlr.runtime.tree.RewriteRuleNodeStream.superclass.constructor.apply(this,arguments)};org.antlr.lang.extend(org.antlr.runtime.tree.RewriteRuleNodeStream,org.antlr.runtime.tree.RewriteRuleElementStream,{nextNode:function(){return this._next()},toTree:function(A){return this.adaptor.dupNode(A)},dup:function(){throw new Error("dup can't be called for a node stream.")}});org.antlr.runtime.tree.RewriteRuleTokenStream=function(D,C,B){var A=org.antlr.runtime.tree.RewriteRuleTokenStream.superclass;A.constructor.apply(this,arguments)};org.antlr.lang.extend(org.antlr.runtime.tree.RewriteRuleTokenStream,org.antlr.runtime.tree.RewriteRuleElementStream,{nextNode:function(){var A=this._next();return this.adaptor.create(A)},nextToken:function(){return this._next()},toTree:function(A){return A},dup:function(A){throw new Error("dup can't be called for a token stream.")}});org.antlr.runtime.tree.RewriteRuleSubtreeStream=function(){var A=org.antlr.runtime.tree.RewriteRuleSubtreeStream.superclass;A.constructor.apply(this,arguments)};org.antlr.lang.extend(org.antlr.runtime.tree.RewriteRuleSubtreeStream,org.antlr.runtime.tree.RewriteRuleElementStream,{nextNode:function(){var B=this.size(),A;if(this.dirty||(this.cursor>=B&&B===1)){A=this._next();return this.adaptor.dupNode(A)}A=this._next();return A},dup:function(A){return this.adaptor.dupTree(A)}});org.antlr.runtime.BaseRecognizer=function(A){this.state=A||new org.antlr.runtime.RecognizerSharedState()};org.antlr.lang.augmentObject(org.antlr.runtime.BaseRecognizer,{MEMO_RULE_FAILED:-2,MEMO_RULE_UNKNOWN:-1,INITIAL_FOLLOW_STACK_SIZE:100,MEMO_RULE_FAILED_I:-2,DEFAULT_TOKEN_CHANNEL:org.antlr.runtime.Token.DEFAULT_CHANNEL,HIDDEN:org.antlr.runtime.Token.HIDDEN_CHANNEL,NEXT_TOKEN_RULE_NAME:"nextToken"});org.antlr.runtime.BaseRecognizer.prototype={reset:function(){var B,A;if(!this.state){return }this.state._fsp=-1;this.state.errorRecovery=false;this.state.lastErrorIndex=-1;this.state.failed=false;this.state.syntaxErrors=0;this.state.backtracking=0;if(this.state.ruleMemo){for(B=0,A=this.state.ruleMemo.length;B<A;B++){this.state.ruleMemo[B]=null}}},match:function(B,D,A){var C=this.getCurrentInputSymbol(B);if(B.LA(1)===D){B.consume();this.state.errorRecovery=false;this.state.failed=false;return C}if(this.state.backtracking>0){this.state.failed=true;return C}C=this.recoverFromMismatchedToken(B,D,A);return C},matchAny:function(A){this.state.errorRecovery=false;this.state.failed=false;A.consume()},mismatchIsUnwantedToken:function(A,B){return A.LA(2)===B},mismatchIsMissingToken:function(C,A){if(!A){return false}if(A.member(org.antlr.runtime.Token.EOR_TOKEN_TYPE)){if(this.state._fsp>=0){A.remove(org.antlr.runtime.Token.EOR_TOKEN_TYPE)}var B=this.computeContextSensitiveRuleFOLLOW();A=A.or(this.viableTokensFollowingThisRule)}if(A.member(C.LA(1))||A.member(org.antlr.runtime.Token.EOR_TOKEN_TYPE)){return true}return false},mismatch:function(B,C,A){if(this.mismatchIsUnwantedToken(B,C)){throw new org.antlr.runtime.UnwantedTokenException(C,B)}else{if(this.mismatchIsMissingToken(B,A)){throw new org.antlr.runtime.MissingTokenException(C,B,null)}}throw new org.antlr.runtime.MismatchedTokenException(C,B)},reportError:function(A){if(this.state.errorRecovery){return }this.state.syntaxErrors++;this.state.errorRecovery=true;this.displayRecognitionError(this.getTokenNames(),A)},displayRecognitionError:function(A,B){var D=this.getErrorHeader(B),C=this.getErrorMessage(B,A);this.emitErrorMessage(D+" "+C)},getErrorHeader:function(A){if(!org.antlr.lang.isNumber(A.line)){A.line=0}return"line "+A.line+":"+A.charPositionInLine},emitErrorMessage:function(A){if(typeof (window)!="undefined"&&window.alert){throw A;/*alert(A)*/}else{print(A)}},getErrorMessage:function(E,D){var F=(E&&E.getMessage)?E.getMessage():null,A,C;if(E instanceof org.antlr.runtime.UnwantedTokenException){var B=E;C="<unknown>";if(B.expecting==org.antlr.runtime.Token.EOF){C="EOF"}else{C=D[B.expecting]}F="extraneous input "+this.getTokenErrorDisplay(B.getUnexpectedToken())+" expecting "+C}else{if(E instanceof org.antlr.runtime.MissingTokenException){A=E;C="<unknown>";if(A.expecting==org.antlr.runtime.Token.EOF){C="EOF"}else{C=D[A.expecting]}F="missing "+C+" at "+this.getTokenErrorDisplay(E.token)}else{if(E instanceof org.antlr.runtime.MismatchedTokenException){A=E;C="<unknown>";if(A.expecting==org.antlr.runtime.Token.EOF){C="EOF"}else{C=D[A.expecting]}F="mismatched input "+this.getTokenErrorDisplay(E.token)+" expecting "+C}else{if(E instanceof org.antlr.runtime.NoViableAltException){F="no viable alternative at input "+this.getTokenErrorDisplay(E.token)}else{if(E instanceof org.antlr.runtime.EarlyExitException){F="required (...)+ loop did not match anything at input "+this.getTokenErrorDisplay(E.token)}else{if(E instanceof org.antlr.runtime.MismatchedSetException){F="mismatched input "+this.getTokenErrorDisplay(E.token)+" expecting set "+E.expecting}else{if(E instanceof org.antlr.runtime.MismatchedNotSetException){F="mismatched input "+this.getTokenErrorDisplay(E.token)+" expecting set "+E.expecting}else{if(E instanceof org.antlr.runtime.FailedPredicateException){F="rule "+E.ruleName+" failed predicate: {"+E.predicateText+"}?"}}}}}}}}return F},getNumberOfSyntaxErrors:function(){return this.state.syntaxErrors},getTokenErrorDisplay:function(A){var B=A.getText();if(!org.antlr.lang.isValue(B)){if(A.getType()==org.antlr.runtime.Token.EOF){B="<EOF>"}else{B="<"+A.getType()+">"}}B=B.replace(/\n/g,"\\n");B=B.replace(/\r/g,"\\r");B=B.replace(/\t/g,"\\t");return"'"+B+"'"},recover:function(A,B){if(this.state.lastErrorIndex==A.index()){A.consume()}this.state.lastErrorIndex=A.index();var C=this.computeErrorRecoverySet();this.beginResync();this.consumeUntil(A,C);this.endResync()},beginResync:function(){},endResync:function(){},computeErrorRecoverySet:function(){return this.combineFollows(false)},computeContextSensitiveRuleFOLLOW:function(){return this.combineFollows(true)},combineFollows:function(C){var E=this.state._fsp,B,A,D=new org.antlr.runtime.BitSet();for(B=E;B>=0;B--){A=this.state.following[B];D.orInPlace(A);if(C){if(A.member(org.antlr.runtime.Token.EOR_TOKEN_TYPE)){if(B>0){D.remove(org.antlr.runtime.Token.EOR_TOKEN_TYPE)}}else{break}}}return D},recoverFromMismatchedToken:function(B,F,A){var E=null;if(this.mismatchIsUnwantedToken(B,F)){E=new org.antlr.runtime.UnwantedTokenException(F,B);this.beginResync();B.consume();this.endResync();this.reportError(E);var D=this.getCurrentInputSymbol(B);B.consume();return D}if(this.mismatchIsMissingToken(B,A)){var C=this.getMissingSymbol(B,E,F,A);E=new org.antlr.runtime.MissingTokenException(F,B,C);this.reportError(E);return C}E=new org.antlr.runtime.MismatchedTokenException(F,B);throw E},recoverFromMismatchedSet:function(B,C,A){if(this.mismatchIsMissingToken(B,A)){this.reportError(C);return this.getMissingSymbol(B,C,org.antlr.runtime.Token.INVALID_TOKEN_TYPE,A)}throw C},getCurrentInputSymbol:function(A){return null},getMissingSymbol:function(B,D,C,A){return null},consumeUntil:function(A,C){var B=A.LA(1);while(B!=org.antlr.runtime.Token.EOF&&!C.member(B)){A.consume();B=A.LA(1)}},pushFollow:function(A){if((this.state._fsp+1)>=this.state.following.length){var C=[];var B;for(B=this.state.following.length-1;B>=0;B--){C[B]=this.state.following[B]}this.state.following=C}this.state._fsp++;this.state.following[this.state._fsp]=A},getRuleInvocationStack:function(B,A){throw new Error("Not implemented.")},getBacktrackingLevel:function(){return this.state.backtracking},getTokenNames:function(){return null},getGrammarFileName:function(){return null},toStrings:function(C){if(!C){return null}var A=[];var B;for(B=0;B<C.length;B++){A.push(C[B].getText())}return A},getRuleMemoization:function(B,A){if(!this.state.ruleMemo[B]){this.state.ruleMemo[B]={}}var C=this.state.ruleMemo[B][A];if(!org.antlr.lang.isNumber(C)){return org.antlr.runtime.BaseRecognizer.MEMO_RULE_UNKNOWN}return C},alreadyParsedRule:function(B,C){var A=this.getRuleMemoization(C,B.index());if(A==org.antlr.runtime.BaseRecognizer.MEMO_RULE_UNKNOWN){return false}if(A==org.antlr.runtime.BaseRecognizer.MEMO_RULE_FAILED){this.state.failed=true}else{B.seek(A+1)}return true},memoize:function(C,D,B){var A=this.state.failed?org.antlr.runtime.BaseRecognizer.MEMO_RULE_FAILED:C.index()-1;if(!org.antlr.lang.isValue(this.state.ruleMemo)){throw new Error("!!!!!!!!! memo array is null for "+this.getGrammarFileName())}if(D>=this.state.ruleMemo.length){throw new Error("!!!!!!!!! memo size is "+this.state.ruleMemo.length+", but rule index is "+D)}if(org.antlr.lang.isValue(this.state.ruleMemo[D])){this.state.ruleMemo[D][B]=A}},getRuleMemoizationCacheSize:function(){var C=0,A;for(A=0;this.state.ruleMemo&&A<this.state.ruleMemo.length;A++){var B=this.state.ruleMemo[A];if(B){C+=B.length}}return C},traceIn:function(C,B,A){this.emitErrorMessage("enter "+C+" "+A);if(this.state.failed){this.emitErrorMessage(" failed="+this.failed)}if(this.state.backtracking>0){this.emitErrorMessage(" backtracking="+this.state.backtracking)}},traceOut:function(C,B,A){this.emitErrorMessage("exit "+C+" "+A);if(this.state.failed){this.emitErrorMessage(" failed="+this.state.failed)}if(this.state.backtracking>0){this.emitErrorMessage(" backtracking="+this.state.backtracking)}}};org.antlr.runtime.Lexer=function(A,B){if(B){org.antlr.runtime.Lexer.superclass.constructor.call(this,B)}if(A){this.input=A}};org.antlr.lang.extend(org.antlr.runtime.Lexer,org.antlr.runtime.BaseRecognizer,{reset:function(){org.antlr.runtime.Lexer.superclass.reset.call(this);if(org.antlr.lang.isValue(this.input)){this.input.seek(0)}if(!org.antlr.lang.isValue(this.state)){return }this.state.token=null;this.state.type=org.antlr.runtime.Token.INVALID_TOKEN_TYPE;this.state.channel=org.antlr.runtime.Token.DEFAULT_CHANNEL;this.state.tokenStartCharIndex=-1;this.state.tokenStartCharPositionInLine=-1;this.state.tokenStartLine=-1;this.state.text=null},nextToken:function(){while(true){this.state.token=null;this.state.channel=org.antlr.runtime.Token.DEFAULT_CHANNEL;this.state.tokenStartCharIndex=this.input.index();this.state.tokenStartCharPositionInLine=this.input.getCharPositionInLine();this.state.tokenStartLine=this.input.getLine();this.state.text=null;if(this.input.LA(1)===org.antlr.runtime.CharStream.EOF){return org.antlr.runtime.Token.EOF_TOKEN}try{this.mTokens();if(!org.antlr.lang.isValue(this.state.token)){this.emit()}else{if(this.state.token==org.antlr.runtime.Token.SKIP_TOKEN){continue}}return this.state.token}catch(A){if(A instanceof org.antlr.runtime.RecognitionException){this.reportError(A)}else{if(A instanceof org.antlr.runtime.NoViableAltException){this.reportError(A);this.recover(A)}else{throw A}}}}},skip:function(){this.state.token=org.antlr.runtime.Token.SKIP_TOKEN},setCharStream:function(A){this.input=null;this.reset();this.input=A},getCharStream:function(){return this.input},getSourceName:function(){return this.input.getSourceName()},emit:function(){if(arguments.length===0){var A=new org.antlr.runtime.CommonToken(this.input,this.state.type,this.state.channel,this.state.tokenStartCharIndex,this.getCharIndex()-1);A.setLine(this.state.tokenStartLine);A.setText(this.state.text);A.setCharPositionInLine(this.state.tokenStartCharPositionInLine);this.state.token=A;return A}else{this.state.token=arguments[0]}},match:function(C){var B=0,A;if(org.antlr.lang.isString(C)){while(B<C.length){if(this.input.LA(1)!=C.charAt(B)){if(this.state.backtracking>0){this.state.failed=true;return }A=new org.antlr.runtime.MismatchedTokenException(C.charAt(B),this.input);this.recover(A);throw A}B++;this.input.consume();this.state.failed=false}}else{if(org.antlr.lang.isNumber(C)){if(this.input.LA(1)!=C){if(this.state.backtracking>0){this.state.failed=true;return }A=new org.antlr.runtime.MismatchedTokenException(C,this.input);this.recover(A);throw A}this.input.consume();this.state.failed=false}}},matchAny:function(){this.input.consume()},matchRange:function(B,A){if(this.input.LA(1)<B||this.input.LA(1)>A){if(this.state.backtracking>0){this.state.failed=true;return }mre=new org.antlr.runtime.MismatchedRangeException(B,A,this.input);this.recover(mre);throw mre}this.input.consume();this.state.failed=false},getLine:function(){return this.input.getLine()},getCharPositionInLine:function(){return this.input.getCharPositionInLine()},getCharIndex:function(){return this.input.index()},getText:function(){if(org.antlr.lang.isString(this.state.text)){return this.state.text}return this.input.substring(this.state.tokenStartCharIndex,this.getCharIndex()-1)},setText:function(A){this.state.text=A},reportError:function(A){this.displayRecognitionError(this.getTokenNames(),A)},getErrorMessage:function(B,A){var C=null;if(B instanceof org.antlr.runtime.MismatchedTokenException){C="mismatched character "+this.getCharErrorDisplay(B.c)+" expecting "+this.getCharErrorDisplay(B.expecting)}else{if(B instanceof org.antlr.runtime.NoViableAltException){C="no viable alternative at character "+this.getCharErrorDisplay(B.c)}else{if(B instanceof org.antlr.runtime.EarlyExitException){C="required (...)+ loop did not match anything at character "+this.getCharErrorDisplay(B.c)}else{if(B instanceof org.antlr.runtime.MismatchedNotSetException){C="mismatched character "+this.getCharErrorDisplay(B.c)+" expecting set "+B.expecting}else{if(B instanceof org.antlr.runtime.MismatchedSetException){C="mismatched character "+this.getCharErrorDisplay(B.c)+" expecting set "+B.expecting}else{if(B instanceof org.antlr.runtime.MismatchedRangeException){C="mismatched character "+this.getCharErrorDisplay(B.c)+" expecting set "+this.getCharErrorDisplay(B.a)+".."+this.getCharErrorDisplay(B.b)}else{C=org.antlr.runtime.Lexer.superclass.getErrorMessage.call(this,B,A)}}}}}}return C},getCharErrorDisplay:function(B){var A=B;switch(A){case org.antlr.runtime.Token.EOF:A="<EOF>";break;case"\n":A="\\n";break;case"\t":A="\\t";break;case"\r":A="\\r";break}return"'"+A+"'"},recover:function(A){this.input.consume()},traceIn:function(C,B){var A=String.fromCharCode(this.input.LT(1))+" line="+this.getLine()+":"+this.getCharPositionInLine();org.antlr.runtime.Lexer.superclass.traceIn.call(this,C,B,A)},traceOut:function(C,B){var A=String.fromCharCode(this.input.LT(1))+" line="+this.getLine()+":"+this.getCharPositionInLine();org.antlr.runtime.Lexer.superclass.traceOut.call(this,C,B,A)}});org.antlr.runtime.ParserRuleReturnScope=function(){};org.antlr.runtime.ParserRuleReturnScope.prototype={getStart:function(){return this.start},getStop:function(){return this.stop}};org.antlr.runtime.tree.TreeRuleReturnScope=function(){};org.antlr.runtime.tree.TreeRuleReturnScope.prototype={getStart:function(){return this.start}};org.antlr.runtime.Parser=function(A,B){org.antlr.runtime.Parser.superclass.constructor.call(this,B);this.setTokenStream(A)};org.antlr.lang.extend(org.antlr.runtime.Parser,org.antlr.runtime.BaseRecognizer,{reset:function(){org.antlr.runtime.Parser.superclass.reset.call(this);if(org.antlr.lang.isValue(this.input)){this.input.seek(0)}},getCurrentInputSymbol:function(A){return A.LT(1)},getMissingSymbol:function(C,G,E,A){var B="<missing "+this.getTokenNames()[E]+">";var D=new org.antlr.runtime.CommonToken(E,B);var F=C.LT(1);var H;if(F.getType()===org.antlr.runtime.Token.EOF){H=F;F=C.LT(-1);if(!F){F=H}}D.line=F.getLine();D.charPositionInLine=F.getCharPositionInLine();D.channel=org.antlr.runtime.BaseRecognizer.DEFAULT_TOKEN_CHANNEL;return D},setTokenStream:function(A){this.input=null;this.reset();this.input=A},getTokenStream:function(){return this.input},getSourceName:function(){return this.input.getSourceName()},traceIn:function(B,A){org.antlr.runtime.Parser.superclass.traceIn.call(this,B,A,this.input.LT(1))},traceOut:function(B,A){org.antlr.runtime.Parser.superclass.traceOut.call(this,B,A,this.input.LT(1))}});org.antlr.runtime.DFA=function(){};org.antlr.runtime.DFA.prototype={predict:function(C){var F=C.mark(),D=0,B,E,A;try{while(true){B=this.special[D];if(B>=0){D=this.specialStateTransition(B,C);if(D===-1){this.noViableAlt(D,C);return 0}C.consume();continue}if(this.accept[D]>=1){return this.accept[D]}E=C.LA(1);if(E===org.antlr.runtime.Token.EOF){E=-1}else{if(org.antlr.lang.isString(E)){E=E.charCodeAt(0)}}if(E>=this.min[D]&&E<=this.max[D]){A=this.transition[D][E-this.min[D]];if(A<0){if(this.eot[D]>=0){D=this.eot[D];C.consume();continue}this.noViableAlt(D,C);return 0}D=A;C.consume();continue}if(this.eot[D]>=0){D=this.eot[D];C.consume();continue}if(E==org.antlr.runtime.Token.EOF&&this.eof[D]>=0){return this.accept[this.eof[D]]}this.noViableAlt(D,C);return 0}}finally{C.rewind(F)}},noViableAlt:function(C,A){if(this.recognizer.state.backtracking>0){this.recognizer.state.failed=true;return }var B=new org.antlr.runtime.NoViableAltException(this.getDescription(),this.decisionNumber,C,A);this.error(B);throw B},error:function(A){},specialStateTransition:function(B,A){return -1},getDescription:function(){return"n/a"}};org.antlr.lang.augmentObject(org.antlr.runtime.DFA,{unpackEncodedString:function(D){var C,F=[],E=0,G,A,B;for(C=0;C<D.length;C+=2){G=D.charCodeAt(C);A=D.charCodeAt(C+1);if(A===65535){A=-1}for(B=1;B<=G;B++){F[E++]=A}}return F},unpackEncodedStringToUnsignedChars:function(A){return org.antlr.runtime.DFA.unpackEncodedString(A)}});org.antlr.runtime.tree.TreeParser=function(A){org.antlr.runtime.tree.TreeParser.superclass.constructor.call(this,arguments[1]);this.setTreeNodeStream(A)};(function(){var A=org.antlr.runtime.tree.TreeParser;org.antlr.lang.augmentObject(A,{DOWN:org.antlr.runtime.Token.DOWN,UP:org.antlr.runtime.Token.UP});org.antlr.lang.extend(A,org.antlr.runtime.BaseRecognizer,{reset:function(){A.superclass.reset.call(this);if(this.input){this.input.seek(0)}},setTreeNodeStream:function(B){this.input=B},getTreeNodeStream:function(){return this.input},getSourceName:function(){return this.input.getSourceName()},getCurrentInputSymbol:function(B){return B.LT(1)},getMissingSymbol:function(D,F,E,B){var C="<missing "+this.getTokenNames()[E]+">";return new org.antlr.runtime.tree.CommonTree(new org.antlr.runtime.CommonToken(E,C))},matchAny:function(E){this.state.errorRecovery=false;this.state.failed=false;var B=this.input.LT(1);if(this.input.getTreeAdaptor().getChildCount(B)===0){this.input.consume();return }var D=0,C=this.input.getTreeAdaptor().getType(B);while(C!==org.antlr.runtime.Token.EOF&&!(C===A.UP&&D===0)){this.input.consume();B=this.input.LT(1);C=this.input.getTreeAdaptor().getType(B);if(C===A.DOWN){D++}else{if(C===A.UP){D--}}}this.input.consume()},mismatch:function(C,D,B){throw new org.antlr.runtime.MismatchedTreeNodeException(D,C)},getErrorHeader:function(B){return this.getGrammarFileName()+": node from "+(B.approximateLineInfo?"after ":"")+"line "+B.line+":"+B.charPositionInLine},getErrorMessage:function(C,B){var D;if(this instanceof A){D=C.input.getTreeAdaptor();C.token=D.getToken(C.node);if(!org.antlr.lang.isValue(C.token)){C.token=new org.antlr.runtime.CommonToken(D.getType(C.node),D.getText(C.node))}}return A.superclass.getErrorMessage.call(this,C,B)},traceIn:function(C,B){A.superclass.traceIn.call(this,C,B,this.input.LT(1))},traceOut:function(C,B){A.superclass.traceOut.call(this,C,B,this.input.LT(1))}})})();
// $ANTLR 3.3 Nov 30, 2010 12:45:30 /Library/WebServer/Documents/calc/Formula.g 2013-09-12 12:24:51

var FormulaLexer = function(input, state) {
// alternate constructor @todo
// public FormulaLexer(CharStream input)
// public FormulaLexer(CharStream input, RecognizerSharedState state) {
    if (!state) {
        state = new org.antlr.runtime.RecognizerSharedState();
    }

    (function(){
    }).call(this);

    this.dfa30 = new FormulaLexer.DFA30(this);
    FormulaLexer.superclass.constructor.call(this, input, state);


};

org.antlr.lang.augmentObject(FormulaLexer, {
    EOF: -1,
    T__113: 113,
    T__114: 114,
    T__115: 115,
    T__116: 116,
    NEGATE: 4,
    ASSIGN: 5,
    FUNCALL: 6,
    MATERIAL: 7,
    UNIT: 8,
    POWER: 9,
    DEFAULTS: 10,
    PARAMS: 11,
    UNITCLUMP: 12,
    ARRAY: 13,
    LINES: 14,
    WHILE: 15,
    IFTHENELSE: 16,
    ELSE: 17,
    FOR: 18,
    FORIN: 19,
    FUNCTION: 20,
    ANONFUNCTION: 21,
    NUMBER: 22,
    LABEL: 23,
    RANGE: 24,
    INNER: 25,
    ASSIGNED: 26,
    SELECTOR: 27,
    DOTSELECTOR: 28,
    NEW: 29,
    TRYCATCH: 30,
    THROW: 31,
    NEWLINE: 32,
    W: 33,
    H: 34,
    I: 35,
    L: 36,
    E: 37,
    WHILESTATEMENT: 38,
    F: 39,
    O: 40,
    R: 41,
    FORSTATEMENT: 42,
    M: 43,
    FROMSTATEMENT: 44,
    N: 45,
    INSTATEMENT: 46,
    T: 47,
    TOSTATEMENT: 48,
    B: 49,
    Y: 50,
    BYSTATEMENT: 51,
    P: 52,
    LOOPSTATEMENT: 53,
    IFSTATEMENT: 54,
    THENSTATEMENT: 55,
    S: 56,
    ELSESTATEMENT: 57,
    U: 58,
    C: 59,
    FUNCTIONSTATEMENT: 60,
    D: 61,
    ENDBLOCK: 62,
    RETURNSTATEMENT: 63,
    NEWSTATEMENT: 64,
    TRYSTATEMENT: 65,
    A: 66,
    CATCHSTATEMENT: 67,
    THROWSTATEMENT: 68,
    IDENT: 69,
    EQUALS: 70,
    PRIMITIVE: 71,
    OR: 72,
    XOR: 73,
    X: 74,
    AND: 75,
    NOTEQUALS: 76,
    LT: 77,
    LTEQ: 78,
    GT: 79,
    GTEQ: 80,
    PLUS: 81,
    MINUS: 82,
    MULT: 83,
    DIV: 84,
    MOD: 85,
    COLON: 86,
    POW: 87,
    NOT: 88,
    LARR: 89,
    RARR: 90,
    LCURL: 91,
    RCURL: 92,
    COMMA: 93,
    STRING: 94,
    INTEGER: 95,
    FLOAT: 96,
    TRUE: 97,
    FALSE: 98,
    PER: 99,
    CUBED: 100,
    SQUARED: 101,
    Q: 102,
    LBRACKET: 103,
    RBRACKET: 104,
    COMMENT: 105,
    LINE_COMMENT: 106,
    WS: 107,
    G: 108,
    J: 109,
    K: 110,
    V: 111,
    Z: 112
});

(function(){
var HIDDEN = org.antlr.runtime.Token.HIDDEN_CHANNEL,
    EOF = org.antlr.runtime.Token.EOF;
org.antlr.lang.extend(FormulaLexer, org.antlr.runtime.Lexer, {
    EOF : -1,
    T__113 : 113,
    T__114 : 114,
    T__115 : 115,
    T__116 : 116,
    NEGATE : 4,
    ASSIGN : 5,
    FUNCALL : 6,
    MATERIAL : 7,
    UNIT : 8,
    POWER : 9,
    DEFAULTS : 10,
    PARAMS : 11,
    UNITCLUMP : 12,
    ARRAY : 13,
    LINES : 14,
    WHILE : 15,
    IFTHENELSE : 16,
    ELSE : 17,
    FOR : 18,
    FORIN : 19,
    FUNCTION : 20,
    ANONFUNCTION : 21,
    NUMBER : 22,
    LABEL : 23,
    RANGE : 24,
    INNER : 25,
    ASSIGNED : 26,
    SELECTOR : 27,
    DOTSELECTOR : 28,
    NEW : 29,
    TRYCATCH : 30,
    THROW : 31,
    NEWLINE : 32,
    W : 33,
    H : 34,
    I : 35,
    L : 36,
    E : 37,
    WHILESTATEMENT : 38,
    F : 39,
    O : 40,
    R : 41,
    FORSTATEMENT : 42,
    M : 43,
    FROMSTATEMENT : 44,
    N : 45,
    INSTATEMENT : 46,
    T : 47,
    TOSTATEMENT : 48,
    B : 49,
    Y : 50,
    BYSTATEMENT : 51,
    P : 52,
    LOOPSTATEMENT : 53,
    IFSTATEMENT : 54,
    THENSTATEMENT : 55,
    S : 56,
    ELSESTATEMENT : 57,
    U : 58,
    C : 59,
    FUNCTIONSTATEMENT : 60,
    D : 61,
    ENDBLOCK : 62,
    RETURNSTATEMENT : 63,
    NEWSTATEMENT : 64,
    TRYSTATEMENT : 65,
    A : 66,
    CATCHSTATEMENT : 67,
    THROWSTATEMENT : 68,
    IDENT : 69,
    EQUALS : 70,
    PRIMITIVE : 71,
    OR : 72,
    XOR : 73,
    X : 74,
    AND : 75,
    NOTEQUALS : 76,
    LT : 77,
    LTEQ : 78,
    GT : 79,
    GTEQ : 80,
    PLUS : 81,
    MINUS : 82,
    MULT : 83,
    DIV : 84,
    MOD : 85,
    COLON : 86,
    POW : 87,
    NOT : 88,
    LARR : 89,
    RARR : 90,
    LCURL : 91,
    RCURL : 92,
    COMMA : 93,
    STRING : 94,
    INTEGER : 95,
    FLOAT : 96,
    TRUE : 97,
    FALSE : 98,
    PER : 99,
    CUBED : 100,
    SQUARED : 101,
    Q : 102,
    LBRACKET : 103,
    RBRACKET : 104,
    COMMENT : 105,
    LINE_COMMENT : 106,
    WS : 107,
    G : 108,
    J : 109,
    K : 110,
    V : 111,
    Z : 112,
    getGrammarFileName: function() { return "/Library/WebServer/Documents/calc/Formula.g"; }
});
org.antlr.lang.augmentObject(FormulaLexer.prototype, {
    // $ANTLR start T__113
    mT__113: function()  {
        try {
            var _type = this.T__113;
            var _channel = org.antlr.runtime.BaseRecognizer.DEFAULT_TOKEN_CHANNEL;
            // /Library/WebServer/Documents/calc/Formula.g:7:8: ( '(' )
            // /Library/WebServer/Documents/calc/Formula.g:7:10: '('
            this.match('('); 



            this.state.type = _type;
            this.state.channel = _channel;
        }
        finally {
        }
    },
    // $ANTLR end "T__113",

    // $ANTLR start T__114
    mT__114: function()  {
        try {
            var _type = this.T__114;
            var _channel = org.antlr.runtime.BaseRecognizer.DEFAULT_TOKEN_CHANNEL;
            // /Library/WebServer/Documents/calc/Formula.g:8:8: ( ')' )
            // /Library/WebServer/Documents/calc/Formula.g:8:10: ')'
            this.match(')'); 



            this.state.type = _type;
            this.state.channel = _channel;
        }
        finally {
        }
    },
    // $ANTLR end "T__114",

    // $ANTLR start T__115
    mT__115: function()  {
        try {
            var _type = this.T__115;
            var _channel = org.antlr.runtime.BaseRecognizer.DEFAULT_TOKEN_CHANNEL;
            // /Library/WebServer/Documents/calc/Formula.g:9:8: ( '<-' )
            // /Library/WebServer/Documents/calc/Formula.g:9:10: '<-'
            this.match("<-"); 




            this.state.type = _type;
            this.state.channel = _channel;
        }
        finally {
        }
    },
    // $ANTLR end "T__115",

    // $ANTLR start T__116
    mT__116: function()  {
        try {
            var _type = this.T__116;
            var _channel = org.antlr.runtime.BaseRecognizer.DEFAULT_TOKEN_CHANNEL;
            // /Library/WebServer/Documents/calc/Formula.g:10:8: ( '.' )
            // /Library/WebServer/Documents/calc/Formula.g:10:10: '.'
            this.match('.'); 



            this.state.type = _type;
            this.state.channel = _channel;
        }
        finally {
        }
    },
    // $ANTLR end "T__116",

    // $ANTLR start NEWLINE
    mNEWLINE: function()  {
        try {
            var _type = this.NEWLINE;
            var _channel = org.antlr.runtime.BaseRecognizer.DEFAULT_TOKEN_CHANNEL;
            // /Library/WebServer/Documents/calc/Formula.g:48:2: ( ( ( '\\r' )? '\\n' ) )
            // /Library/WebServer/Documents/calc/Formula.g:48:4: ( ( '\\r' )? '\\n' )
            // /Library/WebServer/Documents/calc/Formula.g:48:4: ( ( '\\r' )? '\\n' )
            // /Library/WebServer/Documents/calc/Formula.g:48:5: ( '\\r' )? '\\n'
            // /Library/WebServer/Documents/calc/Formula.g:48:5: ( '\\r' )?
            var alt1=2;
            var LA1_0 = this.input.LA(1);

            if ( (LA1_0=='\r') ) {
                alt1=1;
            }
            switch (alt1) {
                case 1 :
                    // /Library/WebServer/Documents/calc/Formula.g:48:5: '\\r'
                    this.match('\r'); 


                    break;

            }

            this.match('\n'); 






            this.state.type = _type;
            this.state.channel = _channel;
        }
        finally {
        }
    },
    // $ANTLR end "NEWLINE",

    // $ANTLR start WHILESTATEMENT
    mWHILESTATEMENT: function()  {
        try {
            var _type = this.WHILESTATEMENT;
            var _channel = org.antlr.runtime.BaseRecognizer.DEFAULT_TOKEN_CHANNEL;
            // /Library/WebServer/Documents/calc/Formula.g:52:2: ( W H I L E )
            // /Library/WebServer/Documents/calc/Formula.g:52:4: W H I L E
            this.mW(); 
            this.mH(); 
            this.mI(); 
            this.mL(); 
            this.mE(); 



            this.state.type = _type;
            this.state.channel = _channel;
        }
        finally {
        }
    },
    // $ANTLR end "WHILESTATEMENT",

    // $ANTLR start FORSTATEMENT
    mFORSTATEMENT: function()  {
        try {
            var _type = this.FORSTATEMENT;
            var _channel = org.antlr.runtime.BaseRecognizer.DEFAULT_TOKEN_CHANNEL;
            // /Library/WebServer/Documents/calc/Formula.g:56:2: ( F O R )
            // /Library/WebServer/Documents/calc/Formula.g:56:4: F O R
            this.mF(); 
            this.mO(); 
            this.mR(); 



            this.state.type = _type;
            this.state.channel = _channel;
        }
        finally {
        }
    },
    // $ANTLR end "FORSTATEMENT",

    // $ANTLR start FROMSTATEMENT
    mFROMSTATEMENT: function()  {
        try {
            var _type = this.FROMSTATEMENT;
            var _channel = org.antlr.runtime.BaseRecognizer.DEFAULT_TOKEN_CHANNEL;
            // /Library/WebServer/Documents/calc/Formula.g:60:2: ( F R O M )
            // /Library/WebServer/Documents/calc/Formula.g:60:4: F R O M
            this.mF(); 
            this.mR(); 
            this.mO(); 
            this.mM(); 



            this.state.type = _type;
            this.state.channel = _channel;
        }
        finally {
        }
    },
    // $ANTLR end "FROMSTATEMENT",

    // $ANTLR start INSTATEMENT
    mINSTATEMENT: function()  {
        try {
            var _type = this.INSTATEMENT;
            var _channel = org.antlr.runtime.BaseRecognizer.DEFAULT_TOKEN_CHANNEL;
            // /Library/WebServer/Documents/calc/Formula.g:64:2: ( I N )
            // /Library/WebServer/Documents/calc/Formula.g:64:4: I N
            this.mI(); 
            this.mN(); 



            this.state.type = _type;
            this.state.channel = _channel;
        }
        finally {
        }
    },
    // $ANTLR end "INSTATEMENT",

    // $ANTLR start TOSTATEMENT
    mTOSTATEMENT: function()  {
        try {
            var _type = this.TOSTATEMENT;
            var _channel = org.antlr.runtime.BaseRecognizer.DEFAULT_TOKEN_CHANNEL;
            // /Library/WebServer/Documents/calc/Formula.g:68:2: ( T O )
            // /Library/WebServer/Documents/calc/Formula.g:68:4: T O
            this.mT(); 
            this.mO(); 



            this.state.type = _type;
            this.state.channel = _channel;
        }
        finally {
        }
    },
    // $ANTLR end "TOSTATEMENT",

    // $ANTLR start BYSTATEMENT
    mBYSTATEMENT: function()  {
        try {
            var _type = this.BYSTATEMENT;
            var _channel = org.antlr.runtime.BaseRecognizer.DEFAULT_TOKEN_CHANNEL;
            // /Library/WebServer/Documents/calc/Formula.g:72:2: ( B Y )
            // /Library/WebServer/Documents/calc/Formula.g:72:4: B Y
            this.mB(); 
            this.mY(); 



            this.state.type = _type;
            this.state.channel = _channel;
        }
        finally {
        }
    },
    // $ANTLR end "BYSTATEMENT",

    // $ANTLR start LOOPSTATEMENT
    mLOOPSTATEMENT: function()  {
        try {
            var _type = this.LOOPSTATEMENT;
            var _channel = org.antlr.runtime.BaseRecognizer.DEFAULT_TOKEN_CHANNEL;
            // /Library/WebServer/Documents/calc/Formula.g:76:2: ( L O O P )
            // /Library/WebServer/Documents/calc/Formula.g:76:4: L O O P
            this.mL(); 
            this.mO(); 
            this.mO(); 
            this.mP(); 



            this.state.type = _type;
            this.state.channel = _channel;
        }
        finally {
        }
    },
    // $ANTLR end "LOOPSTATEMENT",

    // $ANTLR start IFSTATEMENT
    mIFSTATEMENT: function()  {
        try {
            var _type = this.IFSTATEMENT;
            var _channel = org.antlr.runtime.BaseRecognizer.DEFAULT_TOKEN_CHANNEL;
            // /Library/WebServer/Documents/calc/Formula.g:80:2: ( I F )
            // /Library/WebServer/Documents/calc/Formula.g:80:4: I F
            this.mI(); 
            this.mF(); 



            this.state.type = _type;
            this.state.channel = _channel;
        }
        finally {
        }
    },
    // $ANTLR end "IFSTATEMENT",

    // $ANTLR start THENSTATEMENT
    mTHENSTATEMENT: function()  {
        try {
            var _type = this.THENSTATEMENT;
            var _channel = org.antlr.runtime.BaseRecognizer.DEFAULT_TOKEN_CHANNEL;
            // /Library/WebServer/Documents/calc/Formula.g:84:2: ( T H E N )
            // /Library/WebServer/Documents/calc/Formula.g:84:4: T H E N
            this.mT(); 
            this.mH(); 
            this.mE(); 
            this.mN(); 



            this.state.type = _type;
            this.state.channel = _channel;
        }
        finally {
        }
    },
    // $ANTLR end "THENSTATEMENT",

    // $ANTLR start ELSESTATEMENT
    mELSESTATEMENT: function()  {
        try {
            var _type = this.ELSESTATEMENT;
            var _channel = org.antlr.runtime.BaseRecognizer.DEFAULT_TOKEN_CHANNEL;
            // /Library/WebServer/Documents/calc/Formula.g:88:2: ( E L S E )
            // /Library/WebServer/Documents/calc/Formula.g:88:4: E L S E
            this.mE(); 
            this.mL(); 
            this.mS(); 
            this.mE(); 



            this.state.type = _type;
            this.state.channel = _channel;
        }
        finally {
        }
    },
    // $ANTLR end "ELSESTATEMENT",

    // $ANTLR start FUNCTIONSTATEMENT
    mFUNCTIONSTATEMENT: function()  {
        try {
            var _type = this.FUNCTIONSTATEMENT;
            var _channel = org.antlr.runtime.BaseRecognizer.DEFAULT_TOKEN_CHANNEL;
            // /Library/WebServer/Documents/calc/Formula.g:92:2: ( F U N C T I O N )
            // /Library/WebServer/Documents/calc/Formula.g:92:4: F U N C T I O N
            this.mF(); 
            this.mU(); 
            this.mN(); 
            this.mC(); 
            this.mT(); 
            this.mI(); 
            this.mO(); 
            this.mN(); 



            this.state.type = _type;
            this.state.channel = _channel;
        }
        finally {
        }
    },
    // $ANTLR end "FUNCTIONSTATEMENT",

    // $ANTLR start ENDBLOCK
    mENDBLOCK: function()  {
        try {
            var _type = this.ENDBLOCK;
            var _channel = org.antlr.runtime.BaseRecognizer.DEFAULT_TOKEN_CHANNEL;
            // /Library/WebServer/Documents/calc/Formula.g:96:2: ( E N D )
            // /Library/WebServer/Documents/calc/Formula.g:96:4: E N D
            this.mE(); 
            this.mN(); 
            this.mD(); 



            this.state.type = _type;
            this.state.channel = _channel;
        }
        finally {
        }
    },
    // $ANTLR end "ENDBLOCK",

    // $ANTLR start RETURNSTATEMENT
    mRETURNSTATEMENT: function()  {
        try {
            var _type = this.RETURNSTATEMENT;
            var _channel = org.antlr.runtime.BaseRecognizer.DEFAULT_TOKEN_CHANNEL;
            // /Library/WebServer/Documents/calc/Formula.g:100:2: ( R E T U R N )
            // /Library/WebServer/Documents/calc/Formula.g:100:4: R E T U R N
            this.mR(); 
            this.mE(); 
            this.mT(); 
            this.mU(); 
            this.mR(); 
            this.mN(); 



            this.state.type = _type;
            this.state.channel = _channel;
        }
        finally {
        }
    },
    // $ANTLR end "RETURNSTATEMENT",

    // $ANTLR start NEWSTATEMENT
    mNEWSTATEMENT: function()  {
        try {
            var _type = this.NEWSTATEMENT;
            var _channel = org.antlr.runtime.BaseRecognizer.DEFAULT_TOKEN_CHANNEL;
            // /Library/WebServer/Documents/calc/Formula.g:104:2: ( N E W )
            // /Library/WebServer/Documents/calc/Formula.g:104:4: N E W
            this.mN(); 
            this.mE(); 
            this.mW(); 



            this.state.type = _type;
            this.state.channel = _channel;
        }
        finally {
        }
    },
    // $ANTLR end "NEWSTATEMENT",

    // $ANTLR start TRYSTATEMENT
    mTRYSTATEMENT: function()  {
        try {
            var _type = this.TRYSTATEMENT;
            var _channel = org.antlr.runtime.BaseRecognizer.DEFAULT_TOKEN_CHANNEL;
            // /Library/WebServer/Documents/calc/Formula.g:108:2: ( T R Y )
            // /Library/WebServer/Documents/calc/Formula.g:108:4: T R Y
            this.mT(); 
            this.mR(); 
            this.mY(); 



            this.state.type = _type;
            this.state.channel = _channel;
        }
        finally {
        }
    },
    // $ANTLR end "TRYSTATEMENT",

    // $ANTLR start CATCHSTATEMENT
    mCATCHSTATEMENT: function()  {
        try {
            var _type = this.CATCHSTATEMENT;
            var _channel = org.antlr.runtime.BaseRecognizer.DEFAULT_TOKEN_CHANNEL;
            // /Library/WebServer/Documents/calc/Formula.g:112:2: ( C A T C H )
            // /Library/WebServer/Documents/calc/Formula.g:112:4: C A T C H
            this.mC(); 
            this.mA(); 
            this.mT(); 
            this.mC(); 
            this.mH(); 



            this.state.type = _type;
            this.state.channel = _channel;
        }
        finally {
        }
    },
    // $ANTLR end "CATCHSTATEMENT",

    // $ANTLR start THROWSTATEMENT
    mTHROWSTATEMENT: function()  {
        try {
            var _type = this.THROWSTATEMENT;
            var _channel = org.antlr.runtime.BaseRecognizer.DEFAULT_TOKEN_CHANNEL;
            // /Library/WebServer/Documents/calc/Formula.g:116:2: ( T H R O W )
            // /Library/WebServer/Documents/calc/Formula.g:116:4: T H R O W
            this.mT(); 
            this.mH(); 
            this.mR(); 
            this.mO(); 
            this.mW(); 



            this.state.type = _type;
            this.state.channel = _channel;
        }
        finally {
        }
    },
    // $ANTLR end "THROWSTATEMENT",

    // $ANTLR start OR
    mOR: function()  {
        try {
            var _type = this.OR;
            var _channel = org.antlr.runtime.BaseRecognizer.DEFAULT_TOKEN_CHANNEL;
            // /Library/WebServer/Documents/calc/Formula.g:190:5: ( '||' | O R )
            var alt2=2;
            var LA2_0 = this.input.LA(1);

            if ( (LA2_0=='|') ) {
                alt2=1;
            }
            else if ( (LA2_0=='O'||LA2_0=='o') ) {
                alt2=2;
            }
            else {
                var nvae =
                    new org.antlr.runtime.NoViableAltException("", 2, 0, this.input);

                throw nvae;
            }
            switch (alt2) {
                case 1 :
                    // /Library/WebServer/Documents/calc/Formula.g:190:8: '||'
                    this.match("||"); 



                    break;
                case 2 :
                    // /Library/WebServer/Documents/calc/Formula.g:190:15: O R
                    this.mO(); 
                    this.mR(); 


                    break;

            }
            this.state.type = _type;
            this.state.channel = _channel;
        }
        finally {
        }
    },
    // $ANTLR end "OR",

    // $ANTLR start XOR
    mXOR: function()  {
        try {
            var _type = this.XOR;
            var _channel = org.antlr.runtime.BaseRecognizer.DEFAULT_TOKEN_CHANNEL;
            // /Library/WebServer/Documents/calc/Formula.g:196:6: ( X O R )
            // /Library/WebServer/Documents/calc/Formula.g:196:9: X O R
            this.mX(); 
            this.mO(); 
            this.mR(); 



            this.state.type = _type;
            this.state.channel = _channel;
        }
        finally {
        }
    },
    // $ANTLR end "XOR",

    // $ANTLR start AND
    mAND: function()  {
        try {
            var _type = this.AND;
            var _channel = org.antlr.runtime.BaseRecognizer.DEFAULT_TOKEN_CHANNEL;
            // /Library/WebServer/Documents/calc/Formula.g:202:5: ( '&&' | A N D )
            var alt3=2;
            var LA3_0 = this.input.LA(1);

            if ( (LA3_0=='&') ) {
                alt3=1;
            }
            else if ( (LA3_0=='A'||LA3_0=='a') ) {
                alt3=2;
            }
            else {
                var nvae =
                    new org.antlr.runtime.NoViableAltException("", 3, 0, this.input);

                throw nvae;
            }
            switch (alt3) {
                case 1 :
                    // /Library/WebServer/Documents/calc/Formula.g:202:8: '&&'
                    this.match("&&"); 



                    break;
                case 2 :
                    // /Library/WebServer/Documents/calc/Formula.g:202:15: A N D
                    this.mA(); 
                    this.mN(); 
                    this.mD(); 


                    break;

            }
            this.state.type = _type;
            this.state.channel = _channel;
        }
        finally {
        }
    },
    // $ANTLR end "AND",

    // $ANTLR start EQUALS
    mEQUALS: function()  {
        try {
            var _type = this.EQUALS;
            var _channel = org.antlr.runtime.BaseRecognizer.DEFAULT_TOKEN_CHANNEL;
            // /Library/WebServer/Documents/calc/Formula.g:209:2: ( '=' | '==' )
            var alt4=2;
            var LA4_0 = this.input.LA(1);

            if ( (LA4_0=='=') ) {
                var LA4_1 = this.input.LA(2);

                if ( (LA4_1=='=') ) {
                    alt4=2;
                }
                else {
                    alt4=1;}
            }
            else {
                var nvae =
                    new org.antlr.runtime.NoViableAltException("", 4, 0, this.input);

                throw nvae;
            }
            switch (alt4) {
                case 1 :
                    // /Library/WebServer/Documents/calc/Formula.g:209:4: '='
                    this.match('='); 


                    break;
                case 2 :
                    // /Library/WebServer/Documents/calc/Formula.g:209:10: '=='
                    this.match("=="); 



                    break;

            }
            this.state.type = _type;
            this.state.channel = _channel;
        }
        finally {
        }
    },
    // $ANTLR end "EQUALS",

    // $ANTLR start NOTEQUALS
    mNOTEQUALS: function()  {
        try {
            var _type = this.NOTEQUALS;
            var _channel = org.antlr.runtime.BaseRecognizer.DEFAULT_TOKEN_CHANNEL;
            // /Library/WebServer/Documents/calc/Formula.g:212:2: ( '!=' | '<>' )
            var alt5=2;
            var LA5_0 = this.input.LA(1);

            if ( (LA5_0=='!') ) {
                alt5=1;
            }
            else if ( (LA5_0=='<') ) {
                alt5=2;
            }
            else {
                var nvae =
                    new org.antlr.runtime.NoViableAltException("", 5, 0, this.input);

                throw nvae;
            }
            switch (alt5) {
                case 1 :
                    // /Library/WebServer/Documents/calc/Formula.g:212:4: '!='
                    this.match("!="); 



                    break;
                case 2 :
                    // /Library/WebServer/Documents/calc/Formula.g:212:11: '<>'
                    this.match("<>"); 



                    break;

            }
            this.state.type = _type;
            this.state.channel = _channel;
        }
        finally {
        }
    },
    // $ANTLR end "NOTEQUALS",

    // $ANTLR start LT
    mLT: function()  {
        try {
            var _type = this.LT;
            var _channel = org.antlr.runtime.BaseRecognizer.DEFAULT_TOKEN_CHANNEL;
            // /Library/WebServer/Documents/calc/Formula.g:219:4: ( '<' )
            // /Library/WebServer/Documents/calc/Formula.g:219:6: '<'
            this.match('<'); 



            this.state.type = _type;
            this.state.channel = _channel;
        }
        finally {
        }
    },
    // $ANTLR end "LT",

    // $ANTLR start LTEQ
    mLTEQ: function()  {
        try {
            var _type = this.LTEQ;
            var _channel = org.antlr.runtime.BaseRecognizer.DEFAULT_TOKEN_CHANNEL;
            // /Library/WebServer/Documents/calc/Formula.g:220:6: ( '<=' )
            // /Library/WebServer/Documents/calc/Formula.g:220:8: '<='
            this.match("<="); 




            this.state.type = _type;
            this.state.channel = _channel;
        }
        finally {
        }
    },
    // $ANTLR end "LTEQ",

    // $ANTLR start GT
    mGT: function()  {
        try {
            var _type = this.GT;
            var _channel = org.antlr.runtime.BaseRecognizer.DEFAULT_TOKEN_CHANNEL;
            // /Library/WebServer/Documents/calc/Formula.g:221:4: ( '>' )
            // /Library/WebServer/Documents/calc/Formula.g:221:6: '>'
            this.match('>'); 



            this.state.type = _type;
            this.state.channel = _channel;
        }
        finally {
        }
    },
    // $ANTLR end "GT",

    // $ANTLR start GTEQ
    mGTEQ: function()  {
        try {
            var _type = this.GTEQ;
            var _channel = org.antlr.runtime.BaseRecognizer.DEFAULT_TOKEN_CHANNEL;
            // /Library/WebServer/Documents/calc/Formula.g:222:6: ( '>=' )
            // /Library/WebServer/Documents/calc/Formula.g:222:8: '>='
            this.match(">="); 




            this.state.type = _type;
            this.state.channel = _channel;
        }
        finally {
        }
    },
    // $ANTLR end "GTEQ",

    // $ANTLR start PLUS
    mPLUS: function()  {
        try {
            var _type = this.PLUS;
            var _channel = org.antlr.runtime.BaseRecognizer.DEFAULT_TOKEN_CHANNEL;
            // /Library/WebServer/Documents/calc/Formula.g:228:6: ( '+' )
            // /Library/WebServer/Documents/calc/Formula.g:228:8: '+'
            this.match('+'); 



            this.state.type = _type;
            this.state.channel = _channel;
        }
        finally {
        }
    },
    // $ANTLR end "PLUS",

    // $ANTLR start MINUS
    mMINUS: function()  {
        try {
            var _type = this.MINUS;
            var _channel = org.antlr.runtime.BaseRecognizer.DEFAULT_TOKEN_CHANNEL;
            // /Library/WebServer/Documents/calc/Formula.g:229:7: ( '-' )
            // /Library/WebServer/Documents/calc/Formula.g:229:9: '-'
            this.match('-'); 



            this.state.type = _type;
            this.state.channel = _channel;
        }
        finally {
        }
    },
    // $ANTLR end "MINUS",

    // $ANTLR start MULT
    mMULT: function()  {
        try {
            var _type = this.MULT;
            var _channel = org.antlr.runtime.BaseRecognizer.DEFAULT_TOKEN_CHANNEL;
            // /Library/WebServer/Documents/calc/Formula.g:235:6: ( '*' )
            // /Library/WebServer/Documents/calc/Formula.g:235:8: '*'
            this.match('*'); 



            this.state.type = _type;
            this.state.channel = _channel;
        }
        finally {
        }
    },
    // $ANTLR end "MULT",

    // $ANTLR start DIV
    mDIV: function()  {
        try {
            var _type = this.DIV;
            var _channel = org.antlr.runtime.BaseRecognizer.DEFAULT_TOKEN_CHANNEL;
            // /Library/WebServer/Documents/calc/Formula.g:236:5: ( '/' )
            // /Library/WebServer/Documents/calc/Formula.g:236:7: '/'
            this.match('/'); 



            this.state.type = _type;
            this.state.channel = _channel;
        }
        finally {
        }
    },
    // $ANTLR end "DIV",

    // $ANTLR start MOD
    mMOD: function()  {
        try {
            var _type = this.MOD;
            var _channel = org.antlr.runtime.BaseRecognizer.DEFAULT_TOKEN_CHANNEL;
            // /Library/WebServer/Documents/calc/Formula.g:237:5: ( '%' | M O D )
            var alt6=2;
            var LA6_0 = this.input.LA(1);

            if ( (LA6_0=='%') ) {
                alt6=1;
            }
            else if ( (LA6_0=='M'||LA6_0=='m') ) {
                alt6=2;
            }
            else {
                var nvae =
                    new org.antlr.runtime.NoViableAltException("", 6, 0, this.input);

                throw nvae;
            }
            switch (alt6) {
                case 1 :
                    // /Library/WebServer/Documents/calc/Formula.g:237:7: '%'
                    this.match('%'); 


                    break;
                case 2 :
                    // /Library/WebServer/Documents/calc/Formula.g:237:13: M O D
                    this.mM(); 
                    this.mO(); 
                    this.mD(); 


                    break;

            }
            this.state.type = _type;
            this.state.channel = _channel;
        }
        finally {
        }
    },
    // $ANTLR end "MOD",

    // $ANTLR start POW
    mPOW: function()  {
        try {
            var _type = this.POW;
            var _channel = org.antlr.runtime.BaseRecognizer.DEFAULT_TOKEN_CHANNEL;
            // /Library/WebServer/Documents/calc/Formula.g:257:5: ( '^' )
            // /Library/WebServer/Documents/calc/Formula.g:257:7: '^'
            this.match('^'); 



            this.state.type = _type;
            this.state.channel = _channel;
        }
        finally {
        }
    },
    // $ANTLR end "POW",

    // $ANTLR start NOT
    mNOT: function()  {
        try {
            var _type = this.NOT;
            var _channel = org.antlr.runtime.BaseRecognizer.DEFAULT_TOKEN_CHANNEL;
            // /Library/WebServer/Documents/calc/Formula.g:264:5: ( '!' | N O T )
            var alt7=2;
            var LA7_0 = this.input.LA(1);

            if ( (LA7_0=='!') ) {
                alt7=1;
            }
            else if ( (LA7_0=='N'||LA7_0=='n') ) {
                alt7=2;
            }
            else {
                var nvae =
                    new org.antlr.runtime.NoViableAltException("", 7, 0, this.input);

                throw nvae;
            }
            switch (alt7) {
                case 1 :
                    // /Library/WebServer/Documents/calc/Formula.g:264:7: '!'
                    this.match('!'); 


                    break;
                case 2 :
                    // /Library/WebServer/Documents/calc/Formula.g:264:13: N O T
                    this.mN(); 
                    this.mO(); 
                    this.mT(); 


                    break;

            }
            this.state.type = _type;
            this.state.channel = _channel;
        }
        finally {
        }
    },
    // $ANTLR end "NOT",

    // $ANTLR start LARR
    mLARR: function()  {
        try {
            var _type = this.LARR;
            var _channel = org.antlr.runtime.BaseRecognizer.DEFAULT_TOKEN_CHANNEL;
            // /Library/WebServer/Documents/calc/Formula.g:336:6: ( '\\u00AB' | '<<' )
            var alt8=2;
            var LA8_0 = this.input.LA(1);

            if ( (LA8_0=='\u00AB') ) {
                alt8=1;
            }
            else if ( (LA8_0=='<') ) {
                alt8=2;
            }
            else {
                var nvae =
                    new org.antlr.runtime.NoViableAltException("", 8, 0, this.input);

                throw nvae;
            }
            switch (alt8) {
                case 1 :
                    // /Library/WebServer/Documents/calc/Formula.g:336:8: '\\u00AB'
                    this.match('\u00AB'); 


                    break;
                case 2 :
                    // /Library/WebServer/Documents/calc/Formula.g:336:19: '<<'
                    this.match("<<"); 



                    break;

            }
            this.state.type = _type;
            this.state.channel = _channel;
        }
        finally {
        }
    },
    // $ANTLR end "LARR",

    // $ANTLR start RARR
    mRARR: function()  {
        try {
            var _type = this.RARR;
            var _channel = org.antlr.runtime.BaseRecognizer.DEFAULT_TOKEN_CHANNEL;
            // /Library/WebServer/Documents/calc/Formula.g:337:6: ( '\\u00BB' | '>>' )
            var alt9=2;
            var LA9_0 = this.input.LA(1);

            if ( (LA9_0=='\u00BB') ) {
                alt9=1;
            }
            else if ( (LA9_0=='>') ) {
                alt9=2;
            }
            else {
                var nvae =
                    new org.antlr.runtime.NoViableAltException("", 9, 0, this.input);

                throw nvae;
            }
            switch (alt9) {
                case 1 :
                    // /Library/WebServer/Documents/calc/Formula.g:337:8: '\\u00BB'
                    this.match('\u00BB'); 


                    break;
                case 2 :
                    // /Library/WebServer/Documents/calc/Formula.g:337:19: '>>'
                    this.match(">>"); 



                    break;

            }
            this.state.type = _type;
            this.state.channel = _channel;
        }
        finally {
        }
    },
    // $ANTLR end "RARR",

    // $ANTLR start LCURL
    mLCURL: function()  {
        try {
            var _type = this.LCURL;
            var _channel = org.antlr.runtime.BaseRecognizer.DEFAULT_TOKEN_CHANNEL;
            // /Library/WebServer/Documents/calc/Formula.g:339:8: ( '{' )
            // /Library/WebServer/Documents/calc/Formula.g:339:10: '{'
            this.match('{'); 



            this.state.type = _type;
            this.state.channel = _channel;
        }
        finally {
        }
    },
    // $ANTLR end "LCURL",

    // $ANTLR start RCURL
    mRCURL: function()  {
        try {
            var _type = this.RCURL;
            var _channel = org.antlr.runtime.BaseRecognizer.DEFAULT_TOKEN_CHANNEL;
            // /Library/WebServer/Documents/calc/Formula.g:340:7: ( '}' )
            // /Library/WebServer/Documents/calc/Formula.g:340:9: '}'
            this.match('}'); 



            this.state.type = _type;
            this.state.channel = _channel;
        }
        finally {
        }
    },
    // $ANTLR end "RCURL",

    // $ANTLR start INTEGER
    mINTEGER: function()  {
        try {
            var _type = this.INTEGER;
            var _channel = org.antlr.runtime.BaseRecognizer.DEFAULT_TOKEN_CHANNEL;
            // /Library/WebServer/Documents/calc/Formula.g:347:2: ( ( '0' .. '9' )+ ( 'e' ( '+' | '-' )? ( '0' .. '9' )* )? )
            // /Library/WebServer/Documents/calc/Formula.g:347:5: ( '0' .. '9' )+ ( 'e' ( '+' | '-' )? ( '0' .. '9' )* )?
            // /Library/WebServer/Documents/calc/Formula.g:347:5: ( '0' .. '9' )+
            var cnt10=0;
            loop10:
            do {
                var alt10=2;
                var LA10_0 = this.input.LA(1);

                if ( ((LA10_0>='0' && LA10_0<='9')) ) {
                    alt10=1;
                }


                switch (alt10) {
                case 1 :
                    // /Library/WebServer/Documents/calc/Formula.g:347:6: '0' .. '9'
                    this.matchRange('0','9'); 


                    break;

                default :
                    if ( cnt10 >= 1 ) {
                        break loop10;
                    }
                        var eee = new org.antlr.runtime.EarlyExitException(10, this.input);
                        throw eee;
                }
                cnt10++;
            } while (true);

            // /Library/WebServer/Documents/calc/Formula.g:347:17: ( 'e' ( '+' | '-' )? ( '0' .. '9' )* )?
            var alt13=2;
            var LA13_0 = this.input.LA(1);

            if ( (LA13_0=='e') ) {
                alt13=1;
            }
            switch (alt13) {
                case 1 :
                    // /Library/WebServer/Documents/calc/Formula.g:347:18: 'e' ( '+' | '-' )? ( '0' .. '9' )*
                    this.match('e'); 
                    // /Library/WebServer/Documents/calc/Formula.g:347:22: ( '+' | '-' )?
                    var alt11=2;
                    var LA11_0 = this.input.LA(1);

                    if ( (LA11_0=='+'||LA11_0=='-') ) {
                        alt11=1;
                    }
                    switch (alt11) {
                        case 1 :
                            // /Library/WebServer/Documents/calc/Formula.g:
                            if ( this.input.LA(1)=='+'||this.input.LA(1)=='-' ) {
                                this.input.consume();

                            }
                            else {
                                var mse = new org.antlr.runtime.MismatchedSetException(null,this.input);
                                this.recover(mse);
                                throw mse;}



                            break;

                    }

                    // /Library/WebServer/Documents/calc/Formula.g:347:33: ( '0' .. '9' )*
                    loop12:
                    do {
                        var alt12=2;
                        var LA12_0 = this.input.LA(1);

                        if ( ((LA12_0>='0' && LA12_0<='9')) ) {
                            alt12=1;
                        }


                        switch (alt12) {
                        case 1 :
                            // /Library/WebServer/Documents/calc/Formula.g:347:34: '0' .. '9'
                            this.matchRange('0','9'); 


                            break;

                        default :
                            break loop12;
                        }
                    } while (true);



                    break;

            }




            this.state.type = _type;
            this.state.channel = _channel;
        }
        finally {
        }
    },
    // $ANTLR end "INTEGER",

    // $ANTLR start FLOAT
    mFLOAT: function()  {
        try {
            var _type = this.FLOAT;
            var _channel = org.antlr.runtime.BaseRecognizer.DEFAULT_TOKEN_CHANNEL;
            // /Library/WebServer/Documents/calc/Formula.g:351:2: ( ( '0' .. '9' )* '.' ( '0' .. '9' )+ ( 'e' ( '+' | '-' )? ( '0' .. '9' )* )? )
            // /Library/WebServer/Documents/calc/Formula.g:351:5: ( '0' .. '9' )* '.' ( '0' .. '9' )+ ( 'e' ( '+' | '-' )? ( '0' .. '9' )* )?
            // /Library/WebServer/Documents/calc/Formula.g:351:5: ( '0' .. '9' )*
            loop14:
            do {
                var alt14=2;
                var LA14_0 = this.input.LA(1);

                if ( ((LA14_0>='0' && LA14_0<='9')) ) {
                    alt14=1;
                }


                switch (alt14) {
                case 1 :
                    // /Library/WebServer/Documents/calc/Formula.g:351:6: '0' .. '9'
                    this.matchRange('0','9'); 


                    break;

                default :
                    break loop14;
                }
            } while (true);

            this.match('.'); 
            // /Library/WebServer/Documents/calc/Formula.g:351:21: ( '0' .. '9' )+
            var cnt15=0;
            loop15:
            do {
                var alt15=2;
                var LA15_0 = this.input.LA(1);

                if ( ((LA15_0>='0' && LA15_0<='9')) ) {
                    alt15=1;
                }


                switch (alt15) {
                case 1 :
                    // /Library/WebServer/Documents/calc/Formula.g:351:22: '0' .. '9'
                    this.matchRange('0','9'); 


                    break;

                default :
                    if ( cnt15 >= 1 ) {
                        break loop15;
                    }
                        var eee = new org.antlr.runtime.EarlyExitException(15, this.input);
                        throw eee;
                }
                cnt15++;
            } while (true);

            // /Library/WebServer/Documents/calc/Formula.g:351:33: ( 'e' ( '+' | '-' )? ( '0' .. '9' )* )?
            var alt18=2;
            var LA18_0 = this.input.LA(1);

            if ( (LA18_0=='e') ) {
                alt18=1;
            }
            switch (alt18) {
                case 1 :
                    // /Library/WebServer/Documents/calc/Formula.g:351:34: 'e' ( '+' | '-' )? ( '0' .. '9' )*
                    this.match('e'); 
                    // /Library/WebServer/Documents/calc/Formula.g:351:38: ( '+' | '-' )?
                    var alt16=2;
                    var LA16_0 = this.input.LA(1);

                    if ( (LA16_0=='+'||LA16_0=='-') ) {
                        alt16=1;
                    }
                    switch (alt16) {
                        case 1 :
                            // /Library/WebServer/Documents/calc/Formula.g:
                            if ( this.input.LA(1)=='+'||this.input.LA(1)=='-' ) {
                                this.input.consume();

                            }
                            else {
                                var mse = new org.antlr.runtime.MismatchedSetException(null,this.input);
                                this.recover(mse);
                                throw mse;}



                            break;

                    }

                    // /Library/WebServer/Documents/calc/Formula.g:351:49: ( '0' .. '9' )*
                    loop17:
                    do {
                        var alt17=2;
                        var LA17_0 = this.input.LA(1);

                        if ( ((LA17_0>='0' && LA17_0<='9')) ) {
                            alt17=1;
                        }


                        switch (alt17) {
                        case 1 :
                            // /Library/WebServer/Documents/calc/Formula.g:351:50: '0' .. '9'
                            this.matchRange('0','9'); 


                            break;

                        default :
                            break loop17;
                        }
                    } while (true);



                    break;

            }




            this.state.type = _type;
            this.state.channel = _channel;
        }
        finally {
        }
    },
    // $ANTLR end "FLOAT",

    // $ANTLR start TRUE
    mTRUE: function()  {
        try {
            var _type = this.TRUE;
            var _channel = org.antlr.runtime.BaseRecognizer.DEFAULT_TOKEN_CHANNEL;
            // /Library/WebServer/Documents/calc/Formula.g:360:2: ( T R U E )
            // /Library/WebServer/Documents/calc/Formula.g:360:4: T R U E
            this.mT(); 
            this.mR(); 
            this.mU(); 
            this.mE(); 



            this.state.type = _type;
            this.state.channel = _channel;
        }
        finally {
        }
    },
    // $ANTLR end "TRUE",

    // $ANTLR start FALSE
    mFALSE: function()  {
        try {
            var _type = this.FALSE;
            var _channel = org.antlr.runtime.BaseRecognizer.DEFAULT_TOKEN_CHANNEL;
            // /Library/WebServer/Documents/calc/Formula.g:364:2: ( F A L S E )
            // /Library/WebServer/Documents/calc/Formula.g:364:5: F A L S E
            this.mF(); 
            this.mA(); 
            this.mL(); 
            this.mS(); 
            this.mE(); 



            this.state.type = _type;
            this.state.channel = _channel;
        }
        finally {
        }
    },
    // $ANTLR end "FALSE",

    // $ANTLR start PER
    mPER: function()  {
        try {
            var _type = this.PER;
            var _channel = org.antlr.runtime.BaseRecognizer.DEFAULT_TOKEN_CHANNEL;
            // /Library/WebServer/Documents/calc/Formula.g:371:2: ( P E R )
            // /Library/WebServer/Documents/calc/Formula.g:371:4: P E R
            this.mP(); 
            this.mE(); 
            this.mR(); 



            this.state.type = _type;
            this.state.channel = _channel;
        }
        finally {
        }
    },
    // $ANTLR end "PER",

    // $ANTLR start SQUARED
    mSQUARED: function()  {
        try {
            var _type = this.SQUARED;
            var _channel = org.antlr.runtime.BaseRecognizer.DEFAULT_TOKEN_CHANNEL;
            // /Library/WebServer/Documents/calc/Formula.g:386:9: ( S Q U A R E D )
            // /Library/WebServer/Documents/calc/Formula.g:386:12: S Q U A R E D
            this.mS(); 
            this.mQ(); 
            this.mU(); 
            this.mA(); 
            this.mR(); 
            this.mE(); 
            this.mD(); 



            this.state.type = _type;
            this.state.channel = _channel;
        }
        finally {
        }
    },
    // $ANTLR end "SQUARED",

    // $ANTLR start CUBED
    mCUBED: function()  {
        try {
            var _type = this.CUBED;
            var _channel = org.antlr.runtime.BaseRecognizer.DEFAULT_TOKEN_CHANNEL;
            // /Library/WebServer/Documents/calc/Formula.g:387:7: ( C U B E D )
            // /Library/WebServer/Documents/calc/Formula.g:387:9: C U B E D
            this.mC(); 
            this.mU(); 
            this.mB(); 
            this.mE(); 
            this.mD(); 



            this.state.type = _type;
            this.state.channel = _channel;
        }
        finally {
        }
    },
    // $ANTLR end "CUBED",

    // $ANTLR start IDENT
    mIDENT: function()  {
        try {
            var _type = this.IDENT;
            var _channel = org.antlr.runtime.BaseRecognizer.DEFAULT_TOKEN_CHANNEL;
            // /Library/WebServer/Documents/calc/Formula.g:403:2: ( ( 'a' .. 'z' | 'A' .. 'Z' ) ( 'a' .. 'z' | 'A' .. 'Z' | '_' | '0' .. '9' )* )
            // /Library/WebServer/Documents/calc/Formula.g:403:4: ( 'a' .. 'z' | 'A' .. 'Z' ) ( 'a' .. 'z' | 'A' .. 'Z' | '_' | '0' .. '9' )*
            if ( (this.input.LA(1)>='A' && this.input.LA(1)<='Z')||(this.input.LA(1)>='a' && this.input.LA(1)<='z') ) {
                this.input.consume();

            }
            else {
                var mse = new org.antlr.runtime.MismatchedSetException(null,this.input);
                this.recover(mse);
                throw mse;}

            // /Library/WebServer/Documents/calc/Formula.g:403:26: ( 'a' .. 'z' | 'A' .. 'Z' | '_' | '0' .. '9' )*
            loop19:
            do {
                var alt19=2;
                var LA19_0 = this.input.LA(1);

                if ( ((LA19_0>='0' && LA19_0<='9')||(LA19_0>='A' && LA19_0<='Z')||LA19_0=='_'||(LA19_0>='a' && LA19_0<='z')) ) {
                    alt19=1;
                }


                switch (alt19) {
                case 1 :
                    // /Library/WebServer/Documents/calc/Formula.g:
                    if ( (this.input.LA(1)>='0' && this.input.LA(1)<='9')||(this.input.LA(1)>='A' && this.input.LA(1)<='Z')||this.input.LA(1)=='_'||(this.input.LA(1)>='a' && this.input.LA(1)<='z') ) {
                        this.input.consume();

                    }
                    else {
                        var mse = new org.antlr.runtime.MismatchedSetException(null,this.input);
                        this.recover(mse);
                        throw mse;}



                    break;

                default :
                    break loop19;
                }
            } while (true);




            this.state.type = _type;
            this.state.channel = _channel;
        }
        finally {
        }
    },
    // $ANTLR end "IDENT",

    // $ANTLR start PRIMITIVE
    mPRIMITIVE: function()  {
        try {
            var _type = this.PRIMITIVE;
            var _channel = org.antlr.runtime.BaseRecognizer.DEFAULT_TOKEN_CHANNEL;
            // /Library/WebServer/Documents/calc/Formula.g:411:2: ( LBRACKET (~ '[' ) ( . )* RBRACKET | LBRACKET LBRACKET ( . )* RBRACKET RBRACKET )
            var alt22=2;
            var LA22_0 = this.input.LA(1);

            if ( (LA22_0=='[') ) {
                var LA22_1 = this.input.LA(2);

                if ( ((LA22_1>='\u0000' && LA22_1<='Z')||(LA22_1>='\\' && LA22_1<='\uFFFF')) ) {
                    alt22=1;
                }
                else if ( (LA22_1=='[') ) {
                    alt22=2;
                }
                else {
                    var nvae =
                        new org.antlr.runtime.NoViableAltException("", 22, 1, this.input);

                    throw nvae;
                }
            }
            else {
                var nvae =
                    new org.antlr.runtime.NoViableAltException("", 22, 0, this.input);

                throw nvae;
            }
            switch (alt22) {
                case 1 :
                    // /Library/WebServer/Documents/calc/Formula.g:411:4: LBRACKET (~ '[' ) ( . )* RBRACKET
                    this.mLBRACKET(); 
                    // /Library/WebServer/Documents/calc/Formula.g:411:13: (~ '[' )
                    // /Library/WebServer/Documents/calc/Formula.g:411:14: ~ '['
                    if ( (this.input.LA(1)>='\u0000' && this.input.LA(1)<='Z')||(this.input.LA(1)>='\\' && this.input.LA(1)<='\uFFFF') ) {
                        this.input.consume();

                    }
                    else {
                        var mse = new org.antlr.runtime.MismatchedSetException(null,this.input);
                        this.recover(mse);
                        throw mse;}




                    // /Library/WebServer/Documents/calc/Formula.g:411:20: ( . )*
                    loop20:
                    do {
                        var alt20=2;
                        var LA20_0 = this.input.LA(1);

                        if ( (LA20_0==']') ) {
                            alt20=2;
                        }
                        else if ( ((LA20_0>='\u0000' && LA20_0<='\\')||(LA20_0>='^' && LA20_0<='\uFFFF')) ) {
                            alt20=1;
                        }


                        switch (alt20) {
                        case 1 :
                            // /Library/WebServer/Documents/calc/Formula.g:411:20: .
                            this.matchAny(); 


                            break;

                        default :
                            break loop20;
                        }
                    } while (true);

                    this.mRBRACKET(); 


                    break;
                case 2 :
                    // /Library/WebServer/Documents/calc/Formula.g:412:5: LBRACKET LBRACKET ( . )* RBRACKET RBRACKET
                    this.mLBRACKET(); 
                    this.mLBRACKET(); 
                    // /Library/WebServer/Documents/calc/Formula.g:412:24: ( . )*
                    loop21:
                    do {
                        var alt21=2;
                        var LA21_0 = this.input.LA(1);

                        if ( (LA21_0==']') ) {
                            alt21=2;
                        }
                        else if ( ((LA21_0>='\u0000' && LA21_0<='\\')||(LA21_0>='^' && LA21_0<='\uFFFF')) ) {
                            alt21=1;
                        }


                        switch (alt21) {
                        case 1 :
                            // /Library/WebServer/Documents/calc/Formula.g:412:24: .
                            this.matchAny(); 


                            break;

                        default :
                            break loop21;
                        }
                    } while (true);

                    this.mRBRACKET(); 
                    this.mRBRACKET(); 


                    break;

            }
            this.state.type = _type;
            this.state.channel = _channel;
        }
        finally {
        }
    },
    // $ANTLR end "PRIMITIVE",

    // $ANTLR start LBRACKET
    mLBRACKET: function()  {
        try {
            var _type = this.LBRACKET;
            var _channel = org.antlr.runtime.BaseRecognizer.DEFAULT_TOKEN_CHANNEL;
            // /Library/WebServer/Documents/calc/Formula.g:416:2: ( '[' )
            // /Library/WebServer/Documents/calc/Formula.g:416:5: '['
            this.match('['); 



            this.state.type = _type;
            this.state.channel = _channel;
        }
        finally {
        }
    },
    // $ANTLR end "LBRACKET",

    // $ANTLR start RBRACKET
    mRBRACKET: function()  {
        try {
            var _type = this.RBRACKET;
            var _channel = org.antlr.runtime.BaseRecognizer.DEFAULT_TOKEN_CHANNEL;
            // /Library/WebServer/Documents/calc/Formula.g:419:2: ( ']' )
            // /Library/WebServer/Documents/calc/Formula.g:419:4: ']'
            this.match(']'); 



            this.state.type = _type;
            this.state.channel = _channel;
        }
        finally {
        }
    },
    // $ANTLR end "RBRACKET",

    // $ANTLR start COMMENT
    mCOMMENT: function()  {
        try {
            var _type = this.COMMENT;
            var _channel = org.antlr.runtime.BaseRecognizer.DEFAULT_TOKEN_CHANNEL;
            // /Library/WebServer/Documents/calc/Formula.g:422:5: ( '/*' ( options {greedy=false; } : . )* '*/' )
            // /Library/WebServer/Documents/calc/Formula.g:422:9: '/*' ( options {greedy=false; } : . )* '*/'
            this.match("/*"); 

            // /Library/WebServer/Documents/calc/Formula.g:422:14: ( options {greedy=false; } : . )*
            loop23:
            do {
                var alt23=2;
                var LA23_0 = this.input.LA(1);

                if ( (LA23_0=='*') ) {
                    var LA23_1 = this.input.LA(2);

                    if ( (LA23_1=='/') ) {
                        alt23=2;
                    }
                    else if ( ((LA23_1>='\u0000' && LA23_1<='.')||(LA23_1>='0' && LA23_1<='\uFFFF')) ) {
                        alt23=1;
                    }


                }
                else if ( ((LA23_0>='\u0000' && LA23_0<=')')||(LA23_0>='+' && LA23_0<='\uFFFF')) ) {
                    alt23=1;
                }


                switch (alt23) {
                case 1 :
                    // /Library/WebServer/Documents/calc/Formula.g:422:42: .
                    this.matchAny(); 


                    break;

                default :
                    break loop23;
                }
            } while (true);

            this.match("*/"); 

            _channel=HIDDEN;



            this.state.type = _type;
            this.state.channel = _channel;
        }
        finally {
        }
    },
    // $ANTLR end "COMMENT",

    // $ANTLR start LINE_COMMENT
    mLINE_COMMENT: function()  {
        try {
            var _type = this.LINE_COMMENT;
            var _channel = org.antlr.runtime.BaseRecognizer.DEFAULT_TOKEN_CHANNEL;
            // /Library/WebServer/Documents/calc/Formula.g:426:5: ( ( '//' | '#' ) (~ ( '\\n' | '\\r' ) )* )
            // /Library/WebServer/Documents/calc/Formula.g:426:7: ( '//' | '#' ) (~ ( '\\n' | '\\r' ) )*
            // /Library/WebServer/Documents/calc/Formula.g:426:7: ( '//' | '#' )
            var alt24=2;
            var LA24_0 = this.input.LA(1);

            if ( (LA24_0=='/') ) {
                alt24=1;
            }
            else if ( (LA24_0=='#') ) {
                alt24=2;
            }
            else {
                var nvae =
                    new org.antlr.runtime.NoViableAltException("", 24, 0, this.input);

                throw nvae;
            }
            switch (alt24) {
                case 1 :
                    // /Library/WebServer/Documents/calc/Formula.g:426:8: '//'
                    this.match("//"); 



                    break;
                case 2 :
                    // /Library/WebServer/Documents/calc/Formula.g:426:13: '#'
                    this.match('#'); 


                    break;

            }

            // /Library/WebServer/Documents/calc/Formula.g:426:18: (~ ( '\\n' | '\\r' ) )*
            loop25:
            do {
                var alt25=2;
                var LA25_0 = this.input.LA(1);

                if ( ((LA25_0>='\u0000' && LA25_0<='\t')||(LA25_0>='\u000B' && LA25_0<='\f')||(LA25_0>='\u000E' && LA25_0<='\uFFFF')) ) {
                    alt25=1;
                }


                switch (alt25) {
                case 1 :
                    // /Library/WebServer/Documents/calc/Formula.g:426:19: ~ ( '\\n' | '\\r' )
                    if ( (this.input.LA(1)>='\u0000' && this.input.LA(1)<='\t')||(this.input.LA(1)>='\u000B' && this.input.LA(1)<='\f')||(this.input.LA(1)>='\u000E' && this.input.LA(1)<='\uFFFF') ) {
                        this.input.consume();

                    }
                    else {
                        var mse = new org.antlr.runtime.MismatchedSetException(null,this.input);
                        this.recover(mse);
                        throw mse;}



                    break;

                default :
                    break loop25;
                }
            } while (true);

            _channel=HIDDEN;



            this.state.type = _type;
            this.state.channel = _channel;
        }
        finally {
        }
    },
    // $ANTLR end "LINE_COMMENT",

    // $ANTLR start COLON
    mCOLON: function()  {
        try {
            var _type = this.COLON;
            var _channel = org.antlr.runtime.BaseRecognizer.DEFAULT_TOKEN_CHANNEL;
            // /Library/WebServer/Documents/calc/Formula.g:429:2: ( ':' )
            // /Library/WebServer/Documents/calc/Formula.g:429:4: ':'
            this.match(':'); 



            this.state.type = _type;
            this.state.channel = _channel;
        }
        finally {
        }
    },
    // $ANTLR end "COLON",

    // $ANTLR start WS
    mWS: function()  {
        try {
            var _type = this.WS;
            var _channel = org.antlr.runtime.BaseRecognizer.DEFAULT_TOKEN_CHANNEL;
            // /Library/WebServer/Documents/calc/Formula.g:435:2: ( ( ' ' | '\\t' | '\\u000C' )+ )
            // /Library/WebServer/Documents/calc/Formula.g:435:5: ( ' ' | '\\t' | '\\u000C' )+
            // /Library/WebServer/Documents/calc/Formula.g:435:5: ( ' ' | '\\t' | '\\u000C' )+
            var cnt26=0;
            loop26:
            do {
                var alt26=2;
                var LA26_0 = this.input.LA(1);

                if ( (LA26_0=='\t'||LA26_0=='\f'||LA26_0==' ') ) {
                    alt26=1;
                }


                switch (alt26) {
                case 1 :
                    // /Library/WebServer/Documents/calc/Formula.g:
                    if ( this.input.LA(1)=='\t'||this.input.LA(1)=='\f'||this.input.LA(1)==' ' ) {
                        this.input.consume();

                    }
                    else {
                        var mse = new org.antlr.runtime.MismatchedSetException(null,this.input);
                        this.recover(mse);
                        throw mse;}



                    break;

                default :
                    if ( cnt26 >= 1 ) {
                        break loop26;
                    }
                        var eee = new org.antlr.runtime.EarlyExitException(26, this.input);
                        throw eee;
                }
                cnt26++;
            } while (true);

            _channel=HIDDEN;



            this.state.type = _type;
            this.state.channel = _channel;
        }
        finally {
        }
    },
    // $ANTLR end "WS",

    // $ANTLR start A
    mA: function()  {
        try {
            // /Library/WebServer/Documents/calc/Formula.g:439:11: ( ( 'a' | 'A' ) )
            // /Library/WebServer/Documents/calc/Formula.g:439:12: ( 'a' | 'A' )
            if ( this.input.LA(1)=='A'||this.input.LA(1)=='a' ) {
                this.input.consume();

            }
            else {
                var mse = new org.antlr.runtime.MismatchedSetException(null,this.input);
                this.recover(mse);
                throw mse;}




        }
        finally {
        }
    },
    // $ANTLR end "A",

    // $ANTLR start B
    mB: function()  {
        try {
            // /Library/WebServer/Documents/calc/Formula.g:440:11: ( ( 'b' | 'B' ) )
            // /Library/WebServer/Documents/calc/Formula.g:440:12: ( 'b' | 'B' )
            if ( this.input.LA(1)=='B'||this.input.LA(1)=='b' ) {
                this.input.consume();

            }
            else {
                var mse = new org.antlr.runtime.MismatchedSetException(null,this.input);
                this.recover(mse);
                throw mse;}




        }
        finally {
        }
    },
    // $ANTLR end "B",

    // $ANTLR start C
    mC: function()  {
        try {
            // /Library/WebServer/Documents/calc/Formula.g:441:11: ( ( 'c' | 'C' ) )
            // /Library/WebServer/Documents/calc/Formula.g:441:12: ( 'c' | 'C' )
            if ( this.input.LA(1)=='C'||this.input.LA(1)=='c' ) {
                this.input.consume();

            }
            else {
                var mse = new org.antlr.runtime.MismatchedSetException(null,this.input);
                this.recover(mse);
                throw mse;}




        }
        finally {
        }
    },
    // $ANTLR end "C",

    // $ANTLR start D
    mD: function()  {
        try {
            // /Library/WebServer/Documents/calc/Formula.g:442:11: ( ( 'd' | 'D' ) )
            // /Library/WebServer/Documents/calc/Formula.g:442:12: ( 'd' | 'D' )
            if ( this.input.LA(1)=='D'||this.input.LA(1)=='d' ) {
                this.input.consume();

            }
            else {
                var mse = new org.antlr.runtime.MismatchedSetException(null,this.input);
                this.recover(mse);
                throw mse;}




        }
        finally {
        }
    },
    // $ANTLR end "D",

    // $ANTLR start E
    mE: function()  {
        try {
            // /Library/WebServer/Documents/calc/Formula.g:443:11: ( ( 'e' | 'E' ) )
            // /Library/WebServer/Documents/calc/Formula.g:443:12: ( 'e' | 'E' )
            if ( this.input.LA(1)=='E'||this.input.LA(1)=='e' ) {
                this.input.consume();

            }
            else {
                var mse = new org.antlr.runtime.MismatchedSetException(null,this.input);
                this.recover(mse);
                throw mse;}




        }
        finally {
        }
    },
    // $ANTLR end "E",

    // $ANTLR start F
    mF: function()  {
        try {
            // /Library/WebServer/Documents/calc/Formula.g:444:11: ( ( 'f' | 'F' ) )
            // /Library/WebServer/Documents/calc/Formula.g:444:12: ( 'f' | 'F' )
            if ( this.input.LA(1)=='F'||this.input.LA(1)=='f' ) {
                this.input.consume();

            }
            else {
                var mse = new org.antlr.runtime.MismatchedSetException(null,this.input);
                this.recover(mse);
                throw mse;}




        }
        finally {
        }
    },
    // $ANTLR end "F",

    // $ANTLR start G
    mG: function()  {
        try {
            // /Library/WebServer/Documents/calc/Formula.g:445:11: ( ( 'g' | 'G' ) )
            // /Library/WebServer/Documents/calc/Formula.g:445:12: ( 'g' | 'G' )
            if ( this.input.LA(1)=='G'||this.input.LA(1)=='g' ) {
                this.input.consume();

            }
            else {
                var mse = new org.antlr.runtime.MismatchedSetException(null,this.input);
                this.recover(mse);
                throw mse;}




        }
        finally {
        }
    },
    // $ANTLR end "G",

    // $ANTLR start H
    mH: function()  {
        try {
            // /Library/WebServer/Documents/calc/Formula.g:446:11: ( ( 'h' | 'H' ) )
            // /Library/WebServer/Documents/calc/Formula.g:446:12: ( 'h' | 'H' )
            if ( this.input.LA(1)=='H'||this.input.LA(1)=='h' ) {
                this.input.consume();

            }
            else {
                var mse = new org.antlr.runtime.MismatchedSetException(null,this.input);
                this.recover(mse);
                throw mse;}




        }
        finally {
        }
    },
    // $ANTLR end "H",

    // $ANTLR start I
    mI: function()  {
        try {
            // /Library/WebServer/Documents/calc/Formula.g:447:11: ( ( 'i' | 'I' ) )
            // /Library/WebServer/Documents/calc/Formula.g:447:12: ( 'i' | 'I' )
            if ( this.input.LA(1)=='I'||this.input.LA(1)=='i' ) {
                this.input.consume();

            }
            else {
                var mse = new org.antlr.runtime.MismatchedSetException(null,this.input);
                this.recover(mse);
                throw mse;}




        }
        finally {
        }
    },
    // $ANTLR end "I",

    // $ANTLR start J
    mJ: function()  {
        try {
            // /Library/WebServer/Documents/calc/Formula.g:448:11: ( ( 'j' | 'J' ) )
            // /Library/WebServer/Documents/calc/Formula.g:448:12: ( 'j' | 'J' )
            if ( this.input.LA(1)=='J'||this.input.LA(1)=='j' ) {
                this.input.consume();

            }
            else {
                var mse = new org.antlr.runtime.MismatchedSetException(null,this.input);
                this.recover(mse);
                throw mse;}




        }
        finally {
        }
    },
    // $ANTLR end "J",

    // $ANTLR start K
    mK: function()  {
        try {
            // /Library/WebServer/Documents/calc/Formula.g:449:11: ( ( 'k' | 'K' ) )
            // /Library/WebServer/Documents/calc/Formula.g:449:12: ( 'k' | 'K' )
            if ( this.input.LA(1)=='K'||this.input.LA(1)=='k' ) {
                this.input.consume();

            }
            else {
                var mse = new org.antlr.runtime.MismatchedSetException(null,this.input);
                this.recover(mse);
                throw mse;}




        }
        finally {
        }
    },
    // $ANTLR end "K",

    // $ANTLR start L
    mL: function()  {
        try {
            // /Library/WebServer/Documents/calc/Formula.g:450:11: ( ( 'l' | 'L' ) )
            // /Library/WebServer/Documents/calc/Formula.g:450:12: ( 'l' | 'L' )
            if ( this.input.LA(1)=='L'||this.input.LA(1)=='l' ) {
                this.input.consume();

            }
            else {
                var mse = new org.antlr.runtime.MismatchedSetException(null,this.input);
                this.recover(mse);
                throw mse;}




        }
        finally {
        }
    },
    // $ANTLR end "L",

    // $ANTLR start M
    mM: function()  {
        try {
            // /Library/WebServer/Documents/calc/Formula.g:451:11: ( ( 'm' | 'M' ) )
            // /Library/WebServer/Documents/calc/Formula.g:451:12: ( 'm' | 'M' )
            if ( this.input.LA(1)=='M'||this.input.LA(1)=='m' ) {
                this.input.consume();

            }
            else {
                var mse = new org.antlr.runtime.MismatchedSetException(null,this.input);
                this.recover(mse);
                throw mse;}




        }
        finally {
        }
    },
    // $ANTLR end "M",

    // $ANTLR start N
    mN: function()  {
        try {
            // /Library/WebServer/Documents/calc/Formula.g:452:11: ( ( 'n' | 'N' ) )
            // /Library/WebServer/Documents/calc/Formula.g:452:12: ( 'n' | 'N' )
            if ( this.input.LA(1)=='N'||this.input.LA(1)=='n' ) {
                this.input.consume();

            }
            else {
                var mse = new org.antlr.runtime.MismatchedSetException(null,this.input);
                this.recover(mse);
                throw mse;}




        }
        finally {
        }
    },
    // $ANTLR end "N",

    // $ANTLR start O
    mO: function()  {
        try {
            // /Library/WebServer/Documents/calc/Formula.g:453:11: ( ( 'o' | 'O' ) )
            // /Library/WebServer/Documents/calc/Formula.g:453:12: ( 'o' | 'O' )
            if ( this.input.LA(1)=='O'||this.input.LA(1)=='o' ) {
                this.input.consume();

            }
            else {
                var mse = new org.antlr.runtime.MismatchedSetException(null,this.input);
                this.recover(mse);
                throw mse;}




        }
        finally {
        }
    },
    // $ANTLR end "O",

    // $ANTLR start P
    mP: function()  {
        try {
            // /Library/WebServer/Documents/calc/Formula.g:454:11: ( ( 'p' | 'P' ) )
            // /Library/WebServer/Documents/calc/Formula.g:454:12: ( 'p' | 'P' )
            if ( this.input.LA(1)=='P'||this.input.LA(1)=='p' ) {
                this.input.consume();

            }
            else {
                var mse = new org.antlr.runtime.MismatchedSetException(null,this.input);
                this.recover(mse);
                throw mse;}




        }
        finally {
        }
    },
    // $ANTLR end "P",

    // $ANTLR start Q
    mQ: function()  {
        try {
            // /Library/WebServer/Documents/calc/Formula.g:455:11: ( ( 'q' | 'Q' ) )
            // /Library/WebServer/Documents/calc/Formula.g:455:12: ( 'q' | 'Q' )
            if ( this.input.LA(1)=='Q'||this.input.LA(1)=='q' ) {
                this.input.consume();

            }
            else {
                var mse = new org.antlr.runtime.MismatchedSetException(null,this.input);
                this.recover(mse);
                throw mse;}




        }
        finally {
        }
    },
    // $ANTLR end "Q",

    // $ANTLR start R
    mR: function()  {
        try {
            // /Library/WebServer/Documents/calc/Formula.g:456:11: ( ( 'r' | 'R' ) )
            // /Library/WebServer/Documents/calc/Formula.g:456:12: ( 'r' | 'R' )
            if ( this.input.LA(1)=='R'||this.input.LA(1)=='r' ) {
                this.input.consume();

            }
            else {
                var mse = new org.antlr.runtime.MismatchedSetException(null,this.input);
                this.recover(mse);
                throw mse;}




        }
        finally {
        }
    },
    // $ANTLR end "R",

    // $ANTLR start S
    mS: function()  {
        try {
            // /Library/WebServer/Documents/calc/Formula.g:457:11: ( ( 's' | 'S' ) )
            // /Library/WebServer/Documents/calc/Formula.g:457:12: ( 's' | 'S' )
            if ( this.input.LA(1)=='S'||this.input.LA(1)=='s' ) {
                this.input.consume();

            }
            else {
                var mse = new org.antlr.runtime.MismatchedSetException(null,this.input);
                this.recover(mse);
                throw mse;}




        }
        finally {
        }
    },
    // $ANTLR end "S",

    // $ANTLR start T
    mT: function()  {
        try {
            // /Library/WebServer/Documents/calc/Formula.g:458:11: ( ( 't' | 'T' ) )
            // /Library/WebServer/Documents/calc/Formula.g:458:12: ( 't' | 'T' )
            if ( this.input.LA(1)=='T'||this.input.LA(1)=='t' ) {
                this.input.consume();

            }
            else {
                var mse = new org.antlr.runtime.MismatchedSetException(null,this.input);
                this.recover(mse);
                throw mse;}




        }
        finally {
        }
    },
    // $ANTLR end "T",

    // $ANTLR start U
    mU: function()  {
        try {
            // /Library/WebServer/Documents/calc/Formula.g:459:11: ( ( 'u' | 'U' ) )
            // /Library/WebServer/Documents/calc/Formula.g:459:12: ( 'u' | 'U' )
            if ( this.input.LA(1)=='U'||this.input.LA(1)=='u' ) {
                this.input.consume();

            }
            else {
                var mse = new org.antlr.runtime.MismatchedSetException(null,this.input);
                this.recover(mse);
                throw mse;}




        }
        finally {
        }
    },
    // $ANTLR end "U",

    // $ANTLR start V
    mV: function()  {
        try {
            // /Library/WebServer/Documents/calc/Formula.g:460:11: ( ( 'v' | 'V' ) )
            // /Library/WebServer/Documents/calc/Formula.g:460:12: ( 'v' | 'V' )
            if ( this.input.LA(1)=='V'||this.input.LA(1)=='v' ) {
                this.input.consume();

            }
            else {
                var mse = new org.antlr.runtime.MismatchedSetException(null,this.input);
                this.recover(mse);
                throw mse;}




        }
        finally {
        }
    },
    // $ANTLR end "V",

    // $ANTLR start W
    mW: function()  {
        try {
            // /Library/WebServer/Documents/calc/Formula.g:461:11: ( ( 'w' | 'W' ) )
            // /Library/WebServer/Documents/calc/Formula.g:461:12: ( 'w' | 'W' )
            if ( this.input.LA(1)=='W'||this.input.LA(1)=='w' ) {
                this.input.consume();

            }
            else {
                var mse = new org.antlr.runtime.MismatchedSetException(null,this.input);
                this.recover(mse);
                throw mse;}




        }
        finally {
        }
    },
    // $ANTLR end "W",

    // $ANTLR start X
    mX: function()  {
        try {
            // /Library/WebServer/Documents/calc/Formula.g:462:11: ( ( 'x' | 'X' ) )
            // /Library/WebServer/Documents/calc/Formula.g:462:12: ( 'x' | 'X' )
            if ( this.input.LA(1)=='X'||this.input.LA(1)=='x' ) {
                this.input.consume();

            }
            else {
                var mse = new org.antlr.runtime.MismatchedSetException(null,this.input);
                this.recover(mse);
                throw mse;}




        }
        finally {
        }
    },
    // $ANTLR end "X",

    // $ANTLR start Y
    mY: function()  {
        try {
            // /Library/WebServer/Documents/calc/Formula.g:463:11: ( ( 'y' | 'Y' ) )
            // /Library/WebServer/Documents/calc/Formula.g:463:12: ( 'y' | 'Y' )
            if ( this.input.LA(1)=='Y'||this.input.LA(1)=='y' ) {
                this.input.consume();

            }
            else {
                var mse = new org.antlr.runtime.MismatchedSetException(null,this.input);
                this.recover(mse);
                throw mse;}




        }
        finally {
        }
    },
    // $ANTLR end "Y",

    // $ANTLR start Z
    mZ: function()  {
        try {
            // /Library/WebServer/Documents/calc/Formula.g:464:11: ( ( 'z' | 'Z' ) )
            // /Library/WebServer/Documents/calc/Formula.g:464:12: ( 'z' | 'Z' )
            if ( this.input.LA(1)=='Z'||this.input.LA(1)=='z' ) {
                this.input.consume();

            }
            else {
                var mse = new org.antlr.runtime.MismatchedSetException(null,this.input);
                this.recover(mse);
                throw mse;}




        }
        finally {
        }
    },
    // $ANTLR end "Z",

    // $ANTLR start COMMA
    mCOMMA: function()  {
        try {
            var _type = this.COMMA;
            var _channel = org.antlr.runtime.BaseRecognizer.DEFAULT_TOKEN_CHANNEL;
            // /Library/WebServer/Documents/calc/Formula.g:471:1: ( ',' )
            // /Library/WebServer/Documents/calc/Formula.g:471:3: ','
            this.match(','); 



            this.state.type = _type;
            this.state.channel = _channel;
        }
        finally {
        }
    },
    // $ANTLR end "COMMA",

    // $ANTLR start STRING
    mSTRING: function()  {
        try {
            var _type = this.STRING;
            var _channel = org.antlr.runtime.BaseRecognizer.DEFAULT_TOKEN_CHANNEL;
            // /Library/WebServer/Documents/calc/Formula.g:474:8: ( '\\'' ( . )* '\\'' | '\"' ( '\\\\\\\"' | ~ '\\\"' )* '\"' )
            var alt29=2;
            var LA29_0 = this.input.LA(1);

            if ( (LA29_0=='\'') ) {
                alt29=1;
            }
            else if ( (LA29_0=='\"') ) {
                alt29=2;
            }
            else {
                var nvae =
                    new org.antlr.runtime.NoViableAltException("", 29, 0, this.input);

                throw nvae;
            }
            switch (alt29) {
                case 1 :
                    // /Library/WebServer/Documents/calc/Formula.g:475:1: '\\'' ( . )* '\\''
                    this.match('\''); 
                    // /Library/WebServer/Documents/calc/Formula.g:475:6: ( . )*
                    loop27:
                    do {
                        var alt27=2;
                        var LA27_0 = this.input.LA(1);

                        if ( (LA27_0=='\'') ) {
                            alt27=2;
                        }
                        else if ( ((LA27_0>='\u0000' && LA27_0<='&')||(LA27_0>='(' && LA27_0<='\uFFFF')) ) {
                            alt27=1;
                        }


                        switch (alt27) {
                        case 1 :
                            // /Library/WebServer/Documents/calc/Formula.g:475:6: .
                            this.matchAny(); 


                            break;

                        default :
                            break loop27;
                        }
                    } while (true);

                    this.match('\''); 


                    break;
                case 2 :
                    // /Library/WebServer/Documents/calc/Formula.g:476:6: '\"' ( '\\\\\\\"' | ~ '\\\"' )* '\"'
                    this.match('\"'); 
                    // /Library/WebServer/Documents/calc/Formula.g:476:10: ( '\\\\\\\"' | ~ '\\\"' )*
                    loop28:
                    do {
                        var alt28=3;
                        var LA28_0 = this.input.LA(1);

                        if ( (LA28_0=='\\') ) {
                            var LA28_2 = this.input.LA(2);

                            if ( (LA28_2=='\"') ) {
                                var LA28_4 = this.input.LA(3);

                                if ( ((LA28_4>='\u0000' && LA28_4<='\uFFFF')) ) {
                                    alt28=1;
                                }

                                else {
                                    alt28=2;
                                }

                            }
                            else if ( ((LA28_2>='\u0000' && LA28_2<='!')||(LA28_2>='#' && LA28_2<='\uFFFF')) ) {
                                alt28=2;
                            }


                        }
                        else if ( ((LA28_0>='\u0000' && LA28_0<='!')||(LA28_0>='#' && LA28_0<='[')||(LA28_0>=']' && LA28_0<='\uFFFF')) ) {
                            alt28=2;
                        }


                        switch (alt28) {
                        case 1 :
                            // /Library/WebServer/Documents/calc/Formula.g:476:11: '\\\\\\\"'
                            this.match("\\\""); 



                            break;
                        case 2 :
                            // /Library/WebServer/Documents/calc/Formula.g:476:18: ~ '\\\"'
                            if ( (this.input.LA(1)>='\u0000' && this.input.LA(1)<='!')||(this.input.LA(1)>='#' && this.input.LA(1)<='\uFFFF') ) {
                                this.input.consume();

                            }
                            else {
                                var mse = new org.antlr.runtime.MismatchedSetException(null,this.input);
                                this.recover(mse);
                                throw mse;}



                            break;

                        default :
                            break loop28;
                        }
                    } while (true);

                    this.match('\"'); 


                    break;

            }
            this.state.type = _type;
            this.state.channel = _channel;
        }
        finally {
        }
    },
    // $ANTLR end "STRING",

    mTokens: function() {
        // /Library/WebServer/Documents/calc/Formula.g:1:8: ( T__113 | T__114 | T__115 | T__116 | NEWLINE | WHILESTATEMENT | FORSTATEMENT | FROMSTATEMENT | INSTATEMENT | TOSTATEMENT | BYSTATEMENT | LOOPSTATEMENT | IFSTATEMENT | THENSTATEMENT | ELSESTATEMENT | FUNCTIONSTATEMENT | ENDBLOCK | RETURNSTATEMENT | NEWSTATEMENT | TRYSTATEMENT | CATCHSTATEMENT | THROWSTATEMENT | OR | XOR | AND | EQUALS | NOTEQUALS | LT | LTEQ | GT | GTEQ | PLUS | MINUS | MULT | DIV | MOD | POW | NOT | LARR | RARR | LCURL | RCURL | INTEGER | FLOAT | TRUE | FALSE | PER | SQUARED | CUBED | IDENT | PRIMITIVE | LBRACKET | RBRACKET | COMMENT | LINE_COMMENT | COLON | WS | COMMA | STRING )
        var alt30=59;
        alt30 = this.dfa30.predict(this.input);
        switch (alt30) {
            case 1 :
                // /Library/WebServer/Documents/calc/Formula.g:1:10: T__113
                this.mT__113(); 


                break;
            case 2 :
                // /Library/WebServer/Documents/calc/Formula.g:1:17: T__114
                this.mT__114(); 


                break;
            case 3 :
                // /Library/WebServer/Documents/calc/Formula.g:1:24: T__115
                this.mT__115(); 


                break;
            case 4 :
                // /Library/WebServer/Documents/calc/Formula.g:1:31: T__116
                this.mT__116(); 


                break;
            case 5 :
                // /Library/WebServer/Documents/calc/Formula.g:1:38: NEWLINE
                this.mNEWLINE(); 


                break;
            case 6 :
                // /Library/WebServer/Documents/calc/Formula.g:1:46: WHILESTATEMENT
                this.mWHILESTATEMENT(); 


                break;
            case 7 :
                // /Library/WebServer/Documents/calc/Formula.g:1:61: FORSTATEMENT
                this.mFORSTATEMENT(); 


                break;
            case 8 :
                // /Library/WebServer/Documents/calc/Formula.g:1:74: FROMSTATEMENT
                this.mFROMSTATEMENT(); 


                break;
            case 9 :
                // /Library/WebServer/Documents/calc/Formula.g:1:88: INSTATEMENT
                this.mINSTATEMENT(); 


                break;
            case 10 :
                // /Library/WebServer/Documents/calc/Formula.g:1:100: TOSTATEMENT
                this.mTOSTATEMENT(); 


                break;
            case 11 :
                // /Library/WebServer/Documents/calc/Formula.g:1:112: BYSTATEMENT
                this.mBYSTATEMENT(); 


                break;
            case 12 :
                // /Library/WebServer/Documents/calc/Formula.g:1:124: LOOPSTATEMENT
                this.mLOOPSTATEMENT(); 


                break;
            case 13 :
                // /Library/WebServer/Documents/calc/Formula.g:1:138: IFSTATEMENT
                this.mIFSTATEMENT(); 


                break;
            case 14 :
                // /Library/WebServer/Documents/calc/Formula.g:1:150: THENSTATEMENT
                this.mTHENSTATEMENT(); 


                break;
            case 15 :
                // /Library/WebServer/Documents/calc/Formula.g:1:164: ELSESTATEMENT
                this.mELSESTATEMENT(); 


                break;
            case 16 :
                // /Library/WebServer/Documents/calc/Formula.g:1:178: FUNCTIONSTATEMENT
                this.mFUNCTIONSTATEMENT(); 


                break;
            case 17 :
                // /Library/WebServer/Documents/calc/Formula.g:1:196: ENDBLOCK
                this.mENDBLOCK(); 


                break;
            case 18 :
                // /Library/WebServer/Documents/calc/Formula.g:1:205: RETURNSTATEMENT
                this.mRETURNSTATEMENT(); 


                break;
            case 19 :
                // /Library/WebServer/Documents/calc/Formula.g:1:221: NEWSTATEMENT
                this.mNEWSTATEMENT(); 


                break;
            case 20 :
                // /Library/WebServer/Documents/calc/Formula.g:1:234: TRYSTATEMENT
                this.mTRYSTATEMENT(); 


                break;
            case 21 :
                // /Library/WebServer/Documents/calc/Formula.g:1:247: CATCHSTATEMENT
                this.mCATCHSTATEMENT(); 


                break;
            case 22 :
                // /Library/WebServer/Documents/calc/Formula.g:1:262: THROWSTATEMENT
                this.mTHROWSTATEMENT(); 


                break;
            case 23 :
                // /Library/WebServer/Documents/calc/Formula.g:1:277: OR
                this.mOR(); 


                break;
            case 24 :
                // /Library/WebServer/Documents/calc/Formula.g:1:280: XOR
                this.mXOR(); 


                break;
            case 25 :
                // /Library/WebServer/Documents/calc/Formula.g:1:284: AND
                this.mAND(); 


                break;
            case 26 :
                // /Library/WebServer/Documents/calc/Formula.g:1:288: EQUALS
                this.mEQUALS(); 


                break;
            case 27 :
                // /Library/WebServer/Documents/calc/Formula.g:1:295: NOTEQUALS
                this.mNOTEQUALS(); 


                break;
            case 28 :
                // /Library/WebServer/Documents/calc/Formula.g:1:305: LT
                this.mLT(); 


                break;
            case 29 :
                // /Library/WebServer/Documents/calc/Formula.g:1:308: LTEQ
                this.mLTEQ(); 


                break;
            case 30 :
                // /Library/WebServer/Documents/calc/Formula.g:1:313: GT
                this.mGT(); 


                break;
            case 31 :
                // /Library/WebServer/Documents/calc/Formula.g:1:316: GTEQ
                this.mGTEQ(); 


                break;
            case 32 :
                // /Library/WebServer/Documents/calc/Formula.g:1:321: PLUS
                this.mPLUS(); 


                break;
            case 33 :
                // /Library/WebServer/Documents/calc/Formula.g:1:326: MINUS
                this.mMINUS(); 


                break;
            case 34 :
                // /Library/WebServer/Documents/calc/Formula.g:1:332: MULT
                this.mMULT(); 


                break;
            case 35 :
                // /Library/WebServer/Documents/calc/Formula.g:1:337: DIV
                this.mDIV(); 


                break;
            case 36 :
                // /Library/WebServer/Documents/calc/Formula.g:1:341: MOD
                this.mMOD(); 


                break;
            case 37 :
                // /Library/WebServer/Documents/calc/Formula.g:1:345: POW
                this.mPOW(); 


                break;
            case 38 :
                // /Library/WebServer/Documents/calc/Formula.g:1:349: NOT
                this.mNOT(); 


                break;
            case 39 :
                // /Library/WebServer/Documents/calc/Formula.g:1:353: LARR
                this.mLARR(); 


                break;
            case 40 :
                // /Library/WebServer/Documents/calc/Formula.g:1:358: RARR
                this.mRARR(); 


                break;
            case 41 :
                // /Library/WebServer/Documents/calc/Formula.g:1:363: LCURL
                this.mLCURL(); 


                break;
            case 42 :
                // /Library/WebServer/Documents/calc/Formula.g:1:369: RCURL
                this.mRCURL(); 


                break;
            case 43 :
                // /Library/WebServer/Documents/calc/Formula.g:1:375: INTEGER
                this.mINTEGER(); 


                break;
            case 44 :
                // /Library/WebServer/Documents/calc/Formula.g:1:383: FLOAT
                this.mFLOAT(); 


                break;
            case 45 :
                // /Library/WebServer/Documents/calc/Formula.g:1:389: TRUE
                this.mTRUE(); 


                break;
            case 46 :
                // /Library/WebServer/Documents/calc/Formula.g:1:394: FALSE
                this.mFALSE(); 


                break;
            case 47 :
                // /Library/WebServer/Documents/calc/Formula.g:1:400: PER
                this.mPER(); 


                break;
            case 48 :
                // /Library/WebServer/Documents/calc/Formula.g:1:404: SQUARED
                this.mSQUARED(); 


                break;
            case 49 :
                // /Library/WebServer/Documents/calc/Formula.g:1:412: CUBED
                this.mCUBED(); 


                break;
            case 50 :
                // /Library/WebServer/Documents/calc/Formula.g:1:418: IDENT
                this.mIDENT(); 


                break;
            case 51 :
                // /Library/WebServer/Documents/calc/Formula.g:1:424: PRIMITIVE
                this.mPRIMITIVE(); 


                break;
            case 52 :
                // /Library/WebServer/Documents/calc/Formula.g:1:434: LBRACKET
                this.mLBRACKET(); 


                break;
            case 53 :
                // /Library/WebServer/Documents/calc/Formula.g:1:443: RBRACKET
                this.mRBRACKET(); 


                break;
            case 54 :
                // /Library/WebServer/Documents/calc/Formula.g:1:452: COMMENT
                this.mCOMMENT(); 


                break;
            case 55 :
                // /Library/WebServer/Documents/calc/Formula.g:1:460: LINE_COMMENT
                this.mLINE_COMMENT(); 


                break;
            case 56 :
                // /Library/WebServer/Documents/calc/Formula.g:1:473: COLON
                this.mCOLON(); 


                break;
            case 57 :
                // /Library/WebServer/Documents/calc/Formula.g:1:479: WS
                this.mWS(); 


                break;
            case 58 :
                // /Library/WebServer/Documents/calc/Formula.g:1:482: COMMA
                this.mCOMMA(); 


                break;
            case 59 :
                // /Library/WebServer/Documents/calc/Formula.g:1:488: STRING
                this.mSTRING(); 


                break;

        }

    }

}, true); // important to pass true to overwrite default implementations

org.antlr.lang.augmentObject(FormulaLexer, {
    DFA30_eotS:
        "\u0003\uffff\u0001\u0031\u0001\u0032\u0001\uffff\u000a\u0026\u0001"+
    "\uffff\u0002\u0026\u0001\uffff\u0001\u0026\u0001\uffff\u0001\u004a\u0001"+
    "\u004c\u0003\uffff\u0001\u004e\u0001\uffff\u0001\u0026\u0005\uffff\u0001"+
    "\u0050\u0002\u0026\u0001\uffff\u0001\u0053\u000c\uffff\u0005\u0026\u0001"+
    "\u005a\u0001\u005b\u0001\u005c\u0002\u0026\u0001\u0061\u0008\u0026\u0001"+
    "\u0010\u0002\u0026\u0005\uffff\u0001\u0026\u0001\uffff\u0002\u0026\u0002"+
    "\uffff\u0001\u0026\u0001\u0070\u0003\u0026\u0003\uffff\u0002\u0026\u0001"+
    "\u0076\u0001\u0026\u0001\uffff\u0002\u0026\u0001\u007a\u0001\u0026\u0001"+
    "\u007c\u0001\u004a\u0002\u0026\u0001\u007f\u0001\u0013\u0001\u001c\u0001"+
    "\u0080\u0002\u0026\u0001\uffff\u0001\u0083\u0002\u0026\u0001\u0086\u0001"+
    "\u0026\u0001\uffff\u0001\u0088\u0001\u0089\u0001\u008a\u0001\uffff\u0001"+
    "\u0026\u0001\uffff\u0002\u0026\u0002\uffff\u0001\u0026\u0001\u008f\u0001"+
    "\uffff\u0001\u0026\u0001\u0091\u0001\uffff\u0001\u0092\u0003\uffff\u0001"+
    "\u0026\u0001\u0094\u0001\u0095\u0001\u0026\u0001\uffff\u0001\u0026\u0002"+
    "\uffff\u0001\u0098\u0002\uffff\u0002\u0026\u0001\uffff\u0001\u009b\u0001"+
    "\u009c\u0002\uffff",
    DFA30_eofS:
        "\u009d\uffff",
    DFA30_minS:
        "\u0001\u0009\u0002\uffff\u0001\u002d\u0001\u0030\u0001\uffff\u0001"+
    "\u0048\u0001\u0041\u0001\u0046\u0001\u0048\u0001\u0059\u0001\u004f\u0001"+
    "\u004c\u0002\u0045\u0001\u0041\u0001\uffff\u0001\u0052\u0001\u004f\u0001"+
    "\uffff\u0001\u004e\u0001\uffff\u0002\u003d\u0003\uffff\u0001\u002a\u0001"+
    "\uffff\u0001\u004f\u0005\uffff\u0001\u002e\u0001\u0045\u0001\u0051\u0001"+
    "\uffff\u0001\u0000\u000c\uffff\u0001\u0049\u0001\u0052\u0001\u004f\u0001"+
    "\u004e\u0001\u004c\u0003\u0030\u0001\u0045\u0001\u0055\u0001\u0030\u0001"+
    "\u004f\u0001\u0053\u0001\u0044\u0001\u0054\u0001\u0057\u0002\u0054\u0001"+
    "\u0042\u0001\u0030\u0001\u0052\u0001\u0044\u0005\uffff\u0001\u0044\u0001"+
    "\uffff\u0001\u0052\u0001\u0055\u0002\uffff\u0001\u004c\u0001\u0030\u0001"+
    "\u004d\u0001\u0043\u0001\u0053\u0003\uffff\u0001\u004e\u0001\u004f\u0001"+
    "\u0030\u0001\u0045\u0001\uffff\u0001\u0050\u0001\u0045\u0001\u0030\u0001"+
    "\u0055\u0002\u0030\u0001\u0043\u0001\u0045\u0004\u0030\u0001\u0041\u0001"+
    "\u0045\u0001\uffff\u0001\u0030\u0001\u0054\u0001\u0045\u0001\u0030\u0001"+
    "\u0057\u0001\uffff\u0003\u0030\u0001\uffff\u0001\u0052\u0001\uffff\u0001"+
    "\u0048\u0001\u0044\u0002\uffff\u0001\u0052\u0001\u0030\u0001\uffff\u0001"+
    "\u0049\u0001\u0030\u0001\uffff\u0001\u0030\u0003\uffff\u0001\u004e\u0002"+
    "\u0030\u0001\u0045\u0001\uffff\u0001\u004f\u0002\uffff\u0001\u0030\u0002"+
    "\uffff\u0001\u0044\u0001\u004e\u0001\uffff\u0002\u0030\u0002\uffff",
    DFA30_maxS:
        "\u0001\u00bb\u0002\uffff\u0001\u003e\u0001\u0039\u0001\uffff\u0001"+
    "\u0068\u0001\u0075\u0001\u006e\u0001\u0072\u0001\u0079\u0001\u006f\u0001"+
    "\u006e\u0001\u0065\u0001\u006f\u0001\u0075\u0001\uffff\u0001\u0072\u0001"+
    "\u006f\u0001\uffff\u0001\u006e\u0001\uffff\u0001\u003d\u0001\u003e\u0003"+
    "\uffff\u0001\u002f\u0001\uffff\u0001\u006f\u0005\uffff\u0001\u0039\u0001"+
    "\u0065\u0001\u0071\u0001\uffff\u0001\uffff\u000c\uffff\u0001\u0069\u0001"+
    "\u0072\u0001\u006f\u0001\u006e\u0001\u006c\u0003\u007a\u0001\u0072\u0001"+
    "\u0079\u0001\u007a\u0001\u006f\u0001\u0073\u0001\u0064\u0001\u0074\u0001"+
    "\u0077\u0002\u0074\u0001\u0062\u0001\u007a\u0001\u0072\u0001\u0064\u0005"+
    "\uffff\u0001\u0064\u0001\uffff\u0001\u0072\u0001\u0075\u0002\uffff\u0001"+
    "\u006c\u0001\u007a\u0001\u006d\u0001\u0063\u0001\u0073\u0003\uffff\u0001"+
    "\u006e\u0001\u006f\u0001\u007a\u0001\u0065\u0001\uffff\u0001\u0070\u0001"+
    "\u0065\u0001\u007a\u0001\u0075\u0002\u007a\u0001\u0063\u0001\u0065\u0004"+
    "\u007a\u0001\u0061\u0001\u0065\u0001\uffff\u0001\u007a\u0001\u0074\u0001"+
    "\u0065\u0001\u007a\u0001\u0077\u0001\uffff\u0003\u007a\u0001\uffff\u0001"+
    "\u0072\u0001\uffff\u0001\u0068\u0001\u0064\u0002\uffff\u0001\u0072\u0001"+
    "\u007a\u0001\uffff\u0001\u0069\u0001\u007a\u0001\uffff\u0001\u007a\u0003"+
    "\uffff\u0001\u006e\u0002\u007a\u0001\u0065\u0001\uffff\u0001\u006f\u0002"+
    "\uffff\u0001\u007a\u0002\uffff\u0001\u0064\u0001\u006e\u0001\uffff\u0002"+
    "\u007a\u0002\uffff",
    DFA30_acceptS:
        "\u0001\uffff\u0001\u0001\u0001\u0002\u0002\uffff\u0001\u0005\u000a"+
    "\uffff\u0001\u0017\u0002\uffff\u0001\u0019\u0001\uffff\u0001\u001a\u0002"+
    "\uffff\u0001\u0020\u0001\u0021\u0001\u0022\u0001\uffff\u0001\u0024\u0001"+
    "\uffff\u0001\u0025\u0001\u0027\u0001\u0028\u0001\u0029\u0001\u002a\u0003"+
    "\uffff\u0001\u0032\u0001\uffff\u0001\u0035\u0001\u0037\u0001\u0038\u0001"+
    "\u0039\u0001\u003a\u0001\u003b\u0001\u0003\u0001\u001b\u0001\u001d\u0001"+
    "\u001c\u0001\u0004\u0001\u002c\u0016\uffff\u0001\u0026\u0001\u001f\u0001"+
    "\u001e\u0001\u0036\u0001\u0023\u0001\uffff\u0001\u002b\u0002\uffff\u0001"+
    "\u0034\u0001\u0033\u0005\uffff\u0001\u0009\u0001\u000d\u0001\u000a\u0004"+
    "\uffff\u0001\u000b\u000e\uffff\u0001\u0007\u0005\uffff\u0001\u0014\u0003"+
    "\uffff\u0001\u0011\u0001\uffff\u0001\u0013\u0002\uffff\u0001\u0018\u0001"+
    "\u002f\u0002\uffff\u0001\u0008\u0002\uffff\u0001\u000e\u0001\uffff\u0001"+
    "\u002d\u0001\u000c\u0001\u000f\u0004\uffff\u0001\u0006\u0001\uffff\u0001"+
    "\u002e\u0001\u0016\u0001\uffff\u0001\u0015\u0001\u0031\u0002\uffff\u0001"+
    "\u0012\u0002\uffff\u0001\u0030\u0001\u0010",
    DFA30_specialS:
        "\u0027\uffff\u0001\u0000\u0075\uffff}>",
    DFA30_transitionS: [
            "\u0001\u002b\u0001\u0005\u0001\uffff\u0001\u002b\u0001\u0005"+
            "\u0012\uffff\u0001\u002b\u0001\u0016\u0001\u002d\u0001\u0029"+
            "\u0001\uffff\u0001\u001c\u0001\u0013\u0001\u002d\u0001\u0001"+
            "\u0001\u0002\u0001\u001a\u0001\u0018\u0001\u002c\u0001\u0019"+
            "\u0001\u0004\u0001\u001b\u000a\u0023\u0001\u002a\u0001\uffff"+
            "\u0001\u0003\u0001\u0015\u0001\u0017\u0002\uffff\u0001\u0014"+
            "\u0001\u000a\u0001\u000f\u0001\u0026\u0001\u000c\u0001\u0007"+
            "\u0002\u0026\u0001\u0008\u0002\u0026\u0001\u000b\u0001\u001d"+
            "\u0001\u000e\u0001\u0011\u0001\u0024\u0001\u0026\u0001\u000d"+
            "\u0001\u0025\u0001\u0009\u0002\u0026\u0001\u0006\u0001\u0012"+
            "\u0002\u0026\u0001\u0027\u0001\uffff\u0001\u0028\u0001\u001e"+
            "\u0002\uffff\u0001\u0014\u0001\u000a\u0001\u000f\u0001\u0026"+
            "\u0001\u000c\u0001\u0007\u0002\u0026\u0001\u0008\u0002\u0026"+
            "\u0001\u000b\u0001\u001d\u0001\u000e\u0001\u0011\u0001\u0024"+
            "\u0001\u0026\u0001\u000d\u0001\u0025\u0001\u0009\u0002\u0026"+
            "\u0001\u0006\u0001\u0012\u0002\u0026\u0001\u0021\u0001\u0010"+
            "\u0001\u0022\u002d\uffff\u0001\u001f\u000f\uffff\u0001\u0020",
            "",
            "",
            "\u0001\u002e\u000e\uffff\u0001\u001f\u0001\u0030\u0001\u002f",
            "\u000a\u0033",
            "",
            "\u0001\u0034\u001f\uffff\u0001\u0034",
            "\u0001\u0038\u000d\uffff\u0001\u0035\u0002\uffff\u0001\u0036"+
            "\u0002\uffff\u0001\u0037\u000b\uffff\u0001\u0038\u000d\uffff"+
            "\u0001\u0035\u0002\uffff\u0001\u0036\u0002\uffff\u0001\u0037",
            "\u0001\u003a\u0007\uffff\u0001\u0039\u0017\uffff\u0001\u003a"+
            "\u0007\uffff\u0001\u0039",
            "\u0001\u003c\u0006\uffff\u0001\u003b\u0002\uffff\u0001\u003d"+
            "\u0015\uffff\u0001\u003c\u0006\uffff\u0001\u003b\u0002\uffff"+
            "\u0001\u003d",
            "\u0001\u003e\u001f\uffff\u0001\u003e",
            "\u0001\u003f\u001f\uffff\u0001\u003f",
            "\u0001\u0040\u0001\uffff\u0001\u0041\u001d\uffff\u0001\u0040"+
            "\u0001\uffff\u0001\u0041",
            "\u0001\u0042\u001f\uffff\u0001\u0042",
            "\u0001\u0043\u0009\uffff\u0001\u0044\u0015\uffff\u0001\u0043"+
            "\u0009\uffff\u0001\u0044",
            "\u0001\u0045\u0013\uffff\u0001\u0046\u000b\uffff\u0001\u0045"+
            "\u0013\uffff\u0001\u0046",
            "",
            "\u0001\u0047\u001f\uffff\u0001\u0047",
            "\u0001\u0048\u001f\uffff\u0001\u0048",
            "",
            "\u0001\u0049\u001f\uffff\u0001\u0049",
            "",
            "\u0001\u002f",
            "\u0001\u004b\u0001\u0020",
            "",
            "",
            "",
            "\u0001\u004d\u0004\uffff\u0001\u0029",
            "",
            "\u0001\u004f\u001f\uffff\u0001\u004f",
            "",
            "",
            "",
            "",
            "",
            "\u0001\u0033\u0001\uffff\u000a\u0023",
            "\u0001\u0051\u001f\uffff\u0001\u0051",
            "\u0001\u0052\u001f\uffff\u0001\u0052",
            "",
            "\u0000\u0054",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\u0001\u0055\u001f\uffff\u0001\u0055",
            "\u0001\u0056\u001f\uffff\u0001\u0056",
            "\u0001\u0057\u001f\uffff\u0001\u0057",
            "\u0001\u0058\u001f\uffff\u0001\u0058",
            "\u0001\u0059\u001f\uffff\u0001\u0059",
            "\u000a\u0026\u0007\uffff\u001a\u0026\u0004\uffff\u0001\u0026"+
            "\u0001\uffff\u001a\u0026",
            "\u000a\u0026\u0007\uffff\u001a\u0026\u0004\uffff\u0001\u0026"+
            "\u0001\uffff\u001a\u0026",
            "\u000a\u0026\u0007\uffff\u001a\u0026\u0004\uffff\u0001\u0026"+
            "\u0001\uffff\u001a\u0026",
            "\u0001\u005d\u000c\uffff\u0001\u005e\u0012\uffff\u0001\u005d"+
            "\u000c\uffff\u0001\u005e",
            "\u0001\u0060\u0003\uffff\u0001\u005f\u001b\uffff\u0001\u0060"+
            "\u0003\uffff\u0001\u005f",
            "\u000a\u0026\u0007\uffff\u001a\u0026\u0004\uffff\u0001\u0026"+
            "\u0001\uffff\u001a\u0026",
            "\u0001\u0062\u001f\uffff\u0001\u0062",
            "\u0001\u0063\u001f\uffff\u0001\u0063",
            "\u0001\u0064\u001f\uffff\u0001\u0064",
            "\u0001\u0065\u001f\uffff\u0001\u0065",
            "\u0001\u0066\u001f\uffff\u0001\u0066",
            "\u0001\u0067\u001f\uffff\u0001\u0067",
            "\u0001\u0068\u001f\uffff\u0001\u0068",
            "\u0001\u0069\u001f\uffff\u0001\u0069",
            "\u000a\u0026\u0007\uffff\u001a\u0026\u0004\uffff\u0001\u0026"+
            "\u0001\uffff\u001a\u0026",
            "\u0001\u006a\u001f\uffff\u0001\u006a",
            "\u0001\u006b\u001f\uffff\u0001\u006b",
            "",
            "",
            "",
            "",
            "",
            "\u0001\u006c\u001f\uffff\u0001\u006c",
            "",
            "\u0001\u006d\u001f\uffff\u0001\u006d",
            "\u0001\u006e\u001f\uffff\u0001\u006e",
            "",
            "",
            "\u0001\u006f\u001f\uffff\u0001\u006f",
            "\u000a\u0026\u0007\uffff\u001a\u0026\u0004\uffff\u0001\u0026"+
            "\u0001\uffff\u001a\u0026",
            "\u0001\u0071\u001f\uffff\u0001\u0071",
            "\u0001\u0072\u001f\uffff\u0001\u0072",
            "\u0001\u0073\u001f\uffff\u0001\u0073",
            "",
            "",
            "",
            "\u0001\u0074\u001f\uffff\u0001\u0074",
            "\u0001\u0075\u001f\uffff\u0001\u0075",
            "\u000a\u0026\u0007\uffff\u001a\u0026\u0004\uffff\u0001\u0026"+
            "\u0001\uffff\u001a\u0026",
            "\u0001\u0077\u001f\uffff\u0001\u0077",
            "",
            "\u0001\u0078\u001f\uffff\u0001\u0078",
            "\u0001\u0079\u001f\uffff\u0001\u0079",
            "\u000a\u0026\u0007\uffff\u001a\u0026\u0004\uffff\u0001\u0026"+
            "\u0001\uffff\u001a\u0026",
            "\u0001\u007b\u001f\uffff\u0001\u007b",
            "\u000a\u0026\u0007\uffff\u001a\u0026\u0004\uffff\u0001\u0026"+
            "\u0001\uffff\u001a\u0026",
            "\u000a\u0026\u0007\uffff\u001a\u0026\u0004\uffff\u0001\u0026"+
            "\u0001\uffff\u001a\u0026",
            "\u0001\u007d\u001f\uffff\u0001\u007d",
            "\u0001\u007e\u001f\uffff\u0001\u007e",
            "\u000a\u0026\u0007\uffff\u001a\u0026\u0004\uffff\u0001\u0026"+
            "\u0001\uffff\u001a\u0026",
            "\u000a\u0026\u0007\uffff\u001a\u0026\u0004\uffff\u0001\u0026"+
            "\u0001\uffff\u001a\u0026",
            "\u000a\u0026\u0007\uffff\u001a\u0026\u0004\uffff\u0001\u0026"+
            "\u0001\uffff\u001a\u0026",
            "\u000a\u0026\u0007\uffff\u001a\u0026\u0004\uffff\u0001\u0026"+
            "\u0001\uffff\u001a\u0026",
            "\u0001\u0081\u001f\uffff\u0001\u0081",
            "\u0001\u0082\u001f\uffff\u0001\u0082",
            "",
            "\u000a\u0026\u0007\uffff\u001a\u0026\u0004\uffff\u0001\u0026"+
            "\u0001\uffff\u001a\u0026",
            "\u0001\u0084\u001f\uffff\u0001\u0084",
            "\u0001\u0085\u001f\uffff\u0001\u0085",
            "\u000a\u0026\u0007\uffff\u001a\u0026\u0004\uffff\u0001\u0026"+
            "\u0001\uffff\u001a\u0026",
            "\u0001\u0087\u001f\uffff\u0001\u0087",
            "",
            "\u000a\u0026\u0007\uffff\u001a\u0026\u0004\uffff\u0001\u0026"+
            "\u0001\uffff\u001a\u0026",
            "\u000a\u0026\u0007\uffff\u001a\u0026\u0004\uffff\u0001\u0026"+
            "\u0001\uffff\u001a\u0026",
            "\u000a\u0026\u0007\uffff\u001a\u0026\u0004\uffff\u0001\u0026"+
            "\u0001\uffff\u001a\u0026",
            "",
            "\u0001\u008b\u001f\uffff\u0001\u008b",
            "",
            "\u0001\u008c\u001f\uffff\u0001\u008c",
            "\u0001\u008d\u001f\uffff\u0001\u008d",
            "",
            "",
            "\u0001\u008e\u001f\uffff\u0001\u008e",
            "\u000a\u0026\u0007\uffff\u001a\u0026\u0004\uffff\u0001\u0026"+
            "\u0001\uffff\u001a\u0026",
            "",
            "\u0001\u0090\u001f\uffff\u0001\u0090",
            "\u000a\u0026\u0007\uffff\u001a\u0026\u0004\uffff\u0001\u0026"+
            "\u0001\uffff\u001a\u0026",
            "",
            "\u000a\u0026\u0007\uffff\u001a\u0026\u0004\uffff\u0001\u0026"+
            "\u0001\uffff\u001a\u0026",
            "",
            "",
            "",
            "\u0001\u0093\u001f\uffff\u0001\u0093",
            "\u000a\u0026\u0007\uffff\u001a\u0026\u0004\uffff\u0001\u0026"+
            "\u0001\uffff\u001a\u0026",
            "\u000a\u0026\u0007\uffff\u001a\u0026\u0004\uffff\u0001\u0026"+
            "\u0001\uffff\u001a\u0026",
            "\u0001\u0096\u001f\uffff\u0001\u0096",
            "",
            "\u0001\u0097\u001f\uffff\u0001\u0097",
            "",
            "",
            "\u000a\u0026\u0007\uffff\u001a\u0026\u0004\uffff\u0001\u0026"+
            "\u0001\uffff\u001a\u0026",
            "",
            "",
            "\u0001\u0099\u001f\uffff\u0001\u0099",
            "\u0001\u009a\u001f\uffff\u0001\u009a",
            "",
            "\u000a\u0026\u0007\uffff\u001a\u0026\u0004\uffff\u0001\u0026"+
            "\u0001\uffff\u001a\u0026",
            "\u000a\u0026\u0007\uffff\u001a\u0026\u0004\uffff\u0001\u0026"+
            "\u0001\uffff\u001a\u0026",
            "",
            ""
    ]
});

org.antlr.lang.augmentObject(FormulaLexer, {
    DFA30_eot:
        org.antlr.runtime.DFA.unpackEncodedString(FormulaLexer.DFA30_eotS),
    DFA30_eof:
        org.antlr.runtime.DFA.unpackEncodedString(FormulaLexer.DFA30_eofS),
    DFA30_min:
        org.antlr.runtime.DFA.unpackEncodedStringToUnsignedChars(FormulaLexer.DFA30_minS),
    DFA30_max:
        org.antlr.runtime.DFA.unpackEncodedStringToUnsignedChars(FormulaLexer.DFA30_maxS),
    DFA30_accept:
        org.antlr.runtime.DFA.unpackEncodedString(FormulaLexer.DFA30_acceptS),
    DFA30_special:
        org.antlr.runtime.DFA.unpackEncodedString(FormulaLexer.DFA30_specialS),
    DFA30_transition: (function() {
        var a = [],
            i,
            numStates = FormulaLexer.DFA30_transitionS.length;
        for (i=0; i<numStates; i++) {
            a.push(org.antlr.runtime.DFA.unpackEncodedString(FormulaLexer.DFA30_transitionS[i]));
        }
        return a;
    })()
});

FormulaLexer.DFA30 = function(recognizer) {
    this.recognizer = recognizer;
    this.decisionNumber = 30;
    this.eot = FormulaLexer.DFA30_eot;
    this.eof = FormulaLexer.DFA30_eof;
    this.min = FormulaLexer.DFA30_min;
    this.max = FormulaLexer.DFA30_max;
    this.accept = FormulaLexer.DFA30_accept;
    this.special = FormulaLexer.DFA30_special;
    this.transition = FormulaLexer.DFA30_transition;
};

org.antlr.lang.extend(FormulaLexer.DFA30, org.antlr.runtime.DFA, {
    getDescription: function() {
        return "1:1: Tokens : ( T__113 | T__114 | T__115 | T__116 | NEWLINE | WHILESTATEMENT | FORSTATEMENT | FROMSTATEMENT | INSTATEMENT | TOSTATEMENT | BYSTATEMENT | LOOPSTATEMENT | IFSTATEMENT | THENSTATEMENT | ELSESTATEMENT | FUNCTIONSTATEMENT | ENDBLOCK | RETURNSTATEMENT | NEWSTATEMENT | TRYSTATEMENT | CATCHSTATEMENT | THROWSTATEMENT | OR | XOR | AND | EQUALS | NOTEQUALS | LT | LTEQ | GT | GTEQ | PLUS | MINUS | MULT | DIV | MOD | POW | NOT | LARR | RARR | LCURL | RCURL | INTEGER | FLOAT | TRUE | FALSE | PER | SQUARED | CUBED | IDENT | PRIMITIVE | LBRACKET | RBRACKET | COMMENT | LINE_COMMENT | COLON | WS | COMMA | STRING );";
    },
    specialStateTransition: function(s, input) {
        var _s = s;
        /* bind to recognizer so semantic predicates can be evaluated */
        var retval = (function(s, input) {
            switch ( s ) {
                        case 0 : 
                            var LA30_39 = input.LA(1);

                            s = -1;
                            if ( ((LA30_39>='\u0000' && LA30_39<='\uFFFF')) ) {s = 84;}

                            else s = 83;

                            if ( s>=0 ) return s;
                            break;
            }
        }).call(this.recognizer, s, input);
        if (!org.antlr.lang.isUndefined(retval)) {
            return retval;
        }
        var nvae =
            new org.antlr.runtime.NoViableAltException(this.getDescription(), 30, _s, input);
        this.error(nvae);
        throw nvae;
    },
    dummy: null
});
 
})();
// $ANTLR 3.3 Nov 30, 2010 12:45:30 /Library/WebServer/Documents/calc/Formula.g 2013-09-12 12:24:51

var FormulaParser = function(input, state) {
    if (!state) {
        state = new org.antlr.runtime.RecognizerSharedState();
    }

    (function(){
    }).call(this);

    FormulaParser.superclass.constructor.call(this, input, state);

    this.dfa5 = new FormulaParser.DFA5(this);
    this.dfa57 = new FormulaParser.DFA57(this);
    this.dfa58 = new FormulaParser.DFA58(this);
    this.dfa65 = new FormulaParser.DFA65(this);
    this.dfa72 = new FormulaParser.DFA72(this);
    this.dfa85 = new FormulaParser.DFA85(this);

         

    /* @todo only create adaptor if output=AST */
    this.adaptor = new org.antlr.runtime.tree.CommonTreeAdaptor();

};

org.antlr.lang.augmentObject(FormulaParser, {
    EOF: -1,
    T__113: 113,
    T__114: 114,
    T__115: 115,
    T__116: 116,
    NEGATE: 4,
    ASSIGN: 5,
    FUNCALL: 6,
    MATERIAL: 7,
    UNIT: 8,
    POWER: 9,
    DEFAULTS: 10,
    PARAMS: 11,
    UNITCLUMP: 12,
    ARRAY: 13,
    LINES: 14,
    WHILE: 15,
    IFTHENELSE: 16,
    ELSE: 17,
    FOR: 18,
    FORIN: 19,
    FUNCTION: 20,
    ANONFUNCTION: 21,
    NUMBER: 22,
    LABEL: 23,
    RANGE: 24,
    INNER: 25,
    ASSIGNED: 26,
    SELECTOR: 27,
    DOTSELECTOR: 28,
    NEW: 29,
    TRYCATCH: 30,
    THROW: 31,
    NEWLINE: 32,
    W: 33,
    H: 34,
    I: 35,
    L: 36,
    E: 37,
    WHILESTATEMENT: 38,
    F: 39,
    O: 40,
    R: 41,
    FORSTATEMENT: 42,
    M: 43,
    FROMSTATEMENT: 44,
    N: 45,
    INSTATEMENT: 46,
    T: 47,
    TOSTATEMENT: 48,
    B: 49,
    Y: 50,
    BYSTATEMENT: 51,
    P: 52,
    LOOPSTATEMENT: 53,
    IFSTATEMENT: 54,
    THENSTATEMENT: 55,
    S: 56,
    ELSESTATEMENT: 57,
    U: 58,
    C: 59,
    FUNCTIONSTATEMENT: 60,
    D: 61,
    ENDBLOCK: 62,
    RETURNSTATEMENT: 63,
    NEWSTATEMENT: 64,
    TRYSTATEMENT: 65,
    A: 66,
    CATCHSTATEMENT: 67,
    THROWSTATEMENT: 68,
    IDENT: 69,
    EQUALS: 70,
    PRIMITIVE: 71,
    OR: 72,
    XOR: 73,
    X: 74,
    AND: 75,
    NOTEQUALS: 76,
    LT: 77,
    LTEQ: 78,
    GT: 79,
    GTEQ: 80,
    PLUS: 81,
    MINUS: 82,
    MULT: 83,
    DIV: 84,
    MOD: 85,
    COLON: 86,
    POW: 87,
    NOT: 88,
    LARR: 89,
    RARR: 90,
    LCURL: 91,
    RCURL: 92,
    COMMA: 93,
    STRING: 94,
    INTEGER: 95,
    FLOAT: 96,
    TRUE: 97,
    FALSE: 98,
    PER: 99,
    CUBED: 100,
    SQUARED: 101,
    Q: 102,
    LBRACKET: 103,
    RBRACKET: 104,
    COMMENT: 105,
    LINE_COMMENT: 106,
    WS: 107,
    G: 108,
    J: 109,
    K: 110,
    V: 111,
    Z: 112
});

(function(){
// public class variables
var EOF= -1,
    T__113= 113,
    T__114= 114,
    T__115= 115,
    T__116= 116,
    NEGATE= 4,
    ASSIGN= 5,
    FUNCALL= 6,
    MATERIAL= 7,
    UNIT= 8,
    POWER= 9,
    DEFAULTS= 10,
    PARAMS= 11,
    UNITCLUMP= 12,
    ARRAY= 13,
    LINES= 14,
    WHILE= 15,
    IFTHENELSE= 16,
    ELSE= 17,
    FOR= 18,
    FORIN= 19,
    FUNCTION= 20,
    ANONFUNCTION= 21,
    NUMBER= 22,
    LABEL= 23,
    RANGE= 24,
    INNER= 25,
    ASSIGNED= 26,
    SELECTOR= 27,
    DOTSELECTOR= 28,
    NEW= 29,
    TRYCATCH= 30,
    THROW= 31,
    NEWLINE= 32,
    W= 33,
    H= 34,
    I= 35,
    L= 36,
    E= 37,
    WHILESTATEMENT= 38,
    F= 39,
    O= 40,
    R= 41,
    FORSTATEMENT= 42,
    M= 43,
    FROMSTATEMENT= 44,
    N= 45,
    INSTATEMENT= 46,
    T= 47,
    TOSTATEMENT= 48,
    B= 49,
    Y= 50,
    BYSTATEMENT= 51,
    P= 52,
    LOOPSTATEMENT= 53,
    IFSTATEMENT= 54,
    THENSTATEMENT= 55,
    S= 56,
    ELSESTATEMENT= 57,
    U= 58,
    C= 59,
    FUNCTIONSTATEMENT= 60,
    D= 61,
    ENDBLOCK= 62,
    RETURNSTATEMENT= 63,
    NEWSTATEMENT= 64,
    TRYSTATEMENT= 65,
    A= 66,
    CATCHSTATEMENT= 67,
    THROWSTATEMENT= 68,
    IDENT= 69,
    EQUALS= 70,
    PRIMITIVE= 71,
    OR= 72,
    XOR= 73,
    X= 74,
    AND= 75,
    NOTEQUALS= 76,
    LT= 77,
    LTEQ= 78,
    GT= 79,
    GTEQ= 80,
    PLUS= 81,
    MINUS= 82,
    MULT= 83,
    DIV= 84,
    MOD= 85,
    COLON= 86,
    POW= 87,
    NOT= 88,
    LARR= 89,
    RARR= 90,
    LCURL= 91,
    RCURL= 92,
    COMMA= 93,
    STRING= 94,
    INTEGER= 95,
    FLOAT= 96,
    TRUE= 97,
    FALSE= 98,
    PER= 99,
    CUBED= 100,
    SQUARED= 101,
    Q= 102,
    LBRACKET= 103,
    RBRACKET= 104,
    COMMENT= 105,
    LINE_COMMENT= 106,
    WS= 107,
    G= 108,
    J= 109,
    K= 110,
    V= 111,
    Z= 112;

// public instance methods/vars
org.antlr.lang.extend(FormulaParser, org.antlr.runtime.Parser, {
        
    setTreeAdaptor: function(adaptor) {
        this.adaptor = adaptor;
    },
    getTreeAdaptor: function() {
        return this.adaptor;
    },

    getTokenNames: function() { return FormulaParser.tokenNames; },
    getGrammarFileName: function() { return "/Library/WebServer/Documents/calc/Formula.g"; }
});
org.antlr.lang.augmentObject(FormulaParser.prototype, {

    // inline static return class
    lines_return: (function() {
        FormulaParser.lines_return = function(){};
        org.antlr.lang.extend(FormulaParser.lines_return,
                          org.antlr.runtime.ParserRuleReturnScope,
        {
            getTree: function() { return this.tree; }
        });
        return;
    })(),

    // /Library/WebServer/Documents/calc/Formula.g:43:1: lines : ( NEWLINE )* ( expression ( ( NEWLINE )+ | EOF ) )* EOF -> ^( LINES ( expression )* ) ;
    // $ANTLR start "lines"
    lines: function() {
        var retval = new FormulaParser.lines_return();
        retval.start = this.input.LT(1);

        var root_0 = null;

        var NEWLINE1 = null;
        var NEWLINE3 = null;
        var EOF4 = null;
        var EOF5 = null;
         var expression2 = null;

        var NEWLINE1_tree=null;
        var NEWLINE3_tree=null;
        var EOF4_tree=null;
        var EOF5_tree=null;
        var stream_NEWLINE=new org.antlr.runtime.tree.RewriteRuleTokenStream(this.adaptor,"token NEWLINE");
        var stream_EOF=new org.antlr.runtime.tree.RewriteRuleTokenStream(this.adaptor,"token EOF");
        var stream_expression=new org.antlr.runtime.tree.RewriteRuleSubtreeStream(this.adaptor,"rule expression");
        try {
            // /Library/WebServer/Documents/calc/Formula.g:44:2: ( ( NEWLINE )* ( expression ( ( NEWLINE )+ | EOF ) )* EOF -> ^( LINES ( expression )* ) )
            // /Library/WebServer/Documents/calc/Formula.g:44:4: ( NEWLINE )* ( expression ( ( NEWLINE )+ | EOF ) )* EOF
            // /Library/WebServer/Documents/calc/Formula.g:44:4: ( NEWLINE )*
            loop1:
            do {
                var alt1=2;
                var LA1_0 = this.input.LA(1);

                if ( (LA1_0==NEWLINE) ) {
                    alt1=1;
                }


                switch (alt1) {
                case 1 :
                    // /Library/WebServer/Documents/calc/Formula.g:0:0: NEWLINE
                    NEWLINE1=this.match(this.input,NEWLINE,FormulaParser.FOLLOW_NEWLINE_in_lines160); if (this.state.failed) return retval; 
                    if ( this.state.backtracking===0 ) stream_NEWLINE.add(NEWLINE1);



                    break;

                default :
                    break loop1;
                }
            } while (true);

            // /Library/WebServer/Documents/calc/Formula.g:44:13: ( expression ( ( NEWLINE )+ | EOF ) )*
            loop4:
            do {
                var alt4=2;
                var LA4_0 = this.input.LA(1);

                if ( (LA4_0==WHILESTATEMENT||LA4_0==FORSTATEMENT||LA4_0==IFSTATEMENT||LA4_0==FUNCTIONSTATEMENT||(LA4_0>=RETURNSTATEMENT && LA4_0<=TRYSTATEMENT)||(LA4_0>=THROWSTATEMENT && LA4_0<=IDENT)||LA4_0==PRIMITIVE||LA4_0==MINUS||(LA4_0>=NOT && LA4_0<=LARR)||LA4_0==LCURL||(LA4_0>=STRING && LA4_0<=FALSE)||LA4_0==113) ) {
                    alt4=1;
                }


                switch (alt4) {
                case 1 :
                    // /Library/WebServer/Documents/calc/Formula.g:44:14: expression ( ( NEWLINE )+ | EOF )
                    this.pushFollow(FormulaParser.FOLLOW_expression_in_lines164);
                    expression2=this.expression();

                    this.state._fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) stream_expression.add(expression2.getTree());
                    // /Library/WebServer/Documents/calc/Formula.g:44:26: ( ( NEWLINE )+ | EOF )
                    var alt3=2;
                    var LA3_0 = this.input.LA(1);

                    if ( (LA3_0==NEWLINE) ) {
                        alt3=1;
                    }
                    else if ( (LA3_0==EOF) ) {
                        alt3=2;
                    }
                    else {
                        if (this.state.backtracking>0) {this.state.failed=true; return retval;}
                        var nvae =
                            new org.antlr.runtime.NoViableAltException("", 3, 0, this.input);

                        throw nvae;
                    }
                    switch (alt3) {
                        case 1 :
                            // /Library/WebServer/Documents/calc/Formula.g:44:27: ( NEWLINE )+
                            // /Library/WebServer/Documents/calc/Formula.g:44:27: ( NEWLINE )+
                            var cnt2=0;
                            loop2:
                            do {
                                var alt2=2;
                                var LA2_0 = this.input.LA(1);

                                if ( (LA2_0==NEWLINE) ) {
                                    alt2=1;
                                }


                                switch (alt2) {
                                case 1 :
                                    // /Library/WebServer/Documents/calc/Formula.g:0:0: NEWLINE
                                    NEWLINE3=this.match(this.input,NEWLINE,FormulaParser.FOLLOW_NEWLINE_in_lines168); if (this.state.failed) return retval; 
                                    if ( this.state.backtracking===0 ) stream_NEWLINE.add(NEWLINE3);



                                    break;

                                default :
                                    if ( cnt2 >= 1 ) {
                                        break loop2;
                                    }
                                    if (this.state.backtracking>0) {this.state.failed=true; return retval;}
                                        var eee = new org.antlr.runtime.EarlyExitException(2, this.input);
                                        throw eee;
                                }
                                cnt2++;
                            } while (true);



                            break;
                        case 2 :
                            // /Library/WebServer/Documents/calc/Formula.g:44:36: EOF
                            EOF4=this.match(this.input,EOF,FormulaParser.FOLLOW_EOF_in_lines171); if (this.state.failed) return retval; 
                            if ( this.state.backtracking===0 ) stream_EOF.add(EOF4);



                            break;

                    }



                    break;

                default :
                    break loop4;
                }
            } while (true);

            EOF5=this.match(this.input,EOF,FormulaParser.FOLLOW_EOF_in_lines176); if (this.state.failed) return retval; 
            if ( this.state.backtracking===0 ) stream_EOF.add(EOF5);



            // AST REWRITE
            // elements: expression
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( this.state.backtracking===0 ) {
            retval.tree = root_0;
            var stream_retval=new org.antlr.runtime.tree.RewriteRuleSubtreeStream(this.adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = this.adaptor.nil();
            // 44:47: -> ^( LINES ( expression )* )
            {
                // /Library/WebServer/Documents/calc/Formula.g:44:50: ^( LINES ( expression )* )
                {
                var root_1 = this.adaptor.nil();
                root_1 = this.adaptor.becomeRoot(this.adaptor.create(LINES, "LINES"), root_1);

                // /Library/WebServer/Documents/calc/Formula.g:44:58: ( expression )*
                while ( stream_expression.hasNext() ) {
                    this.adaptor.addChild(root_1, stream_expression.nextTree());

                }
                stream_expression.reset();

                this.adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}


            retval.stop = this.input.LT(-1);

            if ( this.state.backtracking===0 ) {

            retval.tree = this.adaptor.rulePostProcessing(root_0);
            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (re) {
            if (re instanceof org.antlr.runtime.RecognitionException) {
                this.reportError(re);
                this.recover(this.input,re);
                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
            } else {
                throw re;
            }
        }
        finally {
        }
        return retval;
    },

    // inline static return class
    expression_return: (function() {
        FormulaParser.expression_return = function(){};
        org.antlr.lang.extend(FormulaParser.expression_return,
                          org.antlr.runtime.ParserRuleReturnScope,
        {
            getTree: function() { return this.tree; }
        });
        return;
    })(),

    // /Library/WebServer/Documents/calc/Formula.g:120:1: expression : ( assignment | logicalExpression | whileLoop | forLoop | forInLoop | ifThenElse | functionDef | returnExp | tryCatch | throwExp );
    // $ANTLR start "expression"
    expression: function() {
        var retval = new FormulaParser.expression_return();
        retval.start = this.input.LT(1);

        var root_0 = null;

         var assignment6 = null;
         var logicalExpression7 = null;
         var whileLoop8 = null;
         var forLoop9 = null;
         var forInLoop10 = null;
         var ifThenElse11 = null;
         var functionDef12 = null;
         var returnExp13 = null;
         var tryCatch14 = null;
         var throwExp15 = null;


        try {
            // /Library/WebServer/Documents/calc/Formula.g:121:2: ( assignment | logicalExpression | whileLoop | forLoop | forInLoop | ifThenElse | functionDef | returnExp | tryCatch | throwExp )
            var alt5=10;
            alt5 = this.dfa5.predict(this.input);
            switch (alt5) {
                case 1 :
                    // /Library/WebServer/Documents/calc/Formula.g:121:5: assignment
                    root_0 = this.adaptor.nil();

                    this.pushFollow(FormulaParser.FOLLOW_assignment_in_expression508);
                    assignment6=this.assignment();

                    this.state._fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, assignment6.getTree());


                    break;
                case 2 :
                    // /Library/WebServer/Documents/calc/Formula.g:122:5: logicalExpression
                    root_0 = this.adaptor.nil();

                    this.pushFollow(FormulaParser.FOLLOW_logicalExpression_in_expression514);
                    logicalExpression7=this.logicalExpression();

                    this.state._fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, logicalExpression7.getTree());


                    break;
                case 3 :
                    // /Library/WebServer/Documents/calc/Formula.g:123:5: whileLoop
                    root_0 = this.adaptor.nil();

                    this.pushFollow(FormulaParser.FOLLOW_whileLoop_in_expression520);
                    whileLoop8=this.whileLoop();

                    this.state._fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, whileLoop8.getTree());


                    break;
                case 4 :
                    // /Library/WebServer/Documents/calc/Formula.g:124:5: forLoop
                    root_0 = this.adaptor.nil();

                    this.pushFollow(FormulaParser.FOLLOW_forLoop_in_expression526);
                    forLoop9=this.forLoop();

                    this.state._fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, forLoop9.getTree());


                    break;
                case 5 :
                    // /Library/WebServer/Documents/calc/Formula.g:125:5: forInLoop
                    root_0 = this.adaptor.nil();

                    this.pushFollow(FormulaParser.FOLLOW_forInLoop_in_expression532);
                    forInLoop10=this.forInLoop();

                    this.state._fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, forInLoop10.getTree());


                    break;
                case 6 :
                    // /Library/WebServer/Documents/calc/Formula.g:126:5: ifThenElse
                    root_0 = this.adaptor.nil();

                    this.pushFollow(FormulaParser.FOLLOW_ifThenElse_in_expression538);
                    ifThenElse11=this.ifThenElse();

                    this.state._fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, ifThenElse11.getTree());


                    break;
                case 7 :
                    // /Library/WebServer/Documents/calc/Formula.g:127:5: functionDef
                    root_0 = this.adaptor.nil();

                    this.pushFollow(FormulaParser.FOLLOW_functionDef_in_expression544);
                    functionDef12=this.functionDef();

                    this.state._fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, functionDef12.getTree());


                    break;
                case 8 :
                    // /Library/WebServer/Documents/calc/Formula.g:128:5: returnExp
                    root_0 = this.adaptor.nil();

                    this.pushFollow(FormulaParser.FOLLOW_returnExp_in_expression550);
                    returnExp13=this.returnExp();

                    this.state._fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, returnExp13.getTree());


                    break;
                case 9 :
                    // /Library/WebServer/Documents/calc/Formula.g:129:5: tryCatch
                    root_0 = this.adaptor.nil();

                    this.pushFollow(FormulaParser.FOLLOW_tryCatch_in_expression556);
                    tryCatch14=this.tryCatch();

                    this.state._fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, tryCatch14.getTree());


                    break;
                case 10 :
                    // /Library/WebServer/Documents/calc/Formula.g:130:5: throwExp
                    root_0 = this.adaptor.nil();

                    this.pushFollow(FormulaParser.FOLLOW_throwExp_in_expression562);
                    throwExp15=this.throwExp();

                    this.state._fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, throwExp15.getTree());


                    break;

            }
            retval.stop = this.input.LT(-1);

            if ( this.state.backtracking===0 ) {

            retval.tree = this.adaptor.rulePostProcessing(root_0);
            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (re) {
            if (re instanceof org.antlr.runtime.RecognitionException) {
                this.reportError(re);
                this.recover(this.input,re);
                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
            } else {
                throw re;
            }
        }
        finally {
        }
        return retval;
    },

    // inline static return class
    returnExp_return: (function() {
        FormulaParser.returnExp_return = function(){};
        org.antlr.lang.extend(FormulaParser.returnExp_return,
                          org.antlr.runtime.ParserRuleReturnScope,
        {
            getTree: function() { return this.tree; }
        });
        return;
    })(),

    // /Library/WebServer/Documents/calc/Formula.g:133:1: returnExp : RETURNSTATEMENT logicalExpression ;
    // $ANTLR start "returnExp"
    returnExp: function() {
        var retval = new FormulaParser.returnExp_return();
        retval.start = this.input.LT(1);

        var root_0 = null;

        var RETURNSTATEMENT16 = null;
         var logicalExpression17 = null;

        var RETURNSTATEMENT16_tree=null;

        try {
            // /Library/WebServer/Documents/calc/Formula.g:134:2: ( RETURNSTATEMENT logicalExpression )
            // /Library/WebServer/Documents/calc/Formula.g:135:2: RETURNSTATEMENT logicalExpression
            root_0 = this.adaptor.nil();

            RETURNSTATEMENT16=this.match(this.input,RETURNSTATEMENT,FormulaParser.FOLLOW_RETURNSTATEMENT_in_returnExp574); if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) {
            RETURNSTATEMENT16_tree = this.adaptor.create(RETURNSTATEMENT16);
            root_0 = this.adaptor.becomeRoot(RETURNSTATEMENT16_tree, root_0);
            }
            this.pushFollow(FormulaParser.FOLLOW_logicalExpression_in_returnExp577);
            logicalExpression17=this.logicalExpression();

            this.state._fsp--;
            if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, logicalExpression17.getTree());



            retval.stop = this.input.LT(-1);

            if ( this.state.backtracking===0 ) {

            retval.tree = this.adaptor.rulePostProcessing(root_0);
            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (re) {
            if (re instanceof org.antlr.runtime.RecognitionException) {
                this.reportError(re);
                this.recover(this.input,re);
                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
            } else {
                throw re;
            }
        }
        finally {
        }
        return retval;
    },

    // inline static return class
    innerBlock_return: (function() {
        FormulaParser.innerBlock_return = function(){};
        org.antlr.lang.extend(FormulaParser.innerBlock_return,
                          org.antlr.runtime.ParserRuleReturnScope,
        {
            getTree: function() { return this.tree; }
        });
        return;
    })(),

    // /Library/WebServer/Documents/calc/Formula.g:138:1: innerBlock : ( expression ( ( NEWLINE )+ ) )* -> ^( LINES ( expression )+ ) ;
    // $ANTLR start "innerBlock"
    innerBlock: function() {
        var retval = new FormulaParser.innerBlock_return();
        retval.start = this.input.LT(1);

        var root_0 = null;

        var NEWLINE19 = null;
         var expression18 = null;

        var NEWLINE19_tree=null;
        var stream_NEWLINE=new org.antlr.runtime.tree.RewriteRuleTokenStream(this.adaptor,"token NEWLINE");
        var stream_expression=new org.antlr.runtime.tree.RewriteRuleSubtreeStream(this.adaptor,"rule expression");
        try {
            // /Library/WebServer/Documents/calc/Formula.g:139:2: ( ( expression ( ( NEWLINE )+ ) )* -> ^( LINES ( expression )+ ) )
            // /Library/WebServer/Documents/calc/Formula.g:139:4: ( expression ( ( NEWLINE )+ ) )*
            // /Library/WebServer/Documents/calc/Formula.g:139:4: ( expression ( ( NEWLINE )+ ) )*
            loop7:
            do {
                var alt7=2;
                var LA7_0 = this.input.LA(1);

                if ( (LA7_0==WHILESTATEMENT||LA7_0==FORSTATEMENT||LA7_0==IFSTATEMENT||LA7_0==FUNCTIONSTATEMENT||(LA7_0>=RETURNSTATEMENT && LA7_0<=TRYSTATEMENT)||(LA7_0>=THROWSTATEMENT && LA7_0<=IDENT)||LA7_0==PRIMITIVE||LA7_0==MINUS||(LA7_0>=NOT && LA7_0<=LARR)||LA7_0==LCURL||(LA7_0>=STRING && LA7_0<=FALSE)||LA7_0==113) ) {
                    alt7=1;
                }


                switch (alt7) {
                case 1 :
                    // /Library/WebServer/Documents/calc/Formula.g:139:5: expression ( ( NEWLINE )+ )
                    this.pushFollow(FormulaParser.FOLLOW_expression_in_innerBlock590);
                    expression18=this.expression();

                    this.state._fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) stream_expression.add(expression18.getTree());
                    // /Library/WebServer/Documents/calc/Formula.g:139:17: ( ( NEWLINE )+ )
                    // /Library/WebServer/Documents/calc/Formula.g:139:18: ( NEWLINE )+
                    // /Library/WebServer/Documents/calc/Formula.g:139:18: ( NEWLINE )+
                    var cnt6=0;
                    loop6:
                    do {
                        var alt6=2;
                        var LA6_0 = this.input.LA(1);

                        if ( (LA6_0==NEWLINE) ) {
                            alt6=1;
                        }


                        switch (alt6) {
                        case 1 :
                            // /Library/WebServer/Documents/calc/Formula.g:0:0: NEWLINE
                            NEWLINE19=this.match(this.input,NEWLINE,FormulaParser.FOLLOW_NEWLINE_in_innerBlock594); if (this.state.failed) return retval; 
                            if ( this.state.backtracking===0 ) stream_NEWLINE.add(NEWLINE19);



                            break;

                        default :
                            if ( cnt6 >= 1 ) {
                                break loop6;
                            }
                            if (this.state.backtracking>0) {this.state.failed=true; return retval;}
                                var eee = new org.antlr.runtime.EarlyExitException(6, this.input);
                                throw eee;
                        }
                        cnt6++;
                    } while (true);






                    break;

                default :
                    break loop7;
                }
            } while (true);



            // AST REWRITE
            // elements: expression
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( this.state.backtracking===0 ) {
            retval.tree = root_0;
            var stream_retval=new org.antlr.runtime.tree.RewriteRuleSubtreeStream(this.adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = this.adaptor.nil();
            // 139:30: -> ^( LINES ( expression )+ )
            {
                // /Library/WebServer/Documents/calc/Formula.g:139:33: ^( LINES ( expression )+ )
                {
                var root_1 = this.adaptor.nil();
                root_1 = this.adaptor.becomeRoot(this.adaptor.create(LINES, "LINES"), root_1);

                if ( !(stream_expression.hasNext()) ) {
                    throw new org.antlr.runtime.tree.RewriteEarlyExitException();
                }
                while ( stream_expression.hasNext() ) {
                    this.adaptor.addChild(root_1, stream_expression.nextTree());

                }
                stream_expression.reset();

                this.adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}


            retval.stop = this.input.LT(-1);

            if ( this.state.backtracking===0 ) {

            retval.tree = this.adaptor.rulePostProcessing(root_0);
            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (re) {
            if (re instanceof org.antlr.runtime.RecognitionException) {
                this.reportError(re);
                this.recover(this.input,re);
                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
            } else {
                throw re;
            }
        }
        finally {
        }
        return retval;
    },

    // inline static return class
    whileLoop_return: (function() {
        FormulaParser.whileLoop_return = function(){};
        org.antlr.lang.extend(FormulaParser.whileLoop_return,
                          org.antlr.runtime.ParserRuleReturnScope,
        {
            getTree: function() { return this.tree; }
        });
        return;
    })(),

    // /Library/WebServer/Documents/calc/Formula.g:142:1: whileLoop : WHILESTATEMENT logicalExpression ( NEWLINE )+ innerBlock ENDBLOCK LOOPSTATEMENT -> ^( WHILE logicalExpression innerBlock ) ;
    // $ANTLR start "whileLoop"
    whileLoop: function() {
        var retval = new FormulaParser.whileLoop_return();
        retval.start = this.input.LT(1);

        var root_0 = null;

        var WHILESTATEMENT20 = null;
        var NEWLINE22 = null;
        var ENDBLOCK24 = null;
        var LOOPSTATEMENT25 = null;
         var logicalExpression21 = null;
         var innerBlock23 = null;

        var WHILESTATEMENT20_tree=null;
        var NEWLINE22_tree=null;
        var ENDBLOCK24_tree=null;
        var LOOPSTATEMENT25_tree=null;
        var stream_NEWLINE=new org.antlr.runtime.tree.RewriteRuleTokenStream(this.adaptor,"token NEWLINE");
        var stream_ENDBLOCK=new org.antlr.runtime.tree.RewriteRuleTokenStream(this.adaptor,"token ENDBLOCK");
        var stream_LOOPSTATEMENT=new org.antlr.runtime.tree.RewriteRuleTokenStream(this.adaptor,"token LOOPSTATEMENT");
        var stream_WHILESTATEMENT=new org.antlr.runtime.tree.RewriteRuleTokenStream(this.adaptor,"token WHILESTATEMENT");
        var stream_innerBlock=new org.antlr.runtime.tree.RewriteRuleSubtreeStream(this.adaptor,"rule innerBlock");
        var stream_logicalExpression=new org.antlr.runtime.tree.RewriteRuleSubtreeStream(this.adaptor,"rule logicalExpression");
        try {
            // /Library/WebServer/Documents/calc/Formula.g:143:2: ( WHILESTATEMENT logicalExpression ( NEWLINE )+ innerBlock ENDBLOCK LOOPSTATEMENT -> ^( WHILE logicalExpression innerBlock ) )
            // /Library/WebServer/Documents/calc/Formula.g:143:4: WHILESTATEMENT logicalExpression ( NEWLINE )+ innerBlock ENDBLOCK LOOPSTATEMENT
            WHILESTATEMENT20=this.match(this.input,WHILESTATEMENT,FormulaParser.FOLLOW_WHILESTATEMENT_in_whileLoop619); if (this.state.failed) return retval; 
            if ( this.state.backtracking===0 ) stream_WHILESTATEMENT.add(WHILESTATEMENT20);

            this.pushFollow(FormulaParser.FOLLOW_logicalExpression_in_whileLoop621);
            logicalExpression21=this.logicalExpression();

            this.state._fsp--;
            if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) stream_logicalExpression.add(logicalExpression21.getTree());
            // /Library/WebServer/Documents/calc/Formula.g:143:37: ( NEWLINE )+
            var cnt8=0;
            loop8:
            do {
                var alt8=2;
                var LA8_0 = this.input.LA(1);

                if ( (LA8_0==NEWLINE) ) {
                    alt8=1;
                }


                switch (alt8) {
                case 1 :
                    // /Library/WebServer/Documents/calc/Formula.g:0:0: NEWLINE
                    NEWLINE22=this.match(this.input,NEWLINE,FormulaParser.FOLLOW_NEWLINE_in_whileLoop623); if (this.state.failed) return retval; 
                    if ( this.state.backtracking===0 ) stream_NEWLINE.add(NEWLINE22);



                    break;

                default :
                    if ( cnt8 >= 1 ) {
                        break loop8;
                    }
                    if (this.state.backtracking>0) {this.state.failed=true; return retval;}
                        var eee = new org.antlr.runtime.EarlyExitException(8, this.input);
                        throw eee;
                }
                cnt8++;
            } while (true);

            this.pushFollow(FormulaParser.FOLLOW_innerBlock_in_whileLoop626);
            innerBlock23=this.innerBlock();

            this.state._fsp--;
            if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) stream_innerBlock.add(innerBlock23.getTree());
            ENDBLOCK24=this.match(this.input,ENDBLOCK,FormulaParser.FOLLOW_ENDBLOCK_in_whileLoop629); if (this.state.failed) return retval; 
            if ( this.state.backtracking===0 ) stream_ENDBLOCK.add(ENDBLOCK24);

            LOOPSTATEMENT25=this.match(this.input,LOOPSTATEMENT,FormulaParser.FOLLOW_LOOPSTATEMENT_in_whileLoop631); if (this.state.failed) return retval; 
            if ( this.state.backtracking===0 ) stream_LOOPSTATEMENT.add(LOOPSTATEMENT25);



            // AST REWRITE
            // elements: innerBlock, logicalExpression
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( this.state.backtracking===0 ) {
            retval.tree = root_0;
            var stream_retval=new org.antlr.runtime.tree.RewriteRuleSubtreeStream(this.adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = this.adaptor.nil();
            // 143:81: -> ^( WHILE logicalExpression innerBlock )
            {
                // /Library/WebServer/Documents/calc/Formula.g:143:84: ^( WHILE logicalExpression innerBlock )
                {
                var root_1 = this.adaptor.nil();
                root_1 = this.adaptor.becomeRoot(this.adaptor.create(WHILE, "WHILE"), root_1);

                this.adaptor.addChild(root_1, stream_logicalExpression.nextTree());
                this.adaptor.addChild(root_1, stream_innerBlock.nextTree());

                this.adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}


            retval.stop = this.input.LT(-1);

            if ( this.state.backtracking===0 ) {

            retval.tree = this.adaptor.rulePostProcessing(root_0);
            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (re) {
            if (re instanceof org.antlr.runtime.RecognitionException) {
                this.reportError(re);
                this.recover(this.input,re);
                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
            } else {
                throw re;
            }
        }
        finally {
        }
        return retval;
    },

    // inline static return class
    forLoop_return: (function() {
        FormulaParser.forLoop_return = function(){};
        org.antlr.lang.extend(FormulaParser.forLoop_return,
                          org.antlr.runtime.ParserRuleReturnScope,
        {
            getTree: function() { return this.tree; }
        });
        return;
    })(),

    // /Library/WebServer/Documents/calc/Formula.g:146:1: forLoop : FORSTATEMENT IDENT FROMSTATEMENT logicalExpression TOSTATEMENT logicalExpression ( BYSTATEMENT logicalExpression )? ( NEWLINE )+ innerBlock ENDBLOCK LOOPSTATEMENT -> ^( FOR IDENT ^( PARAMS ( logicalExpression )* ) innerBlock ) ;
    // $ANTLR start "forLoop"
    forLoop: function() {
        var retval = new FormulaParser.forLoop_return();
        retval.start = this.input.LT(1);

        var root_0 = null;

        var FORSTATEMENT26 = null;
        var IDENT27 = null;
        var FROMSTATEMENT28 = null;
        var TOSTATEMENT30 = null;
        var BYSTATEMENT32 = null;
        var NEWLINE34 = null;
        var ENDBLOCK36 = null;
        var LOOPSTATEMENT37 = null;
         var logicalExpression29 = null;
         var logicalExpression31 = null;
         var logicalExpression33 = null;
         var innerBlock35 = null;

        var FORSTATEMENT26_tree=null;
        var IDENT27_tree=null;
        var FROMSTATEMENT28_tree=null;
        var TOSTATEMENT30_tree=null;
        var BYSTATEMENT32_tree=null;
        var NEWLINE34_tree=null;
        var ENDBLOCK36_tree=null;
        var LOOPSTATEMENT37_tree=null;
        var stream_FORSTATEMENT=new org.antlr.runtime.tree.RewriteRuleTokenStream(this.adaptor,"token FORSTATEMENT");
        var stream_IDENT=new org.antlr.runtime.tree.RewriteRuleTokenStream(this.adaptor,"token IDENT");
        var stream_FROMSTATEMENT=new org.antlr.runtime.tree.RewriteRuleTokenStream(this.adaptor,"token FROMSTATEMENT");
        var stream_NEWLINE=new org.antlr.runtime.tree.RewriteRuleTokenStream(this.adaptor,"token NEWLINE");
        var stream_TOSTATEMENT=new org.antlr.runtime.tree.RewriteRuleTokenStream(this.adaptor,"token TOSTATEMENT");
        var stream_ENDBLOCK=new org.antlr.runtime.tree.RewriteRuleTokenStream(this.adaptor,"token ENDBLOCK");
        var stream_LOOPSTATEMENT=new org.antlr.runtime.tree.RewriteRuleTokenStream(this.adaptor,"token LOOPSTATEMENT");
        var stream_BYSTATEMENT=new org.antlr.runtime.tree.RewriteRuleTokenStream(this.adaptor,"token BYSTATEMENT");
        var stream_innerBlock=new org.antlr.runtime.tree.RewriteRuleSubtreeStream(this.adaptor,"rule innerBlock");
        var stream_logicalExpression=new org.antlr.runtime.tree.RewriteRuleSubtreeStream(this.adaptor,"rule logicalExpression");
        try {
            // /Library/WebServer/Documents/calc/Formula.g:147:2: ( FORSTATEMENT IDENT FROMSTATEMENT logicalExpression TOSTATEMENT logicalExpression ( BYSTATEMENT logicalExpression )? ( NEWLINE )+ innerBlock ENDBLOCK LOOPSTATEMENT -> ^( FOR IDENT ^( PARAMS ( logicalExpression )* ) innerBlock ) )
            // /Library/WebServer/Documents/calc/Formula.g:147:4: FORSTATEMENT IDENT FROMSTATEMENT logicalExpression TOSTATEMENT logicalExpression ( BYSTATEMENT logicalExpression )? ( NEWLINE )+ innerBlock ENDBLOCK LOOPSTATEMENT
            FORSTATEMENT26=this.match(this.input,FORSTATEMENT,FormulaParser.FOLLOW_FORSTATEMENT_in_forLoop652); if (this.state.failed) return retval; 
            if ( this.state.backtracking===0 ) stream_FORSTATEMENT.add(FORSTATEMENT26);

            IDENT27=this.match(this.input,IDENT,FormulaParser.FOLLOW_IDENT_in_forLoop654); if (this.state.failed) return retval; 
            if ( this.state.backtracking===0 ) stream_IDENT.add(IDENT27);

            FROMSTATEMENT28=this.match(this.input,FROMSTATEMENT,FormulaParser.FOLLOW_FROMSTATEMENT_in_forLoop656); if (this.state.failed) return retval; 
            if ( this.state.backtracking===0 ) stream_FROMSTATEMENT.add(FROMSTATEMENT28);

            this.pushFollow(FormulaParser.FOLLOW_logicalExpression_in_forLoop658);
            logicalExpression29=this.logicalExpression();

            this.state._fsp--;
            if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) stream_logicalExpression.add(logicalExpression29.getTree());
            TOSTATEMENT30=this.match(this.input,TOSTATEMENT,FormulaParser.FOLLOW_TOSTATEMENT_in_forLoop660); if (this.state.failed) return retval; 
            if ( this.state.backtracking===0 ) stream_TOSTATEMENT.add(TOSTATEMENT30);

            this.pushFollow(FormulaParser.FOLLOW_logicalExpression_in_forLoop662);
            logicalExpression31=this.logicalExpression();

            this.state._fsp--;
            if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) stream_logicalExpression.add(logicalExpression31.getTree());
            // /Library/WebServer/Documents/calc/Formula.g:147:85: ( BYSTATEMENT logicalExpression )?
            var alt9=2;
            var LA9_0 = this.input.LA(1);

            if ( (LA9_0==BYSTATEMENT) ) {
                alt9=1;
            }
            switch (alt9) {
                case 1 :
                    // /Library/WebServer/Documents/calc/Formula.g:147:86: BYSTATEMENT logicalExpression
                    BYSTATEMENT32=this.match(this.input,BYSTATEMENT,FormulaParser.FOLLOW_BYSTATEMENT_in_forLoop665); if (this.state.failed) return retval; 
                    if ( this.state.backtracking===0 ) stream_BYSTATEMENT.add(BYSTATEMENT32);

                    this.pushFollow(FormulaParser.FOLLOW_logicalExpression_in_forLoop667);
                    logicalExpression33=this.logicalExpression();

                    this.state._fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) stream_logicalExpression.add(logicalExpression33.getTree());


                    break;

            }

            // /Library/WebServer/Documents/calc/Formula.g:147:118: ( NEWLINE )+
            var cnt10=0;
            loop10:
            do {
                var alt10=2;
                var LA10_0 = this.input.LA(1);

                if ( (LA10_0==NEWLINE) ) {
                    alt10=1;
                }


                switch (alt10) {
                case 1 :
                    // /Library/WebServer/Documents/calc/Formula.g:0:0: NEWLINE
                    NEWLINE34=this.match(this.input,NEWLINE,FormulaParser.FOLLOW_NEWLINE_in_forLoop671); if (this.state.failed) return retval; 
                    if ( this.state.backtracking===0 ) stream_NEWLINE.add(NEWLINE34);



                    break;

                default :
                    if ( cnt10 >= 1 ) {
                        break loop10;
                    }
                    if (this.state.backtracking>0) {this.state.failed=true; return retval;}
                        var eee = new org.antlr.runtime.EarlyExitException(10, this.input);
                        throw eee;
                }
                cnt10++;
            } while (true);

            this.pushFollow(FormulaParser.FOLLOW_innerBlock_in_forLoop674);
            innerBlock35=this.innerBlock();

            this.state._fsp--;
            if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) stream_innerBlock.add(innerBlock35.getTree());
            ENDBLOCK36=this.match(this.input,ENDBLOCK,FormulaParser.FOLLOW_ENDBLOCK_in_forLoop677); if (this.state.failed) return retval; 
            if ( this.state.backtracking===0 ) stream_ENDBLOCK.add(ENDBLOCK36);

            LOOPSTATEMENT37=this.match(this.input,LOOPSTATEMENT,FormulaParser.FOLLOW_LOOPSTATEMENT_in_forLoop679); if (this.state.failed) return retval; 
            if ( this.state.backtracking===0 ) stream_LOOPSTATEMENT.add(LOOPSTATEMENT37);



            // AST REWRITE
            // elements: logicalExpression, innerBlock, IDENT
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( this.state.backtracking===0 ) {
            retval.tree = root_0;
            var stream_retval=new org.antlr.runtime.tree.RewriteRuleSubtreeStream(this.adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = this.adaptor.nil();
            // 147:162: -> ^( FOR IDENT ^( PARAMS ( logicalExpression )* ) innerBlock )
            {
                // /Library/WebServer/Documents/calc/Formula.g:147:165: ^( FOR IDENT ^( PARAMS ( logicalExpression )* ) innerBlock )
                {
                var root_1 = this.adaptor.nil();
                root_1 = this.adaptor.becomeRoot(this.adaptor.create(FOR, "FOR"), root_1);

                this.adaptor.addChild(root_1, stream_IDENT.nextNode());
                // /Library/WebServer/Documents/calc/Formula.g:147:177: ^( PARAMS ( logicalExpression )* )
                {
                var root_2 = this.adaptor.nil();
                root_2 = this.adaptor.becomeRoot(this.adaptor.create(PARAMS, "PARAMS"), root_2);

                // /Library/WebServer/Documents/calc/Formula.g:147:186: ( logicalExpression )*
                while ( stream_logicalExpression.hasNext() ) {
                    this.adaptor.addChild(root_2, stream_logicalExpression.nextTree());

                }
                stream_logicalExpression.reset();

                this.adaptor.addChild(root_1, root_2);
                }
                this.adaptor.addChild(root_1, stream_innerBlock.nextTree());

                this.adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}


            retval.stop = this.input.LT(-1);

            if ( this.state.backtracking===0 ) {

            retval.tree = this.adaptor.rulePostProcessing(root_0);
            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (re) {
            if (re instanceof org.antlr.runtime.RecognitionException) {
                this.reportError(re);
                this.recover(this.input,re);
                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
            } else {
                throw re;
            }
        }
        finally {
        }
        return retval;
    },

    // inline static return class
    forInLoop_return: (function() {
        FormulaParser.forInLoop_return = function(){};
        org.antlr.lang.extend(FormulaParser.forInLoop_return,
                          org.antlr.runtime.ParserRuleReturnScope,
        {
            getTree: function() { return this.tree; }
        });
        return;
    })(),

    // /Library/WebServer/Documents/calc/Formula.g:150:1: forInLoop : FORSTATEMENT IDENT INSTATEMENT logicalExpression ( NEWLINE )+ innerBlock ENDBLOCK LOOPSTATEMENT -> ^( FORIN IDENT logicalExpression innerBlock ) ;
    // $ANTLR start "forInLoop"
    forInLoop: function() {
        var retval = new FormulaParser.forInLoop_return();
        retval.start = this.input.LT(1);

        var root_0 = null;

        var FORSTATEMENT38 = null;
        var IDENT39 = null;
        var INSTATEMENT40 = null;
        var NEWLINE42 = null;
        var ENDBLOCK44 = null;
        var LOOPSTATEMENT45 = null;
         var logicalExpression41 = null;
         var innerBlock43 = null;

        var FORSTATEMENT38_tree=null;
        var IDENT39_tree=null;
        var INSTATEMENT40_tree=null;
        var NEWLINE42_tree=null;
        var ENDBLOCK44_tree=null;
        var LOOPSTATEMENT45_tree=null;
        var stream_FORSTATEMENT=new org.antlr.runtime.tree.RewriteRuleTokenStream(this.adaptor,"token FORSTATEMENT");
        var stream_IDENT=new org.antlr.runtime.tree.RewriteRuleTokenStream(this.adaptor,"token IDENT");
        var stream_NEWLINE=new org.antlr.runtime.tree.RewriteRuleTokenStream(this.adaptor,"token NEWLINE");
        var stream_ENDBLOCK=new org.antlr.runtime.tree.RewriteRuleTokenStream(this.adaptor,"token ENDBLOCK");
        var stream_LOOPSTATEMENT=new org.antlr.runtime.tree.RewriteRuleTokenStream(this.adaptor,"token LOOPSTATEMENT");
        var stream_INSTATEMENT=new org.antlr.runtime.tree.RewriteRuleTokenStream(this.adaptor,"token INSTATEMENT");
        var stream_innerBlock=new org.antlr.runtime.tree.RewriteRuleSubtreeStream(this.adaptor,"rule innerBlock");
        var stream_logicalExpression=new org.antlr.runtime.tree.RewriteRuleSubtreeStream(this.adaptor,"rule logicalExpression");
        try {
            // /Library/WebServer/Documents/calc/Formula.g:151:2: ( FORSTATEMENT IDENT INSTATEMENT logicalExpression ( NEWLINE )+ innerBlock ENDBLOCK LOOPSTATEMENT -> ^( FORIN IDENT logicalExpression innerBlock ) )
            // /Library/WebServer/Documents/calc/Formula.g:151:4: FORSTATEMENT IDENT INSTATEMENT logicalExpression ( NEWLINE )+ innerBlock ENDBLOCK LOOPSTATEMENT
            FORSTATEMENT38=this.match(this.input,FORSTATEMENT,FormulaParser.FOLLOW_FORSTATEMENT_in_forInLoop707); if (this.state.failed) return retval; 
            if ( this.state.backtracking===0 ) stream_FORSTATEMENT.add(FORSTATEMENT38);

            IDENT39=this.match(this.input,IDENT,FormulaParser.FOLLOW_IDENT_in_forInLoop709); if (this.state.failed) return retval; 
            if ( this.state.backtracking===0 ) stream_IDENT.add(IDENT39);

            INSTATEMENT40=this.match(this.input,INSTATEMENT,FormulaParser.FOLLOW_INSTATEMENT_in_forInLoop711); if (this.state.failed) return retval; 
            if ( this.state.backtracking===0 ) stream_INSTATEMENT.add(INSTATEMENT40);

            this.pushFollow(FormulaParser.FOLLOW_logicalExpression_in_forInLoop713);
            logicalExpression41=this.logicalExpression();

            this.state._fsp--;
            if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) stream_logicalExpression.add(logicalExpression41.getTree());
            // /Library/WebServer/Documents/calc/Formula.g:151:53: ( NEWLINE )+
            var cnt11=0;
            loop11:
            do {
                var alt11=2;
                var LA11_0 = this.input.LA(1);

                if ( (LA11_0==NEWLINE) ) {
                    alt11=1;
                }


                switch (alt11) {
                case 1 :
                    // /Library/WebServer/Documents/calc/Formula.g:0:0: NEWLINE
                    NEWLINE42=this.match(this.input,NEWLINE,FormulaParser.FOLLOW_NEWLINE_in_forInLoop715); if (this.state.failed) return retval; 
                    if ( this.state.backtracking===0 ) stream_NEWLINE.add(NEWLINE42);



                    break;

                default :
                    if ( cnt11 >= 1 ) {
                        break loop11;
                    }
                    if (this.state.backtracking>0) {this.state.failed=true; return retval;}
                        var eee = new org.antlr.runtime.EarlyExitException(11, this.input);
                        throw eee;
                }
                cnt11++;
            } while (true);

            this.pushFollow(FormulaParser.FOLLOW_innerBlock_in_forInLoop718);
            innerBlock43=this.innerBlock();

            this.state._fsp--;
            if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) stream_innerBlock.add(innerBlock43.getTree());
            ENDBLOCK44=this.match(this.input,ENDBLOCK,FormulaParser.FOLLOW_ENDBLOCK_in_forInLoop721); if (this.state.failed) return retval; 
            if ( this.state.backtracking===0 ) stream_ENDBLOCK.add(ENDBLOCK44);

            LOOPSTATEMENT45=this.match(this.input,LOOPSTATEMENT,FormulaParser.FOLLOW_LOOPSTATEMENT_in_forInLoop723); if (this.state.failed) return retval; 
            if ( this.state.backtracking===0 ) stream_LOOPSTATEMENT.add(LOOPSTATEMENT45);



            // AST REWRITE
            // elements: IDENT, innerBlock, logicalExpression
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( this.state.backtracking===0 ) {
            retval.tree = root_0;
            var stream_retval=new org.antlr.runtime.tree.RewriteRuleSubtreeStream(this.adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = this.adaptor.nil();
            // 151:98: -> ^( FORIN IDENT logicalExpression innerBlock )
            {
                // /Library/WebServer/Documents/calc/Formula.g:151:101: ^( FORIN IDENT logicalExpression innerBlock )
                {
                var root_1 = this.adaptor.nil();
                root_1 = this.adaptor.becomeRoot(this.adaptor.create(FORIN, "FORIN"), root_1);

                this.adaptor.addChild(root_1, stream_IDENT.nextNode());
                this.adaptor.addChild(root_1, stream_logicalExpression.nextTree());
                this.adaptor.addChild(root_1, stream_innerBlock.nextTree());

                this.adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}


            retval.stop = this.input.LT(-1);

            if ( this.state.backtracking===0 ) {

            retval.tree = this.adaptor.rulePostProcessing(root_0);
            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (re) {
            if (re instanceof org.antlr.runtime.RecognitionException) {
                this.reportError(re);
                this.recover(this.input,re);
                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
            } else {
                throw re;
            }
        }
        finally {
        }
        return retval;
    },

    // inline static return class
    ifThenElse_return: (function() {
        FormulaParser.ifThenElse_return = function(){};
        org.antlr.lang.extend(FormulaParser.ifThenElse_return,
                          org.antlr.runtime.ParserRuleReturnScope,
        {
            getTree: function() { return this.tree; }
        });
        return;
    })(),

    // /Library/WebServer/Documents/calc/Formula.g:154:1: ifThenElse : IFSTATEMENT logicalExpression THENSTATEMENT ( NEWLINE )+ innerBlock ( ELSESTATEMENT IFSTATEMENT logicalExpression THENSTATEMENT ( NEWLINE )+ innerBlock )* ( ELSESTATEMENT ( NEWLINE )+ innerBlock )? ENDBLOCK IFSTATEMENT -> ^( IFTHENELSE ^( PARAMS ( logicalExpression )+ ) ^( PARAMS ( innerBlock )+ ) ) ;
    // $ANTLR start "ifThenElse"
    ifThenElse: function() {
        var retval = new FormulaParser.ifThenElse_return();
        retval.start = this.input.LT(1);

        var root_0 = null;

        var IFSTATEMENT46 = null;
        var THENSTATEMENT48 = null;
        var NEWLINE49 = null;
        var ELSESTATEMENT51 = null;
        var IFSTATEMENT52 = null;
        var THENSTATEMENT54 = null;
        var NEWLINE55 = null;
        var ELSESTATEMENT57 = null;
        var NEWLINE58 = null;
        var ENDBLOCK60 = null;
        var IFSTATEMENT61 = null;
         var logicalExpression47 = null;
         var innerBlock50 = null;
         var logicalExpression53 = null;
         var innerBlock56 = null;
         var innerBlock59 = null;

        var IFSTATEMENT46_tree=null;
        var THENSTATEMENT48_tree=null;
        var NEWLINE49_tree=null;
        var ELSESTATEMENT51_tree=null;
        var IFSTATEMENT52_tree=null;
        var THENSTATEMENT54_tree=null;
        var NEWLINE55_tree=null;
        var ELSESTATEMENT57_tree=null;
        var NEWLINE58_tree=null;
        var ENDBLOCK60_tree=null;
        var IFSTATEMENT61_tree=null;
        var stream_IFSTATEMENT=new org.antlr.runtime.tree.RewriteRuleTokenStream(this.adaptor,"token IFSTATEMENT");
        var stream_NEWLINE=new org.antlr.runtime.tree.RewriteRuleTokenStream(this.adaptor,"token NEWLINE");
        var stream_ENDBLOCK=new org.antlr.runtime.tree.RewriteRuleTokenStream(this.adaptor,"token ENDBLOCK");
        var stream_ELSESTATEMENT=new org.antlr.runtime.tree.RewriteRuleTokenStream(this.adaptor,"token ELSESTATEMENT");
        var stream_THENSTATEMENT=new org.antlr.runtime.tree.RewriteRuleTokenStream(this.adaptor,"token THENSTATEMENT");
        var stream_innerBlock=new org.antlr.runtime.tree.RewriteRuleSubtreeStream(this.adaptor,"rule innerBlock");
        var stream_logicalExpression=new org.antlr.runtime.tree.RewriteRuleSubtreeStream(this.adaptor,"rule logicalExpression");
        try {
            // /Library/WebServer/Documents/calc/Formula.g:155:2: ( IFSTATEMENT logicalExpression THENSTATEMENT ( NEWLINE )+ innerBlock ( ELSESTATEMENT IFSTATEMENT logicalExpression THENSTATEMENT ( NEWLINE )+ innerBlock )* ( ELSESTATEMENT ( NEWLINE )+ innerBlock )? ENDBLOCK IFSTATEMENT -> ^( IFTHENELSE ^( PARAMS ( logicalExpression )+ ) ^( PARAMS ( innerBlock )+ ) ) )
            // /Library/WebServer/Documents/calc/Formula.g:155:4: IFSTATEMENT logicalExpression THENSTATEMENT ( NEWLINE )+ innerBlock ( ELSESTATEMENT IFSTATEMENT logicalExpression THENSTATEMENT ( NEWLINE )+ innerBlock )* ( ELSESTATEMENT ( NEWLINE )+ innerBlock )? ENDBLOCK IFSTATEMENT
            IFSTATEMENT46=this.match(this.input,IFSTATEMENT,FormulaParser.FOLLOW_IFSTATEMENT_in_ifThenElse748); if (this.state.failed) return retval; 
            if ( this.state.backtracking===0 ) stream_IFSTATEMENT.add(IFSTATEMENT46);

            this.pushFollow(FormulaParser.FOLLOW_logicalExpression_in_ifThenElse750);
            logicalExpression47=this.logicalExpression();

            this.state._fsp--;
            if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) stream_logicalExpression.add(logicalExpression47.getTree());
            THENSTATEMENT48=this.match(this.input,THENSTATEMENT,FormulaParser.FOLLOW_THENSTATEMENT_in_ifThenElse752); if (this.state.failed) return retval; 
            if ( this.state.backtracking===0 ) stream_THENSTATEMENT.add(THENSTATEMENT48);

            // /Library/WebServer/Documents/calc/Formula.g:155:49: ( NEWLINE )+
            var cnt12=0;
            loop12:
            do {
                var alt12=2;
                var LA12_0 = this.input.LA(1);

                if ( (LA12_0==NEWLINE) ) {
                    alt12=1;
                }


                switch (alt12) {
                case 1 :
                    // /Library/WebServer/Documents/calc/Formula.g:0:0: NEWLINE
                    NEWLINE49=this.match(this.input,NEWLINE,FormulaParser.FOLLOW_NEWLINE_in_ifThenElse755); if (this.state.failed) return retval; 
                    if ( this.state.backtracking===0 ) stream_NEWLINE.add(NEWLINE49);



                    break;

                default :
                    if ( cnt12 >= 1 ) {
                        break loop12;
                    }
                    if (this.state.backtracking>0) {this.state.failed=true; return retval;}
                        var eee = new org.antlr.runtime.EarlyExitException(12, this.input);
                        throw eee;
                }
                cnt12++;
            } while (true);

            this.pushFollow(FormulaParser.FOLLOW_innerBlock_in_ifThenElse758);
            innerBlock50=this.innerBlock();

            this.state._fsp--;
            if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) stream_innerBlock.add(innerBlock50.getTree());
            // /Library/WebServer/Documents/calc/Formula.g:155:70: ( ELSESTATEMENT IFSTATEMENT logicalExpression THENSTATEMENT ( NEWLINE )+ innerBlock )*
            loop14:
            do {
                var alt14=2;
                var LA14_0 = this.input.LA(1);

                if ( (LA14_0==ELSESTATEMENT) ) {
                    var LA14_1 = this.input.LA(2);

                    if ( (LA14_1==IFSTATEMENT) ) {
                        alt14=1;
                    }


                }


                switch (alt14) {
                case 1 :
                    // /Library/WebServer/Documents/calc/Formula.g:155:71: ELSESTATEMENT IFSTATEMENT logicalExpression THENSTATEMENT ( NEWLINE )+ innerBlock
                    ELSESTATEMENT51=this.match(this.input,ELSESTATEMENT,FormulaParser.FOLLOW_ELSESTATEMENT_in_ifThenElse762); if (this.state.failed) return retval; 
                    if ( this.state.backtracking===0 ) stream_ELSESTATEMENT.add(ELSESTATEMENT51);

                    IFSTATEMENT52=this.match(this.input,IFSTATEMENT,FormulaParser.FOLLOW_IFSTATEMENT_in_ifThenElse764); if (this.state.failed) return retval; 
                    if ( this.state.backtracking===0 ) stream_IFSTATEMENT.add(IFSTATEMENT52);

                    this.pushFollow(FormulaParser.FOLLOW_logicalExpression_in_ifThenElse766);
                    logicalExpression53=this.logicalExpression();

                    this.state._fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) stream_logicalExpression.add(logicalExpression53.getTree());
                    THENSTATEMENT54=this.match(this.input,THENSTATEMENT,FormulaParser.FOLLOW_THENSTATEMENT_in_ifThenElse768); if (this.state.failed) return retval; 
                    if ( this.state.backtracking===0 ) stream_THENSTATEMENT.add(THENSTATEMENT54);

                    // /Library/WebServer/Documents/calc/Formula.g:155:129: ( NEWLINE )+
                    var cnt13=0;
                    loop13:
                    do {
                        var alt13=2;
                        var LA13_0 = this.input.LA(1);

                        if ( (LA13_0==NEWLINE) ) {
                            alt13=1;
                        }


                        switch (alt13) {
                        case 1 :
                            // /Library/WebServer/Documents/calc/Formula.g:0:0: NEWLINE
                            NEWLINE55=this.match(this.input,NEWLINE,FormulaParser.FOLLOW_NEWLINE_in_ifThenElse770); if (this.state.failed) return retval; 
                            if ( this.state.backtracking===0 ) stream_NEWLINE.add(NEWLINE55);



                            break;

                        default :
                            if ( cnt13 >= 1 ) {
                                break loop13;
                            }
                            if (this.state.backtracking>0) {this.state.failed=true; return retval;}
                                var eee = new org.antlr.runtime.EarlyExitException(13, this.input);
                                throw eee;
                        }
                        cnt13++;
                    } while (true);

                    this.pushFollow(FormulaParser.FOLLOW_innerBlock_in_ifThenElse773);
                    innerBlock56=this.innerBlock();

                    this.state._fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) stream_innerBlock.add(innerBlock56.getTree());


                    break;

                default :
                    break loop14;
                }
            } while (true);

            // /Library/WebServer/Documents/calc/Formula.g:155:151: ( ELSESTATEMENT ( NEWLINE )+ innerBlock )?
            var alt16=2;
            var LA16_0 = this.input.LA(1);

            if ( (LA16_0==ELSESTATEMENT) ) {
                alt16=1;
            }
            switch (alt16) {
                case 1 :
                    // /Library/WebServer/Documents/calc/Formula.g:155:152: ELSESTATEMENT ( NEWLINE )+ innerBlock
                    ELSESTATEMENT57=this.match(this.input,ELSESTATEMENT,FormulaParser.FOLLOW_ELSESTATEMENT_in_ifThenElse778); if (this.state.failed) return retval; 
                    if ( this.state.backtracking===0 ) stream_ELSESTATEMENT.add(ELSESTATEMENT57);

                    // /Library/WebServer/Documents/calc/Formula.g:155:166: ( NEWLINE )+
                    var cnt15=0;
                    loop15:
                    do {
                        var alt15=2;
                        var LA15_0 = this.input.LA(1);

                        if ( (LA15_0==NEWLINE) ) {
                            alt15=1;
                        }


                        switch (alt15) {
                        case 1 :
                            // /Library/WebServer/Documents/calc/Formula.g:0:0: NEWLINE
                            NEWLINE58=this.match(this.input,NEWLINE,FormulaParser.FOLLOW_NEWLINE_in_ifThenElse780); if (this.state.failed) return retval; 
                            if ( this.state.backtracking===0 ) stream_NEWLINE.add(NEWLINE58);



                            break;

                        default :
                            if ( cnt15 >= 1 ) {
                                break loop15;
                            }
                            if (this.state.backtracking>0) {this.state.failed=true; return retval;}
                                var eee = new org.antlr.runtime.EarlyExitException(15, this.input);
                                throw eee;
                        }
                        cnt15++;
                    } while (true);

                    this.pushFollow(FormulaParser.FOLLOW_innerBlock_in_ifThenElse783);
                    innerBlock59=this.innerBlock();

                    this.state._fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) stream_innerBlock.add(innerBlock59.getTree());


                    break;

            }

            ENDBLOCK60=this.match(this.input,ENDBLOCK,FormulaParser.FOLLOW_ENDBLOCK_in_ifThenElse787); if (this.state.failed) return retval; 
            if ( this.state.backtracking===0 ) stream_ENDBLOCK.add(ENDBLOCK60);

            IFSTATEMENT61=this.match(this.input,IFSTATEMENT,FormulaParser.FOLLOW_IFSTATEMENT_in_ifThenElse789); if (this.state.failed) return retval; 
            if ( this.state.backtracking===0 ) stream_IFSTATEMENT.add(IFSTATEMENT61);



            // AST REWRITE
            // elements: innerBlock, logicalExpression
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( this.state.backtracking===0 ) {
            retval.tree = root_0;
            var stream_retval=new org.antlr.runtime.tree.RewriteRuleSubtreeStream(this.adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = this.adaptor.nil();
            // 155:209: -> ^( IFTHENELSE ^( PARAMS ( logicalExpression )+ ) ^( PARAMS ( innerBlock )+ ) )
            {
                // /Library/WebServer/Documents/calc/Formula.g:155:212: ^( IFTHENELSE ^( PARAMS ( logicalExpression )+ ) ^( PARAMS ( innerBlock )+ ) )
                {
                var root_1 = this.adaptor.nil();
                root_1 = this.adaptor.becomeRoot(this.adaptor.create(IFTHENELSE, "IFTHENELSE"), root_1);

                // /Library/WebServer/Documents/calc/Formula.g:155:225: ^( PARAMS ( logicalExpression )+ )
                {
                var root_2 = this.adaptor.nil();
                root_2 = this.adaptor.becomeRoot(this.adaptor.create(PARAMS, "PARAMS"), root_2);

                if ( !(stream_logicalExpression.hasNext()) ) {
                    throw new org.antlr.runtime.tree.RewriteEarlyExitException();
                }
                while ( stream_logicalExpression.hasNext() ) {
                    this.adaptor.addChild(root_2, stream_logicalExpression.nextTree());

                }
                stream_logicalExpression.reset();

                this.adaptor.addChild(root_1, root_2);
                }
                // /Library/WebServer/Documents/calc/Formula.g:155:254: ^( PARAMS ( innerBlock )+ )
                {
                var root_2 = this.adaptor.nil();
                root_2 = this.adaptor.becomeRoot(this.adaptor.create(PARAMS, "PARAMS"), root_2);

                if ( !(stream_innerBlock.hasNext()) ) {
                    throw new org.antlr.runtime.tree.RewriteEarlyExitException();
                }
                while ( stream_innerBlock.hasNext() ) {
                    this.adaptor.addChild(root_2, stream_innerBlock.nextTree());

                }
                stream_innerBlock.reset();

                this.adaptor.addChild(root_1, root_2);
                }

                this.adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}


            retval.stop = this.input.LT(-1);

            if ( this.state.backtracking===0 ) {

            retval.tree = this.adaptor.rulePostProcessing(root_0);
            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (re) {
            if (re instanceof org.antlr.runtime.RecognitionException) {
                this.reportError(re);
                this.recover(this.input,re);
                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
            } else {
                throw re;
            }
        }
        finally {
        }
        return retval;
    },

    // inline static return class
    functionDef_return: (function() {
        FormulaParser.functionDef_return = function(){};
        org.antlr.lang.extend(FormulaParser.functionDef_return,
                          org.antlr.runtime.ParserRuleReturnScope,
        {
            getTree: function() { return this.tree; }
        });
        return;
    })(),

    // /Library/WebServer/Documents/calc/Formula.g:158:1: functionDef : FUNCTIONSTATEMENT IDENT '(' ( IDENT ( EQUALS defaultValue | ( ',' IDENT )* ) ( ',' IDENT EQUALS defaultValue )* )? ')' ( NEWLINE )+ innerBlock ENDBLOCK FUNCTIONSTATEMENT -> ^( FUNCTION ^( PARAMS ( IDENT )* ) ^( DEFAULTS ( defaultValue )* ) innerBlock ) ;
    // $ANTLR start "functionDef"
    functionDef: function() {
        var retval = new FormulaParser.functionDef_return();
        retval.start = this.input.LT(1);

        var root_0 = null;

        var FUNCTIONSTATEMENT62 = null;
        var IDENT63 = null;
        var char_literal64 = null;
        var IDENT65 = null;
        var EQUALS66 = null;
        var char_literal68 = null;
        var IDENT69 = null;
        var char_literal70 = null;
        var IDENT71 = null;
        var EQUALS72 = null;
        var char_literal74 = null;
        var NEWLINE75 = null;
        var ENDBLOCK77 = null;
        var FUNCTIONSTATEMENT78 = null;
         var defaultValue67 = null;
         var defaultValue73 = null;
         var innerBlock76 = null;

        var FUNCTIONSTATEMENT62_tree=null;
        var IDENT63_tree=null;
        var char_literal64_tree=null;
        var IDENT65_tree=null;
        var EQUALS66_tree=null;
        var char_literal68_tree=null;
        var IDENT69_tree=null;
        var char_literal70_tree=null;
        var IDENT71_tree=null;
        var EQUALS72_tree=null;
        var char_literal74_tree=null;
        var NEWLINE75_tree=null;
        var ENDBLOCK77_tree=null;
        var FUNCTIONSTATEMENT78_tree=null;
        var stream_FUNCTIONSTATEMENT=new org.antlr.runtime.tree.RewriteRuleTokenStream(this.adaptor,"token FUNCTIONSTATEMENT");
        var stream_114=new org.antlr.runtime.tree.RewriteRuleTokenStream(this.adaptor,"token 114");
        var stream_IDENT=new org.antlr.runtime.tree.RewriteRuleTokenStream(this.adaptor,"token IDENT");
        var stream_EQUALS=new org.antlr.runtime.tree.RewriteRuleTokenStream(this.adaptor,"token EQUALS");
        var stream_113=new org.antlr.runtime.tree.RewriteRuleTokenStream(this.adaptor,"token 113");
        var stream_NEWLINE=new org.antlr.runtime.tree.RewriteRuleTokenStream(this.adaptor,"token NEWLINE");
        var stream_COMMA=new org.antlr.runtime.tree.RewriteRuleTokenStream(this.adaptor,"token COMMA");
        var stream_ENDBLOCK=new org.antlr.runtime.tree.RewriteRuleTokenStream(this.adaptor,"token ENDBLOCK");
        var stream_innerBlock=new org.antlr.runtime.tree.RewriteRuleSubtreeStream(this.adaptor,"rule innerBlock");
        var stream_defaultValue=new org.antlr.runtime.tree.RewriteRuleSubtreeStream(this.adaptor,"rule defaultValue");
        try {
            // /Library/WebServer/Documents/calc/Formula.g:159:2: ( FUNCTIONSTATEMENT IDENT '(' ( IDENT ( EQUALS defaultValue | ( ',' IDENT )* ) ( ',' IDENT EQUALS defaultValue )* )? ')' ( NEWLINE )+ innerBlock ENDBLOCK FUNCTIONSTATEMENT -> ^( FUNCTION ^( PARAMS ( IDENT )* ) ^( DEFAULTS ( defaultValue )* ) innerBlock ) )
            // /Library/WebServer/Documents/calc/Formula.g:159:4: FUNCTIONSTATEMENT IDENT '(' ( IDENT ( EQUALS defaultValue | ( ',' IDENT )* ) ( ',' IDENT EQUALS defaultValue )* )? ')' ( NEWLINE )+ innerBlock ENDBLOCK FUNCTIONSTATEMENT
            FUNCTIONSTATEMENT62=this.match(this.input,FUNCTIONSTATEMENT,FormulaParser.FOLLOW_FUNCTIONSTATEMENT_in_functionDef820); if (this.state.failed) return retval; 
            if ( this.state.backtracking===0 ) stream_FUNCTIONSTATEMENT.add(FUNCTIONSTATEMENT62);

            IDENT63=this.match(this.input,IDENT,FormulaParser.FOLLOW_IDENT_in_functionDef822); if (this.state.failed) return retval; 
            if ( this.state.backtracking===0 ) stream_IDENT.add(IDENT63);

            char_literal64=this.match(this.input,113,FormulaParser.FOLLOW_113_in_functionDef824); if (this.state.failed) return retval; 
            if ( this.state.backtracking===0 ) stream_113.add(char_literal64);

            // /Library/WebServer/Documents/calc/Formula.g:159:32: ( IDENT ( EQUALS defaultValue | ( ',' IDENT )* ) ( ',' IDENT EQUALS defaultValue )* )?
            var alt20=2;
            var LA20_0 = this.input.LA(1);

            if ( (LA20_0==IDENT) ) {
                alt20=1;
            }
            switch (alt20) {
                case 1 :
                    // /Library/WebServer/Documents/calc/Formula.g:159:33: IDENT ( EQUALS defaultValue | ( ',' IDENT )* ) ( ',' IDENT EQUALS defaultValue )*
                    IDENT65=this.match(this.input,IDENT,FormulaParser.FOLLOW_IDENT_in_functionDef827); if (this.state.failed) return retval; 
                    if ( this.state.backtracking===0 ) stream_IDENT.add(IDENT65);

                    // /Library/WebServer/Documents/calc/Formula.g:159:40: ( EQUALS defaultValue | ( ',' IDENT )* )
                    var alt18=2;
                    var LA18_0 = this.input.LA(1);

                    if ( (LA18_0==EQUALS) ) {
                        alt18=1;
                    }
                    else if ( (LA18_0==COMMA||LA18_0==114) ) {
                        alt18=2;
                    }
                    else {
                        if (this.state.backtracking>0) {this.state.failed=true; return retval;}
                        var nvae =
                            new org.antlr.runtime.NoViableAltException("", 18, 0, this.input);

                        throw nvae;
                    }
                    switch (alt18) {
                        case 1 :
                            // /Library/WebServer/Documents/calc/Formula.g:159:41: EQUALS defaultValue
                            EQUALS66=this.match(this.input,EQUALS,FormulaParser.FOLLOW_EQUALS_in_functionDef831); if (this.state.failed) return retval; 
                            if ( this.state.backtracking===0 ) stream_EQUALS.add(EQUALS66);

                            this.pushFollow(FormulaParser.FOLLOW_defaultValue_in_functionDef834);
                            defaultValue67=this.defaultValue();

                            this.state._fsp--;
                            if (this.state.failed) return retval;
                            if ( this.state.backtracking===0 ) stream_defaultValue.add(defaultValue67.getTree());


                            break;
                        case 2 :
                            // /Library/WebServer/Documents/calc/Formula.g:159:64: ( ',' IDENT )*
                            // /Library/WebServer/Documents/calc/Formula.g:159:64: ( ',' IDENT )*
                            loop17:
                            do {
                                var alt17=2;
                                var LA17_0 = this.input.LA(1);

                                if ( (LA17_0==COMMA) ) {
                                    var LA17_1 = this.input.LA(2);

                                    if ( (LA17_1==IDENT) ) {
                                        var LA17_3 = this.input.LA(3);

                                        if ( (LA17_3==COMMA||LA17_3==114) ) {
                                            alt17=1;
                                        }


                                    }


                                }


                                switch (alt17) {
                                case 1 :
                                    // /Library/WebServer/Documents/calc/Formula.g:159:65: ',' IDENT
                                    char_literal68=this.match(this.input,COMMA,FormulaParser.FOLLOW_COMMA_in_functionDef839); if (this.state.failed) return retval; 
                                    if ( this.state.backtracking===0 ) stream_COMMA.add(char_literal68);

                                    IDENT69=this.match(this.input,IDENT,FormulaParser.FOLLOW_IDENT_in_functionDef841); if (this.state.failed) return retval; 
                                    if ( this.state.backtracking===0 ) stream_IDENT.add(IDENT69);



                                    break;

                                default :
                                    break loop17;
                                }
                            } while (true);



                            break;

                    }

                    // /Library/WebServer/Documents/calc/Formula.g:159:79: ( ',' IDENT EQUALS defaultValue )*
                    loop19:
                    do {
                        var alt19=2;
                        var LA19_0 = this.input.LA(1);

                        if ( (LA19_0==COMMA) ) {
                            alt19=1;
                        }


                        switch (alt19) {
                        case 1 :
                            // /Library/WebServer/Documents/calc/Formula.g:159:80: ',' IDENT EQUALS defaultValue
                            char_literal70=this.match(this.input,COMMA,FormulaParser.FOLLOW_COMMA_in_functionDef848); if (this.state.failed) return retval; 
                            if ( this.state.backtracking===0 ) stream_COMMA.add(char_literal70);

                            IDENT71=this.match(this.input,IDENT,FormulaParser.FOLLOW_IDENT_in_functionDef850); if (this.state.failed) return retval; 
                            if ( this.state.backtracking===0 ) stream_IDENT.add(IDENT71);

                            EQUALS72=this.match(this.input,EQUALS,FormulaParser.FOLLOW_EQUALS_in_functionDef852); if (this.state.failed) return retval; 
                            if ( this.state.backtracking===0 ) stream_EQUALS.add(EQUALS72);

                            this.pushFollow(FormulaParser.FOLLOW_defaultValue_in_functionDef854);
                            defaultValue73=this.defaultValue();

                            this.state._fsp--;
                            if (this.state.failed) return retval;
                            if ( this.state.backtracking===0 ) stream_defaultValue.add(defaultValue73.getTree());


                            break;

                        default :
                            break loop19;
                        }
                    } while (true);



                    break;

            }

            char_literal74=this.match(this.input,114,FormulaParser.FOLLOW_114_in_functionDef861); if (this.state.failed) return retval; 
            if ( this.state.backtracking===0 ) stream_114.add(char_literal74);

            // /Library/WebServer/Documents/calc/Formula.g:159:119: ( NEWLINE )+
            var cnt21=0;
            loop21:
            do {
                var alt21=2;
                var LA21_0 = this.input.LA(1);

                if ( (LA21_0==NEWLINE) ) {
                    alt21=1;
                }


                switch (alt21) {
                case 1 :
                    // /Library/WebServer/Documents/calc/Formula.g:0:0: NEWLINE
                    NEWLINE75=this.match(this.input,NEWLINE,FormulaParser.FOLLOW_NEWLINE_in_functionDef863); if (this.state.failed) return retval; 
                    if ( this.state.backtracking===0 ) stream_NEWLINE.add(NEWLINE75);



                    break;

                default :
                    if ( cnt21 >= 1 ) {
                        break loop21;
                    }
                    if (this.state.backtracking>0) {this.state.failed=true; return retval;}
                        var eee = new org.antlr.runtime.EarlyExitException(21, this.input);
                        throw eee;
                }
                cnt21++;
            } while (true);

            this.pushFollow(FormulaParser.FOLLOW_innerBlock_in_functionDef866);
            innerBlock76=this.innerBlock();

            this.state._fsp--;
            if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) stream_innerBlock.add(innerBlock76.getTree());
            ENDBLOCK77=this.match(this.input,ENDBLOCK,FormulaParser.FOLLOW_ENDBLOCK_in_functionDef869); if (this.state.failed) return retval; 
            if ( this.state.backtracking===0 ) stream_ENDBLOCK.add(ENDBLOCK77);

            FUNCTIONSTATEMENT78=this.match(this.input,FUNCTIONSTATEMENT,FormulaParser.FOLLOW_FUNCTIONSTATEMENT_in_functionDef871); if (this.state.failed) return retval; 
            if ( this.state.backtracking===0 ) stream_FUNCTIONSTATEMENT.add(FUNCTIONSTATEMENT78);



            // AST REWRITE
            // elements: innerBlock, defaultValue, IDENT
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( this.state.backtracking===0 ) {
            retval.tree = root_0;
            var stream_retval=new org.antlr.runtime.tree.RewriteRuleSubtreeStream(this.adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = this.adaptor.nil();
            // 159:167: -> ^( FUNCTION ^( PARAMS ( IDENT )* ) ^( DEFAULTS ( defaultValue )* ) innerBlock )
            {
                // /Library/WebServer/Documents/calc/Formula.g:159:170: ^( FUNCTION ^( PARAMS ( IDENT )* ) ^( DEFAULTS ( defaultValue )* ) innerBlock )
                {
                var root_1 = this.adaptor.nil();
                root_1 = this.adaptor.becomeRoot(this.adaptor.create(FUNCTION, "FUNCTION"), root_1);

                // /Library/WebServer/Documents/calc/Formula.g:159:181: ^( PARAMS ( IDENT )* )
                {
                var root_2 = this.adaptor.nil();
                root_2 = this.adaptor.becomeRoot(this.adaptor.create(PARAMS, "PARAMS"), root_2);

                // /Library/WebServer/Documents/calc/Formula.g:159:190: ( IDENT )*
                while ( stream_IDENT.hasNext() ) {
                    this.adaptor.addChild(root_2, stream_IDENT.nextNode());

                }
                stream_IDENT.reset();

                this.adaptor.addChild(root_1, root_2);
                }
                // /Library/WebServer/Documents/calc/Formula.g:159:198: ^( DEFAULTS ( defaultValue )* )
                {
                var root_2 = this.adaptor.nil();
                root_2 = this.adaptor.becomeRoot(this.adaptor.create(DEFAULTS, "DEFAULTS"), root_2);

                // /Library/WebServer/Documents/calc/Formula.g:159:209: ( defaultValue )*
                while ( stream_defaultValue.hasNext() ) {
                    this.adaptor.addChild(root_2, stream_defaultValue.nextTree());

                }
                stream_defaultValue.reset();

                this.adaptor.addChild(root_1, root_2);
                }
                this.adaptor.addChild(root_1, stream_innerBlock.nextTree());

                this.adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}


            retval.stop = this.input.LT(-1);

            if ( this.state.backtracking===0 ) {

            retval.tree = this.adaptor.rulePostProcessing(root_0);
            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (re) {
            if (re instanceof org.antlr.runtime.RecognitionException) {
                this.reportError(re);
                this.recover(this.input,re);
                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
            } else {
                throw re;
            }
        }
        finally {
        }
        return retval;
    },

    // inline static return class
    tryCatch_return: (function() {
        FormulaParser.tryCatch_return = function(){};
        org.antlr.lang.extend(FormulaParser.tryCatch_return,
                          org.antlr.runtime.ParserRuleReturnScope,
        {
            getTree: function() { return this.tree; }
        });
        return;
    })(),

    // /Library/WebServer/Documents/calc/Formula.g:162:1: tryCatch : TRYSTATEMENT ( NEWLINE )+ innerBlock CATCHSTATEMENT IDENT ( NEWLINE )+ innerBlock ENDBLOCK TRYSTATEMENT -> ^( TRYCATCH ( innerBlock )* IDENT ) ;
    // $ANTLR start "tryCatch"
    tryCatch: function() {
        var retval = new FormulaParser.tryCatch_return();
        retval.start = this.input.LT(1);

        var root_0 = null;

        var TRYSTATEMENT79 = null;
        var NEWLINE80 = null;
        var CATCHSTATEMENT82 = null;
        var IDENT83 = null;
        var NEWLINE84 = null;
        var ENDBLOCK86 = null;
        var TRYSTATEMENT87 = null;
         var innerBlock81 = null;
         var innerBlock85 = null;

        var TRYSTATEMENT79_tree=null;
        var NEWLINE80_tree=null;
        var CATCHSTATEMENT82_tree=null;
        var IDENT83_tree=null;
        var NEWLINE84_tree=null;
        var ENDBLOCK86_tree=null;
        var TRYSTATEMENT87_tree=null;
        var stream_IDENT=new org.antlr.runtime.tree.RewriteRuleTokenStream(this.adaptor,"token IDENT");
        var stream_TRYSTATEMENT=new org.antlr.runtime.tree.RewriteRuleTokenStream(this.adaptor,"token TRYSTATEMENT");
        var stream_NEWLINE=new org.antlr.runtime.tree.RewriteRuleTokenStream(this.adaptor,"token NEWLINE");
        var stream_CATCHSTATEMENT=new org.antlr.runtime.tree.RewriteRuleTokenStream(this.adaptor,"token CATCHSTATEMENT");
        var stream_ENDBLOCK=new org.antlr.runtime.tree.RewriteRuleTokenStream(this.adaptor,"token ENDBLOCK");
        var stream_innerBlock=new org.antlr.runtime.tree.RewriteRuleSubtreeStream(this.adaptor,"rule innerBlock");
        try {
            // /Library/WebServer/Documents/calc/Formula.g:163:2: ( TRYSTATEMENT ( NEWLINE )+ innerBlock CATCHSTATEMENT IDENT ( NEWLINE )+ innerBlock ENDBLOCK TRYSTATEMENT -> ^( TRYCATCH ( innerBlock )* IDENT ) )
            // /Library/WebServer/Documents/calc/Formula.g:163:4: TRYSTATEMENT ( NEWLINE )+ innerBlock CATCHSTATEMENT IDENT ( NEWLINE )+ innerBlock ENDBLOCK TRYSTATEMENT
            TRYSTATEMENT79=this.match(this.input,TRYSTATEMENT,FormulaParser.FOLLOW_TRYSTATEMENT_in_tryCatch904); if (this.state.failed) return retval; 
            if ( this.state.backtracking===0 ) stream_TRYSTATEMENT.add(TRYSTATEMENT79);

            // /Library/WebServer/Documents/calc/Formula.g:163:17: ( NEWLINE )+
            var cnt22=0;
            loop22:
            do {
                var alt22=2;
                var LA22_0 = this.input.LA(1);

                if ( (LA22_0==NEWLINE) ) {
                    alt22=1;
                }


                switch (alt22) {
                case 1 :
                    // /Library/WebServer/Documents/calc/Formula.g:0:0: NEWLINE
                    NEWLINE80=this.match(this.input,NEWLINE,FormulaParser.FOLLOW_NEWLINE_in_tryCatch906); if (this.state.failed) return retval; 
                    if ( this.state.backtracking===0 ) stream_NEWLINE.add(NEWLINE80);



                    break;

                default :
                    if ( cnt22 >= 1 ) {
                        break loop22;
                    }
                    if (this.state.backtracking>0) {this.state.failed=true; return retval;}
                        var eee = new org.antlr.runtime.EarlyExitException(22, this.input);
                        throw eee;
                }
                cnt22++;
            } while (true);

            this.pushFollow(FormulaParser.FOLLOW_innerBlock_in_tryCatch909);
            innerBlock81=this.innerBlock();

            this.state._fsp--;
            if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) stream_innerBlock.add(innerBlock81.getTree());
            CATCHSTATEMENT82=this.match(this.input,CATCHSTATEMENT,FormulaParser.FOLLOW_CATCHSTATEMENT_in_tryCatch911); if (this.state.failed) return retval; 
            if ( this.state.backtracking===0 ) stream_CATCHSTATEMENT.add(CATCHSTATEMENT82);

            IDENT83=this.match(this.input,IDENT,FormulaParser.FOLLOW_IDENT_in_tryCatch913); if (this.state.failed) return retval; 
            if ( this.state.backtracking===0 ) stream_IDENT.add(IDENT83);

            // /Library/WebServer/Documents/calc/Formula.g:163:58: ( NEWLINE )+
            var cnt23=0;
            loop23:
            do {
                var alt23=2;
                var LA23_0 = this.input.LA(1);

                if ( (LA23_0==NEWLINE) ) {
                    alt23=1;
                }


                switch (alt23) {
                case 1 :
                    // /Library/WebServer/Documents/calc/Formula.g:0:0: NEWLINE
                    NEWLINE84=this.match(this.input,NEWLINE,FormulaParser.FOLLOW_NEWLINE_in_tryCatch915); if (this.state.failed) return retval; 
                    if ( this.state.backtracking===0 ) stream_NEWLINE.add(NEWLINE84);



                    break;

                default :
                    if ( cnt23 >= 1 ) {
                        break loop23;
                    }
                    if (this.state.backtracking>0) {this.state.failed=true; return retval;}
                        var eee = new org.antlr.runtime.EarlyExitException(23, this.input);
                        throw eee;
                }
                cnt23++;
            } while (true);

            this.pushFollow(FormulaParser.FOLLOW_innerBlock_in_tryCatch919);
            innerBlock85=this.innerBlock();

            this.state._fsp--;
            if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) stream_innerBlock.add(innerBlock85.getTree());
            ENDBLOCK86=this.match(this.input,ENDBLOCK,FormulaParser.FOLLOW_ENDBLOCK_in_tryCatch921); if (this.state.failed) return retval; 
            if ( this.state.backtracking===0 ) stream_ENDBLOCK.add(ENDBLOCK86);

            TRYSTATEMENT87=this.match(this.input,TRYSTATEMENT,FormulaParser.FOLLOW_TRYSTATEMENT_in_tryCatch923); if (this.state.failed) return retval; 
            if ( this.state.backtracking===0 ) stream_TRYSTATEMENT.add(TRYSTATEMENT87);



            // AST REWRITE
            // elements: IDENT, innerBlock
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( this.state.backtracking===0 ) {
            retval.tree = root_0;
            var stream_retval=new org.antlr.runtime.tree.RewriteRuleSubtreeStream(this.adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = this.adaptor.nil();
            // 163:101: -> ^( TRYCATCH ( innerBlock )* IDENT )
            {
                // /Library/WebServer/Documents/calc/Formula.g:163:104: ^( TRYCATCH ( innerBlock )* IDENT )
                {
                var root_1 = this.adaptor.nil();
                root_1 = this.adaptor.becomeRoot(this.adaptor.create(TRYCATCH, "TRYCATCH"), root_1);

                // /Library/WebServer/Documents/calc/Formula.g:163:115: ( innerBlock )*
                while ( stream_innerBlock.hasNext() ) {
                    this.adaptor.addChild(root_1, stream_innerBlock.nextTree());

                }
                stream_innerBlock.reset();
                this.adaptor.addChild(root_1, stream_IDENT.nextNode());

                this.adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}


            retval.stop = this.input.LT(-1);

            if ( this.state.backtracking===0 ) {

            retval.tree = this.adaptor.rulePostProcessing(root_0);
            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (re) {
            if (re instanceof org.antlr.runtime.RecognitionException) {
                this.reportError(re);
                this.recover(this.input,re);
                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
            } else {
                throw re;
            }
        }
        finally {
        }
        return retval;
    },

    // inline static return class
    throwExp_return: (function() {
        FormulaParser.throwExp_return = function(){};
        org.antlr.lang.extend(FormulaParser.throwExp_return,
                          org.antlr.runtime.ParserRuleReturnScope,
        {
            getTree: function() { return this.tree; }
        });
        return;
    })(),

    // /Library/WebServer/Documents/calc/Formula.g:166:1: throwExp : THROWSTATEMENT primaryExpression -> ^( THROW primaryExpression ) ;
    // $ANTLR start "throwExp"
    throwExp: function() {
        var retval = new FormulaParser.throwExp_return();
        retval.start = this.input.LT(1);

        var root_0 = null;

        var THROWSTATEMENT88 = null;
         var primaryExpression89 = null;

        var THROWSTATEMENT88_tree=null;
        var stream_THROWSTATEMENT=new org.antlr.runtime.tree.RewriteRuleTokenStream(this.adaptor,"token THROWSTATEMENT");
        var stream_primaryExpression=new org.antlr.runtime.tree.RewriteRuleSubtreeStream(this.adaptor,"rule primaryExpression");
        try {
            // /Library/WebServer/Documents/calc/Formula.g:167:2: ( THROWSTATEMENT primaryExpression -> ^( THROW primaryExpression ) )
            // /Library/WebServer/Documents/calc/Formula.g:167:4: THROWSTATEMENT primaryExpression
            THROWSTATEMENT88=this.match(this.input,THROWSTATEMENT,FormulaParser.FOLLOW_THROWSTATEMENT_in_throwExp945); if (this.state.failed) return retval; 
            if ( this.state.backtracking===0 ) stream_THROWSTATEMENT.add(THROWSTATEMENT88);

            this.pushFollow(FormulaParser.FOLLOW_primaryExpression_in_throwExp947);
            primaryExpression89=this.primaryExpression();

            this.state._fsp--;
            if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) stream_primaryExpression.add(primaryExpression89.getTree());


            // AST REWRITE
            // elements: primaryExpression
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( this.state.backtracking===0 ) {
            retval.tree = root_0;
            var stream_retval=new org.antlr.runtime.tree.RewriteRuleSubtreeStream(this.adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = this.adaptor.nil();
            // 167:37: -> ^( THROW primaryExpression )
            {
                // /Library/WebServer/Documents/calc/Formula.g:167:40: ^( THROW primaryExpression )
                {
                var root_1 = this.adaptor.nil();
                root_1 = this.adaptor.becomeRoot(this.adaptor.create(THROW, "THROW"), root_1);

                this.adaptor.addChild(root_1, stream_primaryExpression.nextTree());

                this.adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}


            retval.stop = this.input.LT(-1);

            if ( this.state.backtracking===0 ) {

            retval.tree = this.adaptor.rulePostProcessing(root_0);
            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (re) {
            if (re instanceof org.antlr.runtime.RecognitionException) {
                this.reportError(re);
                this.recover(this.input,re);
                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
            } else {
                throw re;
            }
        }
        finally {
        }
        return retval;
    },

    // inline static return class
    anonFunctionDef_return: (function() {
        FormulaParser.anonFunctionDef_return = function(){};
        org.antlr.lang.extend(FormulaParser.anonFunctionDef_return,
                          org.antlr.runtime.ParserRuleReturnScope,
        {
            getTree: function() { return this.tree; }
        });
        return;
    })(),

    // /Library/WebServer/Documents/calc/Formula.g:170:1: anonFunctionDef : FUNCTIONSTATEMENT '(' ( IDENT ( EQUALS defaultValue | ( ',' IDENT )* ) ( ',' IDENT EQUALS defaultValue )* )? ')' ( ( ( NEWLINE )+ innerBlock ENDBLOCK FUNCTIONSTATEMENT ) | expression ) -> ^( ANONFUNCTION ^( PARAMS ( IDENT )* ) ^( DEFAULTS ( defaultValue )* ) ( innerBlock )? ( expression )? ) ;
    // $ANTLR start "anonFunctionDef"
    anonFunctionDef: function() {
        var retval = new FormulaParser.anonFunctionDef_return();
        retval.start = this.input.LT(1);

        var root_0 = null;

        var FUNCTIONSTATEMENT90 = null;
        var char_literal91 = null;
        var IDENT92 = null;
        var EQUALS93 = null;
        var char_literal95 = null;
        var IDENT96 = null;
        var char_literal97 = null;
        var IDENT98 = null;
        var EQUALS99 = null;
        var char_literal101 = null;
        var NEWLINE102 = null;
        var ENDBLOCK104 = null;
        var FUNCTIONSTATEMENT105 = null;
         var defaultValue94 = null;
         var defaultValue100 = null;
         var innerBlock103 = null;
         var expression106 = null;

        var FUNCTIONSTATEMENT90_tree=null;
        var char_literal91_tree=null;
        var IDENT92_tree=null;
        var EQUALS93_tree=null;
        var char_literal95_tree=null;
        var IDENT96_tree=null;
        var char_literal97_tree=null;
        var IDENT98_tree=null;
        var EQUALS99_tree=null;
        var char_literal101_tree=null;
        var NEWLINE102_tree=null;
        var ENDBLOCK104_tree=null;
        var FUNCTIONSTATEMENT105_tree=null;
        var stream_FUNCTIONSTATEMENT=new org.antlr.runtime.tree.RewriteRuleTokenStream(this.adaptor,"token FUNCTIONSTATEMENT");
        var stream_114=new org.antlr.runtime.tree.RewriteRuleTokenStream(this.adaptor,"token 114");
        var stream_IDENT=new org.antlr.runtime.tree.RewriteRuleTokenStream(this.adaptor,"token IDENT");
        var stream_EQUALS=new org.antlr.runtime.tree.RewriteRuleTokenStream(this.adaptor,"token EQUALS");
        var stream_113=new org.antlr.runtime.tree.RewriteRuleTokenStream(this.adaptor,"token 113");
        var stream_NEWLINE=new org.antlr.runtime.tree.RewriteRuleTokenStream(this.adaptor,"token NEWLINE");
        var stream_COMMA=new org.antlr.runtime.tree.RewriteRuleTokenStream(this.adaptor,"token COMMA");
        var stream_ENDBLOCK=new org.antlr.runtime.tree.RewriteRuleTokenStream(this.adaptor,"token ENDBLOCK");
        var stream_expression=new org.antlr.runtime.tree.RewriteRuleSubtreeStream(this.adaptor,"rule expression");
        var stream_innerBlock=new org.antlr.runtime.tree.RewriteRuleSubtreeStream(this.adaptor,"rule innerBlock");
        var stream_defaultValue=new org.antlr.runtime.tree.RewriteRuleSubtreeStream(this.adaptor,"rule defaultValue");
        try {
            // /Library/WebServer/Documents/calc/Formula.g:171:2: ( FUNCTIONSTATEMENT '(' ( IDENT ( EQUALS defaultValue | ( ',' IDENT )* ) ( ',' IDENT EQUALS defaultValue )* )? ')' ( ( ( NEWLINE )+ innerBlock ENDBLOCK FUNCTIONSTATEMENT ) | expression ) -> ^( ANONFUNCTION ^( PARAMS ( IDENT )* ) ^( DEFAULTS ( defaultValue )* ) ( innerBlock )? ( expression )? ) )
            // /Library/WebServer/Documents/calc/Formula.g:171:4: FUNCTIONSTATEMENT '(' ( IDENT ( EQUALS defaultValue | ( ',' IDENT )* ) ( ',' IDENT EQUALS defaultValue )* )? ')' ( ( ( NEWLINE )+ innerBlock ENDBLOCK FUNCTIONSTATEMENT ) | expression )
            FUNCTIONSTATEMENT90=this.match(this.input,FUNCTIONSTATEMENT,FormulaParser.FOLLOW_FUNCTIONSTATEMENT_in_anonFunctionDef967); if (this.state.failed) return retval; 
            if ( this.state.backtracking===0 ) stream_FUNCTIONSTATEMENT.add(FUNCTIONSTATEMENT90);

            char_literal91=this.match(this.input,113,FormulaParser.FOLLOW_113_in_anonFunctionDef970); if (this.state.failed) return retval; 
            if ( this.state.backtracking===0 ) stream_113.add(char_literal91);

            // /Library/WebServer/Documents/calc/Formula.g:171:27: ( IDENT ( EQUALS defaultValue | ( ',' IDENT )* ) ( ',' IDENT EQUALS defaultValue )* )?
            var alt27=2;
            var LA27_0 = this.input.LA(1);

            if ( (LA27_0==IDENT) ) {
                alt27=1;
            }
            switch (alt27) {
                case 1 :
                    // /Library/WebServer/Documents/calc/Formula.g:171:28: IDENT ( EQUALS defaultValue | ( ',' IDENT )* ) ( ',' IDENT EQUALS defaultValue )*
                    IDENT92=this.match(this.input,IDENT,FormulaParser.FOLLOW_IDENT_in_anonFunctionDef973); if (this.state.failed) return retval; 
                    if ( this.state.backtracking===0 ) stream_IDENT.add(IDENT92);

                    // /Library/WebServer/Documents/calc/Formula.g:171:35: ( EQUALS defaultValue | ( ',' IDENT )* )
                    var alt25=2;
                    var LA25_0 = this.input.LA(1);

                    if ( (LA25_0==EQUALS) ) {
                        alt25=1;
                    }
                    else if ( (LA25_0==COMMA||LA25_0==114) ) {
                        alt25=2;
                    }
                    else {
                        if (this.state.backtracking>0) {this.state.failed=true; return retval;}
                        var nvae =
                            new org.antlr.runtime.NoViableAltException("", 25, 0, this.input);

                        throw nvae;
                    }
                    switch (alt25) {
                        case 1 :
                            // /Library/WebServer/Documents/calc/Formula.g:171:36: EQUALS defaultValue
                            EQUALS93=this.match(this.input,EQUALS,FormulaParser.FOLLOW_EQUALS_in_anonFunctionDef977); if (this.state.failed) return retval; 
                            if ( this.state.backtracking===0 ) stream_EQUALS.add(EQUALS93);

                            this.pushFollow(FormulaParser.FOLLOW_defaultValue_in_anonFunctionDef980);
                            defaultValue94=this.defaultValue();

                            this.state._fsp--;
                            if (this.state.failed) return retval;
                            if ( this.state.backtracking===0 ) stream_defaultValue.add(defaultValue94.getTree());


                            break;
                        case 2 :
                            // /Library/WebServer/Documents/calc/Formula.g:171:59: ( ',' IDENT )*
                            // /Library/WebServer/Documents/calc/Formula.g:171:59: ( ',' IDENT )*
                            loop24:
                            do {
                                var alt24=2;
                                var LA24_0 = this.input.LA(1);

                                if ( (LA24_0==COMMA) ) {
                                    var LA24_1 = this.input.LA(2);

                                    if ( (LA24_1==IDENT) ) {
                                        var LA24_3 = this.input.LA(3);

                                        if ( (LA24_3==COMMA||LA24_3==114) ) {
                                            alt24=1;
                                        }


                                    }


                                }


                                switch (alt24) {
                                case 1 :
                                    // /Library/WebServer/Documents/calc/Formula.g:171:60: ',' IDENT
                                    char_literal95=this.match(this.input,COMMA,FormulaParser.FOLLOW_COMMA_in_anonFunctionDef985); if (this.state.failed) return retval; 
                                    if ( this.state.backtracking===0 ) stream_COMMA.add(char_literal95);

                                    IDENT96=this.match(this.input,IDENT,FormulaParser.FOLLOW_IDENT_in_anonFunctionDef987); if (this.state.failed) return retval; 
                                    if ( this.state.backtracking===0 ) stream_IDENT.add(IDENT96);



                                    break;

                                default :
                                    break loop24;
                                }
                            } while (true);



                            break;

                    }

                    // /Library/WebServer/Documents/calc/Formula.g:171:74: ( ',' IDENT EQUALS defaultValue )*
                    loop26:
                    do {
                        var alt26=2;
                        var LA26_0 = this.input.LA(1);

                        if ( (LA26_0==COMMA) ) {
                            alt26=1;
                        }


                        switch (alt26) {
                        case 1 :
                            // /Library/WebServer/Documents/calc/Formula.g:171:75: ',' IDENT EQUALS defaultValue
                            char_literal97=this.match(this.input,COMMA,FormulaParser.FOLLOW_COMMA_in_anonFunctionDef994); if (this.state.failed) return retval; 
                            if ( this.state.backtracking===0 ) stream_COMMA.add(char_literal97);

                            IDENT98=this.match(this.input,IDENT,FormulaParser.FOLLOW_IDENT_in_anonFunctionDef996); if (this.state.failed) return retval; 
                            if ( this.state.backtracking===0 ) stream_IDENT.add(IDENT98);

                            EQUALS99=this.match(this.input,EQUALS,FormulaParser.FOLLOW_EQUALS_in_anonFunctionDef998); if (this.state.failed) return retval; 
                            if ( this.state.backtracking===0 ) stream_EQUALS.add(EQUALS99);

                            this.pushFollow(FormulaParser.FOLLOW_defaultValue_in_anonFunctionDef1000);
                            defaultValue100=this.defaultValue();

                            this.state._fsp--;
                            if (this.state.failed) return retval;
                            if ( this.state.backtracking===0 ) stream_defaultValue.add(defaultValue100.getTree());


                            break;

                        default :
                            break loop26;
                        }
                    } while (true);



                    break;

            }

            char_literal101=this.match(this.input,114,FormulaParser.FOLLOW_114_in_anonFunctionDef1007); if (this.state.failed) return retval; 
            if ( this.state.backtracking===0 ) stream_114.add(char_literal101);

            // /Library/WebServer/Documents/calc/Formula.g:171:114: ( ( ( NEWLINE )+ innerBlock ENDBLOCK FUNCTIONSTATEMENT ) | expression )
            var alt29=2;
            var LA29_0 = this.input.LA(1);

            if ( (LA29_0==NEWLINE) ) {
                alt29=1;
            }
            else if ( (LA29_0==WHILESTATEMENT||LA29_0==FORSTATEMENT||LA29_0==IFSTATEMENT||LA29_0==FUNCTIONSTATEMENT||(LA29_0>=RETURNSTATEMENT && LA29_0<=TRYSTATEMENT)||(LA29_0>=THROWSTATEMENT && LA29_0<=IDENT)||LA29_0==PRIMITIVE||LA29_0==MINUS||(LA29_0>=NOT && LA29_0<=LARR)||LA29_0==LCURL||(LA29_0>=STRING && LA29_0<=FALSE)||LA29_0==113) ) {
                alt29=2;
            }
            else {
                if (this.state.backtracking>0) {this.state.failed=true; return retval;}
                var nvae =
                    new org.antlr.runtime.NoViableAltException("", 29, 0, this.input);

                throw nvae;
            }
            switch (alt29) {
                case 1 :
                    // /Library/WebServer/Documents/calc/Formula.g:171:116: ( ( NEWLINE )+ innerBlock ENDBLOCK FUNCTIONSTATEMENT )
                    // /Library/WebServer/Documents/calc/Formula.g:171:116: ( ( NEWLINE )+ innerBlock ENDBLOCK FUNCTIONSTATEMENT )
                    // /Library/WebServer/Documents/calc/Formula.g:171:117: ( NEWLINE )+ innerBlock ENDBLOCK FUNCTIONSTATEMENT
                    // /Library/WebServer/Documents/calc/Formula.g:171:117: ( NEWLINE )+
                    var cnt28=0;
                    loop28:
                    do {
                        var alt28=2;
                        var LA28_0 = this.input.LA(1);

                        if ( (LA28_0==NEWLINE) ) {
                            alt28=1;
                        }


                        switch (alt28) {
                        case 1 :
                            // /Library/WebServer/Documents/calc/Formula.g:0:0: NEWLINE
                            NEWLINE102=this.match(this.input,NEWLINE,FormulaParser.FOLLOW_NEWLINE_in_anonFunctionDef1012); if (this.state.failed) return retval; 
                            if ( this.state.backtracking===0 ) stream_NEWLINE.add(NEWLINE102);



                            break;

                        default :
                            if ( cnt28 >= 1 ) {
                                break loop28;
                            }
                            if (this.state.backtracking>0) {this.state.failed=true; return retval;}
                                var eee = new org.antlr.runtime.EarlyExitException(28, this.input);
                                throw eee;
                        }
                        cnt28++;
                    } while (true);

                    this.pushFollow(FormulaParser.FOLLOW_innerBlock_in_anonFunctionDef1015);
                    innerBlock103=this.innerBlock();

                    this.state._fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) stream_innerBlock.add(innerBlock103.getTree());
                    ENDBLOCK104=this.match(this.input,ENDBLOCK,FormulaParser.FOLLOW_ENDBLOCK_in_anonFunctionDef1018); if (this.state.failed) return retval; 
                    if ( this.state.backtracking===0 ) stream_ENDBLOCK.add(ENDBLOCK104);

                    FUNCTIONSTATEMENT105=this.match(this.input,FUNCTIONSTATEMENT,FormulaParser.FOLLOW_FUNCTIONSTATEMENT_in_anonFunctionDef1020); if (this.state.failed) return retval; 
                    if ( this.state.backtracking===0 ) stream_FUNCTIONSTATEMENT.add(FUNCTIONSTATEMENT105);






                    break;
                case 2 :
                    // /Library/WebServer/Documents/calc/Formula.g:171:168: expression
                    this.pushFollow(FormulaParser.FOLLOW_expression_in_anonFunctionDef1025);
                    expression106=this.expression();

                    this.state._fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) stream_expression.add(expression106.getTree());


                    break;

            }



            // AST REWRITE
            // elements: defaultValue, innerBlock, IDENT, expression
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( this.state.backtracking===0 ) {
            retval.tree = root_0;
            var stream_retval=new org.antlr.runtime.tree.RewriteRuleSubtreeStream(this.adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = this.adaptor.nil();
            // 171:180: -> ^( ANONFUNCTION ^( PARAMS ( IDENT )* ) ^( DEFAULTS ( defaultValue )* ) ( innerBlock )? ( expression )? )
            {
                // /Library/WebServer/Documents/calc/Formula.g:171:183: ^( ANONFUNCTION ^( PARAMS ( IDENT )* ) ^( DEFAULTS ( defaultValue )* ) ( innerBlock )? ( expression )? )
                {
                var root_1 = this.adaptor.nil();
                root_1 = this.adaptor.becomeRoot(this.adaptor.create(ANONFUNCTION, "ANONFUNCTION"), root_1);

                // /Library/WebServer/Documents/calc/Formula.g:171:198: ^( PARAMS ( IDENT )* )
                {
                var root_2 = this.adaptor.nil();
                root_2 = this.adaptor.becomeRoot(this.adaptor.create(PARAMS, "PARAMS"), root_2);

                // /Library/WebServer/Documents/calc/Formula.g:171:207: ( IDENT )*
                while ( stream_IDENT.hasNext() ) {
                    this.adaptor.addChild(root_2, stream_IDENT.nextNode());

                }
                stream_IDENT.reset();

                this.adaptor.addChild(root_1, root_2);
                }
                // /Library/WebServer/Documents/calc/Formula.g:171:215: ^( DEFAULTS ( defaultValue )* )
                {
                var root_2 = this.adaptor.nil();
                root_2 = this.adaptor.becomeRoot(this.adaptor.create(DEFAULTS, "DEFAULTS"), root_2);

                // /Library/WebServer/Documents/calc/Formula.g:171:226: ( defaultValue )*
                while ( stream_defaultValue.hasNext() ) {
                    this.adaptor.addChild(root_2, stream_defaultValue.nextTree());

                }
                stream_defaultValue.reset();

                this.adaptor.addChild(root_1, root_2);
                }
                // /Library/WebServer/Documents/calc/Formula.g:171:241: ( innerBlock )?
                if ( stream_innerBlock.hasNext() ) {
                    this.adaptor.addChild(root_1, stream_innerBlock.nextTree());

                }
                stream_innerBlock.reset();
                // /Library/WebServer/Documents/calc/Formula.g:171:253: ( expression )?
                if ( stream_expression.hasNext() ) {
                    this.adaptor.addChild(root_1, stream_expression.nextTree());

                }
                stream_expression.reset();

                this.adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}


            retval.stop = this.input.LT(-1);

            if ( this.state.backtracking===0 ) {

            retval.tree = this.adaptor.rulePostProcessing(root_0);
            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (re) {
            if (re instanceof org.antlr.runtime.RecognitionException) {
                this.reportError(re);
                this.recover(this.input,re);
                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
            } else {
                throw re;
            }
        }
        finally {
        }
        return retval;
    },

    // inline static return class
    assignment_return: (function() {
        FormulaParser.assignment_return = function(){};
        org.antlr.lang.extend(FormulaParser.assignment_return,
                          org.antlr.runtime.ParserRuleReturnScope,
        {
            getTree: function() { return this.tree; }
        });
        return;
    })(),

    // /Library/WebServer/Documents/calc/Formula.g:175:1: assignment : ( IDENT '(' ( IDENT ( EQUALS defaultValue | ( ',' IDENT )* ) ( ',' IDENT EQUALS defaultValue )* )? ')' '<-' logicalExpression -> ^( FUNCTION ^( PARAMS ( IDENT )* ) ^( DEFAULTS ( defaultValue )* ) logicalExpression ) | ( PRIMITIVE | assigned ) ( ',' ( PRIMITIVE | assigned ) )* '<-' logicalExpression -> ^( ASSIGN ( PRIMITIVE )* ( assigned )* logicalExpression ) );
    // $ANTLR start "assignment"
    assignment: function() {
        var retval = new FormulaParser.assignment_return();
        retval.start = this.input.LT(1);

        var root_0 = null;

        var IDENT107 = null;
        var char_literal108 = null;
        var IDENT109 = null;
        var EQUALS110 = null;
        var char_literal112 = null;
        var IDENT113 = null;
        var char_literal114 = null;
        var IDENT115 = null;
        var EQUALS116 = null;
        var char_literal118 = null;
        var string_literal119 = null;
        var PRIMITIVE121 = null;
        var char_literal123 = null;
        var PRIMITIVE124 = null;
        var string_literal126 = null;
         var defaultValue111 = null;
         var defaultValue117 = null;
         var logicalExpression120 = null;
         var assigned122 = null;
         var assigned125 = null;
         var logicalExpression127 = null;

        var IDENT107_tree=null;
        var char_literal108_tree=null;
        var IDENT109_tree=null;
        var EQUALS110_tree=null;
        var char_literal112_tree=null;
        var IDENT113_tree=null;
        var char_literal114_tree=null;
        var IDENT115_tree=null;
        var EQUALS116_tree=null;
        var char_literal118_tree=null;
        var string_literal119_tree=null;
        var PRIMITIVE121_tree=null;
        var char_literal123_tree=null;
        var PRIMITIVE124_tree=null;
        var string_literal126_tree=null;
        var stream_114=new org.antlr.runtime.tree.RewriteRuleTokenStream(this.adaptor,"token 114");
        var stream_IDENT=new org.antlr.runtime.tree.RewriteRuleTokenStream(this.adaptor,"token IDENT");
        var stream_115=new org.antlr.runtime.tree.RewriteRuleTokenStream(this.adaptor,"token 115");
        var stream_EQUALS=new org.antlr.runtime.tree.RewriteRuleTokenStream(this.adaptor,"token EQUALS");
        var stream_113=new org.antlr.runtime.tree.RewriteRuleTokenStream(this.adaptor,"token 113");
        var stream_COMMA=new org.antlr.runtime.tree.RewriteRuleTokenStream(this.adaptor,"token COMMA");
        var stream_PRIMITIVE=new org.antlr.runtime.tree.RewriteRuleTokenStream(this.adaptor,"token PRIMITIVE");
        var stream_assigned=new org.antlr.runtime.tree.RewriteRuleSubtreeStream(this.adaptor,"rule assigned");
        var stream_defaultValue=new org.antlr.runtime.tree.RewriteRuleSubtreeStream(this.adaptor,"rule defaultValue");
        var stream_logicalExpression=new org.antlr.runtime.tree.RewriteRuleSubtreeStream(this.adaptor,"rule logicalExpression");
        try {
            // /Library/WebServer/Documents/calc/Formula.g:176:2: ( IDENT '(' ( IDENT ( EQUALS defaultValue | ( ',' IDENT )* ) ( ',' IDENT EQUALS defaultValue )* )? ')' '<-' logicalExpression -> ^( FUNCTION ^( PARAMS ( IDENT )* ) ^( DEFAULTS ( defaultValue )* ) logicalExpression ) | ( PRIMITIVE | assigned ) ( ',' ( PRIMITIVE | assigned ) )* '<-' logicalExpression -> ^( ASSIGN ( PRIMITIVE )* ( assigned )* logicalExpression ) )
            var alt37=2;
            var LA37_0 = this.input.LA(1);

            if ( (LA37_0==IDENT) ) {
                var LA37_1 = this.input.LA(2);

                if ( (LA37_1==113) ) {
                    alt37=1;
                }
                else if ( (LA37_1==LARR||LA37_1==LCURL||LA37_1==COMMA||(LA37_1>=115 && LA37_1<=116)) ) {
                    alt37=2;
                }
                else {
                    if (this.state.backtracking>0) {this.state.failed=true; return retval;}
                    var nvae =
                        new org.antlr.runtime.NoViableAltException("", 37, 1, this.input);

                    throw nvae;
                }
            }
            else if ( (LA37_0==PRIMITIVE) ) {
                alt37=2;
            }
            else {
                if (this.state.backtracking>0) {this.state.failed=true; return retval;}
                var nvae =
                    new org.antlr.runtime.NoViableAltException("", 37, 0, this.input);

                throw nvae;
            }
            switch (alt37) {
                case 1 :
                    // /Library/WebServer/Documents/calc/Formula.g:177:2: IDENT '(' ( IDENT ( EQUALS defaultValue | ( ',' IDENT )* ) ( ',' IDENT EQUALS defaultValue )* )? ')' '<-' logicalExpression
                    IDENT107=this.match(this.input,IDENT,FormulaParser.FOLLOW_IDENT_in_assignment1067); if (this.state.failed) return retval; 
                    if ( this.state.backtracking===0 ) stream_IDENT.add(IDENT107);

                    char_literal108=this.match(this.input,113,FormulaParser.FOLLOW_113_in_assignment1069); if (this.state.failed) return retval; 
                    if ( this.state.backtracking===0 ) stream_113.add(char_literal108);

                    // /Library/WebServer/Documents/calc/Formula.g:177:12: ( IDENT ( EQUALS defaultValue | ( ',' IDENT )* ) ( ',' IDENT EQUALS defaultValue )* )?
                    var alt33=2;
                    var LA33_0 = this.input.LA(1);

                    if ( (LA33_0==IDENT) ) {
                        alt33=1;
                    }
                    switch (alt33) {
                        case 1 :
                            // /Library/WebServer/Documents/calc/Formula.g:177:13: IDENT ( EQUALS defaultValue | ( ',' IDENT )* ) ( ',' IDENT EQUALS defaultValue )*
                            IDENT109=this.match(this.input,IDENT,FormulaParser.FOLLOW_IDENT_in_assignment1072); if (this.state.failed) return retval; 
                            if ( this.state.backtracking===0 ) stream_IDENT.add(IDENT109);

                            // /Library/WebServer/Documents/calc/Formula.g:177:20: ( EQUALS defaultValue | ( ',' IDENT )* )
                            var alt31=2;
                            var LA31_0 = this.input.LA(1);

                            if ( (LA31_0==EQUALS) ) {
                                alt31=1;
                            }
                            else if ( (LA31_0==COMMA||LA31_0==114) ) {
                                alt31=2;
                            }
                            else {
                                if (this.state.backtracking>0) {this.state.failed=true; return retval;}
                                var nvae =
                                    new org.antlr.runtime.NoViableAltException("", 31, 0, this.input);

                                throw nvae;
                            }
                            switch (alt31) {
                                case 1 :
                                    // /Library/WebServer/Documents/calc/Formula.g:177:21: EQUALS defaultValue
                                    EQUALS110=this.match(this.input,EQUALS,FormulaParser.FOLLOW_EQUALS_in_assignment1076); if (this.state.failed) return retval; 
                                    if ( this.state.backtracking===0 ) stream_EQUALS.add(EQUALS110);

                                    this.pushFollow(FormulaParser.FOLLOW_defaultValue_in_assignment1078);
                                    defaultValue111=this.defaultValue();

                                    this.state._fsp--;
                                    if (this.state.failed) return retval;
                                    if ( this.state.backtracking===0 ) stream_defaultValue.add(defaultValue111.getTree());


                                    break;
                                case 2 :
                                    // /Library/WebServer/Documents/calc/Formula.g:177:43: ( ',' IDENT )*
                                    // /Library/WebServer/Documents/calc/Formula.g:177:43: ( ',' IDENT )*
                                    loop30:
                                    do {
                                        var alt30=2;
                                        var LA30_0 = this.input.LA(1);

                                        if ( (LA30_0==COMMA) ) {
                                            var LA30_1 = this.input.LA(2);

                                            if ( (LA30_1==IDENT) ) {
                                                var LA30_3 = this.input.LA(3);

                                                if ( (LA30_3==COMMA||LA30_3==114) ) {
                                                    alt30=1;
                                                }


                                            }


                                        }


                                        switch (alt30) {
                                        case 1 :
                                            // /Library/WebServer/Documents/calc/Formula.g:177:44: ',' IDENT
                                            char_literal112=this.match(this.input,COMMA,FormulaParser.FOLLOW_COMMA_in_assignment1083); if (this.state.failed) return retval; 
                                            if ( this.state.backtracking===0 ) stream_COMMA.add(char_literal112);

                                            IDENT113=this.match(this.input,IDENT,FormulaParser.FOLLOW_IDENT_in_assignment1085); if (this.state.failed) return retval; 
                                            if ( this.state.backtracking===0 ) stream_IDENT.add(IDENT113);



                                            break;

                                        default :
                                            break loop30;
                                        }
                                    } while (true);



                                    break;

                            }

                            // /Library/WebServer/Documents/calc/Formula.g:177:58: ( ',' IDENT EQUALS defaultValue )*
                            loop32:
                            do {
                                var alt32=2;
                                var LA32_0 = this.input.LA(1);

                                if ( (LA32_0==COMMA) ) {
                                    alt32=1;
                                }


                                switch (alt32) {
                                case 1 :
                                    // /Library/WebServer/Documents/calc/Formula.g:177:59: ',' IDENT EQUALS defaultValue
                                    char_literal114=this.match(this.input,COMMA,FormulaParser.FOLLOW_COMMA_in_assignment1092); if (this.state.failed) return retval; 
                                    if ( this.state.backtracking===0 ) stream_COMMA.add(char_literal114);

                                    IDENT115=this.match(this.input,IDENT,FormulaParser.FOLLOW_IDENT_in_assignment1094); if (this.state.failed) return retval; 
                                    if ( this.state.backtracking===0 ) stream_IDENT.add(IDENT115);

                                    EQUALS116=this.match(this.input,EQUALS,FormulaParser.FOLLOW_EQUALS_in_assignment1096); if (this.state.failed) return retval; 
                                    if ( this.state.backtracking===0 ) stream_EQUALS.add(EQUALS116);

                                    this.pushFollow(FormulaParser.FOLLOW_defaultValue_in_assignment1098);
                                    defaultValue117=this.defaultValue();

                                    this.state._fsp--;
                                    if (this.state.failed) return retval;
                                    if ( this.state.backtracking===0 ) stream_defaultValue.add(defaultValue117.getTree());


                                    break;

                                default :
                                    break loop32;
                                }
                            } while (true);



                            break;

                    }

                    char_literal118=this.match(this.input,114,FormulaParser.FOLLOW_114_in_assignment1105); if (this.state.failed) return retval; 
                    if ( this.state.backtracking===0 ) stream_114.add(char_literal118);

                    string_literal119=this.match(this.input,115,FormulaParser.FOLLOW_115_in_assignment1107); if (this.state.failed) return retval; 
                    if ( this.state.backtracking===0 ) stream_115.add(string_literal119);

                    this.pushFollow(FormulaParser.FOLLOW_logicalExpression_in_assignment1109);
                    logicalExpression120=this.logicalExpression();

                    this.state._fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) stream_logicalExpression.add(logicalExpression120.getTree());


                    // AST REWRITE
                    // elements: defaultValue, logicalExpression, IDENT
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( this.state.backtracking===0 ) {
                    retval.tree = root_0;
                    var stream_retval=new org.antlr.runtime.tree.RewriteRuleSubtreeStream(this.adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = this.adaptor.nil();
                    // 177:121: -> ^( FUNCTION ^( PARAMS ( IDENT )* ) ^( DEFAULTS ( defaultValue )* ) logicalExpression )
                    {
                        // /Library/WebServer/Documents/calc/Formula.g:177:124: ^( FUNCTION ^( PARAMS ( IDENT )* ) ^( DEFAULTS ( defaultValue )* ) logicalExpression )
                        {
                        var root_1 = this.adaptor.nil();
                        root_1 = this.adaptor.becomeRoot(this.adaptor.create(FUNCTION, "FUNCTION"), root_1);

                        // /Library/WebServer/Documents/calc/Formula.g:177:135: ^( PARAMS ( IDENT )* )
                        {
                        var root_2 = this.adaptor.nil();
                        root_2 = this.adaptor.becomeRoot(this.adaptor.create(PARAMS, "PARAMS"), root_2);

                        // /Library/WebServer/Documents/calc/Formula.g:177:144: ( IDENT )*
                        while ( stream_IDENT.hasNext() ) {
                            this.adaptor.addChild(root_2, stream_IDENT.nextNode());

                        }
                        stream_IDENT.reset();

                        this.adaptor.addChild(root_1, root_2);
                        }
                        // /Library/WebServer/Documents/calc/Formula.g:177:152: ^( DEFAULTS ( defaultValue )* )
                        {
                        var root_2 = this.adaptor.nil();
                        root_2 = this.adaptor.becomeRoot(this.adaptor.create(DEFAULTS, "DEFAULTS"), root_2);

                        // /Library/WebServer/Documents/calc/Formula.g:177:163: ( defaultValue )*
                        while ( stream_defaultValue.hasNext() ) {
                            this.adaptor.addChild(root_2, stream_defaultValue.nextTree());

                        }
                        stream_defaultValue.reset();

                        this.adaptor.addChild(root_1, root_2);
                        }
                        this.adaptor.addChild(root_1, stream_logicalExpression.nextTree());

                        this.adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}

                    break;
                case 2 :
                    // /Library/WebServer/Documents/calc/Formula.g:178:2: ( PRIMITIVE | assigned ) ( ',' ( PRIMITIVE | assigned ) )* '<-' logicalExpression
                    // /Library/WebServer/Documents/calc/Formula.g:178:2: ( PRIMITIVE | assigned )
                    var alt34=2;
                    var LA34_0 = this.input.LA(1);

                    if ( (LA34_0==PRIMITIVE) ) {
                        alt34=1;
                    }
                    else if ( (LA34_0==IDENT) ) {
                        alt34=2;
                    }
                    else {
                        if (this.state.backtracking>0) {this.state.failed=true; return retval;}
                        var nvae =
                            new org.antlr.runtime.NoViableAltException("", 34, 0, this.input);

                        throw nvae;
                    }
                    switch (alt34) {
                        case 1 :
                            // /Library/WebServer/Documents/calc/Formula.g:178:3: PRIMITIVE
                            PRIMITIVE121=this.match(this.input,PRIMITIVE,FormulaParser.FOLLOW_PRIMITIVE_in_assignment1137); if (this.state.failed) return retval; 
                            if ( this.state.backtracking===0 ) stream_PRIMITIVE.add(PRIMITIVE121);



                            break;
                        case 2 :
                            // /Library/WebServer/Documents/calc/Formula.g:178:15: assigned
                            this.pushFollow(FormulaParser.FOLLOW_assigned_in_assignment1141);
                            assigned122=this.assigned();

                            this.state._fsp--;
                            if (this.state.failed) return retval;
                            if ( this.state.backtracking===0 ) stream_assigned.add(assigned122.getTree());


                            break;

                    }

                    // /Library/WebServer/Documents/calc/Formula.g:178:25: ( ',' ( PRIMITIVE | assigned ) )*
                    loop36:
                    do {
                        var alt36=2;
                        var LA36_0 = this.input.LA(1);

                        if ( (LA36_0==COMMA) ) {
                            alt36=1;
                        }


                        switch (alt36) {
                        case 1 :
                            // /Library/WebServer/Documents/calc/Formula.g:178:26: ',' ( PRIMITIVE | assigned )
                            char_literal123=this.match(this.input,COMMA,FormulaParser.FOLLOW_COMMA_in_assignment1145); if (this.state.failed) return retval; 
                            if ( this.state.backtracking===0 ) stream_COMMA.add(char_literal123);

                            // /Library/WebServer/Documents/calc/Formula.g:178:30: ( PRIMITIVE | assigned )
                            var alt35=2;
                            var LA35_0 = this.input.LA(1);

                            if ( (LA35_0==PRIMITIVE) ) {
                                alt35=1;
                            }
                            else if ( (LA35_0==IDENT) ) {
                                alt35=2;
                            }
                            else {
                                if (this.state.backtracking>0) {this.state.failed=true; return retval;}
                                var nvae =
                                    new org.antlr.runtime.NoViableAltException("", 35, 0, this.input);

                                throw nvae;
                            }
                            switch (alt35) {
                                case 1 :
                                    // /Library/WebServer/Documents/calc/Formula.g:178:31: PRIMITIVE
                                    PRIMITIVE124=this.match(this.input,PRIMITIVE,FormulaParser.FOLLOW_PRIMITIVE_in_assignment1148); if (this.state.failed) return retval; 
                                    if ( this.state.backtracking===0 ) stream_PRIMITIVE.add(PRIMITIVE124);



                                    break;
                                case 2 :
                                    // /Library/WebServer/Documents/calc/Formula.g:178:43: assigned
                                    this.pushFollow(FormulaParser.FOLLOW_assigned_in_assignment1152);
                                    assigned125=this.assigned();

                                    this.state._fsp--;
                                    if (this.state.failed) return retval;
                                    if ( this.state.backtracking===0 ) stream_assigned.add(assigned125.getTree());


                                    break;

                            }



                            break;

                        default :
                            break loop36;
                        }
                    } while (true);

                    string_literal126=this.match(this.input,115,FormulaParser.FOLLOW_115_in_assignment1158); if (this.state.failed) return retval; 
                    if ( this.state.backtracking===0 ) stream_115.add(string_literal126);

                    this.pushFollow(FormulaParser.FOLLOW_logicalExpression_in_assignment1160);
                    logicalExpression127=this.logicalExpression();

                    this.state._fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) stream_logicalExpression.add(logicalExpression127.getTree());


                    // AST REWRITE
                    // elements: PRIMITIVE, assigned, logicalExpression
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( this.state.backtracking===0 ) {
                    retval.tree = root_0;
                    var stream_retval=new org.antlr.runtime.tree.RewriteRuleSubtreeStream(this.adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = this.adaptor.nil();
                    // 178:79: -> ^( ASSIGN ( PRIMITIVE )* ( assigned )* logicalExpression )
                    {
                        // /Library/WebServer/Documents/calc/Formula.g:178:82: ^( ASSIGN ( PRIMITIVE )* ( assigned )* logicalExpression )
                        {
                        var root_1 = this.adaptor.nil();
                        root_1 = this.adaptor.becomeRoot(this.adaptor.create(ASSIGN, "ASSIGN"), root_1);

                        // /Library/WebServer/Documents/calc/Formula.g:178:91: ( PRIMITIVE )*
                        while ( stream_PRIMITIVE.hasNext() ) {
                            this.adaptor.addChild(root_1, stream_PRIMITIVE.nextNode());

                        }
                        stream_PRIMITIVE.reset();
                        // /Library/WebServer/Documents/calc/Formula.g:178:102: ( assigned )*
                        while ( stream_assigned.hasNext() ) {
                            this.adaptor.addChild(root_1, stream_assigned.nextTree());

                        }
                        stream_assigned.reset();
                        this.adaptor.addChild(root_1, stream_logicalExpression.nextTree());

                        this.adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}

                    break;

            }
            retval.stop = this.input.LT(-1);

            if ( this.state.backtracking===0 ) {

            retval.tree = this.adaptor.rulePostProcessing(root_0);
            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (re) {
            if (re instanceof org.antlr.runtime.RecognitionException) {
                this.reportError(re);
                this.recover(this.input,re);
                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
            } else {
                throw re;
            }
        }
        finally {
        }
        return retval;
    },

    // inline static return class
    assigned_return: (function() {
        FormulaParser.assigned_return = function(){};
        org.antlr.lang.extend(FormulaParser.assigned_return,
                          org.antlr.runtime.ParserRuleReturnScope,
        {
            getTree: function() { return this.tree; }
        });
        return;
    })(),

    // /Library/WebServer/Documents/calc/Formula.g:181:1: assigned : IDENT ( selector )? -> ^( ASSIGNED IDENT ( selector )? ) ;
    // $ANTLR start "assigned"
    assigned: function() {
        var retval = new FormulaParser.assigned_return();
        retval.start = this.input.LT(1);

        var root_0 = null;

        var IDENT128 = null;
         var selector129 = null;

        var IDENT128_tree=null;
        var stream_IDENT=new org.antlr.runtime.tree.RewriteRuleTokenStream(this.adaptor,"token IDENT");
        var stream_selector=new org.antlr.runtime.tree.RewriteRuleSubtreeStream(this.adaptor,"rule selector");
        try {
            // /Library/WebServer/Documents/calc/Formula.g:182:2: ( IDENT ( selector )? -> ^( ASSIGNED IDENT ( selector )? ) )
            // /Library/WebServer/Documents/calc/Formula.g:182:4: IDENT ( selector )?
            IDENT128=this.match(this.input,IDENT,FormulaParser.FOLLOW_IDENT_in_assigned1186); if (this.state.failed) return retval; 
            if ( this.state.backtracking===0 ) stream_IDENT.add(IDENT128);

            // /Library/WebServer/Documents/calc/Formula.g:182:10: ( selector )?
            var alt38=2;
            var LA38_0 = this.input.LA(1);

            if ( (LA38_0==LARR||LA38_0==LCURL||LA38_0==116) ) {
                alt38=1;
            }
            switch (alt38) {
                case 1 :
                    // /Library/WebServer/Documents/calc/Formula.g:0:0: selector
                    this.pushFollow(FormulaParser.FOLLOW_selector_in_assigned1188);
                    selector129=this.selector();

                    this.state._fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) stream_selector.add(selector129.getTree());


                    break;

            }



            // AST REWRITE
            // elements: selector, IDENT
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( this.state.backtracking===0 ) {
            retval.tree = root_0;
            var stream_retval=new org.antlr.runtime.tree.RewriteRuleSubtreeStream(this.adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = this.adaptor.nil();
            // 182:20: -> ^( ASSIGNED IDENT ( selector )? )
            {
                // /Library/WebServer/Documents/calc/Formula.g:182:23: ^( ASSIGNED IDENT ( selector )? )
                {
                var root_1 = this.adaptor.nil();
                root_1 = this.adaptor.becomeRoot(this.adaptor.create(ASSIGNED, "ASSIGNED"), root_1);

                this.adaptor.addChild(root_1, stream_IDENT.nextNode());
                // /Library/WebServer/Documents/calc/Formula.g:182:40: ( selector )?
                if ( stream_selector.hasNext() ) {
                    this.adaptor.addChild(root_1, stream_selector.nextTree());

                }
                stream_selector.reset();

                this.adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}


            retval.stop = this.input.LT(-1);

            if ( this.state.backtracking===0 ) {

            retval.tree = this.adaptor.rulePostProcessing(root_0);
            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (re) {
            if (re instanceof org.antlr.runtime.RecognitionException) {
                this.reportError(re);
                this.recover(this.input,re);
                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
            } else {
                throw re;
            }
        }
        finally {
        }
        return retval;
    },

    // inline static return class
    logicalExpression_return: (function() {
        FormulaParser.logicalExpression_return = function(){};
        org.antlr.lang.extend(FormulaParser.logicalExpression_return,
                          org.antlr.runtime.ParserRuleReturnScope,
        {
            getTree: function() { return this.tree; }
        });
        return;
    })(),

    // /Library/WebServer/Documents/calc/Formula.g:186:1: logicalExpression : booleanXORExpression ( OR booleanXORExpression )* ;
    // $ANTLR start "logicalExpression"
    logicalExpression: function() {
        var retval = new FormulaParser.logicalExpression_return();
        retval.start = this.input.LT(1);

        var root_0 = null;

        var OR131 = null;
         var booleanXORExpression130 = null;
         var booleanXORExpression132 = null;

        var OR131_tree=null;

        try {
            // /Library/WebServer/Documents/calc/Formula.g:187:2: ( booleanXORExpression ( OR booleanXORExpression )* )
            // /Library/WebServer/Documents/calc/Formula.g:187:4: booleanXORExpression ( OR booleanXORExpression )*
            root_0 = this.adaptor.nil();

            this.pushFollow(FormulaParser.FOLLOW_booleanXORExpression_in_logicalExpression1214);
            booleanXORExpression130=this.booleanXORExpression();

            this.state._fsp--;
            if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, booleanXORExpression130.getTree());
            // /Library/WebServer/Documents/calc/Formula.g:187:25: ( OR booleanXORExpression )*
            loop39:
            do {
                var alt39=2;
                var LA39_0 = this.input.LA(1);

                if ( (LA39_0==OR) ) {
                    var LA39_2 = this.input.LA(2);

                    if ( (this.synpred47_Formula()) ) {
                        alt39=1;
                    }


                }


                switch (alt39) {
                case 1 :
                    // /Library/WebServer/Documents/calc/Formula.g:187:26: OR booleanXORExpression
                    OR131=this.match(this.input,OR,FormulaParser.FOLLOW_OR_in_logicalExpression1217); if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) {
                    OR131_tree = this.adaptor.create(OR131);
                    root_0 = this.adaptor.becomeRoot(OR131_tree, root_0);
                    }
                    this.pushFollow(FormulaParser.FOLLOW_booleanXORExpression_in_logicalExpression1220);
                    booleanXORExpression132=this.booleanXORExpression();

                    this.state._fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, booleanXORExpression132.getTree());


                    break;

                default :
                    break loop39;
                }
            } while (true);




            retval.stop = this.input.LT(-1);

            if ( this.state.backtracking===0 ) {

            retval.tree = this.adaptor.rulePostProcessing(root_0);
            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (re) {
            if (re instanceof org.antlr.runtime.RecognitionException) {
                this.reportError(re);
                this.recover(this.input,re);
                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
            } else {
                throw re;
            }
        }
        finally {
        }
        return retval;
    },

    // inline static return class
    booleanXORExpression_return: (function() {
        FormulaParser.booleanXORExpression_return = function(){};
        org.antlr.lang.extend(FormulaParser.booleanXORExpression_return,
                          org.antlr.runtime.ParserRuleReturnScope,
        {
            getTree: function() { return this.tree; }
        });
        return;
    })(),

    // /Library/WebServer/Documents/calc/Formula.g:192:1: booleanXORExpression : booleanAndExpression ( XOR booleanAndExpression )* ;
    // $ANTLR start "booleanXORExpression"
    booleanXORExpression: function() {
        var retval = new FormulaParser.booleanXORExpression_return();
        retval.start = this.input.LT(1);

        var root_0 = null;

        var XOR134 = null;
         var booleanAndExpression133 = null;
         var booleanAndExpression135 = null;

        var XOR134_tree=null;

        try {
            // /Library/WebServer/Documents/calc/Formula.g:193:2: ( booleanAndExpression ( XOR booleanAndExpression )* )
            // /Library/WebServer/Documents/calc/Formula.g:193:4: booleanAndExpression ( XOR booleanAndExpression )*
            root_0 = this.adaptor.nil();

            this.pushFollow(FormulaParser.FOLLOW_booleanAndExpression_in_booleanXORExpression1250);
            booleanAndExpression133=this.booleanAndExpression();

            this.state._fsp--;
            if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, booleanAndExpression133.getTree());
            // /Library/WebServer/Documents/calc/Formula.g:193:25: ( XOR booleanAndExpression )*
            loop40:
            do {
                var alt40=2;
                var LA40_0 = this.input.LA(1);

                if ( (LA40_0==XOR) ) {
                    var LA40_2 = this.input.LA(2);

                    if ( (this.synpred48_Formula()) ) {
                        alt40=1;
                    }


                }


                switch (alt40) {
                case 1 :
                    // /Library/WebServer/Documents/calc/Formula.g:193:26: XOR booleanAndExpression
                    XOR134=this.match(this.input,XOR,FormulaParser.FOLLOW_XOR_in_booleanXORExpression1253); if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) {
                    XOR134_tree = this.adaptor.create(XOR134);
                    root_0 = this.adaptor.becomeRoot(XOR134_tree, root_0);
                    }
                    this.pushFollow(FormulaParser.FOLLOW_booleanAndExpression_in_booleanXORExpression1256);
                    booleanAndExpression135=this.booleanAndExpression();

                    this.state._fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, booleanAndExpression135.getTree());


                    break;

                default :
                    break loop40;
                }
            } while (true);




            retval.stop = this.input.LT(-1);

            if ( this.state.backtracking===0 ) {

            retval.tree = this.adaptor.rulePostProcessing(root_0);
            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (re) {
            if (re instanceof org.antlr.runtime.RecognitionException) {
                this.reportError(re);
                this.recover(this.input,re);
                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
            } else {
                throw re;
            }
        }
        finally {
        }
        return retval;
    },

    // inline static return class
    booleanAndExpression_return: (function() {
        FormulaParser.booleanAndExpression_return = function(){};
        org.antlr.lang.extend(FormulaParser.booleanAndExpression_return,
                          org.antlr.runtime.ParserRuleReturnScope,
        {
            getTree: function() { return this.tree; }
        });
        return;
    })(),

    // /Library/WebServer/Documents/calc/Formula.g:198:1: booleanAndExpression : equalityExpression ( AND equalityExpression )* ;
    // $ANTLR start "booleanAndExpression"
    booleanAndExpression: function() {
        var retval = new FormulaParser.booleanAndExpression_return();
        retval.start = this.input.LT(1);

        var root_0 = null;

        var AND137 = null;
         var equalityExpression136 = null;
         var equalityExpression138 = null;

        var AND137_tree=null;

        try {
            // /Library/WebServer/Documents/calc/Formula.g:199:2: ( equalityExpression ( AND equalityExpression )* )
            // /Library/WebServer/Documents/calc/Formula.g:199:4: equalityExpression ( AND equalityExpression )*
            root_0 = this.adaptor.nil();

            this.pushFollow(FormulaParser.FOLLOW_equalityExpression_in_booleanAndExpression1285);
            equalityExpression136=this.equalityExpression();

            this.state._fsp--;
            if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, equalityExpression136.getTree());
            // /Library/WebServer/Documents/calc/Formula.g:199:23: ( AND equalityExpression )*
            loop41:
            do {
                var alt41=2;
                var LA41_0 = this.input.LA(1);

                if ( (LA41_0==AND) ) {
                    var LA41_2 = this.input.LA(2);

                    if ( (this.synpred49_Formula()) ) {
                        alt41=1;
                    }


                }


                switch (alt41) {
                case 1 :
                    // /Library/WebServer/Documents/calc/Formula.g:199:24: AND equalityExpression
                    AND137=this.match(this.input,AND,FormulaParser.FOLLOW_AND_in_booleanAndExpression1288); if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) {
                    AND137_tree = this.adaptor.create(AND137);
                    root_0 = this.adaptor.becomeRoot(AND137_tree, root_0);
                    }
                    this.pushFollow(FormulaParser.FOLLOW_equalityExpression_in_booleanAndExpression1291);
                    equalityExpression138=this.equalityExpression();

                    this.state._fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, equalityExpression138.getTree());


                    break;

                default :
                    break loop41;
                }
            } while (true);




            retval.stop = this.input.LT(-1);

            if ( this.state.backtracking===0 ) {

            retval.tree = this.adaptor.rulePostProcessing(root_0);
            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (re) {
            if (re instanceof org.antlr.runtime.RecognitionException) {
                this.reportError(re);
                this.recover(this.input,re);
                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
            } else {
                throw re;
            }
        }
        finally {
        }
        return retval;
    },

    // inline static return class
    equalityExpression_return: (function() {
        FormulaParser.equalityExpression_return = function(){};
        org.antlr.lang.extend(FormulaParser.equalityExpression_return,
                          org.antlr.runtime.ParserRuleReturnScope,
        {
            getTree: function() { return this.tree; }
        });
        return;
    })(),

    // /Library/WebServer/Documents/calc/Formula.g:204:1: equalityExpression : relationalExpression ( ( EQUALS | NOTEQUALS ) relationalExpression )* ;
    // $ANTLR start "equalityExpression"
    equalityExpression: function() {
        var retval = new FormulaParser.equalityExpression_return();
        retval.start = this.input.LT(1);

        var root_0 = null;

        var set140 = null;
         var relationalExpression139 = null;
         var relationalExpression141 = null;

        var set140_tree=null;

        try {
            // /Library/WebServer/Documents/calc/Formula.g:205:2: ( relationalExpression ( ( EQUALS | NOTEQUALS ) relationalExpression )* )
            // /Library/WebServer/Documents/calc/Formula.g:205:4: relationalExpression ( ( EQUALS | NOTEQUALS ) relationalExpression )*
            root_0 = this.adaptor.nil();

            this.pushFollow(FormulaParser.FOLLOW_relationalExpression_in_equalityExpression1322);
            relationalExpression139=this.relationalExpression();

            this.state._fsp--;
            if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, relationalExpression139.getTree());
            // /Library/WebServer/Documents/calc/Formula.g:205:25: ( ( EQUALS | NOTEQUALS ) relationalExpression )*
            loop42:
            do {
                var alt42=2;
                var LA42_0 = this.input.LA(1);

                if ( (LA42_0==EQUALS||LA42_0==NOTEQUALS) ) {
                    var LA42_2 = this.input.LA(2);

                    if ( (this.synpred51_Formula()) ) {
                        alt42=1;
                    }


                }


                switch (alt42) {
                case 1 :
                    // /Library/WebServer/Documents/calc/Formula.g:205:26: ( EQUALS | NOTEQUALS ) relationalExpression
                    
                    set140=this.input.LT(1);
                    if ( this.input.LA(1)==EQUALS||this.input.LA(1)==NOTEQUALS ) {
                        this.input.consume();
                        if ( this.state.backtracking===0 ) root_0 = this.adaptor.becomeRoot(this.adaptor.create(set140), root_0);
                        this.state.errorRecovery=false;this.state.failed=false;
                    }
                    else {
                        if (this.state.backtracking>0) {this.state.failed=true; return retval;}
                        var mse = new org.antlr.runtime.MismatchedSetException(null,this.input);
                        throw mse;
                    }

                    this.pushFollow(FormulaParser.FOLLOW_relationalExpression_in_equalityExpression1332);
                    relationalExpression141=this.relationalExpression();

                    this.state._fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, relationalExpression141.getTree());


                    break;

                default :
                    break loop42;
                }
            } while (true);




            retval.stop = this.input.LT(-1);

            if ( this.state.backtracking===0 ) {

            retval.tree = this.adaptor.rulePostProcessing(root_0);
            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (re) {
            if (re instanceof org.antlr.runtime.RecognitionException) {
                this.reportError(re);
                this.recover(this.input,re);
                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
            } else {
                throw re;
            }
        }
        finally {
        }
        return retval;
    },

    // inline static return class
    relationalExpression_return: (function() {
        FormulaParser.relationalExpression_return = function(){};
        org.antlr.lang.extend(FormulaParser.relationalExpression_return,
                          org.antlr.runtime.ParserRuleReturnScope,
        {
            getTree: function() { return this.tree; }
        });
        return;
    })(),

    // /Library/WebServer/Documents/calc/Formula.g:215:1: relationalExpression : additiveExpression ( ( LT | LTEQ | GT | GTEQ ) additiveExpression )* ;
    // $ANTLR start "relationalExpression"
    relationalExpression: function() {
        var retval = new FormulaParser.relationalExpression_return();
        retval.start = this.input.LT(1);

        var root_0 = null;

        var set143 = null;
         var additiveExpression142 = null;
         var additiveExpression144 = null;

        var set143_tree=null;

        try {
            // /Library/WebServer/Documents/calc/Formula.g:216:2: ( additiveExpression ( ( LT | LTEQ | GT | GTEQ ) additiveExpression )* )
            // /Library/WebServer/Documents/calc/Formula.g:216:4: additiveExpression ( ( LT | LTEQ | GT | GTEQ ) additiveExpression )*
            root_0 = this.adaptor.nil();

            this.pushFollow(FormulaParser.FOLLOW_additiveExpression_in_relationalExpression1374);
            additiveExpression142=this.additiveExpression();

            this.state._fsp--;
            if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, additiveExpression142.getTree());
            // /Library/WebServer/Documents/calc/Formula.g:216:23: ( ( LT | LTEQ | GT | GTEQ ) additiveExpression )*
            loop43:
            do {
                var alt43=2;
                var LA43_0 = this.input.LA(1);

                if ( ((LA43_0>=LT && LA43_0<=GTEQ)) ) {
                    var LA43_2 = this.input.LA(2);

                    if ( (this.synpred55_Formula()) ) {
                        alt43=1;
                    }


                }


                switch (alt43) {
                case 1 :
                    // /Library/WebServer/Documents/calc/Formula.g:216:25: ( LT | LTEQ | GT | GTEQ ) additiveExpression
                   
                    set143=this.input.LT(1);
                    if ( (this.input.LA(1)>=LT && this.input.LA(1)<=GTEQ) ) {
                        this.input.consume();
                        if ( this.state.backtracking===0 ) root_0 = this.adaptor.becomeRoot(this.adaptor.create(set143), root_0);
                        this.state.errorRecovery=false;this.state.failed=false;
                    }
                    else {
                        if (this.state.backtracking>0) {this.state.failed=true; return retval;}
                        var mse = new org.antlr.runtime.MismatchedSetException(null,this.input);
                        throw mse;
                    }

                    this.pushFollow(FormulaParser.FOLLOW_additiveExpression_in_relationalExpression1389);
                    additiveExpression144=this.additiveExpression();

                    this.state._fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, additiveExpression144.getTree());


                    break;

                default :
                    break loop43;
                }
            } while (true);




            retval.stop = this.input.LT(-1);

            if ( this.state.backtracking===0 ) {

            retval.tree = this.adaptor.rulePostProcessing(root_0);
            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (re) {
            if (re instanceof org.antlr.runtime.RecognitionException) {
                this.reportError(re);
                this.recover(this.input,re);
                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
            } else {
                throw re;
            }
        }
        finally {
        }
        return retval;
    },

    // inline static return class
    additiveExpression_return: (function() {
        FormulaParser.additiveExpression_return = function(){};
        org.antlr.lang.extend(FormulaParser.additiveExpression_return,
                          org.antlr.runtime.ParserRuleReturnScope,
        {
            getTree: function() { return this.tree; }
        });
        return;
    })(),

    // /Library/WebServer/Documents/calc/Formula.g:224:1: additiveExpression : multiplicativeExpression ( ( PLUS | MINUS ) multiplicativeExpression )* ;
    // $ANTLR start "additiveExpression"
    additiveExpression: function() {
        var retval = new FormulaParser.additiveExpression_return();
        retval.start = this.input.LT(1);

        var root_0 = null;

        var set146 = null;
         var multiplicativeExpression145 = null;
         var multiplicativeExpression147 = null;

        var set146_tree=null;

        try {
            // /Library/WebServer/Documents/calc/Formula.g:225:2: ( multiplicativeExpression ( ( PLUS | MINUS ) multiplicativeExpression )* )
            // /Library/WebServer/Documents/calc/Formula.g:225:4: multiplicativeExpression ( ( PLUS | MINUS ) multiplicativeExpression )*
            root_0 = this.adaptor.nil();

            this.pushFollow(FormulaParser.FOLLOW_multiplicativeExpression_in_additiveExpression1432);
            multiplicativeExpression145=this.multiplicativeExpression();

            this.state._fsp--;
            if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, multiplicativeExpression145.getTree());
            // /Library/WebServer/Documents/calc/Formula.g:225:29: ( ( PLUS | MINUS ) multiplicativeExpression )*
            loop44:
            do {
                var alt44=2;
                var LA44_0 = this.input.LA(1);

                if ( ((LA44_0>=PLUS && LA44_0<=MINUS)) ) {
                    var LA44_2 = this.input.LA(2);

                    if ( (this.synpred57_Formula()) ) {
                        alt44=1;
                    }


                }


                switch (alt44) {
                case 1 :
                    // /Library/WebServer/Documents/calc/Formula.g:225:31: ( PLUS | MINUS ) multiplicativeExpression
                    
                    set146=this.input.LT(1);
                    if ( (this.input.LA(1)>=PLUS && this.input.LA(1)<=MINUS) ) {
                        this.input.consume();
                        if ( this.state.backtracking===0 ) root_0 = this.adaptor.becomeRoot(this.adaptor.create(set146), root_0);
                        this.state.errorRecovery=false;this.state.failed=false;
                    }
                    else {
                        if (this.state.backtracking>0) {this.state.failed=true; return retval;}
                        var mse = new org.antlr.runtime.MismatchedSetException(null,this.input);
                        throw mse;
                    }

                    this.pushFollow(FormulaParser.FOLLOW_multiplicativeExpression_in_additiveExpression1443);
                    multiplicativeExpression147=this.multiplicativeExpression();

                    this.state._fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, multiplicativeExpression147.getTree());


                    break;

                default :
                    break loop44;
                }
            } while (true);




            retval.stop = this.input.LT(-1);

            if ( this.state.backtracking===0 ) {

            retval.tree = this.adaptor.rulePostProcessing(root_0);
            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (re) {
            if (re instanceof org.antlr.runtime.RecognitionException) {
                this.reportError(re);
                this.recover(this.input,re);
                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
            } else {
                throw re;
            }
        }
        finally {
        }
        return retval;
    },

    // inline static return class
    multiplicativeExpression_return: (function() {
        FormulaParser.multiplicativeExpression_return = function(){};
        org.antlr.lang.extend(FormulaParser.multiplicativeExpression_return,
                          org.antlr.runtime.ParserRuleReturnScope,
        {
            getTree: function() { return this.tree; }
        });
        return;
    })(),

    // /Library/WebServer/Documents/calc/Formula.g:231:1: multiplicativeExpression : arrayExpression ( ( MULT | DIV | MOD ) arrayExpression )* ;
    // $ANTLR start "multiplicativeExpression"
    multiplicativeExpression: function() {
        var retval = new FormulaParser.multiplicativeExpression_return();
        retval.start = this.input.LT(1);

        var root_0 = null;

        var set149 = null;
         var arrayExpression148 = null;
         var arrayExpression150 = null;

        var set149_tree=null;

        try {
            // /Library/WebServer/Documents/calc/Formula.g:232:2: ( arrayExpression ( ( MULT | DIV | MOD ) arrayExpression )* )
            // /Library/WebServer/Documents/calc/Formula.g:232:4: arrayExpression ( ( MULT | DIV | MOD ) arrayExpression )*
            root_0 = this.adaptor.nil();

            this.pushFollow(FormulaParser.FOLLOW_arrayExpression_in_multiplicativeExpression1473);
            arrayExpression148=this.arrayExpression();

            this.state._fsp--;
            if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, arrayExpression148.getTree());
            // /Library/WebServer/Documents/calc/Formula.g:232:20: ( ( MULT | DIV | MOD ) arrayExpression )*
            loop45:
            do {
                var alt45=2;
                var LA45_0 = this.input.LA(1);

                if ( ((LA45_0>=MULT && LA45_0<=MOD)) ) {
                    var LA45_2 = this.input.LA(2);

                    if ( (this.synpred60_Formula()) ) {
                        alt45=1;
                    }


                }


                switch (alt45) {
                case 1 :
                    // /Library/WebServer/Documents/calc/Formula.g:232:22: ( MULT | DIV | MOD ) arrayExpression
                    
                    set149=this.input.LT(1);
                    if ( (this.input.LA(1)>=MULT && this.input.LA(1)<=MOD) ) {
                        this.input.consume();
                        if ( this.state.backtracking===0 ) root_0 = this.adaptor.becomeRoot(this.adaptor.create(set149), root_0);
                        this.state.errorRecovery=false;this.state.failed=false;
                    }
                    else {
                        if (this.state.backtracking>0) {this.state.failed=true; return retval;}
                        var mse = new org.antlr.runtime.MismatchedSetException(null,this.input);
                        throw mse;
                    }

                    this.pushFollow(FormulaParser.FOLLOW_arrayExpression_in_multiplicativeExpression1486);
                    arrayExpression150=this.arrayExpression();

                    this.state._fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, arrayExpression150.getTree());


                    break;

                default :
                    break loop45;
                }
            } while (true);




            retval.stop = this.input.LT(-1);

            if ( this.state.backtracking===0 ) {

            retval.tree = this.adaptor.rulePostProcessing(root_0);
            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (re) {
            if (re instanceof org.antlr.runtime.RecognitionException) {
                this.reportError(re);
                this.recover(this.input,re);
                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
            } else {
                throw re;
            }
        }
        finally {
        }
        return retval;
    },

    // inline static return class
    arrayExpression_return: (function() {
        FormulaParser.arrayExpression_return = function(){};
        org.antlr.lang.extend(FormulaParser.arrayExpression_return,
                          org.antlr.runtime.ParserRuleReturnScope,
        {
            getTree: function() { return this.tree; }
        });
        return;
    })(),

    // /Library/WebServer/Documents/calc/Formula.g:239:1: arrayExpression : negationExpression ({...}? COLON {...}? negationExpression )? ({...}? COLON {...}? negationExpression )? -> ^( RANGE ( negationExpression )* ) ;
    // $ANTLR start "arrayExpression"
    arrayExpression: function() {
        var retval = new FormulaParser.arrayExpression_return();
        retval.start = this.input.LT(1);

        var root_0 = null;

        var COLON152 = null;
        var COLON154 = null;
         var negationExpression151 = null;
         var negationExpression153 = null;
         var negationExpression155 = null;

        var COLON152_tree=null;
        var COLON154_tree=null;
        var stream_COLON=new org.antlr.runtime.tree.RewriteRuleTokenStream(this.adaptor,"token COLON");
        var stream_negationExpression=new org.antlr.runtime.tree.RewriteRuleSubtreeStream(this.adaptor,"rule negationExpression");
        try {
            // /Library/WebServer/Documents/calc/Formula.g:240:2: ( negationExpression ({...}? COLON {...}? negationExpression )? ({...}? COLON {...}? negationExpression )? -> ^( RANGE ( negationExpression )* ) )
            // /Library/WebServer/Documents/calc/Formula.g:240:4: negationExpression ({...}? COLON {...}? negationExpression )? ({...}? COLON {...}? negationExpression )?
            this.pushFollow(FormulaParser.FOLLOW_negationExpression_in_arrayExpression1532);
            negationExpression151=this.negationExpression();

            this.state._fsp--;
            if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) stream_negationExpression.add(negationExpression151.getTree());
            // /Library/WebServer/Documents/calc/Formula.g:240:24: ({...}? COLON {...}? negationExpression )?
            var alt46=2;
            var LA46_0 = this.input.LA(1);

            if ( (LA46_0==COLON) ) {
                var LA46_1 = this.input.LA(2);

                if ( ((this.synpred61_Formula()&&( this.input.get(this.input.index()-1).getText()!=" "))) ) {
                    alt46=1;
                }
            }
            switch (alt46) {
                case 1 :
                    // /Library/WebServer/Documents/calc/Formula.g:240:25: {...}? COLON {...}? negationExpression
                    if ( !(( this.input.get(this.input.index()-1).getText()!=" ")) ) {
                        if (this.state.backtracking>0) {this.state.failed=true; return retval;}
                        throw new org.antlr.runtime.FailedPredicateException(this.input, "arrayExpression", " this.input.get(this.input.index()-1).getText()!=\" \"");
                    }
                    COLON152=this.match(this.input,COLON,FormulaParser.FOLLOW_COLON_in_arrayExpression1538); if (this.state.failed) return retval; 
                    if ( this.state.backtracking===0 ) stream_COLON.add(COLON152);

                    if ( !(( this.input.get(this.input.index()-1).getText()!=" ")) ) {
                        if (this.state.backtracking>0) {this.state.failed=true; return retval;}
                        throw new org.antlr.runtime.FailedPredicateException(this.input, "arrayExpression", " this.input.get(this.input.index()-1).getText()!=\" \"");
                    }
                    this.pushFollow(FormulaParser.FOLLOW_negationExpression_in_arrayExpression1542);
                    negationExpression153=this.negationExpression();

                    this.state._fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) stream_negationExpression.add(negationExpression153.getTree());


                    break;

            }

            // /Library/WebServer/Documents/calc/Formula.g:240:165: ({...}? COLON {...}? negationExpression )?
            var alt47=2;
            var LA47_0 = this.input.LA(1);

            if ( (LA47_0==COLON) ) {
                var LA47_1 = this.input.LA(2);

                if ( ((this.synpred62_Formula()&&( this.input.get(this.input.index()-1).getText()!=" "))) ) {
                    alt47=1;
                }
            }
            switch (alt47) {
                case 1 :
                    // /Library/WebServer/Documents/calc/Formula.g:240:167: {...}? COLON {...}? negationExpression
                    if ( !(( this.input.get(this.input.index()-1).getText()!=" ")) ) {
                        if (this.state.backtracking>0) {this.state.failed=true; return retval;}
                        throw new org.antlr.runtime.FailedPredicateException(this.input, "arrayExpression", " this.input.get(this.input.index()-1).getText()!=\" \"");
                    }
                    COLON154=this.match(this.input,COLON,FormulaParser.FOLLOW_COLON_in_arrayExpression1551); if (this.state.failed) return retval; 
                    if ( this.state.backtracking===0 ) stream_COLON.add(COLON154);

                    if ( !(( this.input.get(this.input.index()-1).getText()!=" ")) ) {
                        if (this.state.backtracking>0) {this.state.failed=true; return retval;}
                        throw new org.antlr.runtime.FailedPredicateException(this.input, "arrayExpression", " this.input.get(this.input.index()-1).getText()!=\" \"");
                    }
                    this.pushFollow(FormulaParser.FOLLOW_negationExpression_in_arrayExpression1555);
                    negationExpression155=this.negationExpression();

                    this.state._fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) stream_negationExpression.add(negationExpression155.getTree());


                    break;

            }



            // AST REWRITE
            // elements: negationExpression
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( this.state.backtracking===0 ) {
            retval.tree = root_0;
            var stream_retval=new org.antlr.runtime.tree.RewriteRuleSubtreeStream(this.adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = this.adaptor.nil();
            // 240:306: -> ^( RANGE ( negationExpression )* )
            {
                // /Library/WebServer/Documents/calc/Formula.g:240:309: ^( RANGE ( negationExpression )* )
                {
                var root_1 = this.adaptor.nil();
                root_1 = this.adaptor.becomeRoot(this.adaptor.create(RANGE, "RANGE"), root_1);

                // /Library/WebServer/Documents/calc/Formula.g:240:317: ( negationExpression )*
                while ( stream_negationExpression.hasNext() ) {
                    this.adaptor.addChild(root_1, stream_negationExpression.nextTree());

                }
                stream_negationExpression.reset();

                this.adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}


            retval.stop = this.input.LT(-1);

            if ( this.state.backtracking===0 ) {

            retval.tree = this.adaptor.rulePostProcessing(root_0);
            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (re) {
            if (re instanceof org.antlr.runtime.RecognitionException) {
                this.reportError(re);
                this.recover(this.input,re);
                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
            } else {
                throw re;
            }
        }
        finally {
        }
        return retval;
    },

    // inline static return class
    negationExpression_return: (function() {
        FormulaParser.negationExpression_return = function(){};
        org.antlr.lang.extend(FormulaParser.negationExpression_return,
                          org.antlr.runtime.ParserRuleReturnScope,
        {
            getTree: function() { return this.tree; }
        });
        return;
    })(),

    // /Library/WebServer/Documents/calc/Formula.g:244:1: negationExpression : ( MINUS powerExpression -> ^( NEGATE powerExpression ) | powerExpression );
    // $ANTLR start "negationExpression"
    negationExpression: function() {
        var retval = new FormulaParser.negationExpression_return();
        retval.start = this.input.LT(1);

        var root_0 = null;

        var MINUS156 = null;
         var powerExpression157 = null;
         var powerExpression158 = null;

        var MINUS156_tree=null;
        var stream_MINUS=new org.antlr.runtime.tree.RewriteRuleTokenStream(this.adaptor,"token MINUS");
        var stream_powerExpression=new org.antlr.runtime.tree.RewriteRuleSubtreeStream(this.adaptor,"rule powerExpression");
        try {
            // /Library/WebServer/Documents/calc/Formula.g:245:2: ( MINUS powerExpression -> ^( NEGATE powerExpression ) | powerExpression )
            var alt48=2;
            var LA48_0 = this.input.LA(1);

            if ( (LA48_0==MINUS) ) {
                alt48=1;
            }
            else if ( (LA48_0==FUNCTIONSTATEMENT||LA48_0==NEWSTATEMENT||LA48_0==IDENT||LA48_0==PRIMITIVE||(LA48_0>=NOT && LA48_0<=LARR)||LA48_0==LCURL||(LA48_0>=STRING && LA48_0<=FALSE)||LA48_0==113) ) {
                alt48=2;
            }
            else {
                if (this.state.backtracking>0) {this.state.failed=true; return retval;}
                var nvae =
                    new org.antlr.runtime.NoViableAltException("", 48, 0, this.input);

                throw nvae;
            }
            switch (alt48) {
                case 1 :
                    // /Library/WebServer/Documents/calc/Formula.g:245:4: MINUS powerExpression
                    MINUS156=this.match(this.input,MINUS,FormulaParser.FOLLOW_MINUS_in_negationExpression1580); if (this.state.failed) return retval; 
                    if ( this.state.backtracking===0 ) stream_MINUS.add(MINUS156);

                    this.pushFollow(FormulaParser.FOLLOW_powerExpression_in_negationExpression1582);
                    powerExpression157=this.powerExpression();

                    this.state._fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) stream_powerExpression.add(powerExpression157.getTree());


                    // AST REWRITE
                    // elements: powerExpression
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( this.state.backtracking===0 ) {
                    retval.tree = root_0;
                    var stream_retval=new org.antlr.runtime.tree.RewriteRuleSubtreeStream(this.adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = this.adaptor.nil();
                    // 245:26: -> ^( NEGATE powerExpression )
                    {
                        // /Library/WebServer/Documents/calc/Formula.g:245:29: ^( NEGATE powerExpression )
                        {
                        var root_1 = this.adaptor.nil();
                        root_1 = this.adaptor.becomeRoot(this.adaptor.create(NEGATE, "NEGATE"), root_1);

                        this.adaptor.addChild(root_1, stream_powerExpression.nextTree());

                        this.adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}

                    break;
                case 2 :
                    // /Library/WebServer/Documents/calc/Formula.g:246:3: powerExpression
                    root_0 = this.adaptor.nil();

                    this.pushFollow(FormulaParser.FOLLOW_powerExpression_in_negationExpression1596);
                    powerExpression158=this.powerExpression();

                    this.state._fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, powerExpression158.getTree());


                    break;

            }
            retval.stop = this.input.LT(-1);

            if ( this.state.backtracking===0 ) {

            retval.tree = this.adaptor.rulePostProcessing(root_0);
            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (re) {
            if (re instanceof org.antlr.runtime.RecognitionException) {
                this.reportError(re);
                this.recover(this.input,re);
                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
            } else {
                throw re;
            }
        }
        finally {
        }
        return retval;
    },

    // inline static return class
    powerExpression_return: (function() {
        FormulaParser.powerExpression_return = function(){};
        org.antlr.lang.extend(FormulaParser.powerExpression_return,
                          org.antlr.runtime.ParserRuleReturnScope,
        {
            getTree: function() { return this.tree; }
        });
        return;
    })(),

    // /Library/WebServer/Documents/calc/Formula.g:248:1: powerExpression : unaryExpression ( POW unaryOrNegate )* -> ^( POWER unaryExpression ( unaryOrNegate )* ) ;
    // $ANTLR start "powerExpression"
    powerExpression: function() {
        var retval = new FormulaParser.powerExpression_return();
        retval.start = this.input.LT(1);

        var root_0 = null;

        var POW160 = null;
         var unaryExpression159 = null;
         var unaryOrNegate161 = null;

        var POW160_tree=null;
        var stream_POW=new org.antlr.runtime.tree.RewriteRuleTokenStream(this.adaptor,"token POW");
        var stream_unaryOrNegate=new org.antlr.runtime.tree.RewriteRuleSubtreeStream(this.adaptor,"rule unaryOrNegate");
        var stream_unaryExpression=new org.antlr.runtime.tree.RewriteRuleSubtreeStream(this.adaptor,"rule unaryExpression");
        try {
            // /Library/WebServer/Documents/calc/Formula.g:249:2: ( unaryExpression ( POW unaryOrNegate )* -> ^( POWER unaryExpression ( unaryOrNegate )* ) )
            // /Library/WebServer/Documents/calc/Formula.g:249:4: unaryExpression ( POW unaryOrNegate )*
            this.pushFollow(FormulaParser.FOLLOW_unaryExpression_in_powerExpression1607);
            unaryExpression159=this.unaryExpression();

            this.state._fsp--;
            if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) stream_unaryExpression.add(unaryExpression159.getTree());
            // /Library/WebServer/Documents/calc/Formula.g:249:20: ( POW unaryOrNegate )*
            loop49:
            do {
                var alt49=2;
                var LA49_0 = this.input.LA(1);

                if ( (LA49_0==POW) ) {
                    var LA49_2 = this.input.LA(2);

                    if ( (this.synpred64_Formula()) ) {
                        alt49=1;
                    }


                }


                switch (alt49) {
                case 1 :
                    // /Library/WebServer/Documents/calc/Formula.g:249:21: POW unaryOrNegate
                    POW160=this.match(this.input,POW,FormulaParser.FOLLOW_POW_in_powerExpression1610); if (this.state.failed) return retval; 
                    if ( this.state.backtracking===0 ) stream_POW.add(POW160);

                    this.pushFollow(FormulaParser.FOLLOW_unaryOrNegate_in_powerExpression1612);
                    unaryOrNegate161=this.unaryOrNegate();

                    this.state._fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) stream_unaryOrNegate.add(unaryOrNegate161.getTree());


                    break;

                default :
                    break loop49;
                }
            } while (true);



            // AST REWRITE
            // elements: unaryOrNegate, unaryExpression
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( this.state.backtracking===0 ) {
            retval.tree = root_0;
            var stream_retval=new org.antlr.runtime.tree.RewriteRuleSubtreeStream(this.adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = this.adaptor.nil();
            // 249:43: -> ^( POWER unaryExpression ( unaryOrNegate )* )
            {
                // /Library/WebServer/Documents/calc/Formula.g:249:47: ^( POWER unaryExpression ( unaryOrNegate )* )
                {
                var root_1 = this.adaptor.nil();
                root_1 = this.adaptor.becomeRoot(this.adaptor.create(POWER, "POWER"), root_1);

                this.adaptor.addChild(root_1, stream_unaryExpression.nextTree());
                // /Library/WebServer/Documents/calc/Formula.g:249:71: ( unaryOrNegate )*
                while ( stream_unaryOrNegate.hasNext() ) {
                    this.adaptor.addChild(root_1, stream_unaryOrNegate.nextTree());

                }
                stream_unaryOrNegate.reset();

                this.adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}


            retval.stop = this.input.LT(-1);

            if ( this.state.backtracking===0 ) {

            retval.tree = this.adaptor.rulePostProcessing(root_0);
            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (re) {
            if (re instanceof org.antlr.runtime.RecognitionException) {
                this.reportError(re);
                this.recover(this.input,re);
                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
            } else {
                throw re;
            }
        }
        finally {
        }
        return retval;
    },

    // inline static return class
    unaryOrNegate_return: (function() {
        FormulaParser.unaryOrNegate_return = function(){};
        org.antlr.lang.extend(FormulaParser.unaryOrNegate_return,
                          org.antlr.runtime.ParserRuleReturnScope,
        {
            getTree: function() { return this.tree; }
        });
        return;
    })(),

    // /Library/WebServer/Documents/calc/Formula.g:252:1: unaryOrNegate : ( unaryExpression | MINUS unaryExpression -> ^( NEGATE unaryExpression ) );
    // $ANTLR start "unaryOrNegate"
    unaryOrNegate: function() {
        var retval = new FormulaParser.unaryOrNegate_return();
        retval.start = this.input.LT(1);

        var root_0 = null;

        var MINUS163 = null;
         var unaryExpression162 = null;
         var unaryExpression164 = null;

        var MINUS163_tree=null;
        var stream_MINUS=new org.antlr.runtime.tree.RewriteRuleTokenStream(this.adaptor,"token MINUS");
        var stream_unaryExpression=new org.antlr.runtime.tree.RewriteRuleSubtreeStream(this.adaptor,"rule unaryExpression");
        try {
            // /Library/WebServer/Documents/calc/Formula.g:253:2: ( unaryExpression | MINUS unaryExpression -> ^( NEGATE unaryExpression ) )
            var alt50=2;
            var LA50_0 = this.input.LA(1);

            if ( (LA50_0==FUNCTIONSTATEMENT||LA50_0==NEWSTATEMENT||LA50_0==IDENT||LA50_0==PRIMITIVE||(LA50_0>=NOT && LA50_0<=LARR)||LA50_0==LCURL||(LA50_0>=STRING && LA50_0<=FALSE)||LA50_0==113) ) {
                alt50=1;
            }
            else if ( (LA50_0==MINUS) ) {
                alt50=2;
            }
            else {
                if (this.state.backtracking>0) {this.state.failed=true; return retval;}
                var nvae =
                    new org.antlr.runtime.NoViableAltException("", 50, 0, this.input);

                throw nvae;
            }
            switch (alt50) {
                case 1 :
                    // /Library/WebServer/Documents/calc/Formula.g:253:4: unaryExpression
                    root_0 = this.adaptor.nil();

                    this.pushFollow(FormulaParser.FOLLOW_unaryExpression_in_unaryOrNegate1639);
                    unaryExpression162=this.unaryExpression();

                    this.state._fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, unaryExpression162.getTree());


                    break;
                case 2 :
                    // /Library/WebServer/Documents/calc/Formula.g:254:3: MINUS unaryExpression
                    MINUS163=this.match(this.input,MINUS,FormulaParser.FOLLOW_MINUS_in_unaryOrNegate1645); if (this.state.failed) return retval; 
                    if ( this.state.backtracking===0 ) stream_MINUS.add(MINUS163);

                    this.pushFollow(FormulaParser.FOLLOW_unaryExpression_in_unaryOrNegate1647);
                    unaryExpression164=this.unaryExpression();

                    this.state._fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) stream_unaryExpression.add(unaryExpression164.getTree());


                    // AST REWRITE
                    // elements: unaryExpression
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( this.state.backtracking===0 ) {
                    retval.tree = root_0;
                    var stream_retval=new org.antlr.runtime.tree.RewriteRuleSubtreeStream(this.adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = this.adaptor.nil();
                    // 254:25: -> ^( NEGATE unaryExpression )
                    {
                        // /Library/WebServer/Documents/calc/Formula.g:254:28: ^( NEGATE unaryExpression )
                        {
                        var root_1 = this.adaptor.nil();
                        root_1 = this.adaptor.becomeRoot(this.adaptor.create(NEGATE, "NEGATE"), root_1);

                        this.adaptor.addChild(root_1, stream_unaryExpression.nextTree());

                        this.adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}

                    break;

            }
            retval.stop = this.input.LT(-1);

            if ( this.state.backtracking===0 ) {

            retval.tree = this.adaptor.rulePostProcessing(root_0);
            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (re) {
            if (re instanceof org.antlr.runtime.RecognitionException) {
                this.reportError(re);
                this.recover(this.input,re);
                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
            } else {
                throw re;
            }
        }
        finally {
        }
        return retval;
    },

    // inline static return class
    unaryExpression_return: (function() {
        FormulaParser.unaryExpression_return = function(){};
        org.antlr.lang.extend(FormulaParser.unaryExpression_return,
                          org.antlr.runtime.ParserRuleReturnScope,
        {
            getTree: function() { return this.tree; }
        });
        return;
    })(),

    // /Library/WebServer/Documents/calc/Formula.g:259:1: unaryExpression : ( NOT innerPrimaryExpression | innerPrimaryExpression );
    // $ANTLR start "unaryExpression"
    unaryExpression: function() {
        var retval = new FormulaParser.unaryExpression_return();
        retval.start = this.input.LT(1);

        var root_0 = null;

        var NOT165 = null;
         var innerPrimaryExpression166 = null;
         var innerPrimaryExpression167 = null;

        var NOT165_tree=null;

        try {
            // /Library/WebServer/Documents/calc/Formula.g:260:2: ( NOT innerPrimaryExpression | innerPrimaryExpression )
            var alt51=2;
            var LA51_0 = this.input.LA(1);

            if ( (LA51_0==NOT) ) {
                alt51=1;
            }
            else if ( (LA51_0==FUNCTIONSTATEMENT||LA51_0==NEWSTATEMENT||LA51_0==IDENT||LA51_0==PRIMITIVE||LA51_0==LARR||LA51_0==LCURL||(LA51_0>=STRING && LA51_0<=FALSE)||LA51_0==113) ) {
                alt51=2;
            }
            else {
                if (this.state.backtracking>0) {this.state.failed=true; return retval;}
                var nvae =
                    new org.antlr.runtime.NoViableAltException("", 51, 0, this.input);

                throw nvae;
            }
            switch (alt51) {
                case 1 :
                    // /Library/WebServer/Documents/calc/Formula.g:260:4: NOT innerPrimaryExpression
                    root_0 = this.adaptor.nil();

                    NOT165=this.match(this.input,NOT,FormulaParser.FOLLOW_NOT_in_unaryExpression1675); if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) {
                    NOT165_tree = this.adaptor.create(NOT165);
                    root_0 = this.adaptor.becomeRoot(NOT165_tree, root_0);
                    }
                    this.pushFollow(FormulaParser.FOLLOW_innerPrimaryExpression_in_unaryExpression1678);
                    innerPrimaryExpression166=this.innerPrimaryExpression();

                    this.state._fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, innerPrimaryExpression166.getTree());


                    break;
                case 2 :
                    // /Library/WebServer/Documents/calc/Formula.g:261:8: innerPrimaryExpression
                    root_0 = this.adaptor.nil();

                    this.pushFollow(FormulaParser.FOLLOW_innerPrimaryExpression_in_unaryExpression1687);
                    innerPrimaryExpression167=this.innerPrimaryExpression();

                    this.state._fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, innerPrimaryExpression167.getTree());


                    break;

            }
            retval.stop = this.input.LT(-1);

            if ( this.state.backtracking===0 ) {

            retval.tree = this.adaptor.rulePostProcessing(root_0);
            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (re) {
            if (re instanceof org.antlr.runtime.RecognitionException) {
                this.reportError(re);
                this.recover(this.input,re);
                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
            } else {
                throw re;
            }
        }
        finally {
        }
        return retval;
    },

    // inline static return class
    innerPrimaryExpression_return: (function() {
        FormulaParser.innerPrimaryExpression_return = function(){};
        org.antlr.lang.extend(FormulaParser.innerPrimaryExpression_return,
                          org.antlr.runtime.ParserRuleReturnScope,
        {
            getTree: function() { return this.tree; }
        });
        return;
    })(),

    // /Library/WebServer/Documents/calc/Formula.g:266:1: innerPrimaryExpression : selectionExpression -> ^( INNER selectionExpression ) ;
    // $ANTLR start "innerPrimaryExpression"
    innerPrimaryExpression: function() {
        var retval = new FormulaParser.innerPrimaryExpression_return();
        retval.start = this.input.LT(1);

        var root_0 = null;

         var selectionExpression168 = null;

        var stream_selectionExpression=new org.antlr.runtime.tree.RewriteRuleSubtreeStream(this.adaptor,"rule selectionExpression");
        try {
            // /Library/WebServer/Documents/calc/Formula.g:267:2: ( selectionExpression -> ^( INNER selectionExpression ) )
            // /Library/WebServer/Documents/calc/Formula.g:267:4: selectionExpression
            this.pushFollow(FormulaParser.FOLLOW_selectionExpression_in_innerPrimaryExpression1718);
            selectionExpression168=this.selectionExpression();

            this.state._fsp--;
            if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) stream_selectionExpression.add(selectionExpression168.getTree());


            // AST REWRITE
            // elements: selectionExpression
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( this.state.backtracking===0 ) {
            retval.tree = root_0;
            var stream_retval=new org.antlr.runtime.tree.RewriteRuleSubtreeStream(this.adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = this.adaptor.nil();
            // 267:24: -> ^( INNER selectionExpression )
            {
                // /Library/WebServer/Documents/calc/Formula.g:267:27: ^( INNER selectionExpression )
                {
                var root_1 = this.adaptor.nil();
                root_1 = this.adaptor.becomeRoot(this.adaptor.create(INNER, "INNER"), root_1);

                this.adaptor.addChild(root_1, stream_selectionExpression.nextTree());

                this.adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}


            retval.stop = this.input.LT(-1);

            if ( this.state.backtracking===0 ) {

            retval.tree = this.adaptor.rulePostProcessing(root_0);
            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (re) {
            if (re instanceof org.antlr.runtime.RecognitionException) {
                this.reportError(re);
                this.recover(this.input,re);
                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
            } else {
                throw re;
            }
        }
        finally {
        }
        return retval;
    },

    // inline static return class
    selectionExpression_return: (function() {
        FormulaParser.selectionExpression_return = function(){};
        org.antlr.lang.extend(FormulaParser.selectionExpression_return,
                          org.antlr.runtime.ParserRuleReturnScope,
        {
            getTree: function() { return this.tree; }
        });
        return;
    })(),

    // /Library/WebServer/Documents/calc/Formula.g:270:1: selectionExpression : primaryExpression ({...}? ( selector | funCall ) )* ;
    // $ANTLR start "selectionExpression"
    selectionExpression: function() {
        var retval = new FormulaParser.selectionExpression_return();
        retval.start = this.input.LT(1);

        var root_0 = null;

         var primaryExpression169 = null;
         var selector170 = null;
         var funCall171 = null;


        try {
            // /Library/WebServer/Documents/calc/Formula.g:271:2: ( primaryExpression ({...}? ( selector | funCall ) )* )
            // /Library/WebServer/Documents/calc/Formula.g:271:4: primaryExpression ({...}? ( selector | funCall ) )*
            root_0 = this.adaptor.nil();

            this.pushFollow(FormulaParser.FOLLOW_primaryExpression_in_selectionExpression1738);
            primaryExpression169=this.primaryExpression();

            this.state._fsp--;
            if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, primaryExpression169.getTree());
            // /Library/WebServer/Documents/calc/Formula.g:271:22: ({...}? ( selector | funCall ) )*
            loop53:
            do {
                var alt53=2;
                switch ( this.input.LA(1) ) {
                case LARR:
                    var LA53_2 = this.input.LA(2);

                    if ( ((this.synpred68_Formula()&&( this.input.get(this.input.index()-1).getText()!=" "))) ) {
                        alt53=1;
                    }


                    break;
                case LCURL:
                    var LA53_3 = this.input.LA(2);

                    if ( ((this.synpred68_Formula()&&( this.input.get(this.input.index()-1).getText()!=" "))) ) {
                        alt53=1;
                    }


                    break;
                case 116:
                    var LA53_4 = this.input.LA(2);

                    if ( ((this.synpred68_Formula()&&( this.input.get(this.input.index()-1).getText()!=" "))) ) {
                        alt53=1;
                    }


                    break;
                case 113:
                    var LA53_5 = this.input.LA(2);

                    if ( ((this.synpred68_Formula()&&( this.input.get(this.input.index()-1).getText()!=" "))) ) {
                        alt53=1;
                    }


                    break;

                }

                switch (alt53) {
                case 1 :
                    // /Library/WebServer/Documents/calc/Formula.g:271:23: {...}? ( selector | funCall )
                    if ( !(( this.input.get(this.input.index()-1).getText()!=" ")) ) {
                        if (this.state.backtracking>0) {this.state.failed=true; return retval;}
                        throw new org.antlr.runtime.FailedPredicateException(this.input, "selectionExpression", " this.input.get(this.input.index()-1).getText()!=\" \"");
                    }
                    // /Library/WebServer/Documents/calc/Formula.g:271:79: ( selector | funCall )
                    var alt52=2;
                    var LA52_0 = this.input.LA(1);

                    if ( (LA52_0==LARR||LA52_0==LCURL||LA52_0==116) ) {
                        alt52=1;
                    }
                    else if ( (LA52_0==113) ) {
                        alt52=2;
                    }
                    else {
                        if (this.state.backtracking>0) {this.state.failed=true; return retval;}
                        var nvae =
                            new org.antlr.runtime.NoViableAltException("", 52, 0, this.input);

                        throw nvae;
                    }
                    switch (alt52) {
                        case 1 :
                            // /Library/WebServer/Documents/calc/Formula.g:271:80: selector
                            this.pushFollow(FormulaParser.FOLLOW_selector_in_selectionExpression1744);
                            selector170=this.selector();

                            this.state._fsp--;
                            if (this.state.failed) return retval;
                            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, selector170.getTree());


                            break;
                        case 2 :
                            // /Library/WebServer/Documents/calc/Formula.g:271:89: funCall
                            this.pushFollow(FormulaParser.FOLLOW_funCall_in_selectionExpression1746);
                            funCall171=this.funCall();

                            this.state._fsp--;
                            if (this.state.failed) return retval;
                            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, funCall171.getTree());


                            break;

                    }



                    break;

                default :
                    break loop53;
                }
            } while (true);




            retval.stop = this.input.LT(-1);

            if ( this.state.backtracking===0 ) {

            retval.tree = this.adaptor.rulePostProcessing(root_0);
            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (re) {
            if (re instanceof org.antlr.runtime.RecognitionException) {
                this.reportError(re);
                this.recover(this.input,re);
                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
            } else {
                throw re;
            }
        }
        finally {
        }
        return retval;
    },

    // inline static return class
    funCall_return: (function() {
        FormulaParser.funCall_return = function(){};
        org.antlr.lang.extend(FormulaParser.funCall_return,
                          org.antlr.runtime.ParserRuleReturnScope,
        {
            getTree: function() { return this.tree; }
        });
        return;
    })(),

    // /Library/WebServer/Documents/calc/Formula.g:274:1: funCall : '(' ( logicalExpression ( ',' logicalExpression )* )? ')' -> ^( FUNCALL ( logicalExpression )* ) ;
    // $ANTLR start "funCall"
    funCall: function() {
        var retval = new FormulaParser.funCall_return();
        retval.start = this.input.LT(1);

        var root_0 = null;

        var char_literal172 = null;
        var char_literal174 = null;
        var char_literal176 = null;
         var logicalExpression173 = null;
         var logicalExpression175 = null;

        var char_literal172_tree=null;
        var char_literal174_tree=null;
        var char_literal176_tree=null;
        var stream_114=new org.antlr.runtime.tree.RewriteRuleTokenStream(this.adaptor,"token 114");
        var stream_113=new org.antlr.runtime.tree.RewriteRuleTokenStream(this.adaptor,"token 113");
        var stream_COMMA=new org.antlr.runtime.tree.RewriteRuleTokenStream(this.adaptor,"token COMMA");
        var stream_logicalExpression=new org.antlr.runtime.tree.RewriteRuleSubtreeStream(this.adaptor,"rule logicalExpression");
        try {
            // /Library/WebServer/Documents/calc/Formula.g:274:9: ( '(' ( logicalExpression ( ',' logicalExpression )* )? ')' -> ^( FUNCALL ( logicalExpression )* ) )
            // /Library/WebServer/Documents/calc/Formula.g:275:2: '(' ( logicalExpression ( ',' logicalExpression )* )? ')'
            char_literal172=this.match(this.input,113,FormulaParser.FOLLOW_113_in_funCall1761); if (this.state.failed) return retval; 
            if ( this.state.backtracking===0 ) stream_113.add(char_literal172);

            // /Library/WebServer/Documents/calc/Formula.g:275:6: ( logicalExpression ( ',' logicalExpression )* )?
            var alt55=2;
            var LA55_0 = this.input.LA(1);

            if ( (LA55_0==FUNCTIONSTATEMENT||LA55_0==NEWSTATEMENT||LA55_0==IDENT||LA55_0==PRIMITIVE||LA55_0==MINUS||(LA55_0>=NOT && LA55_0<=LARR)||LA55_0==LCURL||(LA55_0>=STRING && LA55_0<=FALSE)||LA55_0==113) ) {
                alt55=1;
            }
            switch (alt55) {
                case 1 :
                    // /Library/WebServer/Documents/calc/Formula.g:275:8: logicalExpression ( ',' logicalExpression )*
                    this.pushFollow(FormulaParser.FOLLOW_logicalExpression_in_funCall1765);
                    logicalExpression173=this.logicalExpression();

                    this.state._fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) stream_logicalExpression.add(logicalExpression173.getTree());
                    // /Library/WebServer/Documents/calc/Formula.g:275:26: ( ',' logicalExpression )*
                    loop54:
                    do {
                        var alt54=2;
                        var LA54_0 = this.input.LA(1);

                        if ( (LA54_0==COMMA) ) {
                            alt54=1;
                        }


                        switch (alt54) {
                        case 1 :
                            // /Library/WebServer/Documents/calc/Formula.g:275:27: ',' logicalExpression
                            char_literal174=this.match(this.input,COMMA,FormulaParser.FOLLOW_COMMA_in_funCall1768); if (this.state.failed) return retval; 
                            if ( this.state.backtracking===0 ) stream_COMMA.add(char_literal174);

                            this.pushFollow(FormulaParser.FOLLOW_logicalExpression_in_funCall1770);
                            logicalExpression175=this.logicalExpression();

                            this.state._fsp--;
                            if (this.state.failed) return retval;
                            if ( this.state.backtracking===0 ) stream_logicalExpression.add(logicalExpression175.getTree());


                            break;

                        default :
                            break loop54;
                        }
                    } while (true);



                    break;

            }

            char_literal176=this.match(this.input,114,FormulaParser.FOLLOW_114_in_funCall1777); if (this.state.failed) return retval; 
            if ( this.state.backtracking===0 ) stream_114.add(char_literal176);



            // AST REWRITE
            // elements: logicalExpression
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( this.state.backtracking===0 ) {
            retval.tree = root_0;
            var stream_retval=new org.antlr.runtime.tree.RewriteRuleSubtreeStream(this.adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = this.adaptor.nil();
            // 275:58: -> ^( FUNCALL ( logicalExpression )* )
            {
                // /Library/WebServer/Documents/calc/Formula.g:275:61: ^( FUNCALL ( logicalExpression )* )
                {
                var root_1 = this.adaptor.nil();
                root_1 = this.adaptor.becomeRoot(this.adaptor.create(FUNCALL, "FUNCALL"), root_1);

                // /Library/WebServer/Documents/calc/Formula.g:275:71: ( logicalExpression )*
                while ( stream_logicalExpression.hasNext() ) {
                    this.adaptor.addChild(root_1, stream_logicalExpression.nextTree());

                }
                stream_logicalExpression.reset();

                this.adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}


            retval.stop = this.input.LT(-1);

            if ( this.state.backtracking===0 ) {

            retval.tree = this.adaptor.rulePostProcessing(root_0);
            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (re) {
            if (re instanceof org.antlr.runtime.RecognitionException) {
                this.reportError(re);
                this.recover(this.input,re);
                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
            } else {
                throw re;
            }
        }
        finally {
        }
        return retval;
    },

    // inline static return class
    primaryExpression_return: (function() {
        FormulaParser.primaryExpression_return = function(){};
        org.antlr.lang.extend(FormulaParser.primaryExpression_return,
                          org.antlr.runtime.ParserRuleReturnScope,
        {
            getTree: function() { return this.tree; }
        });
        return;
    })(),

    // /Library/WebServer/Documents/calc/Formula.g:278:1: primaryExpression : ( '(' logicalExpression ')' | value );
    // $ANTLR start "primaryExpression"
    primaryExpression: function() {
        var retval = new FormulaParser.primaryExpression_return();
        retval.start = this.input.LT(1);

        var root_0 = null;

        var char_literal177 = null;
        var char_literal179 = null;
         var logicalExpression178 = null;
         var value180 = null;

        var char_literal177_tree=null;
        var char_literal179_tree=null;

        try {
            // /Library/WebServer/Documents/calc/Formula.g:279:2: ( '(' logicalExpression ')' | value )
            var alt56=2;
            var LA56_0 = this.input.LA(1);

            if ( (LA56_0==113) ) {
                alt56=1;
            }
            else if ( (LA56_0==FUNCTIONSTATEMENT||LA56_0==NEWSTATEMENT||LA56_0==IDENT||LA56_0==PRIMITIVE||LA56_0==LARR||LA56_0==LCURL||(LA56_0>=STRING && LA56_0<=FALSE)) ) {
                alt56=2;
            }
            else {
                if (this.state.backtracking>0) {this.state.failed=true; return retval;}
                var nvae =
                    new org.antlr.runtime.NoViableAltException("", 56, 0, this.input);

                throw nvae;
            }
            switch (alt56) {
                case 1 :
                    // /Library/WebServer/Documents/calc/Formula.g:279:4: '(' logicalExpression ')'
                    root_0 = this.adaptor.nil();

                    char_literal177=this.match(this.input,113,FormulaParser.FOLLOW_113_in_primaryExpression1798); if (this.state.failed) return retval;
                    this.pushFollow(FormulaParser.FOLLOW_logicalExpression_in_primaryExpression1801);
                    logicalExpression178=this.logicalExpression();

                    this.state._fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, logicalExpression178.getTree());
                    char_literal179=this.match(this.input,114,FormulaParser.FOLLOW_114_in_primaryExpression1803); if (this.state.failed) return retval;


                    break;
                case 2 :
                    // /Library/WebServer/Documents/calc/Formula.g:280:4: value
                    root_0 = this.adaptor.nil();

                    this.pushFollow(FormulaParser.FOLLOW_value_in_primaryExpression1809);
                    value180=this.value();

                    this.state._fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, value180.getTree());


                    break;

            }
            retval.stop = this.input.LT(-1);

            if ( this.state.backtracking===0 ) {

            retval.tree = this.adaptor.rulePostProcessing(root_0);
            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (re) {
            if (re instanceof org.antlr.runtime.RecognitionException) {
                this.reportError(re);
                this.recover(this.input,re);
                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
            } else {
                throw re;
            }
        }
        finally {
        }
        return retval;
    },

    // inline static return class
    value_return: (function() {
        FormulaParser.value_return = function(){};
        org.antlr.lang.extend(FormulaParser.value_return,
                          org.antlr.runtime.ParserRuleReturnScope,
        {
            getTree: function() { return this.tree; }
        });
        return;
    })(),

    // /Library/WebServer/Documents/calc/Formula.g:283:1: value : ( number | bool | string | material | IDENT | primitive | array | anonFunctionDef | newObject );
    // $ANTLR start "value"
    value: function() {
        var retval = new FormulaParser.value_return();
        retval.start = this.input.LT(1);

        var root_0 = null;

        var IDENT185 = null;
         var number181 = null;
         var bool182 = null;
         var string183 = null;
         var material184 = null;
         var primitive186 = null;
         var array187 = null;
         var anonFunctionDef188 = null;
         var newObject189 = null;

        var IDENT185_tree=null;

        try {
            // /Library/WebServer/Documents/calc/Formula.g:284:2: ( number | bool | string | material | IDENT | primitive | array | anonFunctionDef | newObject )
            var alt57=9;
            alt57 = this.dfa57.predict(this.input);
            switch (alt57) {
                case 1 :
                    // /Library/WebServer/Documents/calc/Formula.g:284:5: number
                    root_0 = this.adaptor.nil();

                    this.pushFollow(FormulaParser.FOLLOW_number_in_value1823);
                    number181=this.number();

                    this.state._fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, number181.getTree());


                    break;
                case 2 :
                    // /Library/WebServer/Documents/calc/Formula.g:285:5: bool
                    root_0 = this.adaptor.nil();

                    this.pushFollow(FormulaParser.FOLLOW_bool_in_value1829);
                    bool182=this.bool();

                    this.state._fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, bool182.getTree());


                    break;
                case 3 :
                    // /Library/WebServer/Documents/calc/Formula.g:286:5: string
                    root_0 = this.adaptor.nil();

                    this.pushFollow(FormulaParser.FOLLOW_string_in_value1835);
                    string183=this.string();

                    this.state._fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, string183.getTree());


                    break;
                case 4 :
                    // /Library/WebServer/Documents/calc/Formula.g:287:5: material
                    root_0 = this.adaptor.nil();

                    this.pushFollow(FormulaParser.FOLLOW_material_in_value1841);
                    material184=this.material();

                    this.state._fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, material184.getTree());


                    break;
                case 5 :
                    // /Library/WebServer/Documents/calc/Formula.g:288:4: IDENT
                    root_0 = this.adaptor.nil();

                    IDENT185=this.match(this.input,IDENT,FormulaParser.FOLLOW_IDENT_in_value1846); if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) {
                    IDENT185_tree = this.adaptor.create(IDENT185);
                    this.adaptor.addChild(root_0, IDENT185_tree);
                    }


                    break;
                case 6 :
                    // /Library/WebServer/Documents/calc/Formula.g:289:4: primitive
                    root_0 = this.adaptor.nil();

                    this.pushFollow(FormulaParser.FOLLOW_primitive_in_value1851);
                    primitive186=this.primitive();

                    this.state._fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, primitive186.getTree());


                    break;
                case 7 :
                    // /Library/WebServer/Documents/calc/Formula.g:290:4: array
                    root_0 = this.adaptor.nil();

                    this.pushFollow(FormulaParser.FOLLOW_array_in_value1856);
                    array187=this.array();

                    this.state._fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, array187.getTree());


                    break;
                case 8 :
                    // /Library/WebServer/Documents/calc/Formula.g:291:4: anonFunctionDef
                    root_0 = this.adaptor.nil();

                    this.pushFollow(FormulaParser.FOLLOW_anonFunctionDef_in_value1861);
                    anonFunctionDef188=this.anonFunctionDef();

                    this.state._fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, anonFunctionDef188.getTree());


                    break;
                case 9 :
                    // /Library/WebServer/Documents/calc/Formula.g:292:4: newObject
                    root_0 = this.adaptor.nil();

                    this.pushFollow(FormulaParser.FOLLOW_newObject_in_value1866);
                    newObject189=this.newObject();

                    this.state._fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, newObject189.getTree());


                    break;

            }
            retval.stop = this.input.LT(-1);

            if ( this.state.backtracking===0 ) {

            retval.tree = this.adaptor.rulePostProcessing(root_0);
            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (re) {
            if (re instanceof org.antlr.runtime.RecognitionException) {
                this.reportError(re);
                this.recover(this.input,re);
                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
            } else {
                throw re;
            }
        }
        finally {
        }
        return retval;
    },

    // inline static return class
    newObject_return: (function() {
        FormulaParser.newObject_return = function(){};
        org.antlr.lang.extend(FormulaParser.newObject_return,
                          org.antlr.runtime.ParserRuleReturnScope,
        {
            getTree: function() { return this.tree; }
        });
        return;
    })(),

    // /Library/WebServer/Documents/calc/Formula.g:295:1: newObject : NEWSTATEMENT IDENT ( funCall )? -> ^( NEW IDENT ( funCall )? ) ;
    // $ANTLR start "newObject"
    newObject: function() {
        var retval = new FormulaParser.newObject_return();
        retval.start = this.input.LT(1);

        var root_0 = null;

        var NEWSTATEMENT190 = null;
        var IDENT191 = null;
         var funCall192 = null;

        var NEWSTATEMENT190_tree=null;
        var IDENT191_tree=null;
        var stream_IDENT=new org.antlr.runtime.tree.RewriteRuleTokenStream(this.adaptor,"token IDENT");
        var stream_NEWSTATEMENT=new org.antlr.runtime.tree.RewriteRuleTokenStream(this.adaptor,"token NEWSTATEMENT");
        var stream_funCall=new org.antlr.runtime.tree.RewriteRuleSubtreeStream(this.adaptor,"rule funCall");
        try {
            // /Library/WebServer/Documents/calc/Formula.g:296:1: ( NEWSTATEMENT IDENT ( funCall )? -> ^( NEW IDENT ( funCall )? ) )
            // /Library/WebServer/Documents/calc/Formula.g:296:3: NEWSTATEMENT IDENT ( funCall )?
            NEWSTATEMENT190=this.match(this.input,NEWSTATEMENT,FormulaParser.FOLLOW_NEWSTATEMENT_in_newObject1876); if (this.state.failed) return retval; 
            if ( this.state.backtracking===0 ) stream_NEWSTATEMENT.add(NEWSTATEMENT190);

            IDENT191=this.match(this.input,IDENT,FormulaParser.FOLLOW_IDENT_in_newObject1878); if (this.state.failed) return retval; 
            if ( this.state.backtracking===0 ) stream_IDENT.add(IDENT191);

            // /Library/WebServer/Documents/calc/Formula.g:296:22: ( funCall )?
            var alt58=2;
            alt58 = this.dfa58.predict(this.input);
            switch (alt58) {
                case 1 :
                    // /Library/WebServer/Documents/calc/Formula.g:0:0: funCall
                    this.pushFollow(FormulaParser.FOLLOW_funCall_in_newObject1880);
                    funCall192=this.funCall();

                    this.state._fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) stream_funCall.add(funCall192.getTree());


                    break;

            }



            // AST REWRITE
            // elements: funCall, IDENT
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( this.state.backtracking===0 ) {
            retval.tree = root_0;
            var stream_retval=new org.antlr.runtime.tree.RewriteRuleSubtreeStream(this.adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = this.adaptor.nil();
            // 296:31: -> ^( NEW IDENT ( funCall )? )
            {
                // /Library/WebServer/Documents/calc/Formula.g:296:34: ^( NEW IDENT ( funCall )? )
                {
                var root_1 = this.adaptor.nil();
                root_1 = this.adaptor.becomeRoot(this.adaptor.create(NEW, "NEW"), root_1);

                this.adaptor.addChild(root_1, stream_IDENT.nextNode());
                // /Library/WebServer/Documents/calc/Formula.g:296:46: ( funCall )?
                if ( stream_funCall.hasNext() ) {
                    this.adaptor.addChild(root_1, stream_funCall.nextTree());

                }
                stream_funCall.reset();

                this.adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}


            retval.stop = this.input.LT(-1);

            if ( this.state.backtracking===0 ) {

            retval.tree = this.adaptor.rulePostProcessing(root_0);
            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (re) {
            if (re instanceof org.antlr.runtime.RecognitionException) {
                this.reportError(re);
                this.recover(this.input,re);
                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
            } else {
                throw re;
            }
        }
        finally {
        }
        return retval;
    },

    // inline static return class
    defaultValue_return: (function() {
        FormulaParser.defaultValue_return = function(){};
        org.antlr.lang.extend(FormulaParser.defaultValue_return,
                          org.antlr.runtime.ParserRuleReturnScope,
        {
            getTree: function() { return this.tree; }
        });
        return;
    })(),

    // /Library/WebServer/Documents/calc/Formula.g:299:1: defaultValue : ( negnumber | number | bool | string | array );
    // $ANTLR start "defaultValue"
    defaultValue: function() {
        var retval = new FormulaParser.defaultValue_return();
        retval.start = this.input.LT(1);

        var root_0 = null;

         var negnumber193 = null;
         var number194 = null;
         var bool195 = null;
         var string196 = null;
         var array197 = null;


        try {
            // /Library/WebServer/Documents/calc/Formula.g:300:2: ( negnumber | number | bool | string | array )
            var alt59=5;
            switch ( this.input.LA(1) ) {
            case MINUS:
                alt59=1;
                break;
            case INTEGER:
            case FLOAT:
                alt59=2;
                break;
            case TRUE:
            case FALSE:
                alt59=3;
                break;
            case STRING:
                alt59=4;
                break;
            case LARR:
            case LCURL:
                alt59=5;
                break;
            default:
                if (this.state.backtracking>0) {this.state.failed=true; return retval;}
                var nvae =
                    new org.antlr.runtime.NoViableAltException("", 59, 0, this.input);

                throw nvae;
            }

            switch (alt59) {
                case 1 :
                    // /Library/WebServer/Documents/calc/Formula.g:300:5: negnumber
                    root_0 = this.adaptor.nil();

                    this.pushFollow(FormulaParser.FOLLOW_negnumber_in_defaultValue1906);
                    negnumber193=this.negnumber();

                    this.state._fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, negnumber193.getTree());


                    break;
                case 2 :
                    // /Library/WebServer/Documents/calc/Formula.g:301:5: number
                    root_0 = this.adaptor.nil();

                    this.pushFollow(FormulaParser.FOLLOW_number_in_defaultValue1912);
                    number194=this.number();

                    this.state._fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, number194.getTree());


                    break;
                case 3 :
                    // /Library/WebServer/Documents/calc/Formula.g:302:5: bool
                    root_0 = this.adaptor.nil();

                    this.pushFollow(FormulaParser.FOLLOW_bool_in_defaultValue1918);
                    bool195=this.bool();

                    this.state._fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, bool195.getTree());


                    break;
                case 4 :
                    // /Library/WebServer/Documents/calc/Formula.g:303:5: string
                    root_0 = this.adaptor.nil();

                    this.pushFollow(FormulaParser.FOLLOW_string_in_defaultValue1924);
                    string196=this.string();

                    this.state._fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, string196.getTree());


                    break;
                case 5 :
                    // /Library/WebServer/Documents/calc/Formula.g:304:5: array
                    root_0 = this.adaptor.nil();

                    this.pushFollow(FormulaParser.FOLLOW_array_in_defaultValue1930);
                    array197=this.array();

                    this.state._fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, array197.getTree());


                    break;

            }
            retval.stop = this.input.LT(-1);

            if ( this.state.backtracking===0 ) {

            retval.tree = this.adaptor.rulePostProcessing(root_0);
            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (re) {
            if (re instanceof org.antlr.runtime.RecognitionException) {
                this.reportError(re);
                this.recover(this.input,re);
                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
            } else {
                throw re;
            }
        }
        finally {
        }
        return retval;
    },

    // inline static return class
    array_return: (function() {
        FormulaParser.array_return = function(){};
        org.antlr.lang.extend(FormulaParser.array_return,
                          org.antlr.runtime.ParserRuleReturnScope,
        {
            getTree: function() { return this.tree; }
        });
        return;
    })(),

    // /Library/WebServer/Documents/calc/Formula.g:307:1: array : ( LARR ( NEWLINE )* ( label ( NEWLINE )* ( ',' ( NEWLINE )* label ( NEWLINE )* )* )? ( NEWLINE )* RARR -> ^( ARRAY ( label )* ) | LCURL ( NEWLINE )* ( label ( NEWLINE )* ( ',' ( NEWLINE )* label ( NEWLINE )* )* )? ( NEWLINE )* RCURL -> ^( ARRAY ( label )* ) );
    // $ANTLR start "array"
    array: function() {
        var retval = new FormulaParser.array_return();
        retval.start = this.input.LT(1);

        var root_0 = null;

        var LARR198 = null;
        var NEWLINE199 = null;
        var NEWLINE201 = null;
        var char_literal202 = null;
        var NEWLINE203 = null;
        var NEWLINE205 = null;
        var NEWLINE206 = null;
        var RARR207 = null;
        var LCURL208 = null;
        var NEWLINE209 = null;
        var NEWLINE211 = null;
        var char_literal212 = null;
        var NEWLINE213 = null;
        var NEWLINE215 = null;
        var NEWLINE216 = null;
        var RCURL217 = null;
         var label200 = null;
         var label204 = null;
         var label210 = null;
         var label214 = null;

        var LARR198_tree=null;
        var NEWLINE199_tree=null;
        var NEWLINE201_tree=null;
        var char_literal202_tree=null;
        var NEWLINE203_tree=null;
        var NEWLINE205_tree=null;
        var NEWLINE206_tree=null;
        var RARR207_tree=null;
        var LCURL208_tree=null;
        var NEWLINE209_tree=null;
        var NEWLINE211_tree=null;
        var char_literal212_tree=null;
        var NEWLINE213_tree=null;
        var NEWLINE215_tree=null;
        var NEWLINE216_tree=null;
        var RCURL217_tree=null;
        var stream_LCURL=new org.antlr.runtime.tree.RewriteRuleTokenStream(this.adaptor,"token LCURL");
        var stream_NEWLINE=new org.antlr.runtime.tree.RewriteRuleTokenStream(this.adaptor,"token NEWLINE");
        var stream_RARR=new org.antlr.runtime.tree.RewriteRuleTokenStream(this.adaptor,"token RARR");
        var stream_COMMA=new org.antlr.runtime.tree.RewriteRuleTokenStream(this.adaptor,"token COMMA");
        var stream_LARR=new org.antlr.runtime.tree.RewriteRuleTokenStream(this.adaptor,"token LARR");
        var stream_RCURL=new org.antlr.runtime.tree.RewriteRuleTokenStream(this.adaptor,"token RCURL");
        var stream_label=new org.antlr.runtime.tree.RewriteRuleSubtreeStream(this.adaptor,"rule label");
        try {
            // /Library/WebServer/Documents/calc/Formula.g:308:2: ( LARR ( NEWLINE )* ( label ( NEWLINE )* ( ',' ( NEWLINE )* label ( NEWLINE )* )* )? ( NEWLINE )* RARR -> ^( ARRAY ( label )* ) | LCURL ( NEWLINE )* ( label ( NEWLINE )* ( ',' ( NEWLINE )* label ( NEWLINE )* )* )? ( NEWLINE )* RCURL -> ^( ARRAY ( label )* ) )
            var alt74=2;
            var LA74_0 = this.input.LA(1);

            if ( (LA74_0==LARR) ) {
                alt74=1;
            }
            else if ( (LA74_0==LCURL) ) {
                alt74=2;
            }
            else {
                if (this.state.backtracking>0) {this.state.failed=true; return retval;}
                var nvae =
                    new org.antlr.runtime.NoViableAltException("", 74, 0, this.input);

                throw nvae;
            }
            switch (alt74) {
                case 1 :
                    // /Library/WebServer/Documents/calc/Formula.g:309:2: LARR ( NEWLINE )* ( label ( NEWLINE )* ( ',' ( NEWLINE )* label ( NEWLINE )* )* )? ( NEWLINE )* RARR
                    LARR198=this.match(this.input,LARR,FormulaParser.FOLLOW_LARR_in_array1944); if (this.state.failed) return retval; 
                    if ( this.state.backtracking===0 ) stream_LARR.add(LARR198);

                    // /Library/WebServer/Documents/calc/Formula.g:309:7: ( NEWLINE )*
                    loop60:
                    do {
                        var alt60=2;
                        var LA60_0 = this.input.LA(1);

                        if ( (LA60_0==NEWLINE) ) {
                            var LA60_2 = this.input.LA(2);

                            if ( (this.synpred85_Formula()) ) {
                                alt60=1;
                            }


                        }


                        switch (alt60) {
                        case 1 :
                            // /Library/WebServer/Documents/calc/Formula.g:0:0: NEWLINE
                            NEWLINE199=this.match(this.input,NEWLINE,FormulaParser.FOLLOW_NEWLINE_in_array1946); if (this.state.failed) return retval; 
                            if ( this.state.backtracking===0 ) stream_NEWLINE.add(NEWLINE199);



                            break;

                        default :
                            break loop60;
                        }
                    } while (true);

                    // /Library/WebServer/Documents/calc/Formula.g:309:16: ( label ( NEWLINE )* ( ',' ( NEWLINE )* label ( NEWLINE )* )* )?
                    var alt65=2;
                    alt65 = this.dfa65.predict(this.input);
                    switch (alt65) {
                        case 1 :
                            // /Library/WebServer/Documents/calc/Formula.g:309:17: label ( NEWLINE )* ( ',' ( NEWLINE )* label ( NEWLINE )* )*
                            this.pushFollow(FormulaParser.FOLLOW_label_in_array1950);
                            label200=this.label();

                            this.state._fsp--;
                            if (this.state.failed) return retval;
                            if ( this.state.backtracking===0 ) stream_label.add(label200.getTree());
                            // /Library/WebServer/Documents/calc/Formula.g:309:23: ( NEWLINE )*
                            loop61:
                            do {
                                var alt61=2;
                                var LA61_0 = this.input.LA(1);

                                if ( (LA61_0==NEWLINE) ) {
                                    var LA61_2 = this.input.LA(2);

                                    if ( (this.synpred86_Formula()) ) {
                                        alt61=1;
                                    }


                                }


                                switch (alt61) {
                                case 1 :
                                    // /Library/WebServer/Documents/calc/Formula.g:0:0: NEWLINE
                                    NEWLINE201=this.match(this.input,NEWLINE,FormulaParser.FOLLOW_NEWLINE_in_array1952); if (this.state.failed) return retval; 
                                    if ( this.state.backtracking===0 ) stream_NEWLINE.add(NEWLINE201);



                                    break;

                                default :
                                    break loop61;
                                }
                            } while (true);

                            // /Library/WebServer/Documents/calc/Formula.g:309:32: ( ',' ( NEWLINE )* label ( NEWLINE )* )*
                            loop64:
                            do {
                                var alt64=2;
                                var LA64_0 = this.input.LA(1);

                                if ( (LA64_0==COMMA) ) {
                                    alt64=1;
                                }


                                switch (alt64) {
                                case 1 :
                                    // /Library/WebServer/Documents/calc/Formula.g:309:33: ',' ( NEWLINE )* label ( NEWLINE )*
                                    char_literal202=this.match(this.input,COMMA,FormulaParser.FOLLOW_COMMA_in_array1956); if (this.state.failed) return retval; 
                                    if ( this.state.backtracking===0 ) stream_COMMA.add(char_literal202);

                                    // /Library/WebServer/Documents/calc/Formula.g:309:37: ( NEWLINE )*
                                    loop62:
                                    do {
                                        var alt62=2;
                                        var LA62_0 = this.input.LA(1);

                                        if ( (LA62_0==NEWLINE) ) {
                                            var LA62_2 = this.input.LA(2);

                                            if ( (this.synpred87_Formula()) ) {
                                                alt62=1;
                                            }


                                        }


                                        switch (alt62) {
                                        case 1 :
                                            // /Library/WebServer/Documents/calc/Formula.g:0:0: NEWLINE
                                            NEWLINE203=this.match(this.input,NEWLINE,FormulaParser.FOLLOW_NEWLINE_in_array1958); if (this.state.failed) return retval; 
                                            if ( this.state.backtracking===0 ) stream_NEWLINE.add(NEWLINE203);



                                            break;

                                        default :
                                            break loop62;
                                        }
                                    } while (true);

                                    this.pushFollow(FormulaParser.FOLLOW_label_in_array1961);
                                    label204=this.label();

                                    this.state._fsp--;
                                    if (this.state.failed) return retval;
                                    if ( this.state.backtracking===0 ) stream_label.add(label204.getTree());
                                    // /Library/WebServer/Documents/calc/Formula.g:309:52: ( NEWLINE )*
                                    loop63:
                                    do {
                                        var alt63=2;
                                        var LA63_0 = this.input.LA(1);

                                        if ( (LA63_0==NEWLINE) ) {
                                            var LA63_1 = this.input.LA(2);

                                            if ( (this.synpred88_Formula()) ) {
                                                alt63=1;
                                            }


                                        }


                                        switch (alt63) {
                                        case 1 :
                                            // /Library/WebServer/Documents/calc/Formula.g:0:0: NEWLINE
                                            NEWLINE205=this.match(this.input,NEWLINE,FormulaParser.FOLLOW_NEWLINE_in_array1963); if (this.state.failed) return retval; 
                                            if ( this.state.backtracking===0 ) stream_NEWLINE.add(NEWLINE205);



                                            break;

                                        default :
                                            break loop63;
                                        }
                                    } while (true);



                                    break;

                                default :
                                    break loop64;
                                }
                            } while (true);



                            break;

                    }

                    // /Library/WebServer/Documents/calc/Formula.g:309:65: ( NEWLINE )*
                    loop66:
                    do {
                        var alt66=2;
                        var LA66_0 = this.input.LA(1);

                        if ( (LA66_0==NEWLINE) ) {
                            alt66=1;
                        }


                        switch (alt66) {
                        case 1 :
                            // /Library/WebServer/Documents/calc/Formula.g:0:0: NEWLINE
                            NEWLINE206=this.match(this.input,NEWLINE,FormulaParser.FOLLOW_NEWLINE_in_array1970); if (this.state.failed) return retval; 
                            if ( this.state.backtracking===0 ) stream_NEWLINE.add(NEWLINE206);



                            break;

                        default :
                            break loop66;
                        }
                    } while (true);

                    RARR207=this.match(this.input,RARR,FormulaParser.FOLLOW_RARR_in_array1973); if (this.state.failed) return retval; 
                    if ( this.state.backtracking===0 ) stream_RARR.add(RARR207);



                    // AST REWRITE
                    // elements: label
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( this.state.backtracking===0 ) {
                    retval.tree = root_0;
                    var stream_retval=new org.antlr.runtime.tree.RewriteRuleSubtreeStream(this.adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = this.adaptor.nil();
                    // 309:79: -> ^( ARRAY ( label )* )
                    {
                        // /Library/WebServer/Documents/calc/Formula.g:309:82: ^( ARRAY ( label )* )
                        {
                        var root_1 = this.adaptor.nil();
                        root_1 = this.adaptor.becomeRoot(this.adaptor.create(ARRAY, "ARRAY"), root_1);

                        // /Library/WebServer/Documents/calc/Formula.g:309:90: ( label )*
                        while ( stream_label.hasNext() ) {
                            this.adaptor.addChild(root_1, stream_label.nextTree());

                        }
                        stream_label.reset();

                        this.adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}

                    break;
                case 2 :
                    // /Library/WebServer/Documents/calc/Formula.g:310:4: LCURL ( NEWLINE )* ( label ( NEWLINE )* ( ',' ( NEWLINE )* label ( NEWLINE )* )* )? ( NEWLINE )* RCURL
                    LCURL208=this.match(this.input,LCURL,FormulaParser.FOLLOW_LCURL_in_array1987); if (this.state.failed) return retval; 
                    if ( this.state.backtracking===0 ) stream_LCURL.add(LCURL208);

                    // /Library/WebServer/Documents/calc/Formula.g:310:10: ( NEWLINE )*
                    loop67:
                    do {
                        var alt67=2;
                        var LA67_0 = this.input.LA(1);

                        if ( (LA67_0==NEWLINE) ) {
                            var LA67_2 = this.input.LA(2);

                            if ( (this.synpred93_Formula()) ) {
                                alt67=1;
                            }


                        }


                        switch (alt67) {
                        case 1 :
                            // /Library/WebServer/Documents/calc/Formula.g:0:0: NEWLINE
                            NEWLINE209=this.match(this.input,NEWLINE,FormulaParser.FOLLOW_NEWLINE_in_array1989); if (this.state.failed) return retval; 
                            if ( this.state.backtracking===0 ) stream_NEWLINE.add(NEWLINE209);



                            break;

                        default :
                            break loop67;
                        }
                    } while (true);

                    // /Library/WebServer/Documents/calc/Formula.g:310:19: ( label ( NEWLINE )* ( ',' ( NEWLINE )* label ( NEWLINE )* )* )?
                    var alt72=2;
                    alt72 = this.dfa72.predict(this.input);
                    switch (alt72) {
                        case 1 :
                            // /Library/WebServer/Documents/calc/Formula.g:310:20: label ( NEWLINE )* ( ',' ( NEWLINE )* label ( NEWLINE )* )*
                            this.pushFollow(FormulaParser.FOLLOW_label_in_array1993);
                            label210=this.label();

                            this.state._fsp--;
                            if (this.state.failed) return retval;
                            if ( this.state.backtracking===0 ) stream_label.add(label210.getTree());
                            // /Library/WebServer/Documents/calc/Formula.g:310:26: ( NEWLINE )*
                            loop68:
                            do {
                                var alt68=2;
                                var LA68_0 = this.input.LA(1);

                                if ( (LA68_0==NEWLINE) ) {
                                    var LA68_2 = this.input.LA(2);

                                    if ( (this.synpred94_Formula()) ) {
                                        alt68=1;
                                    }


                                }


                                switch (alt68) {
                                case 1 :
                                    // /Library/WebServer/Documents/calc/Formula.g:0:0: NEWLINE
                                    NEWLINE211=this.match(this.input,NEWLINE,FormulaParser.FOLLOW_NEWLINE_in_array1995); if (this.state.failed) return retval; 
                                    if ( this.state.backtracking===0 ) stream_NEWLINE.add(NEWLINE211);



                                    break;

                                default :
                                    break loop68;
                                }
                            } while (true);

                            // /Library/WebServer/Documents/calc/Formula.g:310:34: ( ',' ( NEWLINE )* label ( NEWLINE )* )*
                            loop71:
                            do {
                                var alt71=2;
                                var LA71_0 = this.input.LA(1);

                                if ( (LA71_0==COMMA) ) {
                                    alt71=1;
                                }


                                switch (alt71) {
                                case 1 :
                                    // /Library/WebServer/Documents/calc/Formula.g:310:35: ',' ( NEWLINE )* label ( NEWLINE )*
                                    char_literal212=this.match(this.input,COMMA,FormulaParser.FOLLOW_COMMA_in_array1998); if (this.state.failed) return retval; 
                                    if ( this.state.backtracking===0 ) stream_COMMA.add(char_literal212);

                                    // /Library/WebServer/Documents/calc/Formula.g:310:39: ( NEWLINE )*
                                    loop69:
                                    do {
                                        var alt69=2;
                                        var LA69_0 = this.input.LA(1);

                                        if ( (LA69_0==NEWLINE) ) {
                                            var LA69_2 = this.input.LA(2);

                                            if ( (this.synpred95_Formula()) ) {
                                                alt69=1;
                                            }


                                        }


                                        switch (alt69) {
                                        case 1 :
                                            // /Library/WebServer/Documents/calc/Formula.g:0:0: NEWLINE
                                            NEWLINE213=this.match(this.input,NEWLINE,FormulaParser.FOLLOW_NEWLINE_in_array2000); if (this.state.failed) return retval; 
                                            if ( this.state.backtracking===0 ) stream_NEWLINE.add(NEWLINE213);



                                            break;

                                        default :
                                            break loop69;
                                        }
                                    } while (true);

                                    this.pushFollow(FormulaParser.FOLLOW_label_in_array2003);
                                    label214=this.label();

                                    this.state._fsp--;
                                    if (this.state.failed) return retval;
                                    if ( this.state.backtracking===0 ) stream_label.add(label214.getTree());
                                    // /Library/WebServer/Documents/calc/Formula.g:310:54: ( NEWLINE )*
                                    loop70:
                                    do {
                                        var alt70=2;
                                        var LA70_0 = this.input.LA(1);

                                        if ( (LA70_0==NEWLINE) ) {
                                            var LA70_1 = this.input.LA(2);

                                            if ( (this.synpred96_Formula()) ) {
                                                alt70=1;
                                            }


                                        }


                                        switch (alt70) {
                                        case 1 :
                                            // /Library/WebServer/Documents/calc/Formula.g:0:0: NEWLINE
                                            NEWLINE215=this.match(this.input,NEWLINE,FormulaParser.FOLLOW_NEWLINE_in_array2005); if (this.state.failed) return retval; 
                                            if ( this.state.backtracking===0 ) stream_NEWLINE.add(NEWLINE215);



                                            break;

                                        default :
                                            break loop70;
                                        }
                                    } while (true);



                                    break;

                                default :
                                    break loop71;
                                }
                            } while (true);



                            break;

                    }

                    // /Library/WebServer/Documents/calc/Formula.g:310:67: ( NEWLINE )*
                    loop73:
                    do {
                        var alt73=2;
                        var LA73_0 = this.input.LA(1);

                        if ( (LA73_0==NEWLINE) ) {
                            alt73=1;
                        }


                        switch (alt73) {
                        case 1 :
                            // /Library/WebServer/Documents/calc/Formula.g:0:0: NEWLINE
                            NEWLINE216=this.match(this.input,NEWLINE,FormulaParser.FOLLOW_NEWLINE_in_array2012); if (this.state.failed) return retval; 
                            if ( this.state.backtracking===0 ) stream_NEWLINE.add(NEWLINE216);



                            break;

                        default :
                            break loop73;
                        }
                    } while (true);

                    RCURL217=this.match(this.input,RCURL,FormulaParser.FOLLOW_RCURL_in_array2015); if (this.state.failed) return retval; 
                    if ( this.state.backtracking===0 ) stream_RCURL.add(RCURL217);



                    // AST REWRITE
                    // elements: label
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( this.state.backtracking===0 ) {
                    retval.tree = root_0;
                    var stream_retval=new org.antlr.runtime.tree.RewriteRuleSubtreeStream(this.adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = this.adaptor.nil();
                    // 310:82: -> ^( ARRAY ( label )* )
                    {
                        // /Library/WebServer/Documents/calc/Formula.g:310:85: ^( ARRAY ( label )* )
                        {
                        var root_1 = this.adaptor.nil();
                        root_1 = this.adaptor.becomeRoot(this.adaptor.create(ARRAY, "ARRAY"), root_1);

                        // /Library/WebServer/Documents/calc/Formula.g:310:93: ( label )*
                        while ( stream_label.hasNext() ) {
                            this.adaptor.addChild(root_1, stream_label.nextTree());

                        }
                        stream_label.reset();

                        this.adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}

                    break;

            }
            retval.stop = this.input.LT(-1);

            if ( this.state.backtracking===0 ) {

            retval.tree = this.adaptor.rulePostProcessing(root_0);
            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (re) {
            if (re instanceof org.antlr.runtime.RecognitionException) {
                this.reportError(re);
                this.recover(this.input,re);
                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
            } else {
                throw re;
            }
        }
        finally {
        }
        return retval;
    },

    // inline static return class
    selector_return: (function() {
        FormulaParser.selector_return = function(){};
        org.antlr.lang.extend(FormulaParser.selector_return,
                          org.antlr.runtime.ParserRuleReturnScope,
        {
            getTree: function() { return this.tree; }
        });
        return;
    })(),

    // /Library/WebServer/Documents/calc/Formula.g:313:1: selector : ( minarray | dotselector ) -> ^( SELECTOR ( minarray )? ( dotselector )? ) ;
    // $ANTLR start "selector"
    selector: function() {
        var retval = new FormulaParser.selector_return();
        retval.start = this.input.LT(1);

        var root_0 = null;

         var minarray218 = null;
         var dotselector219 = null;

        var stream_dotselector=new org.antlr.runtime.tree.RewriteRuleSubtreeStream(this.adaptor,"rule dotselector");
        var stream_minarray=new org.antlr.runtime.tree.RewriteRuleSubtreeStream(this.adaptor,"rule minarray");
        try {
            // /Library/WebServer/Documents/calc/Formula.g:314:2: ( ( minarray | dotselector ) -> ^( SELECTOR ( minarray )? ( dotselector )? ) )
            // /Library/WebServer/Documents/calc/Formula.g:314:4: ( minarray | dotselector )
            // /Library/WebServer/Documents/calc/Formula.g:314:4: ( minarray | dotselector )
            var alt75=2;
            var LA75_0 = this.input.LA(1);

            if ( (LA75_0==LARR||LA75_0==LCURL) ) {
                alt75=1;
            }
            else if ( (LA75_0==116) ) {
                alt75=2;
            }
            else {
                if (this.state.backtracking>0) {this.state.failed=true; return retval;}
                var nvae =
                    new org.antlr.runtime.NoViableAltException("", 75, 0, this.input);

                throw nvae;
            }
            switch (alt75) {
                case 1 :
                    // /Library/WebServer/Documents/calc/Formula.g:314:5: minarray
                    this.pushFollow(FormulaParser.FOLLOW_minarray_in_selector2036);
                    minarray218=this.minarray();

                    this.state._fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) stream_minarray.add(minarray218.getTree());


                    break;
                case 2 :
                    // /Library/WebServer/Documents/calc/Formula.g:314:16: dotselector
                    this.pushFollow(FormulaParser.FOLLOW_dotselector_in_selector2040);
                    dotselector219=this.dotselector();

                    this.state._fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) stream_dotselector.add(dotselector219.getTree());


                    break;

            }



            // AST REWRITE
            // elements: minarray, dotselector
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( this.state.backtracking===0 ) {
            retval.tree = root_0;
            var stream_retval=new org.antlr.runtime.tree.RewriteRuleSubtreeStream(this.adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = this.adaptor.nil();
            // 314:29: -> ^( SELECTOR ( minarray )? ( dotselector )? )
            {
                // /Library/WebServer/Documents/calc/Formula.g:314:32: ^( SELECTOR ( minarray )? ( dotselector )? )
                {
                var root_1 = this.adaptor.nil();
                root_1 = this.adaptor.becomeRoot(this.adaptor.create(SELECTOR, "SELECTOR"), root_1);

                // /Library/WebServer/Documents/calc/Formula.g:314:43: ( minarray )?
                if ( stream_minarray.hasNext() ) {
                    this.adaptor.addChild(root_1, stream_minarray.nextTree());

                }
                stream_minarray.reset();
                // /Library/WebServer/Documents/calc/Formula.g:314:53: ( dotselector )?
                if ( stream_dotselector.hasNext() ) {
                    this.adaptor.addChild(root_1, stream_dotselector.nextTree());

                }
                stream_dotselector.reset();

                this.adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}


            retval.stop = this.input.LT(-1);

            if ( this.state.backtracking===0 ) {

            retval.tree = this.adaptor.rulePostProcessing(root_0);
            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (re) {
            if (re instanceof org.antlr.runtime.RecognitionException) {
                this.reportError(re);
                this.recover(this.input,re);
                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
            } else {
                throw re;
            }
        }
        finally {
        }
        return retval;
    },

    // inline static return class
    minarray_return: (function() {
        FormulaParser.minarray_return = function(){};
        org.antlr.lang.extend(FormulaParser.minarray_return,
                          org.antlr.runtime.ParserRuleReturnScope,
        {
            getTree: function() { return this.tree; }
        });
        return;
    })(),

    // /Library/WebServer/Documents/calc/Formula.g:317:1: minarray : ( LARR ( logicalExpression | MULT ) ( COMMA ( logicalExpression | MULT ) )* RARR | LCURL ( logicalExpression | MULT ) ( COMMA ( logicalExpression | MULT ) )* RCURL );
    // $ANTLR start "minarray"
    minarray: function() {
        var retval = new FormulaParser.minarray_return();
        retval.start = this.input.LT(1);

        var root_0 = null;

        var LARR220 = null;
        var MULT222 = null;
        var COMMA223 = null;
        var MULT225 = null;
        var RARR226 = null;
        var LCURL227 = null;
        var MULT229 = null;
        var COMMA230 = null;
        var MULT232 = null;
        var RCURL233 = null;
         var logicalExpression221 = null;
         var logicalExpression224 = null;
         var logicalExpression228 = null;
         var logicalExpression231 = null;

        var LARR220_tree=null;
        var MULT222_tree=null;
        var COMMA223_tree=null;
        var MULT225_tree=null;
        var RARR226_tree=null;
        var LCURL227_tree=null;
        var MULT229_tree=null;
        var COMMA230_tree=null;
        var MULT232_tree=null;
        var RCURL233_tree=null;

        try {
            // /Library/WebServer/Documents/calc/Formula.g:318:2: ( LARR ( logicalExpression | MULT ) ( COMMA ( logicalExpression | MULT ) )* RARR | LCURL ( logicalExpression | MULT ) ( COMMA ( logicalExpression | MULT ) )* RCURL )
            var alt82=2;
            var LA82_0 = this.input.LA(1);

            if ( (LA82_0==LARR) ) {
                alt82=1;
            }
            else if ( (LA82_0==LCURL) ) {
                alt82=2;
            }
            else {
                if (this.state.backtracking>0) {this.state.failed=true; return retval;}
                var nvae =
                    new org.antlr.runtime.NoViableAltException("", 82, 0, this.input);

                throw nvae;
            }
            switch (alt82) {
                case 1 :
                    // /Library/WebServer/Documents/calc/Formula.g:319:2: LARR ( logicalExpression | MULT ) ( COMMA ( logicalExpression | MULT ) )* RARR
                    root_0 = this.adaptor.nil();

                    LARR220=this.match(this.input,LARR,FormulaParser.FOLLOW_LARR_in_minarray2067); if (this.state.failed) return retval;
                    // /Library/WebServer/Documents/calc/Formula.g:319:9: ( logicalExpression | MULT )
                    var alt76=2;
                    var LA76_0 = this.input.LA(1);

                    if ( (LA76_0==FUNCTIONSTATEMENT||LA76_0==NEWSTATEMENT||LA76_0==IDENT||LA76_0==PRIMITIVE||LA76_0==MINUS||(LA76_0>=NOT && LA76_0<=LARR)||LA76_0==LCURL||(LA76_0>=STRING && LA76_0<=FALSE)||LA76_0==113) ) {
                        alt76=1;
                    }
                    else if ( (LA76_0==MULT) ) {
                        alt76=2;
                    }
                    else {
                        if (this.state.backtracking>0) {this.state.failed=true; return retval;}
                        var nvae =
                            new org.antlr.runtime.NoViableAltException("", 76, 0, this.input);

                        throw nvae;
                    }
                    switch (alt76) {
                        case 1 :
                            // /Library/WebServer/Documents/calc/Formula.g:319:10: logicalExpression
                            this.pushFollow(FormulaParser.FOLLOW_logicalExpression_in_minarray2072);
                            logicalExpression221=this.logicalExpression();

                            this.state._fsp--;
                            if (this.state.failed) return retval;
                            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, logicalExpression221.getTree());


                            break;
                        case 2 :
                            // /Library/WebServer/Documents/calc/Formula.g:319:28: MULT
                            MULT222=this.match(this.input,MULT,FormulaParser.FOLLOW_MULT_in_minarray2074); if (this.state.failed) return retval;
                            if ( this.state.backtracking===0 ) {
                            MULT222_tree = this.adaptor.create(MULT222);
                            this.adaptor.addChild(root_0, MULT222_tree);
                            }


                            break;

                    }

                    // /Library/WebServer/Documents/calc/Formula.g:319:34: ( COMMA ( logicalExpression | MULT ) )*
                    loop78:
                    do {
                        var alt78=2;
                        var LA78_0 = this.input.LA(1);

                        if ( (LA78_0==COMMA) ) {
                            alt78=1;
                        }


                        switch (alt78) {
                        case 1 :
                            // /Library/WebServer/Documents/calc/Formula.g:319:35: COMMA ( logicalExpression | MULT )
                            COMMA223=this.match(this.input,COMMA,FormulaParser.FOLLOW_COMMA_in_minarray2078); if (this.state.failed) return retval;
                            // /Library/WebServer/Documents/calc/Formula.g:319:42: ( logicalExpression | MULT )
                            var alt77=2;
                            var LA77_0 = this.input.LA(1);

                            if ( (LA77_0==FUNCTIONSTATEMENT||LA77_0==NEWSTATEMENT||LA77_0==IDENT||LA77_0==PRIMITIVE||LA77_0==MINUS||(LA77_0>=NOT && LA77_0<=LARR)||LA77_0==LCURL||(LA77_0>=STRING && LA77_0<=FALSE)||LA77_0==113) ) {
                                alt77=1;
                            }
                            else if ( (LA77_0==MULT) ) {
                                alt77=2;
                            }
                            else {
                                if (this.state.backtracking>0) {this.state.failed=true; return retval;}
                                var nvae =
                                    new org.antlr.runtime.NoViableAltException("", 77, 0, this.input);

                                throw nvae;
                            }
                            switch (alt77) {
                                case 1 :
                                    // /Library/WebServer/Documents/calc/Formula.g:319:43: logicalExpression
                                    this.pushFollow(FormulaParser.FOLLOW_logicalExpression_in_minarray2082);
                                    logicalExpression224=this.logicalExpression();

                                    this.state._fsp--;
                                    if (this.state.failed) return retval;
                                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, logicalExpression224.getTree());


                                    break;
                                case 2 :
                                    // /Library/WebServer/Documents/calc/Formula.g:319:61: MULT
                                    MULT225=this.match(this.input,MULT,FormulaParser.FOLLOW_MULT_in_minarray2084); if (this.state.failed) return retval;
                                    if ( this.state.backtracking===0 ) {
                                    MULT225_tree = this.adaptor.create(MULT225);
                                    this.adaptor.addChild(root_0, MULT225_tree);
                                    }


                                    break;

                            }



                            break;

                        default :
                            break loop78;
                        }
                    } while (true);

                    RARR226=this.match(this.input,RARR,FormulaParser.FOLLOW_RARR_in_minarray2091); if (this.state.failed) return retval;


                    break;
                case 2 :
                    // /Library/WebServer/Documents/calc/Formula.g:320:4: LCURL ( logicalExpression | MULT ) ( COMMA ( logicalExpression | MULT ) )* RCURL
                    root_0 = this.adaptor.nil();

                    LCURL227=this.match(this.input,LCURL,FormulaParser.FOLLOW_LCURL_in_minarray2097); if (this.state.failed) return retval;
                    // /Library/WebServer/Documents/calc/Formula.g:320:12: ( logicalExpression | MULT )
                    var alt79=2;
                    var LA79_0 = this.input.LA(1);

                    if ( (LA79_0==FUNCTIONSTATEMENT||LA79_0==NEWSTATEMENT||LA79_0==IDENT||LA79_0==PRIMITIVE||LA79_0==MINUS||(LA79_0>=NOT && LA79_0<=LARR)||LA79_0==LCURL||(LA79_0>=STRING && LA79_0<=FALSE)||LA79_0==113) ) {
                        alt79=1;
                    }
                    else if ( (LA79_0==MULT) ) {
                        alt79=2;
                    }
                    else {
                        if (this.state.backtracking>0) {this.state.failed=true; return retval;}
                        var nvae =
                            new org.antlr.runtime.NoViableAltException("", 79, 0, this.input);

                        throw nvae;
                    }
                    switch (alt79) {
                        case 1 :
                            // /Library/WebServer/Documents/calc/Formula.g:320:13: logicalExpression
                            this.pushFollow(FormulaParser.FOLLOW_logicalExpression_in_minarray2102);
                            logicalExpression228=this.logicalExpression();

                            this.state._fsp--;
                            if (this.state.failed) return retval;
                            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, logicalExpression228.getTree());


                            break;
                        case 2 :
                            // /Library/WebServer/Documents/calc/Formula.g:320:31: MULT
                            MULT229=this.match(this.input,MULT,FormulaParser.FOLLOW_MULT_in_minarray2104); if (this.state.failed) return retval;
                            if ( this.state.backtracking===0 ) {
                            MULT229_tree = this.adaptor.create(MULT229);
                            this.adaptor.addChild(root_0, MULT229_tree);
                            }


                            break;

                    }

                    // /Library/WebServer/Documents/calc/Formula.g:320:37: ( COMMA ( logicalExpression | MULT ) )*
                    loop81:
                    do {
                        var alt81=2;
                        var LA81_0 = this.input.LA(1);

                        if ( (LA81_0==COMMA) ) {
                            alt81=1;
                        }


                        switch (alt81) {
                        case 1 :
                            // /Library/WebServer/Documents/calc/Formula.g:320:38: COMMA ( logicalExpression | MULT )
                            COMMA230=this.match(this.input,COMMA,FormulaParser.FOLLOW_COMMA_in_minarray2108); if (this.state.failed) return retval;
                            // /Library/WebServer/Documents/calc/Formula.g:320:45: ( logicalExpression | MULT )
                            var alt80=2;
                            var LA80_0 = this.input.LA(1);

                            if ( (LA80_0==FUNCTIONSTATEMENT||LA80_0==NEWSTATEMENT||LA80_0==IDENT||LA80_0==PRIMITIVE||LA80_0==MINUS||(LA80_0>=NOT && LA80_0<=LARR)||LA80_0==LCURL||(LA80_0>=STRING && LA80_0<=FALSE)||LA80_0==113) ) {
                                alt80=1;
                            }
                            else if ( (LA80_0==MULT) ) {
                                alt80=2;
                            }
                            else {
                                if (this.state.backtracking>0) {this.state.failed=true; return retval;}
                                var nvae =
                                    new org.antlr.runtime.NoViableAltException("", 80, 0, this.input);

                                throw nvae;
                            }
                            switch (alt80) {
                                case 1 :
                                    // /Library/WebServer/Documents/calc/Formula.g:320:46: logicalExpression
                                    this.pushFollow(FormulaParser.FOLLOW_logicalExpression_in_minarray2112);
                                    logicalExpression231=this.logicalExpression();

                                    this.state._fsp--;
                                    if (this.state.failed) return retval;
                                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, logicalExpression231.getTree());


                                    break;
                                case 2 :
                                    // /Library/WebServer/Documents/calc/Formula.g:320:64: MULT
                                    MULT232=this.match(this.input,MULT,FormulaParser.FOLLOW_MULT_in_minarray2114); if (this.state.failed) return retval;
                                    if ( this.state.backtracking===0 ) {
                                    MULT232_tree = this.adaptor.create(MULT232);
                                    this.adaptor.addChild(root_0, MULT232_tree);
                                    }


                                    break;

                            }



                            break;

                        default :
                            break loop81;
                        }
                    } while (true);

                    RCURL233=this.match(this.input,RCURL,FormulaParser.FOLLOW_RCURL_in_minarray2121); if (this.state.failed) return retval;


                    break;

            }
            retval.stop = this.input.LT(-1);

            if ( this.state.backtracking===0 ) {

            retval.tree = this.adaptor.rulePostProcessing(root_0);
            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (re) {
            if (re instanceof org.antlr.runtime.RecognitionException) {
                this.reportError(re);
                this.recover(this.input,re);
                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
            } else {
                throw re;
            }
        }
        finally {
        }
        return retval;
    },

    // inline static return class
    dotselector_return: (function() {
        FormulaParser.dotselector_return = function(){};
        org.antlr.lang.extend(FormulaParser.dotselector_return,
                          org.antlr.runtime.ParserRuleReturnScope,
        {
            getTree: function() { return this.tree; }
        });
        return;
    })(),

    // /Library/WebServer/Documents/calc/Formula.g:322:1: dotselector : ( '.' arrayName )+ -> ^( DOTSELECTOR ( arrayName )+ ) ;
    // $ANTLR start "dotselector"
    dotselector: function() {
        var retval = new FormulaParser.dotselector_return();
        retval.start = this.input.LT(1);

        var root_0 = null;

        var char_literal234 = null;
         var arrayName235 = null;

        var char_literal234_tree=null;
        var stream_116=new org.antlr.runtime.tree.RewriteRuleTokenStream(this.adaptor,"token 116");
        var stream_arrayName=new org.antlr.runtime.tree.RewriteRuleSubtreeStream(this.adaptor,"rule arrayName");
        try {
            // /Library/WebServer/Documents/calc/Formula.g:323:2: ( ( '.' arrayName )+ -> ^( DOTSELECTOR ( arrayName )+ ) )
            // /Library/WebServer/Documents/calc/Formula.g:323:4: ( '.' arrayName )+
            // /Library/WebServer/Documents/calc/Formula.g:323:4: ( '.' arrayName )+
            var cnt83=0;
            loop83:
            do {
                var alt83=2;
                var LA83_0 = this.input.LA(1);

                if ( (LA83_0==116) ) {
                    var LA83_2 = this.input.LA(2);

                    if ( (this.synpred108_Formula()) ) {
                        alt83=1;
                    }


                }


                switch (alt83) {
                case 1 :
                    // /Library/WebServer/Documents/calc/Formula.g:323:5: '.' arrayName
                    char_literal234=this.match(this.input,116,FormulaParser.FOLLOW_116_in_dotselector2133); if (this.state.failed) return retval; 
                    if ( this.state.backtracking===0 ) stream_116.add(char_literal234);

                    this.pushFollow(FormulaParser.FOLLOW_arrayName_in_dotselector2135);
                    arrayName235=this.arrayName();

                    this.state._fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) stream_arrayName.add(arrayName235.getTree());


                    break;

                default :
                    if ( cnt83 >= 1 ) {
                        break loop83;
                    }
                    if (this.state.backtracking>0) {this.state.failed=true; return retval;}
                        var eee = new org.antlr.runtime.EarlyExitException(83, this.input);
                        throw eee;
                }
                cnt83++;
            } while (true);



            // AST REWRITE
            // elements: arrayName
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( this.state.backtracking===0 ) {
            retval.tree = root_0;
            var stream_retval=new org.antlr.runtime.tree.RewriteRuleSubtreeStream(this.adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = this.adaptor.nil();
            // 323:21: -> ^( DOTSELECTOR ( arrayName )+ )
            {
                // /Library/WebServer/Documents/calc/Formula.g:323:24: ^( DOTSELECTOR ( arrayName )+ )
                {
                var root_1 = this.adaptor.nil();
                root_1 = this.adaptor.becomeRoot(this.adaptor.create(DOTSELECTOR, "DOTSELECTOR"), root_1);

                if ( !(stream_arrayName.hasNext()) ) {
                    throw new org.antlr.runtime.tree.RewriteEarlyExitException();
                }
                while ( stream_arrayName.hasNext() ) {
                    this.adaptor.addChild(root_1, stream_arrayName.nextTree());

                }
                stream_arrayName.reset();

                this.adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}


            retval.stop = this.input.LT(-1);

            if ( this.state.backtracking===0 ) {

            retval.tree = this.adaptor.rulePostProcessing(root_0);
            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (re) {
            if (re instanceof org.antlr.runtime.RecognitionException) {
                this.reportError(re);
                this.recover(this.input,re);
                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
            } else {
                throw re;
            }
        }
        finally {
        }
        return retval;
    },

    // inline static return class
    arrayName_return: (function() {
        FormulaParser.arrayName_return = function(){};
        org.antlr.lang.extend(FormulaParser.arrayName_return,
                          org.antlr.runtime.ParserRuleReturnScope,
        {
            getTree: function() { return this.tree; }
        });
        return;
    })(),

    // /Library/WebServer/Documents/calc/Formula.g:326:1: arrayName : ( IDENT | STRING | MULT );
    // $ANTLR start "arrayName"
    arrayName: function() {
        var retval = new FormulaParser.arrayName_return();
        retval.start = this.input.LT(1);

        var root_0 = null;

        var set236 = null;

        var set236_tree=null;

        try {
            // /Library/WebServer/Documents/calc/Formula.g:327:2: ( IDENT | STRING | MULT )
            // /Library/WebServer/Documents/calc/Formula.g:
            root_0 = this.adaptor.nil();

            set236=this.input.LT(1);
            if ( this.input.LA(1)==IDENT||this.input.LA(1)==MULT||this.input.LA(1)==STRING ) {
                this.input.consume();
                if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, this.adaptor.create(set236));
                this.state.errorRecovery=false;this.state.failed=false;
            }
            else {
                if (this.state.backtracking>0) {this.state.failed=true; return retval;}
                var mse = new org.antlr.runtime.MismatchedSetException(null,this.input);
                throw mse;
            }




            retval.stop = this.input.LT(-1);

            if ( this.state.backtracking===0 ) {

            retval.tree = this.adaptor.rulePostProcessing(root_0);
            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (re) {
            if (re instanceof org.antlr.runtime.RecognitionException) {
                this.reportError(re);
                this.recover(this.input,re);
                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
            } else {
                throw re;
            }
        }
        finally {
        }
        return retval;
    },

    // inline static return class
    label_return: (function() {
        FormulaParser.label_return = function(){};
        org.antlr.lang.extend(FormulaParser.label_return,
                          org.antlr.runtime.ParserRuleReturnScope,
        {
            getTree: function() { return this.tree; }
        });
        return;
    })(),

    // /Library/WebServer/Documents/calc/Formula.g:330:1: label : ( arrayName ( NEWLINE )* COLON )? ( NEWLINE )* logicalExpression -> ^( LABEL logicalExpression ( arrayName )? ) ;
    // $ANTLR start "label"
    label: function() {
        var retval = new FormulaParser.label_return();
        retval.start = this.input.LT(1);

        var root_0 = null;

        var NEWLINE238 = null;
        var COLON239 = null;
        var NEWLINE240 = null;
         var arrayName237 = null;
         var logicalExpression241 = null;

        var NEWLINE238_tree=null;
        var COLON239_tree=null;
        var NEWLINE240_tree=null;
        var stream_COLON=new org.antlr.runtime.tree.RewriteRuleTokenStream(this.adaptor,"token COLON");
        var stream_NEWLINE=new org.antlr.runtime.tree.RewriteRuleTokenStream(this.adaptor,"token NEWLINE");
        var stream_arrayName=new org.antlr.runtime.tree.RewriteRuleSubtreeStream(this.adaptor,"rule arrayName");
        var stream_logicalExpression=new org.antlr.runtime.tree.RewriteRuleSubtreeStream(this.adaptor,"rule logicalExpression");
        try {
            // /Library/WebServer/Documents/calc/Formula.g:330:7: ( ( arrayName ( NEWLINE )* COLON )? ( NEWLINE )* logicalExpression -> ^( LABEL logicalExpression ( arrayName )? ) )
            // /Library/WebServer/Documents/calc/Formula.g:331:2: ( arrayName ( NEWLINE )* COLON )? ( NEWLINE )* logicalExpression
            // /Library/WebServer/Documents/calc/Formula.g:331:2: ( arrayName ( NEWLINE )* COLON )?
            var alt85=2;
            alt85 = this.dfa85.predict(this.input);
            switch (alt85) {
                case 1 :
                    // /Library/WebServer/Documents/calc/Formula.g:331:3: arrayName ( NEWLINE )* COLON
                    this.pushFollow(FormulaParser.FOLLOW_arrayName_in_label2173);
                    arrayName237=this.arrayName();

                    this.state._fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) stream_arrayName.add(arrayName237.getTree());
                    // /Library/WebServer/Documents/calc/Formula.g:331:13: ( NEWLINE )*
                    loop84:
                    do {
                        var alt84=2;
                        var LA84_0 = this.input.LA(1);

                        if ( (LA84_0==NEWLINE) ) {
                            alt84=1;
                        }


                        switch (alt84) {
                        case 1 :
                            // /Library/WebServer/Documents/calc/Formula.g:0:0: NEWLINE
                            NEWLINE238=this.match(this.input,NEWLINE,FormulaParser.FOLLOW_NEWLINE_in_label2175); if (this.state.failed) return retval; 
                            if ( this.state.backtracking===0 ) stream_NEWLINE.add(NEWLINE238);



                            break;

                        default :
                            break loop84;
                        }
                    } while (true);

                    COLON239=this.match(this.input,COLON,FormulaParser.FOLLOW_COLON_in_label2178); if (this.state.failed) return retval; 
                    if ( this.state.backtracking===0 ) stream_COLON.add(COLON239);



                    break;

            }

            // /Library/WebServer/Documents/calc/Formula.g:331:30: ( NEWLINE )*
            loop86:
            do {
                var alt86=2;
                var LA86_0 = this.input.LA(1);

                if ( (LA86_0==NEWLINE) ) {
                    alt86=1;
                }


                switch (alt86) {
                case 1 :
                    // /Library/WebServer/Documents/calc/Formula.g:0:0: NEWLINE
                    NEWLINE240=this.match(this.input,NEWLINE,FormulaParser.FOLLOW_NEWLINE_in_label2182); if (this.state.failed) return retval; 
                    if ( this.state.backtracking===0 ) stream_NEWLINE.add(NEWLINE240);



                    break;

                default :
                    break loop86;
                }
            } while (true);

            this.pushFollow(FormulaParser.FOLLOW_logicalExpression_in_label2185);
            logicalExpression241=this.logicalExpression();

            this.state._fsp--;
            if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) stream_logicalExpression.add(logicalExpression241.getTree());


            // AST REWRITE
            // elements: arrayName, logicalExpression
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( this.state.backtracking===0 ) {
            retval.tree = root_0;
            var stream_retval=new org.antlr.runtime.tree.RewriteRuleSubtreeStream(this.adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = this.adaptor.nil();
            // 331:57: -> ^( LABEL logicalExpression ( arrayName )? )
            {
                // /Library/WebServer/Documents/calc/Formula.g:331:60: ^( LABEL logicalExpression ( arrayName )? )
                {
                var root_1 = this.adaptor.nil();
                root_1 = this.adaptor.becomeRoot(this.adaptor.create(LABEL, "LABEL"), root_1);

                this.adaptor.addChild(root_1, stream_logicalExpression.nextTree());
                // /Library/WebServer/Documents/calc/Formula.g:331:86: ( arrayName )?
                if ( stream_arrayName.hasNext() ) {
                    this.adaptor.addChild(root_1, stream_arrayName.nextTree());

                }
                stream_arrayName.reset();

                this.adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}


            retval.stop = this.input.LT(-1);

            if ( this.state.backtracking===0 ) {

            retval.tree = this.adaptor.rulePostProcessing(root_0);
            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (re) {
            if (re instanceof org.antlr.runtime.RecognitionException) {
                this.reportError(re);
                this.recover(this.input,re);
                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
            } else {
                throw re;
            }
        }
        finally {
        }
        return retval;
    },

    // inline static return class
    number_return: (function() {
        FormulaParser.number_return = function(){};
        org.antlr.lang.extend(FormulaParser.number_return,
                          org.antlr.runtime.ParserRuleReturnScope,
        {
            getTree: function() { return this.tree; }
        });
        return;
    })(),

    // /Library/WebServer/Documents/calc/Formula.g:342:1: number : ( INTEGER | FLOAT );
    // $ANTLR start "number"
    number: function() {
        var retval = new FormulaParser.number_return();
        retval.start = this.input.LT(1);

        var root_0 = null;

        var set242 = null;

        var set242_tree=null;

        try {
            // /Library/WebServer/Documents/calc/Formula.g:342:8: ( INTEGER | FLOAT )
            // /Library/WebServer/Documents/calc/Formula.g:
            root_0 = this.adaptor.nil();

            set242=this.input.LT(1);
            if ( (this.input.LA(1)>=INTEGER && this.input.LA(1)<=FLOAT) ) {
                this.input.consume();
                if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, this.adaptor.create(set242));
                this.state.errorRecovery=false;this.state.failed=false;
            }
            else {
                if (this.state.backtracking>0) {this.state.failed=true; return retval;}
                var mse = new org.antlr.runtime.MismatchedSetException(null,this.input);
                throw mse;
            }




            retval.stop = this.input.LT(-1);

            if ( this.state.backtracking===0 ) {

            retval.tree = this.adaptor.rulePostProcessing(root_0);
            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (re) {
            if (re instanceof org.antlr.runtime.RecognitionException) {
                this.reportError(re);
                this.recover(this.input,re);
                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
            } else {
                throw re;
            }
        }
        finally {
        }
        return retval;
    },

    // inline static return class
    negnumber_return: (function() {
        FormulaParser.negnumber_return = function(){};
        org.antlr.lang.extend(FormulaParser.negnumber_return,
                          org.antlr.runtime.ParserRuleReturnScope,
        {
            getTree: function() { return this.tree; }
        });
        return;
    })(),

    // /Library/WebServer/Documents/calc/Formula.g:344:1: negnumber : '-' number -> ^( NEGATE number ) ;
    // $ANTLR start "negnumber"
    negnumber: function() {
        var retval = new FormulaParser.negnumber_return();
        retval.start = this.input.LT(1);

        var root_0 = null;

        var char_literal243 = null;
         var number244 = null;

        var char_literal243_tree=null;
        var stream_MINUS=new org.antlr.runtime.tree.RewriteRuleTokenStream(this.adaptor,"token MINUS");
        var stream_number=new org.antlr.runtime.tree.RewriteRuleSubtreeStream(this.adaptor,"rule number");
        try {
            // /Library/WebServer/Documents/calc/Formula.g:344:11: ( '-' number -> ^( NEGATE number ) )
            // /Library/WebServer/Documents/calc/Formula.g:344:13: '-' number
            char_literal243=this.match(this.input,MINUS,FormulaParser.FOLLOW_MINUS_in_negnumber2261); if (this.state.failed) return retval; 
            if ( this.state.backtracking===0 ) stream_MINUS.add(char_literal243);

            this.pushFollow(FormulaParser.FOLLOW_number_in_negnumber2263);
            number244=this.number();

            this.state._fsp--;
            if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) stream_number.add(number244.getTree());


            // AST REWRITE
            // elements: number
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( this.state.backtracking===0 ) {
            retval.tree = root_0;
            var stream_retval=new org.antlr.runtime.tree.RewriteRuleSubtreeStream(this.adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = this.adaptor.nil();
            // 344:24: -> ^( NEGATE number )
            {
                // /Library/WebServer/Documents/calc/Formula.g:344:27: ^( NEGATE number )
                {
                var root_1 = this.adaptor.nil();
                root_1 = this.adaptor.becomeRoot(this.adaptor.create(NEGATE, "NEGATE"), root_1);

                this.adaptor.addChild(root_1, stream_number.nextTree());

                this.adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}


            retval.stop = this.input.LT(-1);

            if ( this.state.backtracking===0 ) {

            retval.tree = this.adaptor.rulePostProcessing(root_0);
            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (re) {
            if (re instanceof org.antlr.runtime.RecognitionException) {
                this.reportError(re);
                this.recover(this.input,re);
                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
            } else {
                throw re;
            }
        }
        finally {
        }
        return retval;
    },

    // inline static return class
    bool_return: (function() {
        FormulaParser.bool_return = function(){};
        org.antlr.lang.extend(FormulaParser.bool_return,
                          org.antlr.runtime.ParserRuleReturnScope,
        {
            getTree: function() { return this.tree; }
        });
        return;
    })(),

    // /Library/WebServer/Documents/calc/Formula.g:354:1: bool : ( TRUE | FALSE );
    // $ANTLR start "bool"
    bool: function() {
        var retval = new FormulaParser.bool_return();
        retval.start = this.input.LT(1);

        var root_0 = null;

        var set245 = null;

        var set245_tree=null;

        try {
            // /Library/WebServer/Documents/calc/Formula.g:355:2: ( TRUE | FALSE )
            // /Library/WebServer/Documents/calc/Formula.g:
            root_0 = this.adaptor.nil();

            set245=this.input.LT(1);
            if ( (this.input.LA(1)>=TRUE && this.input.LA(1)<=FALSE) ) {
                this.input.consume();
                if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, this.adaptor.create(set245));
                this.state.errorRecovery=false;this.state.failed=false;
            }
            else {
                if (this.state.backtracking>0) {this.state.failed=true; return retval;}
                var mse = new org.antlr.runtime.MismatchedSetException(null,this.input);
                throw mse;
            }




            retval.stop = this.input.LT(-1);

            if ( this.state.backtracking===0 ) {

            retval.tree = this.adaptor.rulePostProcessing(root_0);
            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (re) {
            if (re instanceof org.antlr.runtime.RecognitionException) {
                this.reportError(re);
                this.recover(this.input,re);
                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
            } else {
                throw re;
            }
        }
        finally {
        }
        return retval;
    },

    // inline static return class
    material_return: (function() {
        FormulaParser.material_return = function(){};
        org.antlr.lang.extend(FormulaParser.material_return,
                          org.antlr.runtime.ParserRuleReturnScope,
        {
            getTree: function() { return this.tree; }
        });
        return;
    })(),

    // /Library/WebServer/Documents/calc/Formula.g:367:1: material : LCURL additiveExpression {...}? unitMultiplicativeExpression RCURL -> ^( MATERIAL unitMultiplicativeExpression additiveExpression ) ;
    // $ANTLR start "material"
    material: function() {
        var retval = new FormulaParser.material_return();
        retval.start = this.input.LT(1);

        var root_0 = null;

        var LCURL246 = null;
        var RCURL249 = null;
         var additiveExpression247 = null;
         var unitMultiplicativeExpression248 = null;

        var LCURL246_tree=null;
        var RCURL249_tree=null;
        var stream_LCURL=new org.antlr.runtime.tree.RewriteRuleTokenStream(this.adaptor,"token LCURL");
        var stream_RCURL=new org.antlr.runtime.tree.RewriteRuleTokenStream(this.adaptor,"token RCURL");
        var stream_unitMultiplicativeExpression=new org.antlr.runtime.tree.RewriteRuleSubtreeStream(this.adaptor,"rule unitMultiplicativeExpression");
        var stream_additiveExpression=new org.antlr.runtime.tree.RewriteRuleSubtreeStream(this.adaptor,"rule additiveExpression");
        try {
            // /Library/WebServer/Documents/calc/Formula.g:367:9: ( LCURL additiveExpression {...}? unitMultiplicativeExpression RCURL -> ^( MATERIAL unitMultiplicativeExpression additiveExpression ) )
            // /Library/WebServer/Documents/calc/Formula.g:367:12: LCURL additiveExpression {...}? unitMultiplicativeExpression RCURL
            LCURL246=this.match(this.input,LCURL,FormulaParser.FOLLOW_LCURL_in_material2415); if (this.state.failed) return retval; 
            if ( this.state.backtracking===0 ) stream_LCURL.add(LCURL246);

            this.pushFollow(FormulaParser.FOLLOW_additiveExpression_in_material2417);
            additiveExpression247=this.additiveExpression();

            this.state._fsp--;
            if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) stream_additiveExpression.add(additiveExpression247.getTree());
            if ( !(( this.input.get(this.input.index()-1).getText()==" ")) ) {
                if (this.state.backtracking>0) {this.state.failed=true; return retval;}
                throw new org.antlr.runtime.FailedPredicateException(this.input, "material", " this.input.get(this.input.index()-1).getText()==\" \"");
            }
            this.pushFollow(FormulaParser.FOLLOW_unitMultiplicativeExpression_in_material2421);
            unitMultiplicativeExpression248=this.unitMultiplicativeExpression();

            this.state._fsp--;
            if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) stream_unitMultiplicativeExpression.add(unitMultiplicativeExpression248.getTree());
            RCURL249=this.match(this.input,RCURL,FormulaParser.FOLLOW_RCURL_in_material2423); if (this.state.failed) return retval; 
            if ( this.state.backtracking===0 ) stream_RCURL.add(RCURL249);



            // AST REWRITE
            // elements: additiveExpression, unitMultiplicativeExpression
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( this.state.backtracking===0 ) {
            retval.tree = root_0;
            var stream_retval=new org.antlr.runtime.tree.RewriteRuleSubtreeStream(this.adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = this.adaptor.nil();
            // 367:128: -> ^( MATERIAL unitMultiplicativeExpression additiveExpression )
            {
                // /Library/WebServer/Documents/calc/Formula.g:367:131: ^( MATERIAL unitMultiplicativeExpression additiveExpression )
                {
                var root_1 = this.adaptor.nil();
                root_1 = this.adaptor.becomeRoot(this.adaptor.create(MATERIAL, "MATERIAL"), root_1);

                this.adaptor.addChild(root_1, stream_unitMultiplicativeExpression.nextTree());
                this.adaptor.addChild(root_1, stream_additiveExpression.nextTree());

                this.adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}


            retval.stop = this.input.LT(-1);

            if ( this.state.backtracking===0 ) {

            retval.tree = this.adaptor.rulePostProcessing(root_0);
            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (re) {
            if (re instanceof org.antlr.runtime.RecognitionException) {
                this.reportError(re);
                this.recover(this.input,re);
                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
            } else {
                throw re;
            }
        }
        finally {
        }
        return retval;
    },

    // inline static return class
    unitMultiplicativeExpression_return: (function() {
        FormulaParser.unitMultiplicativeExpression_return = function(){};
        org.antlr.lang.extend(FormulaParser.unitMultiplicativeExpression_return,
                          org.antlr.runtime.ParserRuleReturnScope,
        {
            getTree: function() { return this.tree; }
        });
        return;
    })(),

    // /Library/WebServer/Documents/calc/Formula.g:374:1: unitMultiplicativeExpression : unitInnerMultiplicativeExpression ( PER unitInnerMultiplicativeExpression )* ;
    // $ANTLR start "unitMultiplicativeExpression"
    unitMultiplicativeExpression: function() {
        var retval = new FormulaParser.unitMultiplicativeExpression_return();
        retval.start = this.input.LT(1);

        var root_0 = null;

        var PER251 = null;
         var unitInnerMultiplicativeExpression250 = null;
         var unitInnerMultiplicativeExpression252 = null;

        var PER251_tree=null;

        try {
            // /Library/WebServer/Documents/calc/Formula.g:375:2: ( unitInnerMultiplicativeExpression ( PER unitInnerMultiplicativeExpression )* )
            // /Library/WebServer/Documents/calc/Formula.g:375:4: unitInnerMultiplicativeExpression ( PER unitInnerMultiplicativeExpression )*
            root_0 = this.adaptor.nil();

            this.pushFollow(FormulaParser.FOLLOW_unitInnerMultiplicativeExpression_in_unitMultiplicativeExpression2460);
            unitInnerMultiplicativeExpression250=this.unitInnerMultiplicativeExpression();

            this.state._fsp--;
            if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, unitInnerMultiplicativeExpression250.getTree());
            // /Library/WebServer/Documents/calc/Formula.g:375:38: ( PER unitInnerMultiplicativeExpression )*
            loop87:
            do {
                var alt87=2;
                var LA87_0 = this.input.LA(1);

                if ( (LA87_0==PER) ) {
                    alt87=1;
                }


                switch (alt87) {
                case 1 :
                    // /Library/WebServer/Documents/calc/Formula.g:375:40: PER unitInnerMultiplicativeExpression
                    PER251=this.match(this.input,PER,FormulaParser.FOLLOW_PER_in_unitMultiplicativeExpression2464); if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) {
                    PER251_tree = this.adaptor.create(PER251);
                    root_0 = this.adaptor.becomeRoot(PER251_tree, root_0);
                    }
                    this.pushFollow(FormulaParser.FOLLOW_unitInnerMultiplicativeExpression_in_unitMultiplicativeExpression2467);
                    unitInnerMultiplicativeExpression252=this.unitInnerMultiplicativeExpression();

                    this.state._fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, unitInnerMultiplicativeExpression252.getTree());


                    break;

                default :
                    break loop87;
                }
            } while (true);




            retval.stop = this.input.LT(-1);

            if ( this.state.backtracking===0 ) {

            retval.tree = this.adaptor.rulePostProcessing(root_0);
            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (re) {
            if (re instanceof org.antlr.runtime.RecognitionException) {
                this.reportError(re);
                this.recover(this.input,re);
                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
            } else {
                throw re;
            }
        }
        finally {
        }
        return retval;
    },

    // inline static return class
    unitInnerMultiplicativeExpression_return: (function() {
        FormulaParser.unitInnerMultiplicativeExpression_return = function(){};
        org.antlr.lang.extend(FormulaParser.unitInnerMultiplicativeExpression_return,
                          org.antlr.runtime.ParserRuleReturnScope,
        {
            getTree: function() { return this.tree; }
        });
        return;
    })(),

    // /Library/WebServer/Documents/calc/Formula.g:378:1: unitInnerMultiplicativeExpression : unitClump ( ( MULT | DIV ) unitClump )* ;
    // $ANTLR start "unitInnerMultiplicativeExpression"
    unitInnerMultiplicativeExpression: function() {
        var retval = new FormulaParser.unitInnerMultiplicativeExpression_return();
        retval.start = this.input.LT(1);

        var root_0 = null;

        var set254 = null;
         var unitClump253 = null;
         var unitClump255 = null;

        var set254_tree=null;

        try {
            // /Library/WebServer/Documents/calc/Formula.g:379:2: ( unitClump ( ( MULT | DIV ) unitClump )* )
            // /Library/WebServer/Documents/calc/Formula.g:379:4: unitClump ( ( MULT | DIV ) unitClump )*
            root_0 = this.adaptor.nil();

            this.pushFollow(FormulaParser.FOLLOW_unitClump_in_unitInnerMultiplicativeExpression2483);
            unitClump253=this.unitClump();

            this.state._fsp--;
            if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, unitClump253.getTree());
            // /Library/WebServer/Documents/calc/Formula.g:379:14: ( ( MULT | DIV ) unitClump )*
            loop88:
            do {
                var alt88=2;
                var LA88_0 = this.input.LA(1);

                if ( ((LA88_0>=MULT && LA88_0<=DIV)) ) {
                    alt88=1;
                }


                switch (alt88) {
                case 1 :
                    // /Library/WebServer/Documents/calc/Formula.g:379:16: ( MULT | DIV ) unitClump
                    
                    set254=this.input.LT(1);
                    if ( (this.input.LA(1)>=MULT && this.input.LA(1)<=DIV) ) {
                        this.input.consume();
                        if ( this.state.backtracking===0 ) root_0 = this.adaptor.becomeRoot(this.adaptor.create(set254), root_0);
                        this.state.errorRecovery=false;this.state.failed=false;
                    }
                    else {
                        if (this.state.backtracking>0) {this.state.failed=true; return retval;}
                        var mse = new org.antlr.runtime.MismatchedSetException(null,this.input);
                        throw mse;
                    }

                    this.pushFollow(FormulaParser.FOLLOW_unitClump_in_unitInnerMultiplicativeExpression2494);
                    unitClump255=this.unitClump();

                    this.state._fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, unitClump255.getTree());


                    break;

                default :
                    break loop88;
                }
            } while (true);




            retval.stop = this.input.LT(-1);

            if ( this.state.backtracking===0 ) {

            retval.tree = this.adaptor.rulePostProcessing(root_0);
            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (re) {
            if (re instanceof org.antlr.runtime.RecognitionException) {
                this.reportError(re);
                this.recover(this.input,re);
                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
            } else {
                throw re;
            }
        }
        finally {
        }
        return retval;
    },

    // inline static return class
    unitClump_return: (function() {
        FormulaParser.unitClump_return = function(){};
        org.antlr.lang.extend(FormulaParser.unitClump_return,
                          org.antlr.runtime.ParserRuleReturnScope,
        {
            getTree: function() { return this.tree; }
        });
        return;
    })(),

    // /Library/WebServer/Documents/calc/Formula.g:382:1: unitClump : ( ( INTEGER DIV ) unitPowerExpression ( CUBED )? ( SQUARED )? -> ^( UNITCLUMP unitPowerExpression NEGATE ( CUBED )* ( SQUARED )* ) | unitPowerExpression ( CUBED )? ( SQUARED )? -> ^( UNITCLUMP unitPowerExpression ( CUBED )* ( SQUARED )* ) );
    // $ANTLR start "unitClump"
    unitClump: function() {
        var retval = new FormulaParser.unitClump_return();
        retval.start = this.input.LT(1);

        var root_0 = null;

        var INTEGER256 = null;
        var DIV257 = null;
        var CUBED259 = null;
        var SQUARED260 = null;
        var CUBED262 = null;
        var SQUARED263 = null;
         var unitPowerExpression258 = null;
         var unitPowerExpression261 = null;

        var INTEGER256_tree=null;
        var DIV257_tree=null;
        var CUBED259_tree=null;
        var SQUARED260_tree=null;
        var CUBED262_tree=null;
        var SQUARED263_tree=null;
        var stream_INTEGER=new org.antlr.runtime.tree.RewriteRuleTokenStream(this.adaptor,"token INTEGER");
        var stream_SQUARED=new org.antlr.runtime.tree.RewriteRuleTokenStream(this.adaptor,"token SQUARED");
        var stream_DIV=new org.antlr.runtime.tree.RewriteRuleTokenStream(this.adaptor,"token DIV");
        var stream_CUBED=new org.antlr.runtime.tree.RewriteRuleTokenStream(this.adaptor,"token CUBED");
        var stream_unitPowerExpression=new org.antlr.runtime.tree.RewriteRuleSubtreeStream(this.adaptor,"rule unitPowerExpression");
        try {
            // /Library/WebServer/Documents/calc/Formula.g:383:2: ( ( INTEGER DIV ) unitPowerExpression ( CUBED )? ( SQUARED )? -> ^( UNITCLUMP unitPowerExpression NEGATE ( CUBED )* ( SQUARED )* ) | unitPowerExpression ( CUBED )? ( SQUARED )? -> ^( UNITCLUMP unitPowerExpression ( CUBED )* ( SQUARED )* ) )
            var alt93=2;
            var LA93_0 = this.input.LA(1);

            if ( (LA93_0==INTEGER) ) {
                alt93=1;
            }
            else if ( (LA93_0==IDENT||LA93_0==113) ) {
                alt93=2;
            }
            else {
                if (this.state.backtracking>0) {this.state.failed=true; return retval;}
                var nvae =
                    new org.antlr.runtime.NoViableAltException("", 93, 0, this.input);

                throw nvae;
            }
            switch (alt93) {
                case 1 :
                    // /Library/WebServer/Documents/calc/Formula.g:383:4: ( INTEGER DIV ) unitPowerExpression ( CUBED )? ( SQUARED )?
                    // /Library/WebServer/Documents/calc/Formula.g:383:4: ( INTEGER DIV )
                    // /Library/WebServer/Documents/calc/Formula.g:383:5: INTEGER DIV
                    INTEGER256=this.match(this.input,INTEGER,FormulaParser.FOLLOW_INTEGER_in_unitClump2510); if (this.state.failed) return retval; 
                    if ( this.state.backtracking===0 ) stream_INTEGER.add(INTEGER256);

                    DIV257=this.match(this.input,DIV,FormulaParser.FOLLOW_DIV_in_unitClump2512); if (this.state.failed) return retval; 
                    if ( this.state.backtracking===0 ) stream_DIV.add(DIV257);




                    this.pushFollow(FormulaParser.FOLLOW_unitPowerExpression_in_unitClump2515);
                    unitPowerExpression258=this.unitPowerExpression();

                    this.state._fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) stream_unitPowerExpression.add(unitPowerExpression258.getTree());
                    // /Library/WebServer/Documents/calc/Formula.g:383:38: ( CUBED )?
                    var alt89=2;
                    var LA89_0 = this.input.LA(1);

                    if ( (LA89_0==CUBED) ) {
                        alt89=1;
                    }
                    switch (alt89) {
                        case 1 :
                            // /Library/WebServer/Documents/calc/Formula.g:0:0: CUBED
                            CUBED259=this.match(this.input,CUBED,FormulaParser.FOLLOW_CUBED_in_unitClump2517); if (this.state.failed) return retval; 
                            if ( this.state.backtracking===0 ) stream_CUBED.add(CUBED259);



                            break;

                    }

                    // /Library/WebServer/Documents/calc/Formula.g:383:45: ( SQUARED )?
                    var alt90=2;
                    var LA90_0 = this.input.LA(1);

                    if ( (LA90_0==SQUARED) ) {
                        alt90=1;
                    }
                    switch (alt90) {
                        case 1 :
                            // /Library/WebServer/Documents/calc/Formula.g:0:0: SQUARED
                            SQUARED260=this.match(this.input,SQUARED,FormulaParser.FOLLOW_SQUARED_in_unitClump2520); if (this.state.failed) return retval; 
                            if ( this.state.backtracking===0 ) stream_SQUARED.add(SQUARED260);



                            break;

                    }



                    // AST REWRITE
                    // elements: CUBED, unitPowerExpression, SQUARED
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( this.state.backtracking===0 ) {
                    retval.tree = root_0;
                    var stream_retval=new org.antlr.runtime.tree.RewriteRuleSubtreeStream(this.adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = this.adaptor.nil();
                    // 383:54: -> ^( UNITCLUMP unitPowerExpression NEGATE ( CUBED )* ( SQUARED )* )
                    {
                        // /Library/WebServer/Documents/calc/Formula.g:383:57: ^( UNITCLUMP unitPowerExpression NEGATE ( CUBED )* ( SQUARED )* )
                        {
                        var root_1 = this.adaptor.nil();
                        root_1 = this.adaptor.becomeRoot(this.adaptor.create(UNITCLUMP, "UNITCLUMP"), root_1);

                        this.adaptor.addChild(root_1, stream_unitPowerExpression.nextTree());
                        this.adaptor.addChild(root_1, this.adaptor.create(NEGATE, "NEGATE"));
                        // /Library/WebServer/Documents/calc/Formula.g:383:96: ( CUBED )*
                        while ( stream_CUBED.hasNext() ) {
                            this.adaptor.addChild(root_1, stream_CUBED.nextNode());

                        }
                        stream_CUBED.reset();
                        // /Library/WebServer/Documents/calc/Formula.g:383:103: ( SQUARED )*
                        while ( stream_SQUARED.hasNext() ) {
                            this.adaptor.addChild(root_1, stream_SQUARED.nextNode());

                        }
                        stream_SQUARED.reset();

                        this.adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}

                    break;
                case 2 :
                    // /Library/WebServer/Documents/calc/Formula.g:384:5: unitPowerExpression ( CUBED )? ( SQUARED )?
                    this.pushFollow(FormulaParser.FOLLOW_unitPowerExpression_in_unitClump2543);
                    unitPowerExpression261=this.unitPowerExpression();

                    this.state._fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) stream_unitPowerExpression.add(unitPowerExpression261.getTree());
                    // /Library/WebServer/Documents/calc/Formula.g:384:25: ( CUBED )?
                    var alt91=2;
                    var LA91_0 = this.input.LA(1);

                    if ( (LA91_0==CUBED) ) {
                        alt91=1;
                    }
                    switch (alt91) {
                        case 1 :
                            // /Library/WebServer/Documents/calc/Formula.g:0:0: CUBED
                            CUBED262=this.match(this.input,CUBED,FormulaParser.FOLLOW_CUBED_in_unitClump2545); if (this.state.failed) return retval; 
                            if ( this.state.backtracking===0 ) stream_CUBED.add(CUBED262);



                            break;

                    }

                    // /Library/WebServer/Documents/calc/Formula.g:384:32: ( SQUARED )?
                    var alt92=2;
                    var LA92_0 = this.input.LA(1);

                    if ( (LA92_0==SQUARED) ) {
                        alt92=1;
                    }
                    switch (alt92) {
                        case 1 :
                            // /Library/WebServer/Documents/calc/Formula.g:0:0: SQUARED
                            SQUARED263=this.match(this.input,SQUARED,FormulaParser.FOLLOW_SQUARED_in_unitClump2548); if (this.state.failed) return retval; 
                            if ( this.state.backtracking===0 ) stream_SQUARED.add(SQUARED263);



                            break;

                    }



                    // AST REWRITE
                    // elements: unitPowerExpression, CUBED, SQUARED
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( this.state.backtracking===0 ) {
                    retval.tree = root_0;
                    var stream_retval=new org.antlr.runtime.tree.RewriteRuleSubtreeStream(this.adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = this.adaptor.nil();
                    // 384:41: -> ^( UNITCLUMP unitPowerExpression ( CUBED )* ( SQUARED )* )
                    {
                        // /Library/WebServer/Documents/calc/Formula.g:384:44: ^( UNITCLUMP unitPowerExpression ( CUBED )* ( SQUARED )* )
                        {
                        var root_1 = this.adaptor.nil();
                        root_1 = this.adaptor.becomeRoot(this.adaptor.create(UNITCLUMP, "UNITCLUMP"), root_1);

                        this.adaptor.addChild(root_1, stream_unitPowerExpression.nextTree());
                        // /Library/WebServer/Documents/calc/Formula.g:384:76: ( CUBED )*
                        while ( stream_CUBED.hasNext() ) {
                            this.adaptor.addChild(root_1, stream_CUBED.nextNode());

                        }
                        stream_CUBED.reset();
                        // /Library/WebServer/Documents/calc/Formula.g:384:83: ( SQUARED )*
                        while ( stream_SQUARED.hasNext() ) {
                            this.adaptor.addChild(root_1, stream_SQUARED.nextNode());

                        }
                        stream_SQUARED.reset();

                        this.adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}

                    break;

            }
            retval.stop = this.input.LT(-1);

            if ( this.state.backtracking===0 ) {

            retval.tree = this.adaptor.rulePostProcessing(root_0);
            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (re) {
            if (re instanceof org.antlr.runtime.RecognitionException) {
                this.reportError(re);
                this.recover(this.input,re);
                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
            } else {
                throw re;
            }
        }
        finally {
        }
        return retval;
    },

    // inline static return class
    unitPowerExpression_return: (function() {
        FormulaParser.unitPowerExpression_return = function(){};
        org.antlr.lang.extend(FormulaParser.unitPowerExpression_return,
                          org.antlr.runtime.ParserRuleReturnScope,
        {
            getTree: function() { return this.tree; }
        });
        return;
    })(),

    // /Library/WebServer/Documents/calc/Formula.g:388:1: unitPowerExpression : unit ( POW ( MINUS )? ( INTEGER | FLOAT ) )* ;
    // $ANTLR start "unitPowerExpression"
    unitPowerExpression: function() {
        var retval = new FormulaParser.unitPowerExpression_return();
        retval.start = this.input.LT(1);

        var root_0 = null;

        var POW265 = null;
        var MINUS266 = null;
        var set267 = null;
         var unit264 = null;

        var POW265_tree=null;
        var MINUS266_tree=null;
        var set267_tree=null;

        try {
            // /Library/WebServer/Documents/calc/Formula.g:389:2: ( unit ( POW ( MINUS )? ( INTEGER | FLOAT ) )* )
            // /Library/WebServer/Documents/calc/Formula.g:389:5: unit ( POW ( MINUS )? ( INTEGER | FLOAT ) )*
            root_0 = this.adaptor.nil();

            this.pushFollow(FormulaParser.FOLLOW_unit_in_unitPowerExpression2610);
            unit264=this.unit();

            this.state._fsp--;
            if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, unit264.getTree());
            // /Library/WebServer/Documents/calc/Formula.g:389:10: ( POW ( MINUS )? ( INTEGER | FLOAT ) )*
            loop95:
            do {
                var alt95=2;
                var LA95_0 = this.input.LA(1);

                if ( (LA95_0==POW) ) {
                    alt95=1;
                }


                switch (alt95) {
                case 1 :
                    // /Library/WebServer/Documents/calc/Formula.g:389:12: POW ( MINUS )? ( INTEGER | FLOAT )
                    POW265=this.match(this.input,POW,FormulaParser.FOLLOW_POW_in_unitPowerExpression2614); if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) {
                    POW265_tree = this.adaptor.create(POW265);
                    root_0 = this.adaptor.becomeRoot(POW265_tree, root_0);
                    }
                    // /Library/WebServer/Documents/calc/Formula.g:389:17: ( MINUS )?
                    var alt94=2;
                    var LA94_0 = this.input.LA(1);

                    if ( (LA94_0==MINUS) ) {
                        alt94=1;
                    }
                    switch (alt94) {
                        case 1 :
                            // /Library/WebServer/Documents/calc/Formula.g:0:0: MINUS
                            MINUS266=this.match(this.input,MINUS,FormulaParser.FOLLOW_MINUS_in_unitPowerExpression2617); if (this.state.failed) return retval;
                            if ( this.state.backtracking===0 ) {
                            MINUS266_tree = this.adaptor.create(MINUS266);
                            this.adaptor.addChild(root_0, MINUS266_tree);
                            }


                            break;

                    }

                    set267=this.input.LT(1);
                    if ( (this.input.LA(1)>=INTEGER && this.input.LA(1)<=FLOAT) ) {
                        this.input.consume();
                        if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, this.adaptor.create(set267));
                        this.state.errorRecovery=false;this.state.failed=false;
                    }
                    else {
                        if (this.state.backtracking>0) {this.state.failed=true; return retval;}
                        var mse = new org.antlr.runtime.MismatchedSetException(null,this.input);
                        throw mse;
                    }



                    break;

                default :
                    break loop95;
                }
            } while (true);




            retval.stop = this.input.LT(-1);

            if ( this.state.backtracking===0 ) {

            retval.tree = this.adaptor.rulePostProcessing(root_0);
            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (re) {
            if (re instanceof org.antlr.runtime.RecognitionException) {
                this.reportError(re);
                this.recover(this.input,re);
                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
            } else {
                throw re;
            }
        }
        finally {
        }
        return retval;
    },

    // inline static return class
    unit_return: (function() {
        FormulaParser.unit_return = function(){};
        org.antlr.lang.extend(FormulaParser.unit_return,
                          org.antlr.runtime.ParserRuleReturnScope,
        {
            getTree: function() { return this.tree; }
        });
        return;
    })(),

    // /Library/WebServer/Documents/calc/Formula.g:392:1: unit : ( IDENT ( IDENT )* -> ^( UNIT ( IDENT )+ ) | '(' unitMultiplicativeExpression ')' -> ^( UNITCLUMP unitMultiplicativeExpression ) );
    // $ANTLR start "unit"
    unit: function() {
        var retval = new FormulaParser.unit_return();
        retval.start = this.input.LT(1);

        var root_0 = null;

        var IDENT268 = null;
        var IDENT269 = null;
        var char_literal270 = null;
        var char_literal272 = null;
         var unitMultiplicativeExpression271 = null;

        var IDENT268_tree=null;
        var IDENT269_tree=null;
        var char_literal270_tree=null;
        var char_literal272_tree=null;
        var stream_114=new org.antlr.runtime.tree.RewriteRuleTokenStream(this.adaptor,"token 114");
        var stream_IDENT=new org.antlr.runtime.tree.RewriteRuleTokenStream(this.adaptor,"token IDENT");
        var stream_113=new org.antlr.runtime.tree.RewriteRuleTokenStream(this.adaptor,"token 113");
        var stream_unitMultiplicativeExpression=new org.antlr.runtime.tree.RewriteRuleSubtreeStream(this.adaptor,"rule unitMultiplicativeExpression");
        try {
            // /Library/WebServer/Documents/calc/Formula.g:392:6: ( IDENT ( IDENT )* -> ^( UNIT ( IDENT )+ ) | '(' unitMultiplicativeExpression ')' -> ^( UNITCLUMP unitMultiplicativeExpression ) )
            var alt97=2;
            var LA97_0 = this.input.LA(1);

            if ( (LA97_0==IDENT) ) {
                alt97=1;
            }
            else if ( (LA97_0==113) ) {
                alt97=2;
            }
            else {
                if (this.state.backtracking>0) {this.state.failed=true; return retval;}
                var nvae =
                    new org.antlr.runtime.NoViableAltException("", 97, 0, this.input);

                throw nvae;
            }
            switch (alt97) {
                case 1 :
                    // /Library/WebServer/Documents/calc/Formula.g:392:8: IDENT ( IDENT )*
                    IDENT268=this.match(this.input,IDENT,FormulaParser.FOLLOW_IDENT_in_unit2638); if (this.state.failed) return retval; 
                    if ( this.state.backtracking===0 ) stream_IDENT.add(IDENT268);

                    // /Library/WebServer/Documents/calc/Formula.g:392:14: ( IDENT )*
                    loop96:
                    do {
                        var alt96=2;
                        var LA96_0 = this.input.LA(1);

                        if ( (LA96_0==IDENT) ) {
                            alt96=1;
                        }


                        switch (alt96) {
                        case 1 :
                            // /Library/WebServer/Documents/calc/Formula.g:392:15: IDENT
                            IDENT269=this.match(this.input,IDENT,FormulaParser.FOLLOW_IDENT_in_unit2641); if (this.state.failed) return retval; 
                            if ( this.state.backtracking===0 ) stream_IDENT.add(IDENT269);



                            break;

                        default :
                            break loop96;
                        }
                    } while (true);



                    // AST REWRITE
                    // elements: IDENT
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( this.state.backtracking===0 ) {
                    retval.tree = root_0;
                    var stream_retval=new org.antlr.runtime.tree.RewriteRuleSubtreeStream(this.adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = this.adaptor.nil();
                    // 392:23: -> ^( UNIT ( IDENT )+ )
                    {
                        // /Library/WebServer/Documents/calc/Formula.g:392:26: ^( UNIT ( IDENT )+ )
                        {
                        var root_1 = this.adaptor.nil();
                        root_1 = this.adaptor.becomeRoot(this.adaptor.create(UNIT, "UNIT"), root_1);

                        if ( !(stream_IDENT.hasNext()) ) {
                            throw new org.antlr.runtime.tree.RewriteEarlyExitException();
                        }
                        while ( stream_IDENT.hasNext() ) {
                            this.adaptor.addChild(root_1, stream_IDENT.nextNode());

                        }
                        stream_IDENT.reset();

                        this.adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}

                    break;
                case 2 :
                    // /Library/WebServer/Documents/calc/Formula.g:393:5: '(' unitMultiplicativeExpression ')'
                    char_literal270=this.match(this.input,113,FormulaParser.FOLLOW_113_in_unit2658); if (this.state.failed) return retval; 
                    if ( this.state.backtracking===0 ) stream_113.add(char_literal270);

                    this.pushFollow(FormulaParser.FOLLOW_unitMultiplicativeExpression_in_unit2660);
                    unitMultiplicativeExpression271=this.unitMultiplicativeExpression();

                    this.state._fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) stream_unitMultiplicativeExpression.add(unitMultiplicativeExpression271.getTree());
                    char_literal272=this.match(this.input,114,FormulaParser.FOLLOW_114_in_unit2662); if (this.state.failed) return retval; 
                    if ( this.state.backtracking===0 ) stream_114.add(char_literal272);



                    // AST REWRITE
                    // elements: unitMultiplicativeExpression
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( this.state.backtracking===0 ) {
                    retval.tree = root_0;
                    var stream_retval=new org.antlr.runtime.tree.RewriteRuleSubtreeStream(this.adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = this.adaptor.nil();
                    // 393:42: -> ^( UNITCLUMP unitMultiplicativeExpression )
                    {
                        // /Library/WebServer/Documents/calc/Formula.g:393:45: ^( UNITCLUMP unitMultiplicativeExpression )
                        {
                        var root_1 = this.adaptor.nil();
                        root_1 = this.adaptor.becomeRoot(this.adaptor.create(UNITCLUMP, "UNITCLUMP"), root_1);

                        this.adaptor.addChild(root_1, stream_unitMultiplicativeExpression.nextTree());

                        this.adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}

                    break;

            }
            retval.stop = this.input.LT(-1);

            if ( this.state.backtracking===0 ) {

            retval.tree = this.adaptor.rulePostProcessing(root_0);
            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (re) {
            if (re instanceof org.antlr.runtime.RecognitionException) {
                this.reportError(re);
                this.recover(this.input,re);
                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
            } else {
                throw re;
            }
        }
        finally {
        }
        return retval;
    },

    // inline static return class
    primitive_return: (function() {
        FormulaParser.primitive_return = function(){};
        org.antlr.lang.extend(FormulaParser.primitive_return,
                          org.antlr.runtime.ParserRuleReturnScope,
        {
            getTree: function() { return this.tree; }
        });
        return;
    })(),

    // /Library/WebServer/Documents/calc/Formula.g:406:1: primitive : PRIMITIVE ;
    // $ANTLR start "primitive"
    primitive: function() {
        var retval = new FormulaParser.primitive_return();
        retval.start = this.input.LT(1);

        var root_0 = null;

        var PRIMITIVE273 = null;

        var PRIMITIVE273_tree=null;

        try {
            // /Library/WebServer/Documents/calc/Formula.g:407:2: ( PRIMITIVE )
            // /Library/WebServer/Documents/calc/Formula.g:407:4: PRIMITIVE
            root_0 = this.adaptor.nil();

            PRIMITIVE273=this.match(this.input,PRIMITIVE,FormulaParser.FOLLOW_PRIMITIVE_in_primitive2731); if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) {
            PRIMITIVE273_tree = this.adaptor.create(PRIMITIVE273);
            this.adaptor.addChild(root_0, PRIMITIVE273_tree);
            }



            retval.stop = this.input.LT(-1);

            if ( this.state.backtracking===0 ) {

            retval.tree = this.adaptor.rulePostProcessing(root_0);
            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (re) {
            if (re instanceof org.antlr.runtime.RecognitionException) {
                this.reportError(re);
                this.recover(this.input,re);
                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
            } else {
                throw re;
            }
        }
        finally {
        }
        return retval;
    },

    // inline static return class
    string_return: (function() {
        FormulaParser.string_return = function(){};
        org.antlr.lang.extend(FormulaParser.string_return,
                          org.antlr.runtime.ParserRuleReturnScope,
        {
            getTree: function() { return this.tree; }
        });
        return;
    })(),

    // /Library/WebServer/Documents/calc/Formula.g:466:1: string : STRING ;
    // $ANTLR start "string"
    string: function() {
        var retval = new FormulaParser.string_return();
        retval.start = this.input.LT(1);

        var root_0 = null;

        var STRING274 = null;

        var STRING274_tree=null;

        try {
            // /Library/WebServer/Documents/calc/Formula.g:467:4: ( STRING )
            // /Library/WebServer/Documents/calc/Formula.g:467:7: STRING
            root_0 = this.adaptor.nil();

            STRING274=this.match(this.input,STRING,FormulaParser.FOLLOW_STRING_in_string3200); if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) {
            STRING274_tree = this.adaptor.create(STRING274);
            root_0 = this.adaptor.becomeRoot(STRING274_tree, root_0);
            }



            retval.stop = this.input.LT(-1);

            if ( this.state.backtracking===0 ) {

            retval.tree = this.adaptor.rulePostProcessing(root_0);
            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (re) {
            if (re instanceof org.antlr.runtime.RecognitionException) {
                this.reportError(re);
                this.recover(this.input,re);
                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
            } else {
                throw re;
            }
        }
        finally {
        }
        return retval;
    },

    // $ANTLR start "synpred5_Formula"
    synpred5_Formula_fragment: function() {
        // /Library/WebServer/Documents/calc/Formula.g:121:5: ( assignment )
        // /Library/WebServer/Documents/calc/Formula.g:121:5: assignment
        this.pushFollow(FormulaParser.FOLLOW_assignment_in_synpred5_Formula508);
        this.assignment();

        this.state._fsp--;
        if (this.state.failed) return ;


    },
    // $ANTLR end "synpred5_Formula",

    // $ANTLR start "synpred6_Formula"
    synpred6_Formula_fragment: function() {
        // /Library/WebServer/Documents/calc/Formula.g:122:5: ( logicalExpression )
        // /Library/WebServer/Documents/calc/Formula.g:122:5: logicalExpression
        this.pushFollow(FormulaParser.FOLLOW_logicalExpression_in_synpred6_Formula514);
        this.logicalExpression();

        this.state._fsp--;
        if (this.state.failed) return ;


    },
    // $ANTLR end "synpred6_Formula",

    // $ANTLR start "synpred8_Formula"
    synpred8_Formula_fragment: function() {
        // /Library/WebServer/Documents/calc/Formula.g:124:5: ( forLoop )
        // /Library/WebServer/Documents/calc/Formula.g:124:5: forLoop
        this.pushFollow(FormulaParser.FOLLOW_forLoop_in_synpred8_Formula526);
        this.forLoop();

        this.state._fsp--;
        if (this.state.failed) return ;


    },
    // $ANTLR end "synpred8_Formula",

    // $ANTLR start "synpred9_Formula"
    synpred9_Formula_fragment: function() {
        // /Library/WebServer/Documents/calc/Formula.g:125:5: ( forInLoop )
        // /Library/WebServer/Documents/calc/Formula.g:125:5: forInLoop
        this.pushFollow(FormulaParser.FOLLOW_forInLoop_in_synpred9_Formula532);
        this.forInLoop();

        this.state._fsp--;
        if (this.state.failed) return ;


    },
    // $ANTLR end "synpred9_Formula",

    // $ANTLR start "synpred11_Formula"
    synpred11_Formula_fragment: function() {
        // /Library/WebServer/Documents/calc/Formula.g:127:5: ( functionDef )
        // /Library/WebServer/Documents/calc/Formula.g:127:5: functionDef
        this.pushFollow(FormulaParser.FOLLOW_functionDef_in_synpred11_Formula544);
        this.functionDef();

        this.state._fsp--;
        if (this.state.failed) return ;


    },
    // $ANTLR end "synpred11_Formula",

    // $ANTLR start "synpred47_Formula"
    synpred47_Formula_fragment: function() {
        // /Library/WebServer/Documents/calc/Formula.g:187:26: ( OR booleanXORExpression )
        // /Library/WebServer/Documents/calc/Formula.g:187:26: OR booleanXORExpression
        this.match(this.input,OR,FormulaParser.FOLLOW_OR_in_synpred47_Formula1217); if (this.state.failed) return ;
        this.pushFollow(FormulaParser.FOLLOW_booleanXORExpression_in_synpred47_Formula1220);
        this.booleanXORExpression();

        this.state._fsp--;
        if (this.state.failed) return ;


    },
    // $ANTLR end "synpred47_Formula",

    // $ANTLR start "synpred48_Formula"
    synpred48_Formula_fragment: function() {
        // /Library/WebServer/Documents/calc/Formula.g:193:26: ( XOR booleanAndExpression )
        // /Library/WebServer/Documents/calc/Formula.g:193:26: XOR booleanAndExpression
        this.match(this.input,XOR,FormulaParser.FOLLOW_XOR_in_synpred48_Formula1253); if (this.state.failed) return ;
        this.pushFollow(FormulaParser.FOLLOW_booleanAndExpression_in_synpred48_Formula1256);
        this.booleanAndExpression();

        this.state._fsp--;
        if (this.state.failed) return ;


    },
    // $ANTLR end "synpred48_Formula",

    // $ANTLR start "synpred49_Formula"
    synpred49_Formula_fragment: function() {
        // /Library/WebServer/Documents/calc/Formula.g:199:24: ( AND equalityExpression )
        // /Library/WebServer/Documents/calc/Formula.g:199:24: AND equalityExpression
        this.match(this.input,AND,FormulaParser.FOLLOW_AND_in_synpred49_Formula1288); if (this.state.failed) return ;
        this.pushFollow(FormulaParser.FOLLOW_equalityExpression_in_synpred49_Formula1291);
        this.equalityExpression();

        this.state._fsp--;
        if (this.state.failed) return ;


    },
    // $ANTLR end "synpred49_Formula",

    // $ANTLR start "synpred51_Formula"
    synpred51_Formula_fragment: function() {
        // /Library/WebServer/Documents/calc/Formula.g:205:26: ( ( EQUALS | NOTEQUALS ) relationalExpression )
        // /Library/WebServer/Documents/calc/Formula.g:205:26: ( EQUALS | NOTEQUALS ) relationalExpression
        if ( this.input.LA(1)==EQUALS||this.input.LA(1)==NOTEQUALS ) {
            this.input.consume();
            this.state.errorRecovery=false;this.state.failed=false;
        }
        else {
            if (this.state.backtracking>0) {this.state.failed=true; return ;}
            var mse = new org.antlr.runtime.MismatchedSetException(null,this.input);
            throw mse;
        }

        this.pushFollow(FormulaParser.FOLLOW_relationalExpression_in_synpred51_Formula1332);
        this.relationalExpression();

        this.state._fsp--;
        if (this.state.failed) return ;


    },
    // $ANTLR end "synpred51_Formula",

    // $ANTLR start "synpred55_Formula"
    synpred55_Formula_fragment: function() {
        // /Library/WebServer/Documents/calc/Formula.g:216:25: ( ( LT | LTEQ | GT | GTEQ ) additiveExpression )
        // /Library/WebServer/Documents/calc/Formula.g:216:25: ( LT | LTEQ | GT | GTEQ ) additiveExpression
        if ( (this.input.LA(1)>=LT && this.input.LA(1)<=GTEQ) ) {
            this.input.consume();
            this.state.errorRecovery=false;this.state.failed=false;
        }
        else {
            if (this.state.backtracking>0) {this.state.failed=true; return ;}
            var mse = new org.antlr.runtime.MismatchedSetException(null,this.input);
            throw mse;
        }

        this.pushFollow(FormulaParser.FOLLOW_additiveExpression_in_synpred55_Formula1389);
        this.additiveExpression();

        this.state._fsp--;
        if (this.state.failed) return ;


    },
    // $ANTLR end "synpred55_Formula",

    // $ANTLR start "synpred57_Formula"
    synpred57_Formula_fragment: function() {
        // /Library/WebServer/Documents/calc/Formula.g:225:31: ( ( PLUS | MINUS ) multiplicativeExpression )
        // /Library/WebServer/Documents/calc/Formula.g:225:31: ( PLUS | MINUS ) multiplicativeExpression
        if ( (this.input.LA(1)>=PLUS && this.input.LA(1)<=MINUS) ) {
            this.input.consume();
            this.state.errorRecovery=false;this.state.failed=false;
        }
        else {
            if (this.state.backtracking>0) {this.state.failed=true; return ;}
            var mse = new org.antlr.runtime.MismatchedSetException(null,this.input);
            throw mse;
        }

        this.pushFollow(FormulaParser.FOLLOW_multiplicativeExpression_in_synpred57_Formula1443);
        this.multiplicativeExpression();

        this.state._fsp--;
        if (this.state.failed) return ;


    },
    // $ANTLR end "synpred57_Formula",

    // $ANTLR start "synpred60_Formula"
    synpred60_Formula_fragment: function() {
        // /Library/WebServer/Documents/calc/Formula.g:232:22: ( ( MULT | DIV | MOD ) arrayExpression )
        // /Library/WebServer/Documents/calc/Formula.g:232:22: ( MULT | DIV | MOD ) arrayExpression
        if ( (this.input.LA(1)>=MULT && this.input.LA(1)<=MOD) ) {
            this.input.consume();
            this.state.errorRecovery=false;this.state.failed=false;
        }
        else {
            if (this.state.backtracking>0) {this.state.failed=true; return ;}
            var mse = new org.antlr.runtime.MismatchedSetException(null,this.input);
            throw mse;
        }

        this.pushFollow(FormulaParser.FOLLOW_arrayExpression_in_synpred60_Formula1486);
        this.arrayExpression();

        this.state._fsp--;
        if (this.state.failed) return ;


    },
    // $ANTLR end "synpred60_Formula",

    // $ANTLR start "synpred61_Formula"
    synpred61_Formula_fragment: function() {
        // /Library/WebServer/Documents/calc/Formula.g:240:25: ({...}? COLON {...}? negationExpression )
        // /Library/WebServer/Documents/calc/Formula.g:240:25: {...}? COLON {...}? negationExpression
        if ( !(( this.input.get(this.input.index()-1).getText()!=" ")) ) {
            if (this.state.backtracking>0) {this.state.failed=true; return ;}
            throw new org.antlr.runtime.FailedPredicateException(this.input, "synpred61_Formula", " this.input.get(this.input.index()-1).getText()!=\" \"");
        }
        this.match(this.input,COLON,FormulaParser.FOLLOW_COLON_in_synpred61_Formula1538); if (this.state.failed) return ;
        if ( !(( this.input.get(this.input.index()-1).getText()!=" ")) ) {
            if (this.state.backtracking>0) {this.state.failed=true; return ;}
            throw new org.antlr.runtime.FailedPredicateException(this.input, "synpred61_Formula", " this.input.get(this.input.index()-1).getText()!=\" \"");
        }
        this.pushFollow(FormulaParser.FOLLOW_negationExpression_in_synpred61_Formula1542);
        this.negationExpression();

        this.state._fsp--;
        if (this.state.failed) return ;


    },
    // $ANTLR end "synpred61_Formula",

    // $ANTLR start "synpred62_Formula"
    synpred62_Formula_fragment: function() {
        // /Library/WebServer/Documents/calc/Formula.g:240:167: ({...}? COLON {...}? negationExpression )
        // /Library/WebServer/Documents/calc/Formula.g:240:167: {...}? COLON {...}? negationExpression
        if ( !(( this.input.get(this.input.index()-1).getText()!=" ")) ) {
            if (this.state.backtracking>0) {this.state.failed=true; return ;}
            throw new org.antlr.runtime.FailedPredicateException(this.input, "synpred62_Formula", " this.input.get(this.input.index()-1).getText()!=\" \"");
        }
        this.match(this.input,COLON,FormulaParser.FOLLOW_COLON_in_synpred62_Formula1551); if (this.state.failed) return ;
        if ( !(( this.input.get(this.input.index()-1).getText()!=" ")) ) {
            if (this.state.backtracking>0) {this.state.failed=true; return ;}
            throw new org.antlr.runtime.FailedPredicateException(this.input, "synpred62_Formula", " this.input.get(this.input.index()-1).getText()!=\" \"");
        }
        this.pushFollow(FormulaParser.FOLLOW_negationExpression_in_synpred62_Formula1555);
        this.negationExpression();

        this.state._fsp--;
        if (this.state.failed) return ;


    },
    // $ANTLR end "synpred62_Formula",

    // $ANTLR start "synpred64_Formula"
    synpred64_Formula_fragment: function() {
        // /Library/WebServer/Documents/calc/Formula.g:249:21: ( POW unaryOrNegate )
        // /Library/WebServer/Documents/calc/Formula.g:249:21: POW unaryOrNegate
        this.match(this.input,POW,FormulaParser.FOLLOW_POW_in_synpred64_Formula1610); if (this.state.failed) return ;
        this.pushFollow(FormulaParser.FOLLOW_unaryOrNegate_in_synpred64_Formula1612);
        this.unaryOrNegate();

        this.state._fsp--;
        if (this.state.failed) return ;


    },
    // $ANTLR end "synpred64_Formula",

    // $ANTLR start "synpred68_Formula"
    synpred68_Formula_fragment: function() {
        // /Library/WebServer/Documents/calc/Formula.g:271:23: ({...}? ( selector | funCall ) )
        // /Library/WebServer/Documents/calc/Formula.g:271:23: {...}? ( selector | funCall )
        if ( !(( this.input.get(this.input.index()-1).getText()!=" ")) ) {
            if (this.state.backtracking>0) {this.state.failed=true; return ;}
            throw new org.antlr.runtime.FailedPredicateException(this.input, "synpred68_Formula", " this.input.get(this.input.index()-1).getText()!=\" \"");
        }
        // /Library/WebServer/Documents/calc/Formula.g:271:79: ( selector | funCall )
        var alt119=2;
        var LA119_0 = this.input.LA(1);

        if ( (LA119_0==LARR||LA119_0==LCURL||LA119_0==116) ) {
            alt119=1;
        }
        else if ( (LA119_0==113) ) {
            alt119=2;
        }
        else {
            if (this.state.backtracking>0) {this.state.failed=true; return ;}
            var nvae =
                new org.antlr.runtime.NoViableAltException("", 119, 0, this.input);

            throw nvae;
        }
        switch (alt119) {
            case 1 :
                // /Library/WebServer/Documents/calc/Formula.g:271:80: selector
                this.pushFollow(FormulaParser.FOLLOW_selector_in_synpred68_Formula1744);
                this.selector();

                this.state._fsp--;
                if (this.state.failed) return ;


                break;
            case 2 :
                // /Library/WebServer/Documents/calc/Formula.g:271:89: funCall
                this.pushFollow(FormulaParser.FOLLOW_funCall_in_synpred68_Formula1746);
                this.funCall();

                this.state._fsp--;
                if (this.state.failed) return ;


                break;

        }



    },
    // $ANTLR end "synpred68_Formula",

    // $ANTLR start "synpred75_Formula"
    synpred75_Formula_fragment: function() {
        // /Library/WebServer/Documents/calc/Formula.g:287:5: ( material )
        // /Library/WebServer/Documents/calc/Formula.g:287:5: material
        this.pushFollow(FormulaParser.FOLLOW_material_in_synpred75_Formula1841);
        this.material();

        this.state._fsp--;
        if (this.state.failed) return ;


    },
    // $ANTLR end "synpred75_Formula",

    // $ANTLR start "synpred78_Formula"
    synpred78_Formula_fragment: function() {
        // /Library/WebServer/Documents/calc/Formula.g:290:4: ( array )
        // /Library/WebServer/Documents/calc/Formula.g:290:4: array
        this.pushFollow(FormulaParser.FOLLOW_array_in_synpred78_Formula1856);
        this.array();

        this.state._fsp--;
        if (this.state.failed) return ;


    },
    // $ANTLR end "synpred78_Formula",

    // $ANTLR start "synpred80_Formula"
    synpred80_Formula_fragment: function() {
        // /Library/WebServer/Documents/calc/Formula.g:296:22: ( funCall )
        // /Library/WebServer/Documents/calc/Formula.g:296:22: funCall
        this.pushFollow(FormulaParser.FOLLOW_funCall_in_synpred80_Formula1880);
        this.funCall();

        this.state._fsp--;
        if (this.state.failed) return ;


    },
    // $ANTLR end "synpred80_Formula",

    // $ANTLR start "synpred85_Formula"
    synpred85_Formula_fragment: function() {
        // /Library/WebServer/Documents/calc/Formula.g:309:7: ( NEWLINE )
        // /Library/WebServer/Documents/calc/Formula.g:309:7: NEWLINE
        this.match(this.input,NEWLINE,FormulaParser.FOLLOW_NEWLINE_in_synpred85_Formula1946); if (this.state.failed) return ;


    },
    // $ANTLR end "synpred85_Formula",

    // $ANTLR start "synpred86_Formula"
    synpred86_Formula_fragment: function() {
        // /Library/WebServer/Documents/calc/Formula.g:309:23: ( NEWLINE )
        // /Library/WebServer/Documents/calc/Formula.g:309:23: NEWLINE
        this.match(this.input,NEWLINE,FormulaParser.FOLLOW_NEWLINE_in_synpred86_Formula1952); if (this.state.failed) return ;


    },
    // $ANTLR end "synpred86_Formula",

    // $ANTLR start "synpred87_Formula"
    synpred87_Formula_fragment: function() {
        // /Library/WebServer/Documents/calc/Formula.g:309:37: ( NEWLINE )
        // /Library/WebServer/Documents/calc/Formula.g:309:37: NEWLINE
        this.match(this.input,NEWLINE,FormulaParser.FOLLOW_NEWLINE_in_synpred87_Formula1958); if (this.state.failed) return ;


    },
    // $ANTLR end "synpred87_Formula",

    // $ANTLR start "synpred88_Formula"
    synpred88_Formula_fragment: function() {
        // /Library/WebServer/Documents/calc/Formula.g:309:52: ( NEWLINE )
        // /Library/WebServer/Documents/calc/Formula.g:309:52: NEWLINE
        this.match(this.input,NEWLINE,FormulaParser.FOLLOW_NEWLINE_in_synpred88_Formula1963); if (this.state.failed) return ;


    },
    // $ANTLR end "synpred88_Formula",

    // $ANTLR start "synpred93_Formula"
    synpred93_Formula_fragment: function() {
        // /Library/WebServer/Documents/calc/Formula.g:310:10: ( NEWLINE )
        // /Library/WebServer/Documents/calc/Formula.g:310:10: NEWLINE
        this.match(this.input,NEWLINE,FormulaParser.FOLLOW_NEWLINE_in_synpred93_Formula1989); if (this.state.failed) return ;


    },
    // $ANTLR end "synpred93_Formula",

    // $ANTLR start "synpred94_Formula"
    synpred94_Formula_fragment: function() {
        // /Library/WebServer/Documents/calc/Formula.g:310:26: ( NEWLINE )
        // /Library/WebServer/Documents/calc/Formula.g:310:26: NEWLINE
        this.match(this.input,NEWLINE,FormulaParser.FOLLOW_NEWLINE_in_synpred94_Formula1995); if (this.state.failed) return ;


    },
    // $ANTLR end "synpred94_Formula",

    // $ANTLR start "synpred95_Formula"
    synpred95_Formula_fragment: function() {
        // /Library/WebServer/Documents/calc/Formula.g:310:39: ( NEWLINE )
        // /Library/WebServer/Documents/calc/Formula.g:310:39: NEWLINE
        this.match(this.input,NEWLINE,FormulaParser.FOLLOW_NEWLINE_in_synpred95_Formula2000); if (this.state.failed) return ;


    },
    // $ANTLR end "synpred95_Formula",

    // $ANTLR start "synpred96_Formula"
    synpred96_Formula_fragment: function() {
        // /Library/WebServer/Documents/calc/Formula.g:310:54: ( NEWLINE )
        // /Library/WebServer/Documents/calc/Formula.g:310:54: NEWLINE
        this.match(this.input,NEWLINE,FormulaParser.FOLLOW_NEWLINE_in_synpred96_Formula2005); if (this.state.failed) return ;


    },
    // $ANTLR end "synpred96_Formula",

    // $ANTLR start "synpred108_Formula"
    synpred108_Formula_fragment: function() {
        // /Library/WebServer/Documents/calc/Formula.g:323:5: ( '.' arrayName )
        // /Library/WebServer/Documents/calc/Formula.g:323:5: '.' arrayName
        this.match(this.input,116,FormulaParser.FOLLOW_116_in_synpred108_Formula2133); if (this.state.failed) return ;
        this.pushFollow(FormulaParser.FOLLOW_arrayName_in_synpred108_Formula2135);
        this.arrayName();

        this.state._fsp--;
        if (this.state.failed) return ;


    },
    // $ANTLR end "synpred108_Formula",

    // $ANTLR start "synpred112_Formula"
    synpred112_Formula_fragment: function() {
        // /Library/WebServer/Documents/calc/Formula.g:331:3: ( arrayName ( NEWLINE )* COLON )
        // /Library/WebServer/Documents/calc/Formula.g:331:3: arrayName ( NEWLINE )* COLON
        this.pushFollow(FormulaParser.FOLLOW_arrayName_in_synpred112_Formula2173);
        this.arrayName();

        this.state._fsp--;
        if (this.state.failed) return ;
        // /Library/WebServer/Documents/calc/Formula.g:331:13: ( NEWLINE )*
        loop145:
        do {
            var alt145=2;
            var LA145_0 = this.input.LA(1);

            if ( (LA145_0==NEWLINE) ) {
                alt145=1;
            }


            switch (alt145) {
            case 1 :
                // /Library/WebServer/Documents/calc/Formula.g:0:0: NEWLINE
                this.match(this.input,NEWLINE,FormulaParser.FOLLOW_NEWLINE_in_synpred112_Formula2175); if (this.state.failed) return ;


                break;

            default :
                break loop145;
            }
        } while (true);

        this.match(this.input,COLON,FormulaParser.FOLLOW_COLON_in_synpred112_Formula2178); if (this.state.failed) return ;


    },
    // $ANTLR end "synpred112_Formula"

    // Delegated rules



    synpred95_Formula: function() {
        this.state.backtracking++;
        var start = this.input.mark();
        try {
            this.synpred95_Formula_fragment(); // can never throw exception
        } catch (re) {
            alert("impossible: "+re.toString());
        }
        var success = !this.state.failed;
        this.input.rewind(start);
        this.state.backtracking--;
        this.state.failed=false;
        return success;
    },
    synpred94_Formula: function() {
        this.state.backtracking++;
        var start = this.input.mark();
        try {
            this.synpred94_Formula_fragment(); // can never throw exception
        } catch (re) {
            alert("impossible: "+re.toString());
        }
        var success = !this.state.failed;
        this.input.rewind(start);
        this.state.backtracking--;
        this.state.failed=false;
        return success;
    },
    synpred80_Formula: function() {
        this.state.backtracking++;
        var start = this.input.mark();
        try {
            this.synpred80_Formula_fragment(); // can never throw exception
        } catch (re) {
            alert("impossible: "+re.toString());
        }
        var success = !this.state.failed;
        this.input.rewind(start);
        this.state.backtracking--;
        this.state.failed=false;
        return success;
    },
    synpred49_Formula: function() {
        this.state.backtracking++;
        var start = this.input.mark();
        try {
            this.synpred49_Formula_fragment(); // can never throw exception
        } catch (re) {
            alert("impossible: "+re.toString());
        }
        var success = !this.state.failed;
        this.input.rewind(start);
        this.state.backtracking--;
        this.state.failed=false;
        return success;
    },
    synpred57_Formula: function() {
        this.state.backtracking++;
        var start = this.input.mark();
        try {
            this.synpred57_Formula_fragment(); // can never throw exception
        } catch (re) {
            alert("impossible: "+re.toString());
        }
        var success = !this.state.failed;
        this.input.rewind(start);
        this.state.backtracking--;
        this.state.failed=false;
        return success;
    },
    synpred68_Formula: function() {
        this.state.backtracking++;
        var start = this.input.mark();
        try {
            this.synpred68_Formula_fragment(); // can never throw exception
        } catch (re) {
            alert("impossible: "+re.toString());
        }
        var success = !this.state.failed;
        this.input.rewind(start);
        this.state.backtracking--;
        this.state.failed=false;
        return success;
    },
    synpred51_Formula: function() {
        this.state.backtracking++;
        var start = this.input.mark();
        try {
            this.synpred51_Formula_fragment(); // can never throw exception
        } catch (re) {
            alert("impossible: "+re.toString());
        }
        var success = !this.state.failed;
        this.input.rewind(start);
        this.state.backtracking--;
        this.state.failed=false;
        return success;
    },
    synpred62_Formula: function() {
        this.state.backtracking++;
        var start = this.input.mark();
        try {
            this.synpred62_Formula_fragment(); // can never throw exception
        } catch (re) {
            alert("impossible: "+re.toString());
        }
        var success = !this.state.failed;
        this.input.rewind(start);
        this.state.backtracking--;
        this.state.failed=false;
        return success;
    },
    synpred64_Formula: function() {
        this.state.backtracking++;
        var start = this.input.mark();
        try {
            this.synpred64_Formula_fragment(); // can never throw exception
        } catch (re) {
            alert("impossible: "+re.toString());
        }
        var success = !this.state.failed;
        this.input.rewind(start);
        this.state.backtracking--;
        this.state.failed=false;
        return success;
    },
    synpred93_Formula: function() {
        this.state.backtracking++;
        var start = this.input.mark();
        try {
            this.synpred93_Formula_fragment(); // can never throw exception
        } catch (re) {
            alert("impossible: "+re.toString());
        }
        var success = !this.state.failed;
        this.input.rewind(start);
        this.state.backtracking--;
        this.state.failed=false;
        return success;
    },
    synpred55_Formula: function() {
        this.state.backtracking++;
        var start = this.input.mark();
        try {
            this.synpred55_Formula_fragment(); // can never throw exception
        } catch (re) {
            alert("impossible: "+re.toString());
        }
        var success = !this.state.failed;
        this.input.rewind(start);
        this.state.backtracking--;
        this.state.failed=false;
        return success;
    },
    synpred85_Formula: function() {
        this.state.backtracking++;
        var start = this.input.mark();
        try {
            this.synpred85_Formula_fragment(); // can never throw exception
        } catch (re) {
            alert("impossible: "+re.toString());
        }
        var success = !this.state.failed;
        this.input.rewind(start);
        this.state.backtracking--;
        this.state.failed=false;
        return success;
    },
    synpred87_Formula: function() {
        this.state.backtracking++;
        var start = this.input.mark();
        try {
            this.synpred87_Formula_fragment(); // can never throw exception
        } catch (re) {
            alert("impossible: "+re.toString());
        }
        var success = !this.state.failed;
        this.input.rewind(start);
        this.state.backtracking--;
        this.state.failed=false;
        return success;
    },
    synpred48_Formula: function() {
        this.state.backtracking++;
        var start = this.input.mark();
        try {
            this.synpred48_Formula_fragment(); // can never throw exception
        } catch (re) {
            alert("impossible: "+re.toString());
        }
        var success = !this.state.failed;
        this.input.rewind(start);
        this.state.backtracking--;
        this.state.failed=false;
        return success;
    },
    synpred86_Formula: function() {
        this.state.backtracking++;
        var start = this.input.mark();
        try {
            this.synpred86_Formula_fragment(); // can never throw exception
        } catch (re) {
            alert("impossible: "+re.toString());
        }
        var success = !this.state.failed;
        this.input.rewind(start);
        this.state.backtracking--;
        this.state.failed=false;
        return success;
    },
    synpred9_Formula: function() {
        this.state.backtracking++;
        var start = this.input.mark();
        try {
            this.synpred9_Formula_fragment(); // can never throw exception
        } catch (re) {
            alert("impossible: "+re.toString());
        }
        var success = !this.state.failed;
        this.input.rewind(start);
        this.state.backtracking--;
        this.state.failed=false;
        return success;
    },
    synpred75_Formula: function() {
        this.state.backtracking++;
        var start = this.input.mark();
        try {
            this.synpred75_Formula_fragment(); // can never throw exception
        } catch (re) {
            alert("impossible: "+re.toString());
        }
        var success = !this.state.failed;
        this.input.rewind(start);
        this.state.backtracking--;
        this.state.failed=false;
        return success;
    },
    synpred96_Formula: function() {
        this.state.backtracking++;
        var start = this.input.mark();
        try {
            this.synpred96_Formula_fragment(); // can never throw exception
        } catch (re) {
            alert("impossible: "+re.toString());
        }
        var success = !this.state.failed;
        this.input.rewind(start);
        this.state.backtracking--;
        this.state.failed=false;
        return success;
    },
    synpred47_Formula: function() {
        this.state.backtracking++;
        var start = this.input.mark();
        try {
            this.synpred47_Formula_fragment(); // can never throw exception
        } catch (re) {
            alert("impossible: "+re.toString());
        }
        var success = !this.state.failed;
        this.input.rewind(start);
        this.state.backtracking--;
        this.state.failed=false;
        return success;
    },
    synpred8_Formula: function() {
        this.state.backtracking++;
        var start = this.input.mark();
        try {
            this.synpred8_Formula_fragment(); // can never throw exception
        } catch (re) {
            alert("impossible: "+re.toString());
        }
        var success = !this.state.failed;
        this.input.rewind(start);
        this.state.backtracking--;
        this.state.failed=false;
        return success;
    },
    synpred112_Formula: function() {
        this.state.backtracking++;
        var start = this.input.mark();
        try {
            this.synpred112_Formula_fragment(); // can never throw exception
        } catch (re) {
            alert("impossible: "+re.toString());
        }
        var success = !this.state.failed;
        this.input.rewind(start);
        this.state.backtracking--;
        this.state.failed=false;
        return success;
    },
    synpred6_Formula: function() {
        this.state.backtracking++;
        var start = this.input.mark();
        try {
            this.synpred6_Formula_fragment(); // can never throw exception
        } catch (re) {
            alert("impossible: "+re.toString());
        }
        var success = !this.state.failed;
        this.input.rewind(start);
        this.state.backtracking--;
        this.state.failed=false;
        return success;
    },
    synpred5_Formula: function() {
        this.state.backtracking++;
        var start = this.input.mark();
        try {
            this.synpred5_Formula_fragment(); // can never throw exception
        } catch (re) {
            alert("impossible: "+re.toString());
        }
        var success = !this.state.failed;
        this.input.rewind(start);
        this.state.backtracking--;
        this.state.failed=false;
        return success;
    },
    synpred60_Formula: function() {
        this.state.backtracking++;
        var start = this.input.mark();
        try {
            this.synpred60_Formula_fragment(); // can never throw exception
        } catch (re) {
            alert("impossible: "+re.toString());
        }
        var success = !this.state.failed;
        this.input.rewind(start);
        this.state.backtracking--;
        this.state.failed=false;
        return success;
    },
    synpred61_Formula: function() {
        this.state.backtracking++;
        var start = this.input.mark();
        try {
            this.synpred61_Formula_fragment(); // can never throw exception
        } catch (re) {
            alert("impossible: "+re.toString());
        }
        var success = !this.state.failed;
        this.input.rewind(start);
        this.state.backtracking--;
        this.state.failed=false;
        return success;
    },
    synpred108_Formula: function() {
        this.state.backtracking++;
        var start = this.input.mark();
        try {
            this.synpred108_Formula_fragment(); // can never throw exception
        } catch (re) {
            alert("impossible: "+re.toString());
        }
        var success = !this.state.failed;
        this.input.rewind(start);
        this.state.backtracking--;
        this.state.failed=false;
        return success;
    },
    synpred11_Formula: function() {
        this.state.backtracking++;
        var start = this.input.mark();
        try {
            this.synpred11_Formula_fragment(); // can never throw exception
        } catch (re) {
            alert("impossible: "+re.toString());
        }
        var success = !this.state.failed;
        this.input.rewind(start);
        this.state.backtracking--;
        this.state.failed=false;
        return success;
    },
    synpred78_Formula: function() {
        this.state.backtracking++;
        var start = this.input.mark();
        try {
            this.synpred78_Formula_fragment(); // can never throw exception
        } catch (re) {
            alert("impossible: "+re.toString());
        }
        var success = !this.state.failed;
        this.input.rewind(start);
        this.state.backtracking--;
        this.state.failed=false;
        return success;
    },
    synpred88_Formula: function() {
        this.state.backtracking++;
        var start = this.input.mark();
        try {
            this.synpred88_Formula_fragment(); // can never throw exception
        } catch (re) {
            alert("impossible: "+re.toString());
        }
        var success = !this.state.failed;
        this.input.rewind(start);
        this.state.backtracking--;
        this.state.failed=false;
        return success;
    }

}, true); // important to pass true to overwrite default implementations

org.antlr.lang.augmentObject(FormulaParser, {
    DFA5_eotS:
        "\u0017\uffff",
    DFA5_eofS:
        "\u0017\uffff",
    DFA5_minS:
        "\u0001\u0026\u0002\u0000\u0008\uffff\u0001\u0000\u0002\uffff\u0001"+
    "\u0000\u0008\uffff",
    DFA5_maxS:
        "\u0001\u0071\u0002\u0000\u0008\uffff\u0001\u0000\u0002\uffff\u0001"+
    "\u0000\u0008\uffff",
    DFA5_acceptS:
        "\u0003\uffff\u0001\u0002\u0009\uffff\u0001\u0003\u0001\uffff\u0001"+
    "\u0006\u0001\u0008\u0001\u0009\u0001\u000a\u0001\u0001\u0001\u0007\u0001"+
    "\u0004\u0001\u0005",
    DFA5_specialS:
        "\u0001\uffff\u0001\u0000\u0001\u0001\u0008\uffff\u0001\u0002\u0002"+
    "\uffff\u0001\u0003\u0008\uffff}>",
    DFA5_transitionS: [
            "\u0001\u000d\u0003\uffff\u0001\u000e\u000b\uffff\u0001\u000f"+
            "\u0005\uffff\u0001\u000b\u0002\uffff\u0001\u0010\u0001\u0003"+
            "\u0001\u0011\u0002\uffff\u0001\u0012\u0001\u0001\u0001\uffff"+
            "\u0001\u0002\u000a\uffff\u0001\u0003\u0005\uffff\u0002\u0003"+
            "\u0001\uffff\u0001\u0003\u0002\uffff\u0005\u0003\u000e\uffff"+
            "\u0001\u0003",
            "\u0001\uffff",
            "\u0001\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\u0001\uffff",
            "",
            "",
            "\u0001\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    ]
});

org.antlr.lang.augmentObject(FormulaParser, {
    DFA5_eot:
        org.antlr.runtime.DFA.unpackEncodedString(FormulaParser.DFA5_eotS),
    DFA5_eof:
        org.antlr.runtime.DFA.unpackEncodedString(FormulaParser.DFA5_eofS),
    DFA5_min:
        org.antlr.runtime.DFA.unpackEncodedStringToUnsignedChars(FormulaParser.DFA5_minS),
    DFA5_max:
        org.antlr.runtime.DFA.unpackEncodedStringToUnsignedChars(FormulaParser.DFA5_maxS),
    DFA5_accept:
        org.antlr.runtime.DFA.unpackEncodedString(FormulaParser.DFA5_acceptS),
    DFA5_special:
        org.antlr.runtime.DFA.unpackEncodedString(FormulaParser.DFA5_specialS),
    DFA5_transition: (function() {
        var a = [],
            i,
            numStates = FormulaParser.DFA5_transitionS.length;
        for (i=0; i<numStates; i++) {
            a.push(org.antlr.runtime.DFA.unpackEncodedString(FormulaParser.DFA5_transitionS[i]));
        }
        return a;
    })()
});

FormulaParser.DFA5 = function(recognizer) {
    this.recognizer = recognizer;
    this.decisionNumber = 5;
    this.eot = FormulaParser.DFA5_eot;
    this.eof = FormulaParser.DFA5_eof;
    this.min = FormulaParser.DFA5_min;
    this.max = FormulaParser.DFA5_max;
    this.accept = FormulaParser.DFA5_accept;
    this.special = FormulaParser.DFA5_special;
    this.transition = FormulaParser.DFA5_transition;
};

org.antlr.lang.extend(FormulaParser.DFA5, org.antlr.runtime.DFA, {
    getDescription: function() {
        return "120:1: expression : ( assignment | logicalExpression | whileLoop | forLoop | forInLoop | ifThenElse | functionDef | returnExp | tryCatch | throwExp );";
    },
    specialStateTransition: function(s, input) {
        var _s = s;
        /* bind to recognizer so semantic predicates can be evaluated */
        var retval = (function(s, input) {
            switch ( s ) {
                        case 0 : 
                            var LA5_1 = input.LA(1);

                             
                            var index5_1 = input.index();
                            input.rewind();
                            s = -1;
                            if ( (this.synpred5_Formula()) ) {s = 19;}

                            else if ( (this.synpred6_Formula()) ) {s = 3;}

                             
                            input.seek(index5_1);
                            if ( s>=0 ) return s;
                            break;
                        case 1 : 
                            var LA5_2 = input.LA(1);

                             
                            var index5_2 = input.index();
                            input.rewind();
                            s = -1;
                            if ( (this.synpred5_Formula()) ) {s = 19;}

                            else if ( (this.synpred6_Formula()) ) {s = 3;}

                             
                            input.seek(index5_2);
                            if ( s>=0 ) return s;
                            break;
                        case 2 : 
                            var LA5_11 = input.LA(1);

                             
                            var index5_11 = input.index();
                            input.rewind();
                            s = -1;
                            if ( (this.synpred6_Formula()) ) {s = 3;}

                            else if ( (this.synpred11_Formula()) ) {s = 20;}

                             
                            input.seek(index5_11);
                            if ( s>=0 ) return s;
                            break;
                        case 3 : 
                            var LA5_14 = input.LA(1);

                             
                            var index5_14 = input.index();
                            input.rewind();
                            s = -1;
                            if ( (this.synpred8_Formula()) ) {s = 21;}

                            else if ( (this.synpred9_Formula()) ) {s = 22;}

                             
                            input.seek(index5_14);
                            if ( s>=0 ) return s;
                            break;
            }
        }).call(this.recognizer, s, input);
        if (!org.antlr.lang.isUndefined(retval)) {
            return retval;
        }
        if (this.recognizer.state.backtracking>0) {this.recognizer.state.failed=true; return -1;}
        var nvae =
            new org.antlr.runtime.NoViableAltException(this.getDescription(), 5, _s, input);
        this.error(nvae);
        throw nvae;
    },
    dummy: null
});
org.antlr.lang.augmentObject(FormulaParser, {
    DFA57_eotS:
        "\u000b\uffff",
    DFA57_eofS:
        "\u000b\uffff",
    DFA57_minS:
        "\u0001\u003c\u0003\uffff\u0001\u0000\u0006\uffff",
    DFA57_maxS:
        "\u0001\u0062\u0003\uffff\u0001\u0000\u0006\uffff",
    DFA57_acceptS:
        "\u0001\uffff\u0001\u0001\u0001\u0002\u0001\u0003\u0001\uffff\u0001"+
    "\u0005\u0001\u0006\u0001\u0007\u0001\u0008\u0001\u0009\u0001\u0004",
    DFA57_specialS:
        "\u0004\uffff\u0001\u0000\u0006\uffff}>",
    DFA57_transitionS: [
            "\u0001\u0008\u0003\uffff\u0001\u0009\u0004\uffff\u0001\u0005"+
            "\u0001\uffff\u0001\u0006\u0011\uffff\u0001\u0007\u0001\uffff"+
            "\u0001\u0004\u0002\uffff\u0001\u0003\u0002\u0001\u0002\u0002",
            "",
            "",
            "",
            "\u0001\uffff",
            "",
            "",
            "",
            "",
            "",
            ""
    ]
});

org.antlr.lang.augmentObject(FormulaParser, {
    DFA57_eot:
        org.antlr.runtime.DFA.unpackEncodedString(FormulaParser.DFA57_eotS),
    DFA57_eof:
        org.antlr.runtime.DFA.unpackEncodedString(FormulaParser.DFA57_eofS),
    DFA57_min:
        org.antlr.runtime.DFA.unpackEncodedStringToUnsignedChars(FormulaParser.DFA57_minS),
    DFA57_max:
        org.antlr.runtime.DFA.unpackEncodedStringToUnsignedChars(FormulaParser.DFA57_maxS),
    DFA57_accept:
        org.antlr.runtime.DFA.unpackEncodedString(FormulaParser.DFA57_acceptS),
    DFA57_special:
        org.antlr.runtime.DFA.unpackEncodedString(FormulaParser.DFA57_specialS),
    DFA57_transition: (function() {
        var a = [],
            i,
            numStates = FormulaParser.DFA57_transitionS.length;
        for (i=0; i<numStates; i++) {
            a.push(org.antlr.runtime.DFA.unpackEncodedString(FormulaParser.DFA57_transitionS[i]));
        }
        return a;
    })()
});

FormulaParser.DFA57 = function(recognizer) {
    this.recognizer = recognizer;
    this.decisionNumber = 57;
    this.eot = FormulaParser.DFA57_eot;
    this.eof = FormulaParser.DFA57_eof;
    this.min = FormulaParser.DFA57_min;
    this.max = FormulaParser.DFA57_max;
    this.accept = FormulaParser.DFA57_accept;
    this.special = FormulaParser.DFA57_special;
    this.transition = FormulaParser.DFA57_transition;
};

org.antlr.lang.extend(FormulaParser.DFA57, org.antlr.runtime.DFA, {
    getDescription: function() {
        return "283:1: value : ( number | bool | string | material | IDENT | primitive | array | anonFunctionDef | newObject );";
    },
    specialStateTransition: function(s, input) {
        var _s = s;
        /* bind to recognizer so semantic predicates can be evaluated */
        var retval = (function(s, input) {
            switch ( s ) {
                        case 0 : 
                            var LA57_4 = input.LA(1);

                             
                            var index57_4 = input.index();
                            input.rewind();
                            s = -1;
                            if ( (this.synpred75_Formula()) ) {s = 10;}

                            else if ( (this.synpred78_Formula()) ) {s = 7;}

                             
                            input.seek(index57_4);
                            if ( s>=0 ) return s;
                            break;
            }
        }).call(this.recognizer, s, input);
        if (!org.antlr.lang.isUndefined(retval)) {
            return retval;
        }
        if (this.recognizer.state.backtracking>0) {this.recognizer.state.failed=true; return -1;}
        var nvae =
            new org.antlr.runtime.NoViableAltException(this.getDescription(), 57, _s, input);
        this.error(nvae);
        throw nvae;
    },
    dummy: null
});
org.antlr.lang.augmentObject(FormulaParser, {
    DFA58_eotS:
        "\u001a\uffff",
    DFA58_eofS:
        "\u0001\u0002\u0019\uffff",
    DFA58_minS:
        "\u0001\u0020\u0001\u0000\u0018\uffff",
    DFA58_maxS:
        "\u0001\u0074\u0001\u0000\u0018\uffff",
    DFA58_acceptS:
        "\u0002\uffff\u0001\u0002\u0016\uffff\u0001\u0001",
    DFA58_specialS:
        "\u0001\uffff\u0001\u0000\u0018\uffff}>",
    DFA58_transitionS: [
            "\u0001\u0002\u000f\uffff\u0001\u0002\u0002\uffff\u0001\u0002"+
            "\u0003\uffff\u0001\u0002\u000d\uffff\u0002\u0002\u0001\uffff"+
            "\u0002\u0002\u0001\uffff\u000d\u0002\u0001\uffff\u0005\u0002"+
            "\u0001\uffff\u0001\u0002\u0011\uffff\u0001\u0001\u0001\u0002"+
            "\u0001\uffff\u0001\u0002",
            "\u0001\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    ]
});

org.antlr.lang.augmentObject(FormulaParser, {
    DFA58_eot:
        org.antlr.runtime.DFA.unpackEncodedString(FormulaParser.DFA58_eotS),
    DFA58_eof:
        org.antlr.runtime.DFA.unpackEncodedString(FormulaParser.DFA58_eofS),
    DFA58_min:
        org.antlr.runtime.DFA.unpackEncodedStringToUnsignedChars(FormulaParser.DFA58_minS),
    DFA58_max:
        org.antlr.runtime.DFA.unpackEncodedStringToUnsignedChars(FormulaParser.DFA58_maxS),
    DFA58_accept:
        org.antlr.runtime.DFA.unpackEncodedString(FormulaParser.DFA58_acceptS),
    DFA58_special:
        org.antlr.runtime.DFA.unpackEncodedString(FormulaParser.DFA58_specialS),
    DFA58_transition: (function() {
        var a = [],
            i,
            numStates = FormulaParser.DFA58_transitionS.length;
        for (i=0; i<numStates; i++) {
            a.push(org.antlr.runtime.DFA.unpackEncodedString(FormulaParser.DFA58_transitionS[i]));
        }
        return a;
    })()
});

FormulaParser.DFA58 = function(recognizer) {
    this.recognizer = recognizer;
    this.decisionNumber = 58;
    this.eot = FormulaParser.DFA58_eot;
    this.eof = FormulaParser.DFA58_eof;
    this.min = FormulaParser.DFA58_min;
    this.max = FormulaParser.DFA58_max;
    this.accept = FormulaParser.DFA58_accept;
    this.special = FormulaParser.DFA58_special;
    this.transition = FormulaParser.DFA58_transition;
};

org.antlr.lang.extend(FormulaParser.DFA58, org.antlr.runtime.DFA, {
    getDescription: function() {
        return "296:22: ( funCall )?";
    },
    specialStateTransition: function(s, input) {
        var _s = s;
        /* bind to recognizer so semantic predicates can be evaluated */
        var retval = (function(s, input) {
            switch ( s ) {
                        case 0 : 
                            var LA58_1 = input.LA(1);

                             
                            var index58_1 = input.index();
                            input.rewind();
                            s = -1;
                            if ( (this.synpred80_Formula()) ) {s = 25;}

                            else if ( ((( this.input.get(this.input.index()-1).getText()==" ")||( this.input.get(this.input.index()-1).getText()!=" "))) ) {s = 2;}

                             
                            input.seek(index58_1);
                            if ( s>=0 ) return s;
                            break;
            }
        }).call(this.recognizer, s, input);
        if (!org.antlr.lang.isUndefined(retval)) {
            return retval;
        }
        if (this.recognizer.state.backtracking>0) {this.recognizer.state.failed=true; return -1;}
        var nvae =
            new org.antlr.runtime.NoViableAltException(this.getDescription(), 58, _s, input);
        this.error(nvae);
        throw nvae;
    },
    dummy: null
});
org.antlr.lang.augmentObject(FormulaParser, {
    DFA65_eotS:
        "\u0004\uffff",
    DFA65_eofS:
        "\u0004\uffff",
    DFA65_minS:
        "\u0001\u0020\u0001\uffff\u0001\u0020\u0001\uffff",
    DFA65_maxS:
        "\u0001\u0071\u0001\uffff\u0001\u0071\u0001\uffff",
    DFA65_acceptS:
        "\u0001\uffff\u0001\u0001\u0001\uffff\u0001\u0002",
    DFA65_specialS:
        "\u0004\uffff}>",
    DFA65_transitionS: [
            "\u0001\u0002\u001b\uffff\u0001\u0001\u0003\uffff\u0001\u0001"+
            "\u0004\uffff\u0001\u0001\u0001\uffff\u0001\u0001\u000a\uffff"+
            "\u0002\u0001\u0004\uffff\u0002\u0001\u0001\u0003\u0001\u0001"+
            "\u0002\uffff\u0005\u0001\u000e\uffff\u0001\u0001",
            "",
            "\u0001\u0002\u001b\uffff\u0001\u0001\u0003\uffff\u0001\u0001"+
            "\u0004\uffff\u0001\u0001\u0001\uffff\u0001\u0001\u000a\uffff"+
            "\u0001\u0001\u0005\uffff\u0002\u0001\u0001\u0003\u0001\u0001"+
            "\u0002\uffff\u0005\u0001\u000e\uffff\u0001\u0001",
            ""
    ]
});

org.antlr.lang.augmentObject(FormulaParser, {
    DFA65_eot:
        org.antlr.runtime.DFA.unpackEncodedString(FormulaParser.DFA65_eotS),
    DFA65_eof:
        org.antlr.runtime.DFA.unpackEncodedString(FormulaParser.DFA65_eofS),
    DFA65_min:
        org.antlr.runtime.DFA.unpackEncodedStringToUnsignedChars(FormulaParser.DFA65_minS),
    DFA65_max:
        org.antlr.runtime.DFA.unpackEncodedStringToUnsignedChars(FormulaParser.DFA65_maxS),
    DFA65_accept:
        org.antlr.runtime.DFA.unpackEncodedString(FormulaParser.DFA65_acceptS),
    DFA65_special:
        org.antlr.runtime.DFA.unpackEncodedString(FormulaParser.DFA65_specialS),
    DFA65_transition: (function() {
        var a = [],
            i,
            numStates = FormulaParser.DFA65_transitionS.length;
        for (i=0; i<numStates; i++) {
            a.push(org.antlr.runtime.DFA.unpackEncodedString(FormulaParser.DFA65_transitionS[i]));
        }
        return a;
    })()
});

FormulaParser.DFA65 = function(recognizer) {
    this.recognizer = recognizer;
    this.decisionNumber = 65;
    this.eot = FormulaParser.DFA65_eot;
    this.eof = FormulaParser.DFA65_eof;
    this.min = FormulaParser.DFA65_min;
    this.max = FormulaParser.DFA65_max;
    this.accept = FormulaParser.DFA65_accept;
    this.special = FormulaParser.DFA65_special;
    this.transition = FormulaParser.DFA65_transition;
};

org.antlr.lang.extend(FormulaParser.DFA65, org.antlr.runtime.DFA, {
    getDescription: function() {
        return "309:16: ( label ( NEWLINE )* ( ',' ( NEWLINE )* label ( NEWLINE )* )* )?";
    },
    dummy: null
});
org.antlr.lang.augmentObject(FormulaParser, {
    DFA72_eotS:
        "\u0004\uffff",
    DFA72_eofS:
        "\u0004\uffff",
    DFA72_minS:
        "\u0001\u0020\u0001\uffff\u0001\u0020\u0001\uffff",
    DFA72_maxS:
        "\u0001\u0071\u0001\uffff\u0001\u0071\u0001\uffff",
    DFA72_acceptS:
        "\u0001\uffff\u0001\u0001\u0001\uffff\u0001\u0002",
    DFA72_specialS:
        "\u0004\uffff}>",
    DFA72_transitionS: [
            "\u0001\u0002\u001b\uffff\u0001\u0001\u0003\uffff\u0001\u0001"+
            "\u0004\uffff\u0001\u0001\u0001\uffff\u0001\u0001\u000a\uffff"+
            "\u0002\u0001\u0004\uffff\u0002\u0001\u0001\uffff\u0001\u0001"+
            "\u0001\u0003\u0001\uffff\u0005\u0001\u000e\uffff\u0001\u0001",
            "",
            "\u0001\u0002\u001b\uffff\u0001\u0001\u0003\uffff\u0001\u0001"+
            "\u0004\uffff\u0001\u0001\u0001\uffff\u0001\u0001\u000a\uffff"+
            "\u0001\u0001\u0005\uffff\u0002\u0001\u0001\uffff\u0001\u0001"+
            "\u0001\u0003\u0001\uffff\u0005\u0001\u000e\uffff\u0001\u0001",
            ""
    ]
});

org.antlr.lang.augmentObject(FormulaParser, {
    DFA72_eot:
        org.antlr.runtime.DFA.unpackEncodedString(FormulaParser.DFA72_eotS),
    DFA72_eof:
        org.antlr.runtime.DFA.unpackEncodedString(FormulaParser.DFA72_eofS),
    DFA72_min:
        org.antlr.runtime.DFA.unpackEncodedStringToUnsignedChars(FormulaParser.DFA72_minS),
    DFA72_max:
        org.antlr.runtime.DFA.unpackEncodedStringToUnsignedChars(FormulaParser.DFA72_maxS),
    DFA72_accept:
        org.antlr.runtime.DFA.unpackEncodedString(FormulaParser.DFA72_acceptS),
    DFA72_special:
        org.antlr.runtime.DFA.unpackEncodedString(FormulaParser.DFA72_specialS),
    DFA72_transition: (function() {
        var a = [],
            i,
            numStates = FormulaParser.DFA72_transitionS.length;
        for (i=0; i<numStates; i++) {
            a.push(org.antlr.runtime.DFA.unpackEncodedString(FormulaParser.DFA72_transitionS[i]));
        }
        return a;
    })()
});

FormulaParser.DFA72 = function(recognizer) {
    this.recognizer = recognizer;
    this.decisionNumber = 72;
    this.eot = FormulaParser.DFA72_eot;
    this.eof = FormulaParser.DFA72_eof;
    this.min = FormulaParser.DFA72_min;
    this.max = FormulaParser.DFA72_max;
    this.accept = FormulaParser.DFA72_accept;
    this.special = FormulaParser.DFA72_special;
    this.transition = FormulaParser.DFA72_transition;
};

org.antlr.lang.extend(FormulaParser.DFA72, org.antlr.runtime.DFA, {
    getDescription: function() {
        return "310:19: ( label ( NEWLINE )* ( ',' ( NEWLINE )* label ( NEWLINE )* )* )?";
    },
    dummy: null
});
org.antlr.lang.augmentObject(FormulaParser, {
    DFA85_eotS:
        "\u000f\uffff",
    DFA85_eofS:
        "\u000f\uffff",
    DFA85_minS:
        "\u0001\u0020\u0001\u0000\u0006\uffff\u0001\u0000\u0006\uffff",
    DFA85_maxS:
        "\u0001\u0071\u0001\u0000\u0006\uffff\u0001\u0000\u0006\uffff",
    DFA85_acceptS:
        "\u0002\uffff\u0001\u0002\u0007\uffff\u0001\u0001\u0004\uffff",
    DFA85_specialS:
        "\u0001\uffff\u0001\u0000\u0006\uffff\u0001\u0001\u0006\uffff}>",
    DFA85_transitionS: [
            "\u0001\u0002\u001b\uffff\u0001\u0002\u0003\uffff\u0001\u0002"+
            "\u0004\uffff\u0001\u0008\u0001\uffff\u0001\u0002\u000a\uffff"+
            "\u0001\u0002\u0001\u000a\u0004\uffff\u0002\u0002\u0001\uffff"+
            "\u0001\u0002\u0002\uffff\u0001\u0001\u0004\u0002\u000e\uffff"+
            "\u0001\u0002",
            "\u0001\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "\u0001\uffff",
            "",
            "",
            "",
            "",
            "",
            ""
    ]
});

org.antlr.lang.augmentObject(FormulaParser, {
    DFA85_eot:
        org.antlr.runtime.DFA.unpackEncodedString(FormulaParser.DFA85_eotS),
    DFA85_eof:
        org.antlr.runtime.DFA.unpackEncodedString(FormulaParser.DFA85_eofS),
    DFA85_min:
        org.antlr.runtime.DFA.unpackEncodedStringToUnsignedChars(FormulaParser.DFA85_minS),
    DFA85_max:
        org.antlr.runtime.DFA.unpackEncodedStringToUnsignedChars(FormulaParser.DFA85_maxS),
    DFA85_accept:
        org.antlr.runtime.DFA.unpackEncodedString(FormulaParser.DFA85_acceptS),
    DFA85_special:
        org.antlr.runtime.DFA.unpackEncodedString(FormulaParser.DFA85_specialS),
    DFA85_transition: (function() {
        var a = [],
            i,
            numStates = FormulaParser.DFA85_transitionS.length;
        for (i=0; i<numStates; i++) {
            a.push(org.antlr.runtime.DFA.unpackEncodedString(FormulaParser.DFA85_transitionS[i]));
        }
        return a;
    })()
});

FormulaParser.DFA85 = function(recognizer) {
    this.recognizer = recognizer;
    this.decisionNumber = 85;
    this.eot = FormulaParser.DFA85_eot;
    this.eof = FormulaParser.DFA85_eof;
    this.min = FormulaParser.DFA85_min;
    this.max = FormulaParser.DFA85_max;
    this.accept = FormulaParser.DFA85_accept;
    this.special = FormulaParser.DFA85_special;
    this.transition = FormulaParser.DFA85_transition;
};

org.antlr.lang.extend(FormulaParser.DFA85, org.antlr.runtime.DFA, {
    getDescription: function() {
        return "331:2: ( arrayName ( NEWLINE )* COLON )?";
    },
    specialStateTransition: function(s, input) {
        var _s = s;
        /* bind to recognizer so semantic predicates can be evaluated */
        var retval = (function(s, input) {
            switch ( s ) {
                        case 0 : 
                            var LA85_1 = input.LA(1);

                             
                            var index85_1 = input.index();
                            input.rewind();
                            s = -1;
                            if ( (this.synpred112_Formula()) ) {s = 10;}

                            else if ( (true) ) {s = 2;}

                             
                            input.seek(index85_1);
                            if ( s>=0 ) return s;
                            break;
                        case 1 : 
                            var LA85_8 = input.LA(1);

                             
                            var index85_8 = input.index();
                            input.rewind();
                            s = -1;
                            if ( (this.synpred112_Formula()) ) {s = 10;}

                            else if ( (true) ) {s = 2;}

                             
                            input.seek(index85_8);
                            if ( s>=0 ) return s;
                            break;
            }
        }).call(this.recognizer, s, input);
        if (!org.antlr.lang.isUndefined(retval)) {
            return retval;
        }
        if (this.recognizer.state.backtracking>0) {this.recognizer.state.failed=true; return -1;}
        var nvae =
            new org.antlr.runtime.NoViableAltException(this.getDescription(), 85, _s, input);
        this.error(nvae);
        throw nvae;
    },
    dummy: null
});
 

// public class variables
org.antlr.lang.augmentObject(FormulaParser, {
    tokenNames: ["<invalid>", "<EOR>", "<DOWN>", "<UP>", "NEGATE", "ASSIGN", "FUNCALL", "MATERIAL", "UNIT", "POWER", "DEFAULTS", "PARAMS", "UNITCLUMP", "ARRAY", "LINES", "WHILE", "IFTHENELSE", "ELSE", "FOR", "FORIN", "FUNCTION", "ANONFUNCTION", "NUMBER", "LABEL", "RANGE", "INNER", "ASSIGNED", "SELECTOR", "DOTSELECTOR", "NEW", "TRYCATCH", "THROW", "NEWLINE", "W", "H", "I", "L", "E", "WHILESTATEMENT", "F", "O", "R", "FORSTATEMENT", "M", "FROMSTATEMENT", "N", "INSTATEMENT", "T", "TOSTATEMENT", "B", "Y", "BYSTATEMENT", "P", "LOOPSTATEMENT", "IFSTATEMENT", "THENSTATEMENT", "S", "ELSESTATEMENT", "U", "C", "FUNCTIONSTATEMENT", "D", "ENDBLOCK", "RETURNSTATEMENT", "NEWSTATEMENT", "TRYSTATEMENT", "A", "CATCHSTATEMENT", "THROWSTATEMENT", "IDENT", "EQUALS", "PRIMITIVE", "OR", "XOR", "X", "AND", "NOTEQUALS", "LT", "LTEQ", "GT", "GTEQ", "PLUS", "MINUS", "MULT", "DIV", "MOD", "COLON", "POW", "NOT", "LARR", "RARR", "LCURL", "RCURL", "COMMA", "STRING", "INTEGER", "FLOAT", "TRUE", "FALSE", "PER", "CUBED", "SQUARED", "Q", "LBRACKET", "RBRACKET", "COMMENT", "LINE_COMMENT", "WS", "G", "J", "K", "V", "Z", "'('", "')'", "'<-'", "'.'"],
    FOLLOW_NEWLINE_in_lines160: new org.antlr.runtime.BitSet([0x00000000, 0x90400441,0xCB0400B3, 0x00020007]),
    FOLLOW_expression_in_lines164: new org.antlr.runtime.BitSet([0x00000000, 0x00000001]),
    FOLLOW_NEWLINE_in_lines168: new org.antlr.runtime.BitSet([0x00000000, 0x90400441,0xCB0400B3, 0x00020007]),
    FOLLOW_EOF_in_lines171: new org.antlr.runtime.BitSet([0x00000000, 0x90400440,0xCB0400B3, 0x00020007]),
    FOLLOW_EOF_in_lines176: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_assignment_in_expression508: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_logicalExpression_in_expression514: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_whileLoop_in_expression520: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_forLoop_in_expression526: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_forInLoop_in_expression532: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_ifThenElse_in_expression538: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_functionDef_in_expression544: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_returnExp_in_expression550: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_tryCatch_in_expression556: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_throwExp_in_expression562: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_RETURNSTATEMENT_in_returnExp574: new org.antlr.runtime.BitSet([0x00000000, 0x10000000,0xCB0400A1, 0x00020007]),
    FOLLOW_logicalExpression_in_returnExp577: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_expression_in_innerBlock590: new org.antlr.runtime.BitSet([0x00000000, 0x00000001]),
    FOLLOW_NEWLINE_in_innerBlock594: new org.antlr.runtime.BitSet([0x00000002, 0x90400441,0xCB0400B3, 0x00020007]),
    FOLLOW_WHILESTATEMENT_in_whileLoop619: new org.antlr.runtime.BitSet([0x00000000, 0x10000000,0xCB0400A1, 0x00020007]),
    FOLLOW_logicalExpression_in_whileLoop621: new org.antlr.runtime.BitSet([0x00000000, 0x00000001]),
    FOLLOW_NEWLINE_in_whileLoop623: new org.antlr.runtime.BitSet([0x00000000, 0xD0400441,0xCB0400B3, 0x00020007]),
    FOLLOW_innerBlock_in_whileLoop626: new org.antlr.runtime.BitSet([0x00000000, 0x40000000]),
    FOLLOW_ENDBLOCK_in_whileLoop629: new org.antlr.runtime.BitSet([0x00000000, 0x00200000]),
    FOLLOW_LOOPSTATEMENT_in_whileLoop631: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_FORSTATEMENT_in_forLoop652: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000020, 0x00000000]),
    FOLLOW_IDENT_in_forLoop654: new org.antlr.runtime.BitSet([0x00000000, 0x00001000]),
    FOLLOW_FROMSTATEMENT_in_forLoop656: new org.antlr.runtime.BitSet([0x00000000, 0x10000000,0xCB0400A1, 0x00020007]),
    FOLLOW_logicalExpression_in_forLoop658: new org.antlr.runtime.BitSet([0x00000000, 0x00010000]),
    FOLLOW_TOSTATEMENT_in_forLoop660: new org.antlr.runtime.BitSet([0x00000000, 0x10000000,0xCB0400A1, 0x00020007]),
    FOLLOW_logicalExpression_in_forLoop662: new org.antlr.runtime.BitSet([0x00000000, 0x00080001]),
    FOLLOW_BYSTATEMENT_in_forLoop665: new org.antlr.runtime.BitSet([0x00000000, 0x10000000,0xCB0400A1, 0x00020007]),
    FOLLOW_logicalExpression_in_forLoop667: new org.antlr.runtime.BitSet([0x00000000, 0x00000001]),
    FOLLOW_NEWLINE_in_forLoop671: new org.antlr.runtime.BitSet([0x00000000, 0xD0400441,0xCB0400B3, 0x00020007]),
    FOLLOW_innerBlock_in_forLoop674: new org.antlr.runtime.BitSet([0x00000000, 0x40000000]),
    FOLLOW_ENDBLOCK_in_forLoop677: new org.antlr.runtime.BitSet([0x00000000, 0x00200000]),
    FOLLOW_LOOPSTATEMENT_in_forLoop679: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_FORSTATEMENT_in_forInLoop707: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000020, 0x00000000]),
    FOLLOW_IDENT_in_forInLoop709: new org.antlr.runtime.BitSet([0x00000000, 0x00004000]),
    FOLLOW_INSTATEMENT_in_forInLoop711: new org.antlr.runtime.BitSet([0x00000000, 0x10000000,0xCB0400A1, 0x00020007]),
    FOLLOW_logicalExpression_in_forInLoop713: new org.antlr.runtime.BitSet([0x00000000, 0x00000001]),
    FOLLOW_NEWLINE_in_forInLoop715: new org.antlr.runtime.BitSet([0x00000000, 0xD0400441,0xCB0400B3, 0x00020007]),
    FOLLOW_innerBlock_in_forInLoop718: new org.antlr.runtime.BitSet([0x00000000, 0x40000000]),
    FOLLOW_ENDBLOCK_in_forInLoop721: new org.antlr.runtime.BitSet([0x00000000, 0x00200000]),
    FOLLOW_LOOPSTATEMENT_in_forInLoop723: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_IFSTATEMENT_in_ifThenElse748: new org.antlr.runtime.BitSet([0x00000000, 0x10000000,0xCB0400A1, 0x00020007]),
    FOLLOW_logicalExpression_in_ifThenElse750: new org.antlr.runtime.BitSet([0x00000000, 0x00800000]),
    FOLLOW_THENSTATEMENT_in_ifThenElse752: new org.antlr.runtime.BitSet([0x00000000, 0x00000001]),
    FOLLOW_NEWLINE_in_ifThenElse755: new org.antlr.runtime.BitSet([0x00000000, 0xD2400441,0xCB0400B3, 0x00020007]),
    FOLLOW_innerBlock_in_ifThenElse758: new org.antlr.runtime.BitSet([0x00000000, 0x42000000]),
    FOLLOW_ELSESTATEMENT_in_ifThenElse762: new org.antlr.runtime.BitSet([0x00000000, 0x00400000]),
    FOLLOW_IFSTATEMENT_in_ifThenElse764: new org.antlr.runtime.BitSet([0x00000000, 0x10000000,0xCB0400A1, 0x00020007]),
    FOLLOW_logicalExpression_in_ifThenElse766: new org.antlr.runtime.BitSet([0x00000000, 0x00800000]),
    FOLLOW_THENSTATEMENT_in_ifThenElse768: new org.antlr.runtime.BitSet([0x00000000, 0x00000001]),
    FOLLOW_NEWLINE_in_ifThenElse770: new org.antlr.runtime.BitSet([0x00000000, 0xD2400441,0xCB0400B3, 0x00020007]),
    FOLLOW_innerBlock_in_ifThenElse773: new org.antlr.runtime.BitSet([0x00000000, 0x42000000]),
    FOLLOW_ELSESTATEMENT_in_ifThenElse778: new org.antlr.runtime.BitSet([0x00000000, 0x00000001]),
    FOLLOW_NEWLINE_in_ifThenElse780: new org.antlr.runtime.BitSet([0x00000000, 0xD0400441,0xCB0400B3, 0x00020007]),
    FOLLOW_innerBlock_in_ifThenElse783: new org.antlr.runtime.BitSet([0x00000000, 0x40000000]),
    FOLLOW_ENDBLOCK_in_ifThenElse787: new org.antlr.runtime.BitSet([0x00000000, 0x00400000]),
    FOLLOW_IFSTATEMENT_in_ifThenElse789: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_FUNCTIONSTATEMENT_in_functionDef820: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000020, 0x00000000]),
    FOLLOW_IDENT_in_functionDef822: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00020000]),
    FOLLOW_113_in_functionDef824: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000020, 0x00040000]),
    FOLLOW_IDENT_in_functionDef827: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x20000040, 0x00040000]),
    FOLLOW_EQUALS_in_functionDef831: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0xCA040000, 0x00000007]),
    FOLLOW_defaultValue_in_functionDef834: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x20000000, 0x00040000]),
    FOLLOW_COMMA_in_functionDef839: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000020, 0x00000000]),
    FOLLOW_IDENT_in_functionDef841: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x20000000, 0x00040000]),
    FOLLOW_COMMA_in_functionDef848: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000020, 0x00000000]),
    FOLLOW_IDENT_in_functionDef850: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000040, 0x00000000]),
    FOLLOW_EQUALS_in_functionDef852: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0xCA040000, 0x00000007]),
    FOLLOW_defaultValue_in_functionDef854: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x20000000, 0x00040000]),
    FOLLOW_114_in_functionDef861: new org.antlr.runtime.BitSet([0x00000000, 0x00000001]),
    FOLLOW_NEWLINE_in_functionDef863: new org.antlr.runtime.BitSet([0x00000000, 0xD0400441,0xCB0400B3, 0x00020007]),
    FOLLOW_innerBlock_in_functionDef866: new org.antlr.runtime.BitSet([0x00000000, 0x40000000]),
    FOLLOW_ENDBLOCK_in_functionDef869: new org.antlr.runtime.BitSet([0x00000000, 0x10000000]),
    FOLLOW_FUNCTIONSTATEMENT_in_functionDef871: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_TRYSTATEMENT_in_tryCatch904: new org.antlr.runtime.BitSet([0x00000000, 0x00000001]),
    FOLLOW_NEWLINE_in_tryCatch906: new org.antlr.runtime.BitSet([0x00000000, 0x90400441,0xCB0400BB, 0x00020007]),
    FOLLOW_innerBlock_in_tryCatch909: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000008, 0x00000000]),
    FOLLOW_CATCHSTATEMENT_in_tryCatch911: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000020, 0x00000000]),
    FOLLOW_IDENT_in_tryCatch913: new org.antlr.runtime.BitSet([0x00000000, 0x00000001]),
    FOLLOW_NEWLINE_in_tryCatch915: new org.antlr.runtime.BitSet([0x00000000, 0xD0400441,0xCB0400B3, 0x00020007]),
    FOLLOW_innerBlock_in_tryCatch919: new org.antlr.runtime.BitSet([0x00000000, 0x40000000]),
    FOLLOW_ENDBLOCK_in_tryCatch921: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000002, 0x00000000]),
    FOLLOW_TRYSTATEMENT_in_tryCatch923: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_THROWSTATEMENT_in_throwExp945: new org.antlr.runtime.BitSet([0x00000000, 0x10000000,0xCB0400A1, 0x00020007]),
    FOLLOW_primaryExpression_in_throwExp947: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_FUNCTIONSTATEMENT_in_anonFunctionDef967: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00020000]),
    FOLLOW_113_in_anonFunctionDef970: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000020, 0x00040000]),
    FOLLOW_IDENT_in_anonFunctionDef973: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x20000040, 0x00040000]),
    FOLLOW_EQUALS_in_anonFunctionDef977: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0xCA040000, 0x00000007]),
    FOLLOW_defaultValue_in_anonFunctionDef980: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x20000000, 0x00040000]),
    FOLLOW_COMMA_in_anonFunctionDef985: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000020, 0x00000000]),
    FOLLOW_IDENT_in_anonFunctionDef987: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x20000000, 0x00040000]),
    FOLLOW_COMMA_in_anonFunctionDef994: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000020, 0x00000000]),
    FOLLOW_IDENT_in_anonFunctionDef996: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000040, 0x00000000]),
    FOLLOW_EQUALS_in_anonFunctionDef998: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0xCA040000, 0x00000007]),
    FOLLOW_defaultValue_in_anonFunctionDef1000: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x20000000, 0x00040000]),
    FOLLOW_114_in_anonFunctionDef1007: new org.antlr.runtime.BitSet([0x00000000, 0x90400441,0xCB0400B3, 0x00020007]),
    FOLLOW_NEWLINE_in_anonFunctionDef1012: new org.antlr.runtime.BitSet([0x00000000, 0xD0400441,0xCB0400B3, 0x00020007]),
    FOLLOW_innerBlock_in_anonFunctionDef1015: new org.antlr.runtime.BitSet([0x00000000, 0x40000000]),
    FOLLOW_ENDBLOCK_in_anonFunctionDef1018: new org.antlr.runtime.BitSet([0x00000000, 0x10000000]),
    FOLLOW_FUNCTIONSTATEMENT_in_anonFunctionDef1020: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_expression_in_anonFunctionDef1025: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_IDENT_in_assignment1067: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00020000]),
    FOLLOW_113_in_assignment1069: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000020, 0x00040000]),
    FOLLOW_IDENT_in_assignment1072: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x20000040, 0x00040000]),
    FOLLOW_EQUALS_in_assignment1076: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0xCA040000, 0x00000007]),
    FOLLOW_defaultValue_in_assignment1078: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x20000000, 0x00040000]),
    FOLLOW_COMMA_in_assignment1083: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000020, 0x00000000]),
    FOLLOW_IDENT_in_assignment1085: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x20000000, 0x00040000]),
    FOLLOW_COMMA_in_assignment1092: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000020, 0x00000000]),
    FOLLOW_IDENT_in_assignment1094: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000040, 0x00000000]),
    FOLLOW_EQUALS_in_assignment1096: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0xCA040000, 0x00000007]),
    FOLLOW_defaultValue_in_assignment1098: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x20000000, 0x00040000]),
    FOLLOW_114_in_assignment1105: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00080000]),
    FOLLOW_115_in_assignment1107: new org.antlr.runtime.BitSet([0x00000000, 0x10000000,0xCB0400A1, 0x00020007]),
    FOLLOW_logicalExpression_in_assignment1109: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_PRIMITIVE_in_assignment1137: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x20000000, 0x00080000]),
    FOLLOW_assigned_in_assignment1141: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x20000000, 0x00080000]),
    FOLLOW_COMMA_in_assignment1145: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x000000A0, 0x00000000]),
    FOLLOW_PRIMITIVE_in_assignment1148: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x20000000, 0x00080000]),
    FOLLOW_assigned_in_assignment1152: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x20000000, 0x00080000]),
    FOLLOW_115_in_assignment1158: new org.antlr.runtime.BitSet([0x00000000, 0x10000000,0xCB0400A1, 0x00020007]),
    FOLLOW_logicalExpression_in_assignment1160: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_IDENT_in_assigned1186: new org.antlr.runtime.BitSet([0x00000002, 0x00000000,0x0A000000, 0x00100000]),
    FOLLOW_selector_in_assigned1188: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_booleanXORExpression_in_logicalExpression1214: new org.antlr.runtime.BitSet([0x00000002, 0x00000000,0x00000100, 0x00000000]),
    FOLLOW_OR_in_logicalExpression1217: new org.antlr.runtime.BitSet([0x00000000, 0x10000000,0xCB0400A1, 0x00020007]),
    FOLLOW_booleanXORExpression_in_logicalExpression1220: new org.antlr.runtime.BitSet([0x00000002, 0x00000000,0x00000100, 0x00000000]),
    FOLLOW_booleanAndExpression_in_booleanXORExpression1250: new org.antlr.runtime.BitSet([0x00000002, 0x00000000,0x00000200, 0x00000000]),
    FOLLOW_XOR_in_booleanXORExpression1253: new org.antlr.runtime.BitSet([0x00000000, 0x10000000,0xCB0400A1, 0x00020007]),
    FOLLOW_booleanAndExpression_in_booleanXORExpression1256: new org.antlr.runtime.BitSet([0x00000002, 0x00000000,0x00000200, 0x00000000]),
    FOLLOW_equalityExpression_in_booleanAndExpression1285: new org.antlr.runtime.BitSet([0x00000002, 0x00000000,0x00000800, 0x00000000]),
    FOLLOW_AND_in_booleanAndExpression1288: new org.antlr.runtime.BitSet([0x00000000, 0x10000000,0xCB0400A1, 0x00020007]),
    FOLLOW_equalityExpression_in_booleanAndExpression1291: new org.antlr.runtime.BitSet([0x00000002, 0x00000000,0x00000800, 0x00000000]),
    FOLLOW_relationalExpression_in_equalityExpression1322: new org.antlr.runtime.BitSet([0x00000002, 0x00000000,0x00001040, 0x00000000]),
    FOLLOW_set_in_equalityExpression1325: new org.antlr.runtime.BitSet([0x00000000, 0x10000000,0xCB0400A1, 0x00020007]),
    FOLLOW_relationalExpression_in_equalityExpression1332: new org.antlr.runtime.BitSet([0x00000002, 0x00000000,0x00001040, 0x00000000]),
    FOLLOW_additiveExpression_in_relationalExpression1374: new org.antlr.runtime.BitSet([0x00000002, 0x00000000,0x0001E000, 0x00000000]),
    FOLLOW_set_in_relationalExpression1378: new org.antlr.runtime.BitSet([0x00000000, 0x10000000,0xCB0400A1, 0x00020007]),
    FOLLOW_additiveExpression_in_relationalExpression1389: new org.antlr.runtime.BitSet([0x00000002, 0x00000000,0x0001E000, 0x00000000]),
    FOLLOW_multiplicativeExpression_in_additiveExpression1432: new org.antlr.runtime.BitSet([0x00000002, 0x00000000,0x00060000, 0x00000000]),
    FOLLOW_set_in_additiveExpression1436: new org.antlr.runtime.BitSet([0x00000000, 0x10000000,0xCB0400A1, 0x00020007]),
    FOLLOW_multiplicativeExpression_in_additiveExpression1443: new org.antlr.runtime.BitSet([0x00000002, 0x00000000,0x00060000, 0x00000000]),
    FOLLOW_arrayExpression_in_multiplicativeExpression1473: new org.antlr.runtime.BitSet([0x00000002, 0x00000000,0x00380000, 0x00000000]),
    FOLLOW_set_in_multiplicativeExpression1477: new org.antlr.runtime.BitSet([0x00000000, 0x10000000,0xCB0400A1, 0x00020007]),
    FOLLOW_arrayExpression_in_multiplicativeExpression1486: new org.antlr.runtime.BitSet([0x00000002, 0x00000000,0x00380000, 0x00000000]),
    FOLLOW_negationExpression_in_arrayExpression1532: new org.antlr.runtime.BitSet([0x00000002, 0x00000000,0x00400000, 0x00000000]),
    FOLLOW_COLON_in_arrayExpression1538: new org.antlr.runtime.BitSet([0x00000000, 0x10000000,0xCB0400A1, 0x00020007]),
    FOLLOW_negationExpression_in_arrayExpression1542: new org.antlr.runtime.BitSet([0x00000002, 0x00000000,0x00400000, 0x00000000]),
    FOLLOW_COLON_in_arrayExpression1551: new org.antlr.runtime.BitSet([0x00000000, 0x10000000,0xCB0400A1, 0x00020007]),
    FOLLOW_negationExpression_in_arrayExpression1555: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_MINUS_in_negationExpression1580: new org.antlr.runtime.BitSet([0x00000000, 0x10000000,0xCB0400A1, 0x00020007]),
    FOLLOW_powerExpression_in_negationExpression1582: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_powerExpression_in_negationExpression1596: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_unaryExpression_in_powerExpression1607: new org.antlr.runtime.BitSet([0x00000002, 0x00000000,0x00800000, 0x00000000]),
    FOLLOW_POW_in_powerExpression1610: new org.antlr.runtime.BitSet([0x00000000, 0x10000000,0xCB0400A1, 0x00020007]),
    FOLLOW_unaryOrNegate_in_powerExpression1612: new org.antlr.runtime.BitSet([0x00000002, 0x00000000,0x00800000, 0x00000000]),
    FOLLOW_unaryExpression_in_unaryOrNegate1639: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_MINUS_in_unaryOrNegate1645: new org.antlr.runtime.BitSet([0x00000000, 0x10000000,0xCB0400A1, 0x00020007]),
    FOLLOW_unaryExpression_in_unaryOrNegate1647: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_NOT_in_unaryExpression1675: new org.antlr.runtime.BitSet([0x00000000, 0x10000000,0xCB0400A1, 0x00020007]),
    FOLLOW_innerPrimaryExpression_in_unaryExpression1678: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_innerPrimaryExpression_in_unaryExpression1687: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_selectionExpression_in_innerPrimaryExpression1718: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_primaryExpression_in_selectionExpression1738: new org.antlr.runtime.BitSet([0x00000002, 0x00000000,0x0A000000, 0x00120000]),
    FOLLOW_selector_in_selectionExpression1744: new org.antlr.runtime.BitSet([0x00000002, 0x00000000,0x0A000000, 0x00120000]),
    FOLLOW_funCall_in_selectionExpression1746: new org.antlr.runtime.BitSet([0x00000002, 0x00000000,0x0A000000, 0x00120000]),
    FOLLOW_113_in_funCall1761: new org.antlr.runtime.BitSet([0x00000000, 0x10000000,0xCB0400A1, 0x00060007]),
    FOLLOW_logicalExpression_in_funCall1765: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x20000000, 0x00040000]),
    FOLLOW_COMMA_in_funCall1768: new org.antlr.runtime.BitSet([0x00000000, 0x10000000,0xCB0400A1, 0x00020007]),
    FOLLOW_logicalExpression_in_funCall1770: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x20000000, 0x00040000]),
    FOLLOW_114_in_funCall1777: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_113_in_primaryExpression1798: new org.antlr.runtime.BitSet([0x00000000, 0x10000000,0xCB0400A1, 0x00020007]),
    FOLLOW_logicalExpression_in_primaryExpression1801: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00040000]),
    FOLLOW_114_in_primaryExpression1803: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_value_in_primaryExpression1809: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_number_in_value1823: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_bool_in_value1829: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_string_in_value1835: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_material_in_value1841: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_IDENT_in_value1846: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_primitive_in_value1851: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_array_in_value1856: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_anonFunctionDef_in_value1861: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_newObject_in_value1866: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_NEWSTATEMENT_in_newObject1876: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000020, 0x00000000]),
    FOLLOW_IDENT_in_newObject1878: new org.antlr.runtime.BitSet([0x00000002, 0x00000000,0x0A000000, 0x00120000]),
    FOLLOW_funCall_in_newObject1880: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_negnumber_in_defaultValue1906: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_number_in_defaultValue1912: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_bool_in_defaultValue1918: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_string_in_defaultValue1924: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_array_in_defaultValue1930: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_LARR_in_array1944: new org.antlr.runtime.BitSet([0x00000000, 0x10000001,0xCF0C00A1, 0x00020007]),
    FOLLOW_NEWLINE_in_array1946: new org.antlr.runtime.BitSet([0x00000000, 0x10000001,0xCF0C00A1, 0x00020007]),
    FOLLOW_label_in_array1950: new org.antlr.runtime.BitSet([0x00000000, 0x00000001,0x24000000, 0x00000000]),
    FOLLOW_NEWLINE_in_array1952: new org.antlr.runtime.BitSet([0x00000000, 0x00000001,0x24000000, 0x00000000]),
    FOLLOW_COMMA_in_array1956: new org.antlr.runtime.BitSet([0x00000000, 0x10000001,0xCB0C00A1, 0x00020007]),
    FOLLOW_NEWLINE_in_array1958: new org.antlr.runtime.BitSet([0x00000000, 0x10000001,0xCB0C00A1, 0x00020007]),
    FOLLOW_label_in_array1961: new org.antlr.runtime.BitSet([0x00000000, 0x00000001,0x24000000, 0x00000000]),
    FOLLOW_NEWLINE_in_array1963: new org.antlr.runtime.BitSet([0x00000000, 0x00000001,0x24000000, 0x00000000]),
    FOLLOW_NEWLINE_in_array1970: new org.antlr.runtime.BitSet([0x00000000, 0x00000001,0x04000000, 0x00000000]),
    FOLLOW_RARR_in_array1973: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_LCURL_in_array1987: new org.antlr.runtime.BitSet([0x00000000, 0x10000001,0xDB0C00A1, 0x00020007]),
    FOLLOW_NEWLINE_in_array1989: new org.antlr.runtime.BitSet([0x00000000, 0x10000001,0xDB0C00A1, 0x00020007]),
    FOLLOW_label_in_array1993: new org.antlr.runtime.BitSet([0x00000000, 0x00000001,0x30000000, 0x00000000]),
    FOLLOW_NEWLINE_in_array1995: new org.antlr.runtime.BitSet([0x00000000, 0x00000001,0x30000000, 0x00000000]),
    FOLLOW_COMMA_in_array1998: new org.antlr.runtime.BitSet([0x00000000, 0x10000001,0xCB0C00A1, 0x00020007]),
    FOLLOW_NEWLINE_in_array2000: new org.antlr.runtime.BitSet([0x00000000, 0x10000001,0xCB0C00A1, 0x00020007]),
    FOLLOW_label_in_array2003: new org.antlr.runtime.BitSet([0x00000000, 0x00000001,0x30000000, 0x00000000]),
    FOLLOW_NEWLINE_in_array2005: new org.antlr.runtime.BitSet([0x00000000, 0x00000001,0x30000000, 0x00000000]),
    FOLLOW_NEWLINE_in_array2012: new org.antlr.runtime.BitSet([0x00000000, 0x00000001,0x10000000, 0x00000000]),
    FOLLOW_RCURL_in_array2015: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_minarray_in_selector2036: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_dotselector_in_selector2040: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_LARR_in_minarray2067: new org.antlr.runtime.BitSet([0x00000000, 0x10000000,0xCB0C00A1, 0x00020007]),
    FOLLOW_logicalExpression_in_minarray2072: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x24000000, 0x00000000]),
    FOLLOW_MULT_in_minarray2074: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x24000000, 0x00000000]),
    FOLLOW_COMMA_in_minarray2078: new org.antlr.runtime.BitSet([0x00000000, 0x10000000,0xCB0C00A1, 0x00020007]),
    FOLLOW_logicalExpression_in_minarray2082: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x24000000, 0x00000000]),
    FOLLOW_MULT_in_minarray2084: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x24000000, 0x00000000]),
    FOLLOW_RARR_in_minarray2091: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_LCURL_in_minarray2097: new org.antlr.runtime.BitSet([0x00000000, 0x10000000,0xCB0C00A1, 0x00020007]),
    FOLLOW_logicalExpression_in_minarray2102: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x30000000, 0x00000000]),
    FOLLOW_MULT_in_minarray2104: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x30000000, 0x00000000]),
    FOLLOW_COMMA_in_minarray2108: new org.antlr.runtime.BitSet([0x00000000, 0x10000000,0xCB0C00A1, 0x00020007]),
    FOLLOW_logicalExpression_in_minarray2112: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x30000000, 0x00000000]),
    FOLLOW_MULT_in_minarray2114: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x30000000, 0x00000000]),
    FOLLOW_RCURL_in_minarray2121: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_116_in_dotselector2133: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x40080020, 0x00000000]),
    FOLLOW_arrayName_in_dotselector2135: new org.antlr.runtime.BitSet([0x00000002, 0x00000000,0x00000000, 0x00100000]),
    FOLLOW_set_in_arrayName0: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_arrayName_in_label2173: new org.antlr.runtime.BitSet([0x00000000, 0x00000001,0x00400000, 0x00000000]),
    FOLLOW_NEWLINE_in_label2175: new org.antlr.runtime.BitSet([0x00000000, 0x00000001,0x00400000, 0x00000000]),
    FOLLOW_COLON_in_label2178: new org.antlr.runtime.BitSet([0x00000000, 0x10000001,0xCB0400A1, 0x00020007]),
    FOLLOW_NEWLINE_in_label2182: new org.antlr.runtime.BitSet([0x00000000, 0x10000001,0xCB0400A1, 0x00020007]),
    FOLLOW_logicalExpression_in_label2185: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_set_in_number0: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_MINUS_in_negnumber2261: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x80000000, 0x00000001]),
    FOLLOW_number_in_negnumber2263: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_set_in_bool0: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_LCURL_in_material2415: new org.antlr.runtime.BitSet([0x00000000, 0x10000000,0xCB0400A1, 0x00020007]),
    FOLLOW_additiveExpression_in_material2417: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x80000020, 0x00020000]),
    FOLLOW_unitMultiplicativeExpression_in_material2421: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x10000000, 0x00000000]),
    FOLLOW_RCURL_in_material2423: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_unitInnerMultiplicativeExpression_in_unitMultiplicativeExpression2460: new org.antlr.runtime.BitSet([0x00000002, 0x00000000,0x00000000, 0x00000008]),
    FOLLOW_PER_in_unitMultiplicativeExpression2464: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x80000020, 0x00020000]),
    FOLLOW_unitInnerMultiplicativeExpression_in_unitMultiplicativeExpression2467: new org.antlr.runtime.BitSet([0x00000002, 0x00000000,0x00000000, 0x00000008]),
    FOLLOW_unitClump_in_unitInnerMultiplicativeExpression2483: new org.antlr.runtime.BitSet([0x00000002, 0x00000000,0x00180000, 0x00000000]),
    FOLLOW_set_in_unitInnerMultiplicativeExpression2487: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x80000020, 0x00020000]),
    FOLLOW_unitClump_in_unitInnerMultiplicativeExpression2494: new org.antlr.runtime.BitSet([0x00000002, 0x00000000,0x00180000, 0x00000000]),
    FOLLOW_INTEGER_in_unitClump2510: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00100000, 0x00000000]),
    FOLLOW_DIV_in_unitClump2512: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x80000020, 0x00020000]),
    FOLLOW_unitPowerExpression_in_unitClump2515: new org.antlr.runtime.BitSet([0x00000002, 0x00000000,0x00000000, 0x00000030]),
    FOLLOW_CUBED_in_unitClump2517: new org.antlr.runtime.BitSet([0x00000002, 0x00000000,0x00000000, 0x00000020]),
    FOLLOW_SQUARED_in_unitClump2520: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_unitPowerExpression_in_unitClump2543: new org.antlr.runtime.BitSet([0x00000002, 0x00000000,0x00000000, 0x00000030]),
    FOLLOW_CUBED_in_unitClump2545: new org.antlr.runtime.BitSet([0x00000002, 0x00000000,0x00000000, 0x00000020]),
    FOLLOW_SQUARED_in_unitClump2548: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_unit_in_unitPowerExpression2610: new org.antlr.runtime.BitSet([0x00000002, 0x00000000,0x00800000, 0x00000000]),
    FOLLOW_POW_in_unitPowerExpression2614: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x80040000, 0x00000001]),
    FOLLOW_MINUS_in_unitPowerExpression2617: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x80000000, 0x00000001]),
    FOLLOW_set_in_unitPowerExpression2620: new org.antlr.runtime.BitSet([0x00000002, 0x00000000,0x00800000, 0x00000000]),
    FOLLOW_IDENT_in_unit2638: new org.antlr.runtime.BitSet([0x00000002, 0x00000000,0x00000020, 0x00000000]),
    FOLLOW_IDENT_in_unit2641: new org.antlr.runtime.BitSet([0x00000002, 0x00000000,0x00000020, 0x00000000]),
    FOLLOW_113_in_unit2658: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x80000020, 0x00020000]),
    FOLLOW_unitMultiplicativeExpression_in_unit2660: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00040000]),
    FOLLOW_114_in_unit2662: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_PRIMITIVE_in_primitive2731: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_STRING_in_string3200: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_assignment_in_synpred5_Formula508: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_logicalExpression_in_synpred6_Formula514: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_forLoop_in_synpred8_Formula526: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_forInLoop_in_synpred9_Formula532: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_functionDef_in_synpred11_Formula544: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_OR_in_synpred47_Formula1217: new org.antlr.runtime.BitSet([0x00000000, 0x10000000,0xCB0400A1, 0x00020007]),
    FOLLOW_booleanXORExpression_in_synpred47_Formula1220: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_XOR_in_synpred48_Formula1253: new org.antlr.runtime.BitSet([0x00000000, 0x10000000,0xCB0400A1, 0x00020007]),
    FOLLOW_booleanAndExpression_in_synpred48_Formula1256: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_AND_in_synpred49_Formula1288: new org.antlr.runtime.BitSet([0x00000000, 0x10000000,0xCB0400A1, 0x00020007]),
    FOLLOW_equalityExpression_in_synpred49_Formula1291: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_set_in_synpred51_Formula1325: new org.antlr.runtime.BitSet([0x00000000, 0x10000000,0xCB0400A1, 0x00020007]),
    FOLLOW_relationalExpression_in_synpred51_Formula1332: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_set_in_synpred55_Formula1378: new org.antlr.runtime.BitSet([0x00000000, 0x10000000,0xCB0400A1, 0x00020007]),
    FOLLOW_additiveExpression_in_synpred55_Formula1389: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_set_in_synpred57_Formula1436: new org.antlr.runtime.BitSet([0x00000000, 0x10000000,0xCB0400A1, 0x00020007]),
    FOLLOW_multiplicativeExpression_in_synpred57_Formula1443: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_set_in_synpred60_Formula1477: new org.antlr.runtime.BitSet([0x00000000, 0x10000000,0xCB0400A1, 0x00020007]),
    FOLLOW_arrayExpression_in_synpred60_Formula1486: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_COLON_in_synpred61_Formula1538: new org.antlr.runtime.BitSet([0x00000000, 0x10000000,0xCB0400A1, 0x00020007]),
    FOLLOW_negationExpression_in_synpred61_Formula1542: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_COLON_in_synpred62_Formula1551: new org.antlr.runtime.BitSet([0x00000000, 0x10000000,0xCB0400A1, 0x00020007]),
    FOLLOW_negationExpression_in_synpred62_Formula1555: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_POW_in_synpred64_Formula1610: new org.antlr.runtime.BitSet([0x00000000, 0x10000000,0xCB0400A1, 0x00020007]),
    FOLLOW_unaryOrNegate_in_synpred64_Formula1612: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_selector_in_synpred68_Formula1744: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_funCall_in_synpred68_Formula1746: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_material_in_synpred75_Formula1841: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_array_in_synpred78_Formula1856: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_funCall_in_synpred80_Formula1880: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_NEWLINE_in_synpred85_Formula1946: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_NEWLINE_in_synpred86_Formula1952: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_NEWLINE_in_synpred87_Formula1958: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_NEWLINE_in_synpred88_Formula1963: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_NEWLINE_in_synpred93_Formula1989: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_NEWLINE_in_synpred94_Formula1995: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_NEWLINE_in_synpred95_Formula2000: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_NEWLINE_in_synpred96_Formula2005: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_116_in_synpred108_Formula2133: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x40080020, 0x00000000]),
    FOLLOW_arrayName_in_synpred108_Formula2135: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_arrayName_in_synpred112_Formula2173: new org.antlr.runtime.BitSet([0x00000000, 0x00000001,0x00400000, 0x00000000]),
    FOLLOW_NEWLINE_in_synpred112_Formula2175: new org.antlr.runtime.BitSet([0x00000000, 0x00000001,0x00400000, 0x00000000]),
    FOLLOW_COLON_in_synpred112_Formula2178: new org.antlr.runtime.BitSet([0x00000002, 0x00000000])
});

})();
"use strict";
/*

Copyright 2010-2015 Scott Fortmann-Roe. All rights reserved.

This file may distributed and/or modified under the
terms of the Insight Maker Public License (https://InsightMaker.com/impl).

*/

function RandList() {
  this.vals = [];
}
RandList.prototype.get = function(i) {
  if (i > this.vals.length - 1) {
    for (var j = this.vals.length; j <= i; j++) {
      this.vals.push(Math.random());
    }
  }
  return this.vals[i];
}

function getRandPos() {
    if(window.timeStep === undefined){
    	return 0; //HeroCalc
    }else{
    	return Math.floor(time.value/timeStep.value); //Insight Maker
    }
}

function Rand(minVal, maxVal) {
  if(! isUndefined(window.simulate) ){
	simulate.stochastic = true;
  }
	
	
  if (minVal != null) {
    return Rand() * (maxVal - minVal) + (0+minVal);
  }
  if(isUndefined(window.simulate) || simulate.RKOrder == 1){
  	return Math.random();
  }
  var RandPos = getRandPos();
  if (RandPos != simulate.lastRandPos) {
    simulate.randLoc = (-1);
    simulate.lastRandPos = RandPos;
  }
  while (simulate.previousRandLists.length <= RandPos) {
    simulate.previousRandLists.push(new RandList());
  }
  simulate.randLoc = simulate.randLoc + 1;
  return simulate.previousRandLists[RandPos].get(simulate.randLoc);
}

function RandNormal(mu, sigma) {
    if (mu == null) {
      mu = 0;
    }
    if (sigma == null) {
      sigma = 1;
    }

  var z;
  z = Math.sqrt((-2) * Math.log((1) - Rand())) * Math.cos(Rand() * (2) * (3.141593));
  return z * (sigma) + (0+mu);
}
function RandExp(lambda) {
    if (lambda == null) {
      lambda = 1;
    }
  return -(1/lambda) * Math.log(Rand());
}
function RandLognormal(mu, sigma) {
  var lmu = Math.log(mu) - (0.5) * Math.log((1) + Math.pow(sigma / mu, (2)));
  var lsigma = Math.sqrt(Math.log((1) + Math.pow(sigma / mu, (2))));
  return Math.exp(RandNormal(lmu, lsigma));
}
function RandBinomial(count, probability) {
  var res = 0;
  for (var i = 1; i <= count; i++) {
    if (Rand() <= probability) {
      res = res + (1);
    }
  }
  return res;
}
function RandNegativeBinomial(successes, probability) {
  var i = 0;
  var s = 0;
  while (s < successes) {
    if (Rand() <= probability) {
      s = s + 1;
    }
    i = i + 1;
  }
  return i;
}
function RandPoisson(lambda) {
  var L = Math.exp(-lambda);
  var k = 0;
  var p = 1;
  while (true) {
    k = k + 1;
    p = p * Rand();
    if (!(p > L)) {
      break;
    }
  }
  return k - 1;
}

function RandGamma(alpha, beta) {
  var temp = 1;
  for (var i = 1; i <= alpha; i++) {
    temp = temp * Rand();
  }
  return -beta * Math.log(temp);
}

function RandBeta(alpha, beta) {
	var x = RandGamma(alpha, 1);
	var y = RandGamma(beta, 1);
	return x/(x+y);
}

function RandTriangular(minimum, maximum, peak) {
	
	var a = (0+minimum);
	var b = (0+maximum);
	var c = (0+peak);
	
	if(a == b){
		throw "MSG: Maximum can't equal the minimum for the triangular distribution.";
	}
	
	if(c<a || c>b){
		throw "MSG: The peak must be within the maximum and minimum for the triangular distribution.";
	}
	
	var fc = (c-a)/(b-a);
	
	var u = Rand();
	
	if(u<fc){
		return a + Math.sqrt(u * (b-a) * (c-a));
	}else{
		return b - Math.sqrt((1-u) * (b-a) * (b-c));
	}
}

function RandDist(x, y){
	//console.log(x);
	//console.log(y);
	if(x.length != y.length){
		throw "MSG: The lengths of the 'x' and 'y' vectors must be the same.";
	}
	if(x.length < 2){
		throw "MSG: There must be at least 2 points in a distribution to generate a random number."
	}
	var area = 0;
	for(var i = 0; i < x.length - 1; i++){
		area += (x[i+1]-x[i])*(y[i+1]+y[i])/2;
	}
	if(area == 0){
		throw "MSG: The area of the distribution cannot be 0."
	}
	//console.log(area);
	
	var a = area*Rand();
	var area = 0
	for(var i = 0; i < x.length-1; i++){
		var nextArea = (x[i+1]-x[i])*(y[i+1]+y[i])/2;
		if(a > area && a < area + nextArea){
			var neededArea = a - area;
			var slope = (y[i+1]-y[i])/(x[i+1]-x[i]);
			//var dist = neededArea/((y[i+1]+y[i])/2); 	// a = h*x+x*s*x/2 = x^2*s/2+h*x - a
														// x= (-h +/- sqrt(h^2+4*s/2*a))/s
			var dist;
			if(slope == 0 ){
				dist = neededArea/y[i];
			}else{
			//	console.log("--")
			//	console.log(y[i]);
			//	console.log(Math.pow(y[i],2));
			//	console.log(slope);
			//	console.log(neededArea);
				dist = (-y[i]+Math.sqrt(Math.pow(y[i], 2)+2*slope*neededArea))/slope;
			//	console.log(dist);
			}
			
			return x[i]+dist;
		}
		area += nextArea;
	}
	
}



// seedrandom.js version 2.0.
// Author: David Bau 4/2/2011
//
// Defines a method Math.seedrandom() that, when called, substitutes
// an explicitly seeded RC4-based algorithm for Math.random().  Also
// supports automatic seeding from local or network sources of entropy.
//
// Usage:
//
//   <script src=http://davidbau.com/encode/seedrandom-min.js></script>
//
//   Math.seedrandom('yipee'); Sets Math.random to a function that is
//                             initialized using the given explicit seed.
//
//   Math.seedrandom();        Sets Math.random to a function that is
//                             seeded using the current time, dom state,
//                             and other accumulated local entropy.
//                             The generated seed string is returned.
//
//   Math.seedrandom('yowza', true);
//                             Seeds using the given explicit seed mixed
//                             together with accumulated entropy.
//
//   <script src="http://bit.ly/srandom-512"></script>
//                             Seeds using physical random bits downloaded
//                             from random.org.
//
//   <script src="https://jsonlib.appspot.com/urandom?callback=Math.seedrandom">
//   </script>                 Seeds using urandom bits from call.jsonlib.com,
//                             which is faster than random.org.
//
// Examples:
//
//   Math.seedrandom("hello");            // Use "hello" as the seed.
//   document.write(Math.random());       // Always 0.5463663768140734
//   document.write(Math.random());       // Always 0.43973793770592234
//   var rng1 = Math.random;              // Remember the current prng.
//
//   var autoseed = Math.seedrandom();    // New prng with an automatic seed.
//   document.write(Math.random());       // Pretty much unpredictable.
//
//   Math.random = rng1;                  // Continue "hello" prng sequence.
//   document.write(Math.random());       // Always 0.554769432473455
//
//   Math.seedrandom(autoseed);           // Restart at the previous seed.
//   document.write(Math.random());       // Repeat the 'unpredictable' value.
//
// Notes:
//
// Each time seedrandom('arg') is called, entropy from the passed seed
// is accumulated in a pool to help generate future seeds for the
// zero-argument form of Math.seedrandom, so entropy can be injected over
// time by calling seedrandom with explicit data repeatedly.
//
// On speed - This javascript implementation of Math.random() is about
// 3-10x slower than the built-in Math.random() because it is not native
// code, but this is typically fast enough anyway.  Seeding is more expensive,
// especially if you use auto-seeding.  Some details (timings on Chrome 4):
//
// Our Math.random()            - avg less than 0.002 milliseconds per call
// seedrandom('explicit')       - avg less than 0.5 milliseconds per call
// seedrandom('explicit', true) - avg less than 2 milliseconds per call
// seedrandom()                 - avg about 38 milliseconds per call
//
// LICENSE (BSD):
//
// Copyright 2010 David Bau, all rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are met:
// 
//   1. Redistributions of source code must retain the above copyright
//      notice, this list of conditions and the following disclaimer.
//
//   2. Redistributions in binary form must reproduce the above copyright
//      notice, this list of conditions and the following disclaimer in the
//      documentation and/or other materials provided with the distribution.
// 
//   3. Neither the name of this module nor the names of its contributors may
//      be used to endorse or promote products derived from this software
//      without specific prior written permission.
// 
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
/**
 * All code is in an anonymous closure to keep the global namespace clean.
 *
 * @param {number=} overflow 
 * @param {number=} startdenom
 */
(function (pool, math, width, chunks, significance, overflow, startdenom) {


//
// seedrandom()
// This is the seedrandom function described above.
//
math['seedrandom'] = function seedrandom(seed, use_entropy) {
  var key = [];
  var arc4;

  // Flatten the seed string or build one from local entropy if needed.
  seed = mixkey(flatten(
    use_entropy ? [seed, pool] :
    arguments.length ? seed :
    [new Date().getTime(), pool, window], 3), key);

  // Use the seed to initialize an ARC4 generator.
  arc4 = new ARC4(key);

  // Mix the randomness into accumulated entropy.
  mixkey(arc4.S, pool);

  // Override Math.random

  // This function returns a random double in [0, 1) that contains
  // randomness in every bit of the mantissa of the IEEE 754 value.

  math['random'] = function random() {  // Closure to return a random double:
    var n = arc4.g(chunks);             // Start with a numerator n < 2 ^ 48
    var d = startdenom;                 //   and denominator d = 2 ^ 48.
    var x = 0;                          //   and no 'extra last byte'.
    while (n < significance) {          // Fill up all significant digits by
      n = (n + x) * width;              //   shifting numerator and
      d *= width;                       //   denominator and generating a
      x = arc4.g(1);                    //   new least-significant-byte.
    }
    while (n >= overflow) {             // To avoid rounding up, before adding
      n /= 2;                           //   last byte, shift everything
      d /= 2;                           //   right using integer math until
      x >>>= 1;                         //   we have exactly the desired bits.
    }
    return (n + x) / d;                 // Form the number within [0, 1).
  };

  // Return the seed that was used
  return seed;
};

//
// ARC4
//
// An ARC4 implementation.  The constructor takes a key in the form of
// an array of at most (width) integers that should be 0 <= x < (width).
//
// The g(count) method returns a pseudorandom integer that concatenates
// the next (count) outputs from ARC4.  Its return value is a number x
// that is in the range 0 <= x < (width ^ count).
//
/** @constructor */
function ARC4(key) {
  var t, u, me = this, keylen = key.length;
  var i = 0, j = me.i = me.j = me.m = 0;
  me.S = [];
  me.c = [];

  // The empty key [] is treated as [0].
  if (!keylen) { key = [keylen++]; }

  // Set up S using the standard key scheduling algorithm.
  while (i < width) { me.S[i] = i++; }
  for (i = 0; i < width; i++) {
    t = me.S[i];
    j = lowbits(j + t + key[i % keylen]);
    u = me.S[j];
    me.S[i] = u;
    me.S[j] = t;
  }

  // The "g" method returns the next (count) outputs as one number.
  me.g = function getnext(count) {
    var s = me.S;
    var i = lowbits(me.i + 1); var t = s[i];
    var j = lowbits(me.j + t); var u = s[j];
    s[i] = u;
    s[j] = t;
    var r = s[lowbits(t + u)];
    while (--count) {
      i = lowbits(i + 1); t = s[i];
      j = lowbits(j + t); u = s[j];
      s[i] = u;
      s[j] = t;
      r = r * width + s[lowbits(t + u)];
    }
    me.i = i;
    me.j = j;
    return r;
  };
  // For robust unpredictability discard an initial batch of values.
  // See http://www.rsa.com/rsalabs/node.asp?id=2009
  me.g(width);
}

//
// flatten()
// Converts an object tree to nested arrays of strings.
//
/** @param {Object=} result 
  * @param {string=} prop
  * @param {string=} typ */
function flatten(obj, depth, result, prop, typ) {
  result = [];
  typ = typeof(obj);
  if (depth && typ == 'object') {
    for (prop in obj) {
      if (prop.indexOf('S') < 5) {    // Avoid FF3 bug (local/sessionStorage)
        try { result.push(flatten(obj[prop], depth - 1)); } catch (e) {}
      }
    }
  }
  return (result.length ? result : obj + (typ != 'string' ? '\0' : ''));
}

//
// mixkey()
// Mixes a string seed into a key that is an array of integers, and
// returns a shortened string seed that is equivalent to the result key.
//
/** @param {number=} smear 
  * @param {number=} j */
function mixkey(seed, key, smear, j) {
  seed += '';                         // Ensure the seed is a string
  smear = 0;
  for (j = 0; j < seed.length; j++) {
    key[lowbits(j)] =
      lowbits((smear ^= key[lowbits(j)] * 19) + seed.charCodeAt(j));
  }
  seed = '';
  for (j in key) { seed += String.fromCharCode(key[j]); }
  return seed;
}

//
// lowbits()
// A quick "n mod width" for width a power of 2.
//
function lowbits(n) { return n & (width - 1); }

//
// The following constants are related to IEEE 754 limits.
//
startdenom = math.pow(width, chunks);
significance = math.pow(2, significance);
overflow = significance * 2;

//
// When seedrandom.js is loaded, we immediately mix a few bits
// from the built-in RNG into the entropy pool.  Because we do
// not want to intefere with determinstic PRNG state later,
// seedrandom will not call math.random on its own again after
// initialization.
//
mixkey(math.random(), pool);

// End anonymous scope, and pass initial values.
})(
  [],   // pool: entropy pool starts empty
  Math, // math: package containing random, pow, and seedrandom
  256,  // width: each RC4 output is 0 <= x < 256
  6,    // chunks: at least six RC4 outputs for each double
  52    // significance: there are 52 significant digits in a double
);
"use strict";
/*

Copyright 2010-2015 Scott Fortmann-Roe. All rights reserved.

This file may distributed and/or modified under the
terms of the Insight Maker Public License (https://InsightMaker.com/impl).

*/

if(! sn){
	var sn = SchemeNumber;
	var fn = sn.fn;
	var ns = fn["number->string"];

	sn.raise = function(conditionType,message){
		if (message == "division by exact zero"){
			throw "MSG: You cannot divide by 0."
		}else{
			throw "BigNum Error: "+message;
		}
	}
}

var varBank = {};
var functionBank = varBank;

var functionLoaders = [];

function bootCalc(){
	varBank = {};
	functionBank = varBank;
	
	varBank["-parent"] = null;
	varBank["e"] = new Material(2.71828182845904523536);
	varBank["pi"] = new Material(3.14159265358979323846264338);
	varBank["phi"] = new Material(1.61803399);
	for(var i=0; i< functionLoaders.length; i++){
		functionLoaders[i]();
	}
	
	varBank["stringbase"] = StringBase;
	varBank["vectorbase"] = VectorBase;
	if(window.ObjectBase){
		varBank["objectbase"] = ObjectBase;
	}
	if(window.AgentBase){
		varBank["agentbase"] = AgentBase;
	}
}


if(! Agent){
	var Agent = function(){}
}
if(! Agents){
	var Agents = function(){}
}

var PrimitiveStore = function(primitive, type){
	this.primitive = primitive;
	this.type = type; // "value", "totalValue", "object"
}

/*

var Primitive = function(value){
	this.val = value;
}
Primitive.prototype.value = function(){
	return this.val;
}
primitiveBank["x"] = new Primitive(10);
primitiveBank["xy"] = new Primitive(5);*/

Boolean.prototype.toNum = function(){
	return this.valueOf();
}
String.prototype.toNum = function(){
	return this.valueOf();
}
Number.prototype.toNum = function(){
	return this.valueOf();
}
Function.prototype.toNum = function(){
	return this([]);
}

function UserFunction(){
	
}
UserFunction.prototype.toNum = function(){
	if(!this.fn){
		return this([]);
	}else{
		return this.fn([]);
	}
}

var StringObject = {};
var StringBase;
var VectorObject = {};
var VectorBase = {};
var Vector = function(items, names, parent){
	this.parent = parent?parent:VectorBase;
	this.items = items;
	this.names = names;
	this.namesLC = undefined;
	if(names){
		this.namesLC = [];
		for(var i = 0; i < names.length; i++){
			if(names[i]){
				this.namesLC.push(names[i].toLowerCase())  
			}else{
				this.namesLC.push(undefined);
			}
		}
	}
	
}

Vector.prototype.toNum = function(){
	if(this.isNum){
		return this;
	}

	var v = this.fullClone();
	for(var i=0; i<v.items.length; i++){
		v.items[i] = v.items[i].toNum();
	}
	v.isNum = true;
	return v;
};
Vector.prototype.toString = function(){
	//console.log(this.names);
	var items = [];
	for(var i=0; i<this.items.length; i++){
		var str = prepareDisplay(this.items[i].toNum().toString())
		if(this.names && this.names[i]){
			str = this.names[i]+": "+str; 
		}
		items.push(str);
	}
	return '{'+items.join(", ")+'}';
};
Vector.prototype.length = function(){
	return this.items.length;
};
Vector.prototype.cloneCombine = function(other, operation, rhs, noswitch){
	return this.fullClone().combine(other, operation, rhs, noswitch);
}
Vector.prototype.combine = function(other, operation, rhs, noswitch){	
	if(other instanceof Vector){
		if((this.length() != other.length()) && (! this.names) && (! other.names)){
			throw "MSG: Vectors must have equal length when combined.";
		}
	}
	if((other instanceof Vector) && this.names && other.names){
		if((! noswitch) && other.depth() > this.depth()){
			return other.combine(this, operation, ! rhs);
		}
		if(! this.keysMatch(other.namesLC)){
			if(this.items[0] instanceof Vector){
				for(var i=0; i< this.items.length; i++){
					this.items[i].combine(other, operation, rhs, true)
				}
				return this;
			}else{
				throw "MSG: Keys do not match for vector operation."
			}
		}
	}
	for(var i=0; i< this.length(); i++){
		var x;
		if(other instanceof Vector){
			if(this.names && other.names){
				var index = other.namesLC.indexOf(this.namesLC[i]);
				if(this.names=="*"){
					index = -2;
				}
				if(isUndefined(index) || index == -1){
					index = other.names.indexOf("*");
				}
				if(isUndefined(index) || index == -1){
					throw "MSG: Mismatched keys for vector operation."
				}
				if( index == -2){
					x = undefined;
				}else{
					x = other.items[index];
				}
			}else{
				x = other.items[i];
			}
		}else{
			x = other;
		}
		if(isDefined(x)){
			if(rhs){
				this.items[i] = operation(x, this.items[i]);
			}else{
				this.items[i] = operation(this.items[i], x);
			}
		}
	}
	if(this.names && this.names.indexOf("*") > -1 && (other instanceof Vector) && other.names){
		var starred = this.items[this.names.indexOf("*")]
		for(var i = 0; i < other.names.length; i++){
			if(other.names[i] && (this.namesLC.indexOf(other.namesLC[i]) == -1 || other.names == "*")){

				if(rhs){
					this.items.push(operation(other.items[i], starred));
				}else{
					this.items.push(operation(starred, other.items[i]));
				}
				this.names.push(other.names[i])
				this.namesLC.push(other.namesLC[i])
			}
		}
	}
	return this;
};
Vector.prototype.collapseDimensions = function(target){
	if(target instanceof Vector){
		if(this.depth() == target.depth()){
			return this;
		}else{
			var selector = [];
			var base = this;
			var targetLevel = target;
			for(var i=0; i<this.depth(); i++){
				if(!(targetLevel instanceof Vector)){
					selector.push(function(x){return functionBank["sum"](x[0].items)});
					base = base.items[0];
				}else if(keysMatch(base.namesLC, targetLevel.namesLC)){
					selector.push("*");
					base = base.items[0];
					targetLevel = targetLevel.items[0]
				}else{
					selector.push(function(x){return functionBank["sum"](x[0].items)});
					
					base = base.items[0];
				}
			}
			if(targetLevel.items){
				throw "MSG: Keys do not match for vector collapsing.";
			}
			return selectFromMatrix(this, selector);
		}
	}else{
		return functionBank["sum"]([functionBank["flatten"]([this])]);
	}
};
function keysMatch(thisNames, keys){
	if(keys.indexOf("*") == -1){
		for(var i = 0; i < thisNames.length; i++){
			if(thisNames[i] != "*"){
				if(isUndefined(thisNames[i])){
					return false;
				}
				if(keys.indexOf(thisNames[i])==-1){
					return false
				}
			}
		}
	}
	if(thisNames.indexOf("*") == -1){
		for(var i = 0; i < keys.length; i++){
			if(keys[i] != "*"){
				if(isUndefined(keys[i])){
					return false;
				}
				if(thisNames.indexOf(keys[i])==-1){
					return false
				}
			}
		}
	}
	return true;
}
Vector.prototype.depth = function(){
	if(this.items.length == 0 || !(this.items[0] instanceof Vector)){
		return 1;
	}
	return this.items[0].depth()+1;
};
Vector.prototype.keysMatch = function(keys){
	if(this.names){
		return keysMatch(this.namesLC, keys)
	}else{
		return false
	}
	return true;
};
Vector.prototype.cloneApply = function(operation){
	return this.fullClone().apply(operation);
};
Vector.prototype.apply = function(operation){
	for(var i=0; i < this.items.length; i++){
		this.items[i] = operation(this.items[i], this.names?(this.names[i]):undefined);
	}
	return this;
};

Vector.prototype.stackApply = function(operation){
	//console.log("Stacking")
	if(this.depth() == 1){
		return operation(this);
	}
	var s = this.stack();
	//console.log(s);
	return s.recurseApply(operation);
};
Vector.prototype.stack = function(selector){
	//console.log("Stack!")
	var res = [];
	
	selector = selector || [0];
	
	var base = this.select(selector);
	
	
	for(var i=1; i<this.items.length; i++){
		selector[0] = i;
		var alt = this.select(selector);
		if((base instanceof Vector ) && (alt instanceof Vector)){
			if((base.names && (! alt.names)) || (alt.names && (! base.names))){
				throw "MSG: Mismatched keys for vector collapsing.";
			}else if(base.items.length != alt.items.length){
				throw "MSG: Vectors of unequal size.";
			}
		}else if(! ((base instanceof Vector ) || (alt instanceof Vector)) ){
			throw "MSG: Mismatched keys for vector collapsing.";
		}
	}
	selector[0] = 0
	
	selector.push(0)
	
	//console.log(base.items.length);
	for(var i = 0; i < base.items.length; i++){
		//console.log(i)
		selector[selector.length-1] = base.names?base.namesLC[i]:i;
		
		if(base.items[i] instanceof Vector){
			res.push(this.stack(selector.slice()));
		}else{
			var vecs = [];
			var baseSub;
			for(var j = 0; j < this.items.length; j++){
				var newSelector = selector.slice();
				newSelector[0] = j
				
				var item = this.select(newSelector);
				if(item instanceof Vector){
					throw("MSG: Number where vector expected in vector collapsing.")
				}
				vecs.push(item);
			}
			var v = new Vector(vecs);
			v.terminateApply = true; 
			res.push(v);
		}
	}
	
	return new Vector(res, base.names?base.names.slice():undefined);
};
Vector.prototype.select = function(selector){
	var b = this;
	
	for(var s = 0; s < selector.length; s++){
		if(! b.items){
			throw "MSG: Number where vector expected in vector collapsing.";
		}
		if((selector[s] instanceof String) || (typeof selector[s] == "string")){
			var ind = b.namesLC.indexOf(selector[s].valueOf());
			if(ind == -1){
				throw "MSG: Mismatched keys for vector collapsing.";
			}
			b = b.items[ind];
		}else{
			b = b.items[selector[s]];
		}
	}
	return b;
};
Vector.prototype.recurseApply = function(operation){
	for(var i=0; i < this.items.length; i++){
		if((this.items[i] instanceof Vector) && !(this.items[i].terminateApply)){
			this.items[i] = this.items[i].recurseApply(operation);
		}else{
			this.items[i] = operation(this.items[i]);
		}
	}
	return this;
};
Vector.prototype.fullNames = function(){
	if(this.items[0] instanceof Vector){
		var subn = this.items[0].fullNames()
		var n = [];
		for(var i = 0; i < this.names.length; i++){
			for(var j = 0; j< subn.length; j++){
				n.push([this.names[i]].concat(subn[j]))
			}
		}
		//console.log(n)
		return n;
	}else{
		
		var n = [];
		for(var i=0; i<this.names.length; i++){
			n.push([this.names[i]]);
		}
		return n
	}
}
Vector.prototype.clone = function(){
	var newItems = [];
	for(var i=0; i<this.items.length; i++){
		if(this.items[i] instanceof Vector){
			newItems.push(this.items[i].clone());
		}else{
			newItems.push(this.items[i]);
		}
	}
	return new Vector(newItems, this.names?this.names.slice():undefined, this.parent);
};
Vector.prototype.fullClone = function(){
	var newItems = [];
	for(var i=0; i<this.items.length; i++){
		if(this.items[i].fullClone){
			newItems.push(this.items[i].fullClone());
		}else{
			newItems.push(this.items[i]);
		}
	}
	return new Vector(newItems, this.names?this.names.slice():undefined, this.parent);
};

Vector.prototype.equals = function(vec){
	if(this.length() != vec.length()){
		return false;
	}
	
	for(var i = 0; i < this.items.length; i++){
		if(! strictEquals(this.items[i], vec.items[i])){
			return false;
		}
	}
	return true;
}


if(! Primitive){
	var Primitive = function(n){
		this.v = n;
		this.vector = new Vector([],[], VectorBase);
	}
	Primitive.prototype.value = function(){
		return this.v.fullClone();
	};
	Primitive.prototype.setValue = function(newValue){
		this.v = newValue;
		return newValue;
	};
	Primitive.prototype.toNum = function(){
		return this.v.fullClone();
	};
	Primitive.prototype.toString = function(){
		return "Primitive Reference";
	};
	
	
}

function strictEquals(a,b){
	if((a instanceof Agent) || (b instanceof Agent)){
		if((a instanceof Agent) && (b instanceof Agent)){
			if(a.instanceId == b.instanceId){
				return true
			}
		}
	}else if((a instanceof Vector) || (b instanceof Vector)){
		if((a instanceof Vector) && (b instanceof Vector)){
			if(a.equals(b)){
				return true;
			}
		}
	}else if(eq(a,b)){
		return true;
	}
	return false;
}

function createTree(input){
	var cstream = new org.antlr.runtime.ANTLRStringStream(input.replace(/\\n/g,"\n"));
	var lexer = new FormulaLexer(cstream);
	var tstream = new org.antlr.runtime.CommonTokenStream(lexer);
	var parser = new FormulaParser(tstream);
	var parsedTree = parser.lines();
	var root = convertToObject(parsedTree.tree, parser);
	if (isLocal()) {
		//console.log(root);
	}
	return root;
}
function trimTree(root, primitiveBank){
	return trimNode(root, primitiveBank);	
}
function evaluateTree(root, varBank){
	evaluatingLine = undefined;
	try {
		return evaluateNode(root, varBank);	
	}catch(err){
		if(err.returnVal){
			return err.data;
		}else{
			throw(err);
		}
	}
}

var PB = {"test": new Primitive(new Material(3)),"a": new Primitive(new Material(1)),"b": new Primitive(new Material(2)),"c": new Primitive(new Material(3))};


function evaluate(input, dontToNum) {
	//console.log(input);
	
	PB["test vector"] = new Primitive(new Vector([new Material(1), new Material(2), new Material(3)],[], VectorBase));
	
	PB["test vector 2"] = new Primitive(new Vector([new Material(1.2), new Material(2.9), new Material(3)],[], VectorBase));
	
	var root = trimTree(createTree(input), PB);
	
	//console.log(root);
	var x;
	try {
		
		
		x = evaluateTree(root, varBank)
		
		if(! dontToNum){
			x = x.toNum();
		}

		
 	}catch(err){
		 if(err=="PLOT"){
			var res = {isPlot: true};
			res.data = [];
			var newBank = {};
			newBank["-parent"] = varBank;
 			for(var i = -100; i <= 100; i += 1){
				newBank["x"] = new Material(i/10);
				res.data.push([i/10, 0+evaluateTree(root, newBank).value]);
 			}
			
			return res;
 		}else{
 			throw(err);
 		}
 	}
	if(x instanceof Material){
		if(x.value.toPrecision){
			if(x.value === 0){
				x.value = "0";
			}else{
				x.value = x.value.toPrecision(21);
			}
		}
		if(x.value.substr(x.value.length-1,1)=="."){
			x.value=x.value.substring(0, x.value.length-1)
		}
		
		x.value=x.value.replace(/\.?\+\.?/g,"+");
		x.value=x.value.replace(/\.?\-\.?/g,"-");
		x.value=x.value.replace(/\.i/g,"i");
		x.value=x.value.replace(/(\d)i/g,"$1*<i>i</i>");
		x.value=x.value.replace(/\.e/g,"e");
		x.value=x.value.replace(/e\+/g,"e");
		
		if(x.value=="+inf.0"){
			x.value="Infinity";
		}else if(x.value=="-inf.0"){
			x.value="-Infinity";
		}
	}
	
	return x;
}

var TreeNode = function(text, typeName, line){
	this.origText = text;
	this.text = text.toLowerCase();
	this.typeName = typeName;
	this.line = line;
	this.children = [];
};

function convertToObject(node, parser) {
	var t = node.getToken();
	var current = new TreeNode( t.getText(), parser.getTokenNames()[t.getType()], t.line);
	//Add children
	/*console.log("--")
	console.log(t);
	console.log(current);*/
	
	if (node.getChildCount() > 0) {
		var children = node.getChildren();
		for (var i=0; i<children.length; i++) {
			current.children.push(convertToObject(children[i], parser));

			if((! current.line) && current.children[current.children.length-1].line){
				current.line = current.children[current.children.length-1].line;
			}
		}
	}

	return current;
}


var funcEvalMap = new Object();
var evaluatingLine = null;

funcEvalMap["LINES"] = function(node, scope) {
	if(node.children.length==0){
		return new Material(0);
	}
	var response;
	for(var i=0; i<node.children.length; i++){
		if(node.children[i].text=="return"){
			throw {returnVal: true, data: evaluateNode(node.children[i].children[0], scope)};
		}else{
			response =  evaluateNode(node.children[i], scope);
		}
	}
	return response;
};

funcEvalMap["NEGATE"] = function(node, scope) {
	return negate(evaluateNode(node.children[0], scope).toNum());
};
function negate(x){
	if(x instanceof Vector){
		return x.cloneApply(negate);
	}
	
	if((typeof x == 'boolean')){
		throw "MSG: Cannot convert Booleans to Numbers.";
	}
	if((x instanceof Agent)){
		throw "MSG: Cannot convert Agents to Numbers.";
	}
	
	return new Material(fn["-"](x.value), x.units);
};

funcEvalMap["AND"] = function(node, scope) {
	return funAnd(evaluateNode(node.children[0], scope).toNum(), evaluateNode(node.children[1], scope).toNum())
};

function funAnd(lhs,rhs){
	if(lhs instanceof Vector){
		return lhs.cloneCombine(rhs, funAnd, false);
	}else if(rhs instanceof Vector){
		return rhs.cloneCombine(lhs, funAnd, true);
	}
	
	return trueValue(lhs) && trueValue(rhs);
};

funcEvalMap["OR"] = function(node, scope) {
	return funOr(evaluateNode(node.children[0], scope).toNum(), evaluateNode(node.children[1], scope).toNum())
};

function funOr(lhs,rhs){
	if(lhs instanceof Vector){
		return lhs.cloneCombine(rhs, funOr, false);
	}else if(rhs instanceof Vector){
		return rhs.cloneCombine(lhs, funOr, true);
	}
	
	return trueValue(lhs) || trueValue(rhs);
};

funcEvalMap["XOR"] = function(node, scope) {
	return funXor(evaluateNode(node.children[0], scope).toNum(), evaluateNode(node.children[1], scope).toNum())
};

function funXor(lhs,rhs){
	if(lhs instanceof Vector){
		return lhs.cloneCombine(rhs, funXor, false);
	}else if(rhs instanceof Vector){
		return rhs.cloneCombine(lhs, funXor, true);
	}
	
	return (trueValue(lhs) || trueValue(rhs)) && ! (trueValue(lhs) && trueValue(rhs));
};


funcEvalMap["NOT"] = function(node, scope) {
	return fNot(evaluateNode(node.children[0], scope).toNum());
};

function fNot(x){
	if(x instanceof Vector){
		return x.cloneApply(fNot);
	}
	
	return ! trueValue(x);
};

funcEvalMap["NOTEQUALS"] = function(node, scope) {
	return neq(evaluateNode(node.children[0], scope).toNum(), evaluateNode(node.children[1], scope).toNum());
};

function neq(lhs, rhs){
	if((typeof lhs == "boolean" && !(rhs instanceof Vector)) || (typeof rhs == "boolean" && !(lhs instanceof Vector))){
		return trueValue(lhs)!=trueValue(rhs);
	}
	if(( ((lhs instanceof String) || (typeof lhs == "string")) && !(rhs instanceof Vector)) || ( ((rhs instanceof String) || (typeof rhs == "string")) && !(lhs instanceof Vector))){
		return (lhs.toLowerCase?lhs.toLowerCase():lhs) != (rhs.toLowerCase?rhs.toLowerCase():rhs);
	}
	
	
	if(lhs instanceof Vector){
		return lhs.cloneCombine(rhs, neq, false);
	}else if(rhs instanceof Vector){
		return rhs.cloneCombine(lhs, neq, true);
	}
	
	if((! (lhs instanceof Material)) || (! (rhs instanceof Material))){
		return lhs != rhs;
	}
	
	if (lhs.units !== rhs.units) {
		var scale = convertUnits(rhs.units, lhs.units);
		if (scale === 0) {
			return true;
		} else {
			rhs.value = fn["*"](rhs.value, scale);
			rhs.units = lhs.units;
		}
	}

	return ! fn["="](lhs.value, rhs.value);
};

funcEvalMap["EQUALS"] = function(node, scope) {
	return eq(evaluateNode(node.children[0], scope).toNum(), evaluateNode(node.children[1], scope).toNum());
};

function eq(lhs, rhs){
	if(((typeof lhs) == "boolean" && !(rhs instanceof Vector)) || ((typeof rhs) == "boolean" && !(lhs instanceof Vector))){
		return trueValue(lhs)==trueValue(rhs);
	}
	if(( ( (typeof lhs == "string") || (lhs instanceof String) ) && !(rhs instanceof Vector)) || (( (typeof rhs == "string") || (rhs instanceof String) ) && !(lhs instanceof Vector))){
		return (lhs.toLowerCase?lhs.toLowerCase():lhs) == (rhs.toLowerCase?rhs.toLowerCase():rhs);
	}
	
	
	if(lhs instanceof Vector){
		return lhs.cloneCombine(rhs, eq, false);
	}else if(rhs instanceof Vector){
		return rhs.cloneCombine(lhs, eq, true);
	}
	
	if((! (lhs instanceof Material)) || (! (rhs instanceof Material))){
		return lhs == rhs;
	}
	
	if (lhs.units !== rhs.units) {
		var scale = convertUnits(rhs.units, lhs.units);
		if (scale === 0) {
			return false;
		} else {
			rhs.value = fn["*"](rhs.value, scale);
			rhs.units = lhs.units;
		}
	}
	

	return fn["="](lhs.value, rhs.value);
};

function comparisonValid(lhs, rhs){
	if((lhs instanceof String) || (typeof lhs == 'string') || (rhs instanceof String) || (typeof rhs == 'string')){
		throw "MSG: Cannot use Strings in logical inequality comparisons.";
	}
	if((lhs instanceof Agent) || (rhs instanceof Agent)){
		throw "MSG: Cannot use Agents in logical inequality comparisons.";
	}
}

funcEvalMap["LT"] = function(node, scope) {
	return lessThan(evaluateNode(node.children[0], scope).toNum(), evaluateNode(node.children[1], scope).toNum());
};
function lessThan(lhs, rhs){
	
	comparisonValid(lhs, rhs);
	
	if(lhs instanceof Vector){
		return lhs.cloneCombine(rhs, lessThan, false);
	}else if(rhs instanceof Vector){
		return rhs.cloneCombine(lhs, lessThan, true);
	}
	
	if (lhs.units !== rhs.units) {
		var scale = convertUnits(rhs.units, lhs.units);
		if (scale === 0) {
			unitAlert(lhs.units, rhs.units, "comparison");
		} else {
			rhs.value = fn["*"](rhs.value, scale);
			rhs.units = lhs.units;
		}
	}


	return fn["<"](lhs.value, rhs.value);;
};

funcEvalMap["LTEQ"] = function(node, scope) {
	return lessThanEq(evaluateNode(node.children[0], scope).toNum(), evaluateNode(node.children[1], scope).toNum());
};
function lessThanEq(lhs, rhs){
	
	comparisonValid(lhs, rhs);
	
	if(lhs instanceof Vector){
		return lhs.cloneCombine(rhs, lessThanEq, false);
	}else if(rhs instanceof Vector){
		return rhs.cloneCombine(lhs, lessThanEq, true);
	}
	
	if (lhs.units !== rhs.units) {
		var scale = convertUnits(rhs.units, lhs.units);
		if (scale === 0) {
			unitAlert(lhs.units, rhs.units, "comparison");
		} else {
			rhs.value = fn["*"](rhs.value, scale);
			rhs.units = lhs.units;
		}
	}
	

	return fn["<="](lhs.value, rhs.value);
};

funcEvalMap["GT"] = function(node, scope) {
	return greaterThan(evaluateNode(node.children[0], scope).toNum(), evaluateNode(node.children[1], scope).toNum());
};

function greaterThan(lhs, rhs){
	
	comparisonValid(lhs, rhs);
	
	if(lhs instanceof Vector){
		return lhs.cloneCombine(rhs, greaterThan, false);
	}else if(rhs instanceof Vector){
		return rhs.cloneCombine(lhs, greaterThan, true);
	}
	
	if (lhs.units !== rhs.units) {
		var scale = convertUnits(rhs.units, lhs.units);
		if (scale === 0) {
			unitAlert(lhs.units, rhs.units, "comparison");
		} else {
			rhs.value = fn["*"](rhs.value, scale);
			rhs.units = lhs.units;
		}
	}
	

	return fn[">"](lhs.value, rhs.value);
};

funcEvalMap["GTEQ"] = function(node, scope) {
	return greaterThanEq(evaluateNode(node.children[0], scope).toNum(), evaluateNode(node.children[1], scope).toNum());
};

function greaterThanEq(lhs, rhs){
	
	comparisonValid(lhs, rhs);
	
	
	if(lhs instanceof Vector){
		return lhs.cloneCombine(rhs, greaterThanEq, false);
	}else if(rhs instanceof Vector){
		return rhs.cloneCombine(lhs, greaterThanEq, true);
	}
	
	
	if (lhs.units !== rhs.units) {
		var scale = convertUnits(rhs.units, lhs.units);
		if (scale === 0) {
			unitAlert(lhs.units, rhs.units, "comparison");
		} else {
			rhs.value = fn["*"](rhs.value, scale);
			rhs.units = lhs.units;
		}
	}
	

	return fn[">="](lhs.value, rhs.value);
};

funcEvalMap["PLUS"] = function(node, scope) {
	return plus(evaluateNode(node.children[0], scope).toNum(), evaluateNode(node.children[1], scope).toNum());
};

function plus(lhs, rhs){
	if(lhs instanceof Vector){
		return lhs.cloneCombine(rhs, plus, false);
	}else if(rhs instanceof Vector){
		return rhs.cloneCombine(lhs, plus, true);
	}
	
	if((typeof lhs == 'boolean') || (typeof rhs == 'boolean')){
		throw "MSG: Cannot convert Booleans to Numbers.";
	}
	if((lhs instanceof Agent) || (rhs instanceof Agent)){
		throw "MSG: Cannot convert Agents to Numbers.";
	}
	if(((typeof lhs == 'string') || (lhs instanceof String)) || ((typeof rhs == 'string') || (rhs instanceof String)) ){
		var s = new String(lhs.toString()+rhs.toString());
		s.parent = StringBase;
		return s;
	}
	
	if (lhs.units !== rhs.units) {
		var scale = convertUnits(rhs.units, lhs.units);
		if (scale === 0) {
			unitAlert(lhs.units, rhs.units, "addition");
		} else {
			rhs.value = fn["*"](rhs.value, scale);
			rhs.units = lhs.units;
		}
	}
	
	return new Material(fn["+"](lhs.value, rhs.value), rhs.units);

};

funcEvalMap["MINUS"] = function(node, scope) {
	return minus(evaluateNode(node.children[0], scope).toNum(), evaluateNode(node.children[1], scope).toNum());
};

function minus(lhs, rhs){

	if(lhs instanceof Vector){
		return lhs.cloneCombine(rhs, minus, false);
	}else if(rhs instanceof Vector){
		return rhs.cloneCombine(lhs, minus, true);
	}
	
	if((typeof lhs == 'boolean') || (typeof rhs == 'boolean')){
		throw "MSG: Cannot convert Booleans to Numbers.";
	}
	if((lhs instanceof Agent) || (rhs instanceof Agent)){
		throw "MSG: Cannot convert Agents to Numbers.";
	}
	
	if (lhs.units !== rhs.units) {
		var scale = convertUnits(rhs.units, lhs.units);
		if (scale === 0) {
			unitAlert(lhs.units, rhs.units, "subtraction");
		} else {
			rhs.value = fn["*"](rhs.value, scale);
			rhs.units = lhs.units;
		}
	}
	
	

	return new Material(fn["-"](lhs.value, rhs.value), rhs.units);
};

funcEvalMap["MULT"] = function(node, scope) {
	return mult(evaluateNode(node.children[0], scope).toNum(), evaluateNode(node.children[1], scope).toNum());
};

function mult(lhs, rhs){
	if(lhs instanceof Vector){
		return lhs.cloneCombine(rhs, mult, false);
	}else if(rhs instanceof Vector){
		return rhs.cloneCombine(lhs, mult, true);
	}
	
	if((typeof lhs == 'boolean') || (typeof rhs == 'boolean')){
		throw "MSG: Cannot convert Booleans to Numbers.";
	}
	if((lhs instanceof Agent) || (rhs instanceof Agent)){
		throw "MSG: Cannot convert Agents to Numbers.";
	}
	
	var x = fn["*"](lhs.value, rhs.value);
	if(lhs.units && rhs.units){
		lhs.units.addBase(); rhs.units.addBase();
		return new Material(fn["*"](fn["*"](lhs.units.toBase, x), rhs.units.toBase), lhs.units.multiply(rhs.units, 1));
	}else if(lhs.units){
		return new Material(x, lhs.units);
	}else if(rhs.units){
		return new Material(x, rhs.units);
	}
	
	return new Material(x);
};

funcEvalMap["DIV"] = function(node, scope) {
	return div(evaluateNode(node.children[0], scope).toNum(), evaluateNode(node.children[1], scope).toNum());
};

function div(lhs, rhs){
	if(lhs instanceof Vector){
		return lhs.cloneCombine(rhs, div, false);
	}else if(rhs instanceof Vector){
		return rhs.cloneCombine(lhs, div, true);
	}
	
	if((typeof lhs == 'boolean') || (typeof rhs == 'boolean')){
		throw "MSG: Cannot convert Booleans to Numbers.";
	}
	if((lhs instanceof Agent) || (rhs instanceof Agent)){
		throw "MSG: Cannot convert Agents to Numbers.";
	}
	
	var x = fn["/"](lhs.value, rhs.value);
	if(lhs.units && rhs.units){
		lhs.units.addBase(); rhs.units.addBase();
		return new Material(fn["/"](fn["*"](lhs.units.toBase, x), rhs.units.toBase), lhs.units.multiply(rhs.units, -1));
	}else if(lhs.units){
		return new Material(x, lhs.units);
	}else if(rhs.units){
		return new Material(x, rhs.units.power(-1));
	}
	
	return new Material(x);
	
};


funcEvalMap["POWER"] = function(node, scope) {
	if(node.children.length == 1){
		return evaluateNode(node.children[0], scope);
	}

	var rhs = evaluateNode(node.children[node.children.length - 1], scope).toNum();
	
	for(var j = node.children.length - 1; j > 0; j--){
		
		var lhs = evaluateNode(node.children[j - 1], scope).toNum();
		if ((rhs instanceof Vector) || ! rhs.units) {
			rhs = power(lhs, rhs);
		} else {
			throw "MSG: Exponents may not have units.";
		}
	}
	return rhs;
};

function power(lhs, rhs){
	if(lhs instanceof Vector){
		return lhs.cloneCombine(rhs, power, false);
	}else if(rhs instanceof Vector){
		return rhs.cloneCombine(lhs, power, true);
	}
	
	if((typeof lhs == 'boolean') || (typeof rhs == 'boolean')){
		throw "MSG: Cannot convert Booleans to Numbers.";
	}
	if((lhs instanceof Agent) || (rhs instanceof Agent)){
		throw "MSG: Cannot convert Agents to Numbers.";
	}
	
	var x = lhs.value;
	if(typeof x == "number"){
		x = sn("#e"+x)
	}
	return new Material(fn.expt(x, rhs.value), lhs.units?lhs.units.power(rhs.value):undefined);
};

funcEvalMap["MOD"] = function(node, scope) {
	return doMod(evaluateNode(node.children[0], scope).toNum(), evaluateNode(node.children[1], scope).toNum());
};

function doMod(lhs, rhs){
	if(lhs instanceof Vector){
		return lhs.cloneCombine(rhs, doMod, false);
	}else if(rhs instanceof Vector){
		return rhs.cloneCombine(lhs, doMod, true);
	}
	
	if((typeof lhs == 'boolean') || (typeof rhs == 'boolean')){
		throw "MSG: Cannot convert Booleans to Numbers.";
	}
	if((lhs instanceof Agent) || (rhs instanceof Agent)){
		throw "MSG: Cannot convert Agents to Numbers.";
	}
	
	if (! rhs.units) {
		return new Material(fn.mod(lhs.value, rhs.value), lhs.units);
	} else {
		throw "MSG: The right hand side of \"mod\" may not have units."
	}
};


funcEvalMap["IDENT"] = function(node, scope) {
	var varName = node.text;
	
	while ( !(varName in scope) ) {
		if ( scope["-parent"] ) {
			scope = scope["-parent"];
		} else {
			if(varName == "x" && window.isCalc){
				throw "PLOT" ;
			}else if(varName=="i"){//imaginary number
				return new Material(sn("i"));
			}else{
				throw "MSG: The variable or function \"" + node.origText + "\" does not exist.";
			}
		}
	}
	
	var v = scope[varName];
	
	if((v instanceof TreeNode) && v.typeName == "ARRAY"){
		v = evaluateNode(v, scope);
	}
	if(v.fullClone && !(v instanceof Vector)){
		return v.fullClone();
	}else{
		return v;
	}
};

funcEvalMap["NEW"] = function(node, scope) {
	
	var base = evaluateNode(node.children[0], scope);
	if(base instanceof Vector){
		var n = new Vector([],undefined, base);
		var constructor;
		var r;
		try{
			r = selectFromVector(base, "constructor");
			constructor = r.data;
		}catch(err){}
		
		if(! constructor){
			if(node.children.length==2 && node.children[1].children.length>0){
				throw "MSG: No constructor available for '"+node.children[0].text+"'.";
			}
		}else{
			if(node.children.length==2){
				callFunction(constructor, node.children[1], scope, n, r.parent);
			}else{
				callFunction(constructor, {children:[]}, scope, n, r.parent);
			}
		}
		return n;
	}else{
		throw "MSG: 'New' can only be use to create instances of Vectors.";
	}
}

funcEvalMap["INNER"] = function(node, scope) {
	
	var base = evaluateNode(node.children[0], scope);
	
	if(node.children.length==2 & node.children[1].typeName=="FUNCALL"){
		return callFunction(base, node.children[1], scope);
	}

	var lastSelf; // for "self" binding
	var lastBase; // for "self" binding

	if(scope.self && node.children[0].text=="parent"){
		lastSelf = scope.self;
	}else if(!((base instanceof Function) || (base instanceof UserFunction))){
		lastSelf = base;
	}
	
	for(var i=1; i< node.children.length; i++){
		//console.log(node.children[i].typeName)
		
		
		if(node.children[i].typeName == "SELECTOR" ){
			if(node.children[i].children[0].typeName == "DOTSELECTOR"){
				
				for(var j=0; j<node.children[i].children[0].children.length; j++){
					var res = [];
					if(node.children[i].children[0].children[j].text){
						res.push(node.children[i].children[0].children[j].text);
					}else{
						res.push(node.children[i].children[0].children[j].valueOf());
					}
					try{
						base = selectFromMatrix(base, res);
					}catch(err){
						if(base instanceof Primitive && !(base instanceof Agent)){
							base = base.toNum();
							j--;
						}else{
							throw(err);
						}
					}
					
					if(!((base instanceof Function) || (base instanceof UserFunction))){
						lastSelf = base;
						lastBase = base;
					}
				}
				
			}else{
			
				if(base instanceof Primitive){
					base = base.toNum();
			
					if(!((base instanceof Function) || (base instanceof UserFunction))){
						lastSelf = base;
						lastBase = base;
					}
				}
		
		
				try{
					base = selectFromMatrix(base, createMatrixSelector(node.children[i], scope, 0, true));
				}catch(err){
					if(base instanceof Primitive ){
						base = base.toNum();
						i--;
					}else{
						throw(err);
					}
				}
				
				if(!((base instanceof Function) || (base instanceof UserFunction))){
					lastSelf = base;
					lastBase = base;
				}
			}
			
			
		}else{//"FUNCALL"
			base = callFunction(base, node.children[i], scope, lastSelf, lastBase);
			
			if(!((base instanceof Function) || (base instanceof UserFunction))){
				lastSelf = base;
				lastBase = base;
			}
		}
	}
	return base;
};

function callFunction(base, node, scope, lastSelf, lastBase){
	if((typeof base != "function") && ! (base instanceof UserFunction)){
		//if(isLocal()){
		//	console.log(base);
		//}
		throw "MSG: Trying to call a non-function.";
	}
	
	var vals = [];
	var fingerprint = "";
	if(node instanceof Array){
		vals = node;
	}else{
		if(! node.functionFingerprint){
			node.functionFingerprint = "FINGERPRINT-" + Math.random();
		}
		fingerprint = node.functionFingerprint;

		if(base.delayEvalParams){
			//don't evaluate params right away. needed for IfThenElse and short circuiting
			for (var j = 0; j < node.children.length; j++){
				vals.push({node: node.children[j], scope: scope});
			}
		}else{
			for (var j = 0; j < node.children.length; j++){
				var item = evaluateNode(node.children[j], scope);
				if(item.fullClone && ! (item instanceof Vector)){
					item = item.fullClone();
				}
				vals.push(item);
			}
		}
	}
	
	var fn;
	if (base.fn) {
		 fn = base.fn; // user defined function
	} else {
		node.delayEvalParams = base.delayEvalParams;
		fn = base; //built-in
	}
	
	var oldLine = evaluatingLine;
	
	var x = fn(vals, fingerprint, lastSelf, lastBase);
	
	evaluatingLine = oldLine;
	
	return x;
	
}

function createMatrixSelector(node, scope, offset, createFunctions){
	var selector = [];
	offset = offset || 0;
	for(var i=offset; i<node.children.length; i++){
		var child = node.children[i];
		if(child.typeName=="MULT"){
			selector.push("*");
		}else{
			var x = evaluateNode(node.children[i], scope);
			if((typeof x == "function") || (x instanceof UserFunction)){
				if(typeof x == "function"){
					var fn = x;
				}else{
					var fn = x.fn;
				}
				(function(f){
				selector.push(function(x){
					if(! x[0].stackApply){
						throw "MSG: Can't apply function across elements of non-vector."
					}
					
					return x[0].stackApply(function(x){
						return f([x]);	
					});
				})
				})(fn);
			}else{
				selector.push(x.toNum());
			}
		}
	}
	return selector
}

function selectFromMatrix(mat, items, fill){
	//console.log("--")
	//console.log(items)

	var m = mat;
	if(! (m instanceof Vector)){
		if(m.vector){
			m = m.vector;
		}else if(m.parent){
			m = new Vector([],[], m.parent);
		}
	}
	if(isUndefined(fill) && m.fullClone){
		m = m.fullClone();
	}
	//console.log("--")
	
	var root = selectFromVector(m, items.shift(), items.length==0?fill:undefined, isDefined(fill))
	var children = [];
	if(root.collapsed){
	 	children = [root.data];
	}else{
		children = root.data.items;
	}
	
	while(items.length > 0){
		//console.log("iteration");
		//console.log(children);
		var newChildren = [];
		var selector = items.shift();
		//console.log(selector)
		for(var i = 0; i < children.length; i++){
			//console.log("child")
			//console.log(children[i])
			if(! (children[i] instanceof Vector)){
			//	if(children[i].parent instanceof Vector){
			//		children[i] = children[i].parent.fullClone();
			//	}else if(children[i].vector instanceof Vector){
			//		children[i] = children[i].vector.fullClone();
			//	}else{
					throw "MSG: No element available for: "+selector;
			//	}
			}
			//console.log(children[i])
			var vec = selectFromVector(children[i], selector, items.length==0?fill:undefined);
			//console.log(vec);
			
			if(vec.collapsed){

				if(! fill){
					children[i].items = [vec.data];
					children[i].names = ["!!BREAKOUT DATA"]; 
				}
			
				newChildren=newChildren.concat(vec.data)
			}else{
				newChildren=newChildren.concat(vec.data.items)

				if(! fill){
					children[i].items = vec.data.items;
					children[i].names = vec.data.names;
				}
			}
		}
		children = newChildren;
	}
	
	//console.log("done:")
	//console.log(root.data)
	//console.log(root);
	return doBreakouts(root.data);
}

function doBreakouts(vec){
	if(! (vec instanceof Vector)){
		return vec;
	}
	if(vec.items.length==1 && vec.names && vec.names[0]=="!!BREAKOUT DATA"){
		return doBreakouts(vec.items[0]);
	}
	for(var i=0; i < vec.items.length; i++){
		vec.items[i] = doBreakouts(vec.items[i])
	}
	return vec;
}

function selectFromVector(vec, items, fill, doNotClone){
	
	

	if(items=="*"){
		return {data: vec};
	}else if(typeof items == "function"){
		return {data: items([vec]), collapsed: true};
	}else if(items=="parent"){
		if(vec.parent){
			return {data: doNotClone?vec.parent:vec.parent.fullClone(), collapsed:true};
		}else{
			throw "MSG: Vector does not have a parent.";
		}
	}

	if(items instanceof Vector){
		var res = [];
		var names = vec.names?[]:undefined;
		for(var i=0; i < items.items.length; i++){
			var v = items.items[i];
			var shouldSelect = true;
			if(typeof v == "boolean"){
				if(v){
					v = new Material(i+1);
				}else{
					shouldSelect = false;
				}
			}
			if(shouldSelect){
				var r = selectElementFromVector(vec, v, fill)
				res.push(r.value);
				if(names){
					names.push(r.name);
				}
			}
		}
		return {collapsed: false, parent: vec, data: new Vector(res, names, vec.parent)};
	}else{
		return {collapsed: true, parent: vec, data: selectElementFromVector(vec, items, fill).value};
	}
}


function selectElementFromVector(vec, item, fill){
	
	/*if(! (vec instanceof Vector)){
		if(vec.vector){
			vec = vec.vector;
		}else if(vec.parent){
			vec = vec.parent;
		}else{
			throw "MSG: Upping failed."
		}
	}*/
		
	
	var name = undefined;
	var value = undefined;
	
	var index;

	
	if( (item instanceof String) || (typeof item == "string")){
		try{
			if(isUndefined(fill)){
				if(!vec.names){
					throw "MSG: Key '"+item+"' not in vector."
				}
			}
			if(vec.names){
				index = -1;
				var lc = item.toLowerCase();
				for(var i=0; i<vec.names.length; i++){
					if(vec.names[i] && vec.names[i].toLowerCase() === lc){
						index = i;
						break;
					}
				}
				if(index<0 || isUndefined(index)){
					index = vec.names.indexOf("*");
				}
			}
			if(index < 0 || isUndefined(index)){
				if(isUndefined(fill)){
					throw "MSG: Key '"+item+"' not in vector.";
				}else{
					index = item;
				}
		
			}
		}catch(err){
			if(vec.parent){
				return selectElementFromVector(vec.parent, item, fill);
			}else{
				throw err;
			}
		}
	
	}else{
		index = parseFloat(item.toNum())-1;
	}
	
	if((index instanceof String) || (typeof index == "string")){
		if(! vec.names){
			vec.names = [];
			for(var i=0; i<vec.items.length; i++){
				vec.names.push(undefined);
			}
		}
		vec.items.push(fill);
		vec.names.push(index.valueOf());
		value = fill;
		name = index;
		
	}else{
		if(index < 0 || (!vec.items) || index >= vec.items.length || index % 1 != 0 ){
			throw "MSG: Index "+(1+index)+" is not in the vector.";
		}
		if(!isUndefined(fill)){
			vec.items[index] = fill;
		}
		value = vec.items[index];
		if(vec.names){
			name = vec.names[index];
		}
	}

	return {name: name, value: value};
}



funcEvalMap["ARRAY"] = function(node, scope) {
	
	if(node.children.length == 1 && node.children[0] instanceof Vector){
		return node.children[0].fullClone(); // pre calculated vector
	}
	
	var vals = [];
	var names = [];
	var hasName = false;
	for (var i = 0; i < node.children.length; i++){
		vals.push(evaluateNode(node.children[i].children[0], scope));
		if(node.children[i].children.length>1){
			if(node.children[i].children[1].text){
				names.push(node.children[i].children[1].origText);
			}else{
				names.push(node.children[i].children[1].valueOf());
			}
			hasName = true;
		}else{
			names.push(undefined);
		}
	}
	return new Vector(vals, hasName?names:undefined);
};

funcEvalMap["RANGE"] = function(node, scope) {
	if(node.children.length==1){
		return evaluateNode(node.children[0], scope);
	}
	var vals = [];
	var start = evaluateNode(node.children[0], scope).toNum();
	var end = evaluateNode(node.children[node.children.length-1], scope).toNum();

	if((! (start instanceof Material)) || (! (end instanceof Material))){
		throw "MSG: Range elements must be numbers.";
	}
	
	vals.push(start.fullClone());
	if (start.units !== end.units) {
		var scale = convertUnits(start.units, end.units);
		if (scale != 1) {
			//console.log(scale)
			throw "MSG: Units on both sides of ':' must be equal."
		}
	}
	//throw "modsa";
	var step = node.children.length==2?new Material(1, start.units):evaluateNode(node.children[1], scope).toNum();
	
	if(! (step instanceof Material)){
		throw "MSG: Range elements must be numbers.";
	}
	
	if(eq(start,end)){
		
	}else if(lessThan(start, end)){
		var it = plus(start, step);
		while(lessThanEq(it, end)){
			vals.push(it);
			it = plus(it, step);
		}
	}else if(greaterThan(start, end)){
		if(node.children.length==2){
			step = negate(step);
		}
		var it = plus(start, step);
		while(greaterThanEq(it, end)){
			vals.push(it);
			it = plus(it, step);
		}
	}
	//console.log(vals)
	
	return new Vector(vals);
};

function makeFunctionCall(varName, varNames, varDefaults, node, scope) {

	var fn = new UserFunction();

	fn.localScope = new Object();
	fn.localScope["nVars"] = varNames.length;
	for (var i = 0; i < varNames.length; i++) {
		fn.localScope[i += ""] = varNames[i];
	}
	fn.localScope["-parent"] = scope;
	fn.defaults = varDefaults;
	
	fn.fn = function(x, fingerPrint, lastSelf, lastBase) {
		var minLength = x.length;
		for(var i=0;i<x.length; i++){
			if(x[i].optional){
				minLength--;
			}
		}
		if (fn.localScope["nVars"] - fn.defaults.length > x.length || minLength > fn.localScope["nVars"]) {
			var names = [];
			for (var i = 0; i < fn.localScope["nVars"]; i++) {
				if(fn.defaults.length - (fn.localScope["nVars"]-i)>-1){
					names.push(fn.localScope[i += ""] + "=" + fn.defaults[fn.defaults.length - (fn.localScope["nVars"]-i)]);
				}else{
					names.push(fn.localScope[i += ""]);
				}
			}
			
			throw "MSG: Wrong number of parameters for " + varName + "("+names.join(", ")+").";
		}
		var localScope = {"-parent": scope};
		
		//console.log(fn.localScope);
		for (var i = 0; i < x.length; i++) {
			localScope[fn.localScope[i += ""]] = x[i];
		}
		for (var i = x.length; i < fn.localScope["nVars"]; i++) {
			//console.log(fn.defaults[fn.defaults.length - (fn.localScope["nVars"]-i)]);
			localScope[fn.localScope[i += ""]] = fn.defaults[fn.defaults.length - (fn.localScope["nVars"]-i)];
			//if(localScope[fn.localScope[i += ""]].fullClone){
			//	localScope[fn.localScope[i += ""]] = localScope[fn.localScope[i += ""]].fullClone();
			//}
		}
		
		
		if(lastSelf){
			if(! localScope.self){
				localScope["self"] = lastSelf;
			}
			//if(! localScope.parent){
		}
		if(lastBase){	
			if(lastBase.parent){
				localScope["parent"] = lastBase.parent;
			}
				//}
		}

		try{
			//console.log(localScope)
			return evaluateNode(node, localScope);
		}catch(err){
			if(err.returnVal){
				return err.data;
			}else{
				throw(err);
			}
		}
	};

	return fn;
};

funcEvalMap["THROW"] = function(node, scope) {
	throw "MSG: "+evaluateNode(node.children[0], scope);
};

funcEvalMap["TRYCATCH"] = function(node, scope) {
	try{
		return evaluateNode(node.children[0], scope);
	}catch(err){
		var localScope = {"-parent": scope};
		if((typeof err == "string") || err instanceof String){
			localScope[node.children[2].text] = s(err.substr(5));
		}else{
			localScope[node.children[2].text] = s("An error has occurred.");
		}
		return evaluateNode(node.children[1], localScope)
	}
};

funcEvalMap["WHILE"] = function(node, scope) {
	var lastResult = new Material(0);
	var innerScope = {"-parent": scope};
	while(trueValue(evaluateNode(node.children[0], scope).toNum())){
		lastResult = evaluateNode(node.children[1], innerScope);
	}
	return lastResult;
};

funcEvalMap["IFTHENELSE"] = function(node, scope) {
	//console.log(node);
	var innerScope = {"-parent": scope};
	for(var i=0; i<node.children[0].children.length; i++){
		if(trueValue(evaluateNode(node.children[0].children[i], scope).toNum())){
			return evaluateNode(node.children[1].children[i], innerScope);
		}
	}
	if(node.children[0].children.length != node.children[1].children.length){
		return evaluateNode(node.children[1].children[i], innerScope);
	}
	
	return new Material(0);
};

funcEvalMap["FORIN"] = function(node, scope) {
	var lastResult = new Material(0);
	var id = node.children[0].text;
	
	var innerScope = {"-parent": scope};
	var vec = evaluateNode(node.children[1], scope);
	if(! (vec instanceof Vector)){
		throw "MSG: The in argument of a For-In loop mush be a a vector."
	}
	for(var i=0; i<vec.items.length; i++){
		innerScope[id] = vec.items[i];
		lastResult = evaluateNode(node.children[2], innerScope);
	}
	return lastResult;
};

funcEvalMap["FOR"] = function(node, scope) {
	var lastResult = new Material(0);
	var id = node.children[0].text;
	var start = evaluateNode(node.children[1].children[0], scope).toNum();
	var by = new Material(1);
	
	if(node.children[1].children.length==3){
		by = evaluateNode(node.children[1].children[2], scope).toNum();
	}
	var innerScope = {"-parent": scope};

	innerScope[id] = start;
	while(fn[by.value>=0?"<=":">="](innerScope[id].value, evaluateNode(node.children[1].children[1], scope).toNum())){
		lastResult = evaluateNode(node.children[2], innerScope);
		innerScope[id] = plus(innerScope[id], by);
	}
	return lastResult;
}

funcEvalMap["FUNCTION"] = function(node, scope) {
	var id = node.children[0].children[0].text;
	
	functionGenerator(id, node.children[0], node.children[1], node.children[2], scope)
			
	return '"' + id + "\" defined"; 
};

funcEvalMap["ANONFUNCTION"] = function(node, scope) {
	return functionGenerator(null, node.children[0], node.children[1], node.children[2], scope); 
};

funcEvalMap["ASSIGN"] = function(node, scope) {
	//console.log(node);
	var items = node.children.length-1;
	var x = evaluateNode(node.children[node.children.length-1], scope);
	if(items>1 && (!(x instanceof Vector) || x.items.length<items)){
		throw "MSG: Too few elements returned for assignment.";
	}
	for(var i=0; i<items; i++){
		if(node.children[i] instanceof PrimitiveStore){
			if(items==1){
				node.children[i].primitive.setValue(x);
			}else{
				node.children[i].primitive.setValue(x.items[i]);
			}
		}else{
			//console.log(node);
			var varName = node.children[i].children[0].text;
			if(node.children[i].children.length > 1){
				var selector = createSelector(node.children[i].children[1], scope);
			}
			//console.log(selector);
			
			var origScope = scope;
			while(scope["-parent"] !== null){
				if(isDefined(scope[varName])){
					break;
				}
				scope = scope["-parent"];
			}
			if(scope["-parent"]===null && isUndefined(scope[varName])){
				scope = origScope;
			}
			
			var v;
			if(items == 1){
				v = x;
			}else{
				v = x.items[i];
			}
			if(node.children[i].children.length == 1){
				scope[varName] = v;
			}else{
				if(isDefined(scope[varName])){
					//if( scope[varName] instanceof Vector){
					selectFromMatrix(scope[varName], selector, v);
					//}else{
					//throw "MSG: The variable '"+node.children[i].children[0].origText+"' is not a vector.";
					//}
				}else{
					throw "MSG: The variable '"+node.children[i].children[0].origText+"' does not exist.";
				}
			}
		}
	}
	if(items>1){
		return new Vector(x.items.slice(0,items));
	}else{
		return x;
	}
};

function createSelector(node, scope){
	if(node.children[0].typeName == "DOTSELECTOR"){
		var res = [];
		for(var i=0; i<node.children[0].children.length; i++){
			if(node.children[0].children[i].text){
				res.push(node.children[0].children[i].text);
			}else{
				res.push(node.children[0].children[i].valueOf());
			}
		}
		return res;
	}else{
		return createMatrixSelector(node, scope, 0, true)
	}
}

funcEvalMap["MATERIAL"] = function(node, scope) {
	var v =evaluateNode(node.children[0], scope).toNum();
	if(v.units){
		throw "MSG: Cannot create material where numeric part itself has units."
	}
	return new Material(v.value, node.children[1]);
};

function functionGenerator(varName, paramNames, paramDefaults, code, scope){
	var varNames = [];
	var varDefaults = [];
	for (var i = ((varName===null)?0:1); i < paramNames.children.length ; i++) {
		varNames.push(paramNames.children[i].text);
	}
		
	for (var i = 0; i < paramDefaults.children.length ; i++) {
		varDefaults.push(paramDefaults.children[i]);
	}
	if(varName===null){
		return makeFunctionCall(varName===null?"Function":varName, varNames, varDefaults, code, scope);
	}else{
		scope[varName] = makeFunctionCall(varName, varNames, varDefaults, code, scope);
	}
}

var unitEvalMap = new Object();
unitEvalMap["MULT"] = function(node) {
	return evaluateUnits(node.children[0]).concat(evaluateUnits(node.children[1]));
};
unitEvalMap["POW"] = function(node) {
	var rhsMult = 1;
	var rhsLoc = 1;
	var lhsLoc = 0;
	
	if(node.children.length == 3 + lhsLoc){
		rhsMult = rhsMult*-1;
	 	rhsLoc++;
	}
	var lhs = evaluateUnits(node.children[lhsLoc]);
	var rhs = evaluateUnits(node.children[rhsLoc]) * rhsMult;
	
	if (lhs instanceof Array) {
		for (var i = 0; i < lhs.length; i++) {
			lhs[i].exponent = lhs[i].exponent * rhs;
		}
		return lhs;
	} else {
		return Math.pow(lhs, rhs);
	}
};
unitEvalMap["DIV"] = function(node) {
	var lhs = evaluateUnits(node.children[0]);
	var rhs = evaluateUnits(node.children[1]);
	for (var i = 0; i < rhs.length; i++) {
		rhs[i].exponent = rhs[i].exponent * -1;
	}
	return lhs.concat(rhs);
};
unitEvalMap["PER"] = unitEvalMap["DIV"];

unitEvalMap["UNIT"] = function(node) {
	var unitName = "";
	for (var i = 0; i < node.children.length; i++) {
		unitName = unitName + node.children[i].text;
		if (i < node.children.length - 1) {
			unitName = unitName + " ";
		}
	}
	return [{
		id: unitName,
		exponent: 1
	}];
};
unitEvalMap["UNITCLUMP"] = function(node) {
	var x = evaluateUnits(node.children[0]);
	if(node.children.length>1){
		for(var i=1; i<node.children.length; i++){
			if(node.children[i].typeName == "NEGATE"){
				for (var j = 0; j < x.length; j++) {
			 		x[j].exponent = x[j].exponent * -1;
			 	}
		 	}else if(node.children[i].typeName == "SQUARED"){
				for (var j = 0; j < x.length; j++) {
			 		x[j].exponent = x[j].exponent * 2;
			 	}
			}else if(node.children[i].typeName == "CUBED"){
				for (var j = 0; j < x.length; j++) {
			 		x[j].exponent = x[j].exponent * 3;
			 	}
			}
		}
	}
	return x;
};
unitEvalMap["INTEGER"] = function(node) {
	return parseInt(node.text);
};
unitEvalMap["FLOAT"] = function(node) {
	return parseFloat(node.text);
};

function evaluateUnits(node) {
	if(node instanceof Material){
		return node.value;
	}
	//console.log( node.typeName);
	
	//console.log(node);
	return unitEvalMap[node.typeName](node);
}

function evaluateNode(node, scope) {
	if(node instanceof TreeNode){
		evaluatingLine = node.line || evaluatingLine;
		
		return funcEvalMap[node.typeName](node, scope);
	}else if(node instanceof PrimitiveStore){
		if(node.type == "totalValue"){
			if(! node.primitive.totalContents){
				throw "MSG: You can only use the double-bracket notation for total conveyor contents on Stock primitives.";
			}
			return node.primitive.totalContents();
		}else if(node.type == "object"){
			return node.primitive;
		}
	}else{
		return node;
	}
}

var trimEvalMap = new Object();


trimEvalMap["POWER"] = function(node, primitives) {
	if(node.children.length == 1){
		return trimNode(node.children[0], primitives);
	}else{
		var n = new TreeNode(node.origText, node.typeName, node.line);
		for(var i = 0; i < node.children.length; i++){
			n.children.push(trimNode(node.children[i], primitives));
		}
		return n;
	}
};
trimEvalMap["INNER"] = function(node, primitives) {
	if(node.children.length == 1){
		return trimNode(node.children[0], primitives);
	}else{
		var n = new TreeNode(node.origText, node.typeName, node.line);
		for(var i = 0; i < node.children.length; i++){
			n.children.push(trimNode(node.children[i], primitives));
		}
		return n;
	}
};;
trimEvalMap["RANGE"] = trimEvalMap["POWER"];
trimEvalMap["TRUE"] = function(node) {
	return true;
};
trimEvalMap["FALSE"] = function(node) {
	return false;
};
trimEvalMap["STRING"] = function(node) {
	//console.log(node.origText);
	var sub = node.origText.substr(1, node.origText.length-2);
	var s;
	if(node.origText[0]=="\""){
		s = sub.replace(/\\\\/g,"\\\\TEMPTXT\\\\").replace(/\\"/g,"\"").replace(/\\'/g,"\'").replace(/\\t/g,"\t").replace(/\\b/g,"\b").replace(/\\f/g,"\f").replace(/\\n/g,"\n").replace(/\\r/g,"\r").replace(/\\\\TEMPTXT\\\\/g, "\\");
	}else{
		s = sub.replace(/\n/,"\\n");
	}
	s = new String(s);
	s.vector = new Vector([],[],StringBase);
	return s;
};
trimEvalMap["INTEGER"] = function(node) {
	return new Material(sn("#e"+node.text));
};
trimEvalMap["MATERIAL"] = function(node, scope) {
	var units = node.children[0];
	var x = trimNode(node.children[1], scope);
	var units = evaluateUnits(units);
	var exponents = [], names = [];
	for(var i=0; i < units.length; i++){
		var j = names.indexOf(units[i].id);
		if(j == -1){
			exponents.push(units[i].exponent);
			names.push(units[i].id);
		}else{
			exponents[j] = exponents[j]+units[i].exponent;
		}
	}
	if(x instanceof Material){
		if(x.units){
			throw "MSG: Cannot create material where numeric part itself has units."
		}
		return new Material(x.value, getUnitStore(names, exponents, true));
	}else{
		var m = new TreeNode(node.origText, "MATERIAL", node.line);
		m.children = [x, getUnitStore(names, exponents, true)]
		return m;
	}
};
trimEvalMap["MULT"] = function(node, scope) {

	if(node.children.length==0){
		return "*";
	}
	
	var lhs = trimNode(node.children[0], scope);
	var rhs = trimNode(node.children[1], scope);
	if(isConst(lhs) && isConst(rhs)){
		return mult(lhs, rhs);
	}else{
		var n = new TreeNode(node.origText, node.typeName, node.line);
		n.children = [lhs, rhs]
		return n;
	}
};

trimEvalMap["DIV"] = function(node, scope) {
	var lhs = trimNode(node.children[0], scope);
	var rhs = trimNode(node.children[1], scope);
	if(isConst(lhs) && isConst(rhs)){
		return div(lhs, rhs);
	}else{
		var n = new TreeNode(node.origText, node.typeName, node.line);
		n.children = [lhs,rhs]
		return n;
	}
};
trimEvalMap["PLUS"] = function(node, scope) {
	var lhs = trimNode(node.children[0], scope);
	var rhs = trimNode(node.children[1], scope);
	if(isConst(lhs) && isConst(rhs)){
		return plus(lhs, rhs);
	}else{
		var n = new TreeNode(node.origText,  node.typeName, node.line);
		n.children = [lhs,rhs]
		return n;
	}
};
trimEvalMap["MINUS"] = function(node, scope) {
	var lhs = trimNode(node.children[0], scope);
	var rhs = trimNode(node.children[1], scope);
	if(isConst(lhs) && isConst(rhs)){
		return minus(lhs, rhs);
	}else{
		var n = new TreeNode(node.origText, node.typeName, node.line);
		n.children = [lhs,rhs]
		return n;
	}
};

trimEvalMap["FLOAT"] = trimEvalMap["INTEGER"];
trimEvalMap["PRIMITIVE"] = function(node, primitiveBank) {
	var res;
	if(node.text.substr(0, 2)=="[["){
		res = new PrimitiveStore(primitiveBank[node.text.substr(2, node.text.length-4)], "totalValue");
	}else{
		res = new PrimitiveStore(primitiveBank[node.text.substr(1, node.text.length-2)], "object");
	}
	if(typeof res.primitive === "undefined"){
		throw "MSG: The primitive <i>"+node.origText+"</i> could not be found.";
	}
	return res;
};
trimEvalMap["NEGATE"] = function(node, scope) {
	if(node.children.length==0){
		return new TreeNode(node.origText,  node.typeName, node.line);
	}
	var x = trimNode(node.children[0], scope);
	if(isConst(x)){
		return negate(x)
	}else{
		var n = new TreeNode(node.origText, node.typeName, node.line);
		n.children = [x]
		return n;
	}
};

trimEvalMap["ARRAY"] = function(node, scope){
	var n = new TreeNode(node.origText, node.typeName,node.line);
	var vals = [];
	var names = [];
	var hasName = false;
	for(var i = 0; i < node.children.length; i++){
		n.children.push(trimNode(node.children[i], scope));
		vals.push(n.children[i].children[0]);
		if(n.children[i].children.length>1){
			if(n.children[i].children[1].text){
				names.push(n.children[i].children[1].origText);
			}else{
				names.push(n.children[i].children[1].valueOf());
			}
			hasName = true;
		}else{
			names.push(undefined);
		}
	}
	
	var allConst = true;
	for(var i=0; i<vals.length; i++){
		if(! isConst(vals[i]) ){
			allConst = false;
			break;
		}
	}
	
	if(allConst){
		n.children = [new Vector(vals, hasName?names:undefined)];
	}
	return n;
}

function isConst(x){
	if( (x instanceof Material) || (typeof x == "string") || (x instanceof String) || (typeof x == "boolean") || (x instanceof Vector) ){
		return true;
	}
	return false
}

function trimNode(node, primitives) {
	if(trimEvalMap.hasOwnProperty(node.typeName)){
		evaluatingLine = node.line || evaluatingLine;
		return trimEvalMap[node.typeName](node, primitives);
	}else{
		var n = new TreeNode(node.origText, node.typeName,node.line);
		for(var i = 0; i < node.children.length; i++){
			n.children.push(trimNode(node.children[i], primitives));
		}
		return n;
	}
}

function trueValue(q){
	if(typeof q == "boolean"){
		return q;
	}else if(q instanceof Material){
		return neq(q.value, 0);	
	}else{
		throw "MSG: Only numbers can be used in place of booleans."
	}
}

function isLocal() {
	return (document.location.hostname == "localhost" || document.location.hostname == "insightmaker.dev" || document.location.hostname == "calc.dev" );
}

function isUndefined(item){
	return typeof(item)=="undefined";
}

function isDefined(item){
	return (! isUndefined(item));
}

function fireEvent(obj, eventName, eventObj){
	var p;
	var lastSelf  = obj;
	if(obj instanceof Vector){
		p = obj.parent;
	}else if (obj.vector instanceof Vector){
		obj = obj.vector;
		p = obj.parent;
	}else if (obj.parent instanceof Vector){
		obj = obj.parent;
		p = obj;
	}else{
		return false;
	}
	
	try{
		//console.log(eventName);
		//console.log(obj);
		var r = selectFromVector(obj, eventName);
		//console.log("found!");
	}catch(err){
		//console.log(err);
		return false;
	}
	
	eventObj.optional = true;
	
	return callFunction(r.data, [eventObj], varBank, lastSelf, p);
}

function ObjToVec(obj){
	var keys = Object.keys(obj);
	var vals = [];
	for(var i=0; i<keys.length; i++){
		vals.push(obj[keys[i]]);
	}
	return new Vector(vals, keys);
	
}

"use strict";
/*

Copyright 2010-2015 Scott Fortmann-Roe. All rights reserved.

This file may distributed and/or modified under the
terms of the Insight Maker Public License (https://InsightMaker.com/impl).

*/


functionLoaders.push(function(){

defineFunction("RandBeta", {params: [{name:"Alpha", noUnits:true, noVector:true}, {name:"Beta", noUnits:true, noVector:true}]}, function(x){
	
	return new Material(RandBeta(x[0].value, x[1].value));
});
defineFunction("RandDist", {params: [{name:"Distribution", noUnits:true, needVector:true}, {name:"Y (in which case Distribution is X)", noUnits:true, needVector:true, defaultVal: false}]}, function(x){
	var xVals, yVals;
	if(x.length == 1 || x[1] === false){
		var vec = x[0];
		xVals = [];
		yVals = [];
		for(var i=0; i<vec.items.length; i++){
			xVals.push(vec.items[i].items[0].toNum().value);
			yVals.push(vec.items[i].items[1].toNum().value);
		}
	}else{
		xVals = x[0].toNum().items.map(function(x){return x.value});
		yVals = x[1].toNum().items.map(function(x){return x.value});
	}
	return new Material(RandDist(xVals, yVals));
});
defineFunction("RandBoolean", {params: [{name:"Probability", defaultVal: 0.5, noUnits:true, noVector:true}]}, function(x){
	var p;
	if (x.length != 0) {
		p = x[0].toNum().value;
	}else{
		p = 0.5;
	}
	
	if(Rand()< p){
		return true;
	}else{
		return false;
			
	}
});
defineFunction("Rand", {params: [{name:"Lower Bound", defaultVal: 0, noUnits:true, noVector:true}, {name:"Upper Bound", defaultVal: 1, noUnits:true, noVector:true}]}, function(x){
	if (x.length != 0) {
		return new Material(Rand(x[0].toNum().value, x[1].toNum().value));
	} else {
		return new Material(Rand());
	}
});
defineFunction("RandNormal", {params: [{name:"Mean", defaultVal: 0, noUnits:true, noVector:true}, {name:"Standard Deviation", defaultVal: 1, noUnits:true, noVector:true}]}, function(x){
	if (x.length != 0) {
		return new Material(RandNormal(x[0].toNum().value, x[1].toNum().value));
	} else {
		return new Material(RandNormal());
	}
});
defineFunction("RandExp", {params: [{name:"Rate", defaultVal: 1, noUnits:true, noVector:true}]}, function(x){
	if (x.length != 0) {
		return new Material(RandExp(x[0].toNum().value));
	} else {
		return new Material(RandExp());
	}
});
defineFunction("RandLognormal", {params: [{name:"Mean", noUnits:true, noVector:true}, {name:"Standard Deviation", noUnits:true, noVector:true}]}, function(x){
	return new Material(RandLognormal(x[0].toNum().value, x[1].toNum().value));
});
defineFunction("RandBinomial", {params: [{name:"Count", noUnits:true, noVector:true}, {name:"Probability", noUnits:true, noVector:true}]}, function(x){
	return new Material(RandBinomial(x[0].toNum().value, x[1].toNum().value));
});
defineFunction("RandNegativeBinomial", {params: [{name:"Successes", noUnits:true, noVector:true}, {name:"Probability", noUnits:true, noVector:true}]}, function(x){
	return new Material(RandNegativeBinomial(x[0].toNum().value, x[1].toNum().value));
});
defineFunction("RandGamma", {params:[{name:"Alpha", noUnits:true, noVector:true}, {name:"Beta", noUnits:true, noVector:true}]}, function(x){
	return new Material(RandGamma(x[0].toNum().value, x[1].toNum().value));
});
defineFunction("RandPoisson", {params:[{name:"Rate", noUnits:true, noVector:true}]}, function(x){
	return new Material(RandPoisson(x[0].toNum().value));
});
defineFunction("RandTriangular", {params:[{name:"Minimum", noUnits:true, noVector:true}, {name:"Maximum", noUnits:true, noVector:true}, {name:"Peak", noUnits:true, noVector:true}]}, function(x){
	return new Material(RandTriangular(x[0].toNum().value, x[1].toNum().value, x[2].toNum().value));
});

defineFunction("Real", {params:[{name: "Number"}], recurse: true}, function(x){
	var r = x[0].toNum();
	r.value = fn["real-part"](r.value);
	return r;
});
defineFunction("Imag", {params:[{name: "Number"}], recurse: true}, function(x){
	var r = x[0].toNum();
	r.value = fn["imag-part"](r.value);
	return r;
});
defineFunction("Magnitude", {params:[{name: "Number"}]}, function(x){
	if(x[0].toNum() instanceof Vector){
		return functionBank["sqrt"]([functionBank["sum"]([mult(x[0], x[0])])])
	}
	var r = x[0].toNum();
	r.value = fn.magnitude(r.value);
	return r;
});
defineFunction("Angle", {params:[{name: "Number"}], recurse: true}, function(x){
	return new Material(fn.angle(x[0].toNum().value), getUnitStore(["radians"], [1]));
});
defineFunction("Abs", {params:[{name: "Number"}], recurse: true}, function(x){
	var r = x[0].toNum();
	r.value = fn.abs(r.value);
	return r;
});
defineFunction("sin", {params:[{name: "Number"}], recurse: true}, function(x){
	var z = x[0].toNum();
	
	if(z.units){
		z = mult(z, new Material(1, getUnitStore(["radians"], [-1])))
	}
	if(! z.units){
		return new Material(fn.sin(z.value));
	}else{
		throw "MSG: Non-angular units cannot be used in Sin().";
	}
});
defineFunction("cos", {params:[{name: "Number"}], recurse: true}, function(x){
	var z = x[0].toNum();
	
	if(z.units){
		z = mult(z, new Material(1, getUnitStore(["radians"], [-1])))
	}
	if(! z.units){
		return new Material(fn.cos(z.value));
	}else{
		throw "MSG: Non-angular units cannot be used in Cos().";
	}
	
});
defineFunction("tan", {params:[{name: "Number"}], recurse: true}, function(x){
	var z = x[0].toNum();
	
	if(z.units){
		z = mult(z, new Material(1, getUnitStore(["radians"], [-1])))
	}
	if(! z.units){
		return new Material(fn.tan(z.value));
	}else{
		throw "MSG: Non-angular units cannot be used in Tan().";
	}
	
});


defineFunction("asin", {params:[{name: "Number", noUnits: true}], recurse: true}, function(x){
	return new Material(fn.asin(x[0].toNum().value));
});
defineFunction("acos", {params:[{name: "Number",  noUnits: true}], recurse: true}, function(x){
	return new Material(fn.acos(x[0].toNum().value));
});
defineFunction("atan", {params:[{name: "Number",  noUnits: true}], recurse: true}, function(x){
	return new Material(fn.atan(x[0].toNum().value));
});

defineFunction("arcsin", {params:[{name: "Number",  noUnits: true}], recurse: true}, function(x){
	return new Material(fn.asin(x[0].toNum().value), getUnitStore(["radians"], [1]));
});
defineFunction("arccos", {params:[{name: "Number", noUnits: true}], recurse: true}, function(x){
	return new Material(fn.acos(x[0].toNum().value), getUnitStore(["radians"], [1]));
});
defineFunction("arctan", {params:[{name: "Number", noUnits: true}], recurse: true}, function(x){
	return new Material(fn.atan(x[0].toNum().value), getUnitStore(["radians"], [1]));
});

defineFunction("Sign", {params:[{name: "Number"}], recurse: true}, function(x){
	var r = x[0].toNum();
	if (r.value < 0) {
		return div(new Material(-1), new Material(1));
	} else if (r.value > 0) {
		return div(new Material(1), new Material(1));
	} else if(r.value == 0) {
		return new Material(0);
	}
	throw "MSG: Invalid value for Sign";
});

defineFunction("Sqrt", {params:[{name: "Number"}], recurse: true}, function(x){
	var r = x[0].toNum();
	r.value = fn.sqrt(r.value);
	if(r.units){
		for (var i = 0; i < r.units.exponents.length; i++) {
			r.units.exponents[i] = r.units.exponents[i] / 2;
		}
	}
	return r;
});
defineFunction("Ln", {params:[{name: "Number", noUnits: true}], recurse: true}, function(x){
	return new Material(fn.log(x[0].toNum().value));
});
defineFunction("Log", {params:[{name: "Number", noUnits: true}], recurse: true}, function(x){
	return new Material(fn.log(x[0].toNum().value, 10));
});
defineFunction("Logit", {params:[{name: "Number",  noUnits: true}], recurse: true}, function(x){
	var r = x[0].toNum();
	r.value = fn["-"](fn.log(r.value), fn.log(fn["-"](1, r.value)));
	return r;
});
defineFunction("Expit", {params:[{name: "Number",  noUnits: true}], recurse: true}, function(x){
	var r = x[0].toNum();
	r.value = fn["/"](1, fn["+"](1, fn.exp(fn["-"](r.value)))) ;
	return r;
});
defineFunction("Round", {params:[{name: "Number", noUnits: false}], recurse: true}, function(x){
	var r = x[0].toNum();
	r.value = fn.round(r.value);
	return r;
});
defineFunction("Ceiling", {params:[{name: "Number", noUnits: false}], recurse: true}, function(x){
	var r = x[0].toNum();
	r.value = fn.ceiling(r.value);
	return r;
});
defineFunction("Floor", {params:[{name: "Number",  noUnits: false}], recurse: true}, function(x){
	var r = x[0].toNum();
	r.value = fn.floor(r.value);
	return r;
});
defineFunction("Exp", {params:[{name: "Number", noUnits: true}], recurse: true}, function(x){
	return new Material(fn.exp(x[0].toNum().value));
});

functionBank["ifthenelse"] = function(x) {
	testArgumentsSize(x, "IfThenElse", 3, 3);
	
	var v = evaluateNode(x[0].node, x[0].scope).toNum();
	
	if (v instanceof Vector) {
		return vecIfThenElse(v, evaluateNode(x[1].node, x[1].scope), evaluateNode(x[2].node, x[2].scope))
	}
	
	if(trueValue(v)){
		//console.log("T");
		return evaluateNode(x[1].node, x[1].scope);
	}else{
		//console.log("F")
		return evaluateNode(x[2].node, x[2].scope);
	}
};
functionBank["ifthenelse"].delayEvalParams = true;

function vecIfThenElse(test, tVal, fVal) {
	
	var choiceFn = function(t, f) {
		if (t instanceof Vector) {
			return t.combine(f, choiceFn);
		} else {
			return [t, f];
		}
	};
		
	var choices = tVal.cloneCombine(fVal, choiceFn);
	
	var testFn = function(test, val) {
		if (test instanceof Vector) {
			return test.combine(val, testFn);
		}
		
		if (trueValue(test)) {
			return val[0];
		} else {
			return val[1];
		}
	}
	
	return test.cloneCombine(choices, testFn)
}


functionBank["map"] = function(x) {
	//console.log(x);
	testArgumentsSize(x, "Map", 2, 2);
	var v;
	if(x[0].node instanceof Vector){
		v = x[0].node;
	}else if(x[0] instanceof Vector){
		v = x[0];
	}else{
		v = evaluateNode(x[0].node, x[1].scope);
	}
	
	if(v instanceof Primitive){
		v = v.toNum();
	}
	if(! (v instanceof Vector)){
		throw "MSG: Map() requires a vector as its first argument.";
	}
	v = v.fullClone();
	
	var fn;
	var scope = {x: null, "-parent": x[1].scope}
	var node = x[1].node;
	try{
		fn = evaluateNode(node, scope)
	}catch(err){
		
	};

	var f;
	if( (fn instanceof Function) || (fn instanceof UserFunction)){
		if(fn.fn){
			fn=fn.fn;
		}
		f = function(x, key){
			return fn([x]);
		};
	}else{
		f = function(input, key){
			scope.x = input;
			scope.key = key || "";
			return evaluateNode(node, scope);
		}
	}

	return  v.apply(f);
};
functionBank["map"].delayEvalParams = true;
VectorObject["map"] = functionBank["map"];

defineFunction( "Sample", {object: [functionBank, VectorObject], params:[{name: "Vector", needVector: true}, {name: "Sample Size"}, {name: "Repeat", noVector: true, allowBoolean: true, defaultVal: false}]}, function(x){
	var v = x[0].toNum();
	var count = x[1].toNum().value;
	if(count == 0){
		return new Vector([]);
	}

	var length = v.length();
	var repeat = x[2] && trueValue(x[2].toNum());
	
	if(length==0){
		throw "MSG: Sample() requires a non-empty vector.";
	}
	var res = [];
	if(repeat){
		for(var i = 0; i < count; i++){
			res.push(v.items[Math.floor(Rand()*length)]);
		}
	}else{
		if(length<count){
			throw "MSG: Vector for Sample() is too small for the given sample size.";	
		}
		
		var shuffled = v.items.slice();
		for (var i = 0; i < count; i++) {
		    res.push(shuffled.splice(Math.floor(Rand() * shuffled.length), 1)[0]);
		}
	}
	
	return new Vector(res);
});

defineFunction("IndexOf", {object: [functionBank, VectorObject],  params:[{name: "Haystack", needVector: true, noUnits: true}, {name: "Needle", allowBoolean:true, allowString: true}]}, function(x){

	var v = x[1];
	
	if(v instanceof Vector){
		var res = [];
		for(var i = 0; i < v.items.length; i++){
			res.push(findElement(v.items[i], x[0]));
		}
		return new Vector(res);
	}else{
		return findElement(v, x[0]);
	}
});

defineFunction("Contains", {object: [functionBank, VectorObject], params:[{name: "Haystack", needVector: true, noUnits: true}, {name: "Needle", allowBoolean: true, noVector: true, allowString: true}]}, function(x){
		
	if(eq(new Material(0), functionBank["indexof"](x))){
		return false;
	}else{
		return true;
	}
});

defineFunction("Collapse", {params:[{name: "Source", needVector: true, noUnits: false}, {name: "Target",  noVector:false}]}, function(x){
	return x[0].toNum().collapseDimensions(x[1].toNum());
});

function findElement(needle, haystack){
	for(var i=0; i<haystack.length(); i++){
		if(eq(needle, haystack.items[i])){
			return new Material(i+1);
		}
	}
	return new Material(0);
}

functionBank["filter"] = function(x) {
	testArgumentsSize(x, "Filter", 2, 2);
	
	var v;
	if(x[0].node instanceof Vector){
		v = x[0].node;
	}else if(x[0] instanceof Vector){
		v = x[0];
	}else{
		v = evaluateNode(x[0].node, x[0].scope);
	}
	
	if(v instanceof Primitive){
		v = v.toNum();
	}
	if(! (v instanceof Vector)){
		throw "MSG: Filter() requires a vector as its first argument.";
	}
	v = v.fullClone();
	
	var t = functionBank["map"](x);
	return  functionBank["select"]([v,t]);
};
functionBank["filter"].delayEvalParams = true;
VectorObject["filter"] = functionBank["filter"];

functionBank["join"] = function(x){
	var res = [];
	var names = [];
	var hasNames = false;
	for(var i = 0; i < x.length; i++){
		var y = x[i];
		
		if(y instanceof Primitive){
			y = y.toNum();
		}
		
		if(y instanceof Vector){
			res = res.concat(y.items);
			if(y.names){
				names = names.concat(y.names)
				hasNames = true;
			}else{
				for(var j=0; j<y.items.length; j++){
					names.push(undefined)
				}
			}
		}else{
			res.push(y);
			names.push(undefined);
		}
	}
	return new Vector(res, hasNames?names:undefined);
};

functionBank["repeat"] = function(x){
	testArgumentsSize(x, "Repeat", 2, 2);
	var items = evaluateNode(x[1].node, x[1].scope).toNum();
	var count = items;
	if(items instanceof Vector){
		count = items.items.length;
	}
	var res = [];
	var scope = {x: null, "-parent": x[1].scope, key: null}
	for(var  i = 0; i < count; i++){
		if(items instanceof Vector){
			scope.key = items.items[i];
		}
		scope.x = new Material(i+1);
		res.push(evaluateNode(x[0].node, scope));
	}
	
	return  new Vector(res, (items instanceof Vector)?items.items.slice():undefined);
	
};
functionBank["repeat"].delayEvalParams = true;

defineFunction("Select", {params:[{name: "Haystack", needVector: true, noUnits: true}, {name: "Indexes", noUnits: true}]}, function(x){
		
	var indexes = x[1].toNum();
	if(x[1] instanceof Vector){
		var v = x[1].toNum();
		var isBoolean = true;
		for(var i=0; i < v.length(); i++){
			if(v.items[i] instanceof Material){
				isBoolean = false;
				break;
			}
		}
		if(isBoolean==true){
			var res = [];
			var names = x[0].names?[]:undefined;
			if(v.length()!=x[0].length()){
				throw "MSG: Length of vector must be equal for boolean selection.";
			}
			for(var i=0; i<v.length();i++){
				if( trueValue(v.items[i]) ){
					res.push(x[0].items[i]);

					if(x[0].names){
						names.push(x[0].names[i])
					}
				}
			}
			return new Vector(res, names);
		}else{
			var res = [];
			var names = x[0].names?[]:undefined;
			for(var i=0; i<v.length();i++){
				var q = v.items[i].value
				if(q<=0 || q > x[0].length()){
					throw "MSG: Selected element out of range.";
				}
				res.push(x[0].items[q-1]);
				
				if(x[0].names){
					names.push(x[0].names[q-1])
				}
			}
			return new Vector(res, names);
		}
	}else{
		if(x[1].value>0 && x[1].value <= x[0].length()){
			return x[0].items[x[1].value-1];
		}else{
			throw "MSG: Selected element out of range.";
		}
	}
});

defineFunction("Reverse", {allowEmpty:true, params:{name: "Items..."}, prep: function(x){
	return functionBank["join"](x);
}}, function(x){
	return new Vector(x.items.slice().reverse(), x.names?x.names.slice().reverse():undefined);
});
defineFunction("Reverse", {object: VectorObject, params:[{name:"Vector", needVector: true}]}, function(x) {
	return functionBank["reverse"](x);
});

defineFunction("Sort", {allowEmpty:true, params:{name: "Items..."}, prep: function(x){
	return functionBank["join"](x).toNum();
}}, function(x){
	var res = x.stackApply(function(x){
		var items = [];
		for(var i=0; i<x.items.length; i++){
			items.push({item: x.items[i], name: x.names?x.names[i]:undefined})
		}

		var res = items.sort(function(a,b){
			if(lessThan(a.item, b.item)){
				return -1;
			}
			if(greaterThan(a.item, b.item)){
				return 1;
			}
			return 0;
		});
	
	
		var names = x.names?[]:undefined;
		items = []
	
		for(var i = 0; i < res.length; i++){
			items.push(res[i].item);
			if(names){
				names.push(res[i].name)
			}
		}
	
		return new Vector(items, names);
	});
	return res;
});
defineFunction("Sort", {object: VectorObject, params:[{name:"Vector", needVector: true}]}, function(x) {
	return functionBank["sort"](x);
});

defineFunction("Unique", {allowEmpty:true, params:{name: "Items....", allowBoolean:true}, prep: function(x){
	return functionBank["join"](x).toNum();
}}, function(x){	
	if(x.items.length==0){
		return new Vector([]);
	}
	
	var res = [];
	var names = x.names?[]:undefined;
	
	for(var i = 0; i < x.items.length; i++){
		var found = false;
		
		for(var j = 0; j < res.length; j++){
			if(strictEquals(x.items[i], res[j])){
				found = true;
				break;
			}
		}
		if(! found){
			res.push(x.items[i]);
			if(names){
				names.push(x.names[i]);
			}
		}
	}
	return new Vector(res, names);
});
defineFunction("Unique", {object: VectorObject, params:[{name:"Vector", needVector: true}]}, function(x) {
	return functionBank["unique"](x);
});



defineFunction("Union", {object: [functionBank, VectorObject], params:[{name: "Vector 1", needVector: true}, {name: "Vector 2", needVector: true}]}, function(x){	
	return functionBank["unique"](functionBank["join"](x).items);
});

defineFunction("Intersection", {object: [functionBank, VectorObject], params:[{name: "Vector 1", needVector: true}, {name: "Vector 2", needVector: true}]}, function(x){	
	var v1 = x[0];
	var v2 = x[1];
	
	var res = [];
	
	for(var i = 0; i < v1.items.length; i++){
		for(var j = 0; j < v2.items.length; j++){
			if(strictEquals(v1.items[i], v2.items[j])){
				res.push(v1.items[i]);
				break;
			}
		}
	}
	return functionBank["unique"](res);
});


defineFunction("Difference", {object: [functionBank, VectorObject], params:[{name: "Vector 1", needVector: true}, {name: "Vector 2", needVector: true}]}, function(x){	
	var v1 = x[0];
	var v2 = x[1];
	
	var res = [];
	
	for(var i = 0; i < v1.items.length; i++){
		var found = false;
		for(var j = 0; j < v2.items.length; j++){
			if(strictEquals(v1.items[i], v2.items[j])){
				found = true;
				break;
			}
		}
		if(! found){
			res.push(v1.items[i]);
		}
	}
	for(var i = 0; i < v2.items.length; i++){
		var found = false;
		for(var j = 0; j < v1.items.length; j++){
			if(strictEquals(v2.items[i], v1.items[j])){
				found = true;
				break;
			}
		}
		if(! found){
			res.push(v2.items[i]);
		}
	}
	
	return functionBank["unique"](res);
});

defineFunction("Factorial", {params: [{name: "Number", noUnits: true}], recurse: true}, function(x){
	return new Material(factorial(x[0].toNum().value));
});

defineFunction("Max", {params: {name: "Items..."}, prep: joinVector}, function(x){
	
	var res = x.stackApply(function(v){
		//console.log(v);
		var x = v.items;
		if(x.length > 0){
			var max = x[0];
			for (var i=1; i < x.length; i++) {
				if(greaterThan(x[i], max)){
					max = x[i];
				}
			}
			return max;
		}else{
			throw "MSG: You must have at least one element to calculate a max.";
		}
	});
	
	return res;
});
defineFunction("Max", {object: VectorObject, params:[{name:"Vector", needVector: true}]}, function(x) {
	return functionBank["max"](x);
});

function joinVector(x, notToNum, skip){
	if(! notToNum){
		for(var i=0; i<x.length; i++){
			x[i] = x[i].toNum();
		}
	}
	if(x.length == 1 && (x[0] instanceof Vector)){
		if(skip){
			return x[0];
		}else{
			return functionBank["flatten"]([x[0]]);
		}
	}else{
		return (new Vector(scalarsToVectors(x)));
	}
}
function joinArray(x){
	for(var i = 0; i < x.length; i++){
		if(x[i].toNum){
			x[i] = x[i].toNum();
		}
	}
	if(x.length == 1 && (x[0] instanceof Vector)){
		return functionBank["flatten"]([x[0].toNum()]).items;
	}
	return joinVector(x, undefined, true).items;
}
function scalarsToVectors(x){
	var needVector = false;
	var vec;
	
	for(var i=0; i<x.length; i++){
		if(x[i] instanceof Vector){
			vec = x[i];
			needVector = true;
			break;
		}
	}
	
	if(needVector){
		for(var i=0; i<x.length; i++){
			if(!(x[i] instanceof Vector)){
				x[i] = replicateVectorStructure(vec, x[i]);
			}
		}
	}
	
	return x;
}
function replicateVectorStructure(vec, val){
	var v = vec.fullClone();
	for(var i=0; i<v.items.length; i++){
		if(v.items[i] instanceof Vector){
			v.items[i] = replicateVectorStructure(v.items[i], val);
		}else{
			v.items[i] = val;
		}
	}
	return v;
}

defineFunction("Lookup", {params: [{name: "Value", noVector: true}, {name: "Value Vector", needVector: true}, {name: "Results Vector", needVector: true} ]}, function(x){
	var v = x[0].toNum();
	var xVec = x[1].toNum();
	var yVec = x[2].toNum();
	
	if(xVec.items.length != yVec.items.length){
		throw "MSG: The value and results vectors must be the same length";
	}
	
	if(xVec.items.length < 1){
		throw "MSG: You must have at least one element in your vectors";
	}
	
	var vec = [];
	for(var i = 0; i < xVec.items.length; i++){
		vec.push({x: xVec.items[i], y: yVec.items[i]});
	}
	
	vec.sort(function(a,b){
		if(greaterThan(a.x, b.x)){
			return 1;
		}else if(lessThan(a.x, b.x)){
			return -1;
		}else{
			return 0;
		}
	});
	
	for(var i = 0; i < vec.length; i++){
		if(eq(vec[i].x, v)){
			return vec[i].y.fullClone();
		}else if(greaterThan(vec[i].x, v)){
			if(i == 0){
				return vec[i].y.fullClone();
			}
			
			var dist = minus(vec[i].x, vec[i-1].x);
			var distLower = minus(v, vec[i-1].x);
			var distUpper = minus(vec[i].x, v);
			var fLower = div(distUpper, dist);
			var fUpper = div(distLower, dist);
			return plus(mult(vec[i-1].y, fLower),  mult(vec[i].y, fUpper));
		}
	}
	
	return vec[vec.length-1].y.fullClone();
});

defineFunction("Fill", {object: [functionBank, VectorObject], params: [{name: "Vector", needVector: true}, {name: "Value", allowBoolean: true} ]}, function(x){
	return replicateVectorStructure(x[0], x[1]);
});

defineFunction("Min", {params:{name: "Items..."}, prep: joinVector}, function(x){
	var res = x.stackApply(function(v){
		var x = v.items;
		if(x.length > 0){
			var min = x[0];
			for (var i=1; i < x.length; i++) {
				if(lessThan(x[i], min)){
					min = x[i];
				}
			}
			return min;

		}else{
			throw "MSG: You must have at least one element to calculate a median.";
		}
	});
	
	return res;
});
defineFunction("Min", {object: VectorObject, params:[{name:"Vector", needVector: true}]}, function(x) {
	return functionBank["min"](x);
});
defineFunction("Mean", {params:{name: "Items..."}, prep: joinArray}, function(x){
	var sum = x[0];
	for (var i = 1; i < x.length; i++) {
		sum = plus(sum, x[i]);
	}
	return div(sum, new Material(x.length));
});
defineFunction("Mean", {object: VectorObject, params:[{name:"Vector", needVector: true}]}, function(x) {
	return functionBank["mean"](x);
});
defineFunction("Sum", {params:{name: "Items..."}, prep: joinArray}, function(x){
	var sum = x[0];
	
	for (var i = 1; i < x.length; i++) {
		sum = plus(sum, x[i]);
	}
	return sum;
});
defineFunction("Sum", {object: VectorObject, params:[{name:"Vector", needVector: true}]}, function(x) {
	return functionBank["sum"](x);
});
defineFunction("Product", {params:{name: "Items..."}, prep: joinArray}, function(x){
	var total = x[0];
	for (var i = 1; i < x.length; i++) {
		total = mult(total, x[i]);
	}
	return total;
});
defineFunction("Product", {object: VectorObject, params:[{name:"Vector", needVector: true}]}, function(x) {
	return functionBank["product"](x);
});
defineFunction("Median", {params:{name: "Items..."}, prep: joinVector}, function(x){
	var res = x.stackApply(function(v){
		var x = functionBank["sort"]([v]).items;
		if(x.length > 0){
			if (Math.floor((x.length - 1) / 2) == (x.length - 1) / 2) {
				return x[(x.length - 1) / 2];
			} else {
				return div(plus(x[Math.floor(((x.length - 1) / 2))], x[Math.ceil(((x.length - 1) / 2))]), new Material(2));
			}
		}else{
			throw "MSG: You must have at least one element to calculate a median.";
		}
	});
	return res;
});
defineFunction("Median", {object: VectorObject, params:[{name:"Vector", needVector: true}]}, function(x) {
	return functionBank["median"](x);
});
defineFunction("StdDev", {params:{name: "Items..."}, prep: joinVector}, function(x){
	var res = x.stackApply(function(v){
		var x = v.items;
		if (x.length > 1) {

			var mean = functionBank["mean"](x);
			var sum = power(minus(x[0], mean), new Material(2));

			for (var i = 1; i < x.length; i++) {

				sum = plus(sum, power(minus(x[i], mean), new Material(2)));
			}
			var r = power(div(sum, new Material(x.length - 1)), new Material(0.5));

			return functionBank["real"]([r]);
		}else{
			throw "MSG: You must have at least two elements to calculate the standard deviation.";
		}
	});
	return res;
});
defineFunction("StdDev", {object: VectorObject, params:[{name:"Vector", needVector: true}]}, function(x) {
	return functionBank["stddev"](x);
});
defineFunction("Correlation", {params:  [{name: "Vector 1", needVector: true}, {name: "Vector 2", needVector: true}]}, function(x) {
	var v1 = x[0].toNum();
	var v2 = x[1].toNum();

	if(v1.length() <= 1){
		throw "MSG: You must have at least two elements in your vectors to calculate their correlation.";
	}
	if(v1.length() != v2.length()){
		throw "MSG: The vectors for Correlation() must be of the same size.";
	}
	
	
	var v1_mean = functionBank["mean"]([v1]);
	var v2_mean = functionBank["mean"]([v2]);

	var v1_stddev = functionBank["stddev"]([v1]);
	var v2_stddev = functionBank["stddev"]([v2]);
	
	if(v1_stddev.value == 0 || v2_stddev.value == 0){
		return new Material(0);
	}
	
	return div(functionBank["sum"]([mult(minus(v1.clone(), v1_mean), minus(v2.clone(), v2_mean))]), mult(minus(functionBank["count"]([v1]), new Material(1)), mult(v1_stddev, v2_stddev)))
});
functionBank["count"] = function(x) {
	x = functionBank["join"](x).items;
	return new Material(sn("#e"+x.length));
};
functionBank["flatten"] = function(x) {
	var res = flatten(functionBank["join"](x));
	return new Vector(res.items, res.hasName?res.names:undefined);
};

defineFunction("Keys", {object: VectorObject, params:[{name:"Vector", needVector: true}]}, function(x) {
	if(! x[0].names){
		return new Vector([]);
	}
	return new Vector(x[0].names.filter(function(x){return isDefined(x)}).map(function(x){return s(x)}));
});
defineFunction("Values", {object: VectorObject, params:[{name:"Vector", needVector: true}]}, function(x) {
	return new Vector(x[0].items);
});
defineFunction("Length", {object: VectorObject, params:[{name:"Vector", needVector: true}]}, function(x) {
	return new Material(sn("#e"+x[0].items.length));
});
defineFunction("Count", {object: VectorObject, params:[{name:"Vector", needVector: true}]}, function(x) {
	return new Material(sn("#e"+x[0].items.length));
});
defineFunction("Flatten", {object: VectorObject, params:[{name:"Vector", needVector: true}]}, function(x) {
	return functionBank["flatten"](x);
});

function flatten(x){
	var res = [];
	var names = [];
	var hasName = undefined;
	
	for(var i=0; i<x.length(); i++){
		if(x.items[i] instanceof Vector){
			var z = flatten(x.items[i]);
			res = res.concat(z.items);
			names = names.concat(z.names);
			hasName = hasName || z.hasName;
		}else{
			res.push(x.items[i]);
			if(x.names){
				names.push(x.names[i]);
				hasName = true;
			}else{
				names.push(undefined);
			}
		}
	}
	return {items: res, names: names, hasName: hasName};
}


/* Statistics */

defineFunction("CDFNormal", {params: [{name:"x", noUnits:true, noVector:true}, {name:"Mean", defaultVal: 0, noUnits:true, noVector:true}, {name:"Standard Deviation", defaultVal: 1, noUnits:true, noVector:true}]}, function(x){
	var val = x[0].toNum().value;
	var mu = x[1]?x[1].toNum().value:0;
	var sd = x[2]?x[2].toNum().value:1;
	
	return new Material(jStat.normal.cdf(val, mu, sd));
});

defineFunction("PDFNormal", {params: [{name:"x", noUnits:true, noVector:true}, {name:"Mean", defaultVal: 0, noUnits:true, noVector:true}, {name:"Standard Deviation", defaultVal: 1, noUnits:true, noVector:true}]}, function(x){
	var val = x[0].toNum().value;
	var mu = x[1]?x[1].toNum().value:0;
	var sd = x[2]?x[2].toNum().value:1;
	
	return new Material(jStat.normal.pdf(val, mu, sd));
});

defineFunction("InvNormal", {params: [{name:"p", noUnits:true, noVector:true}, {name:"Mean", defaultVal: 0, noUnits:true, noVector:true}, {name:"Standard Deviation", defaultVal: 1, noUnits:true, noVector:true}]}, function(x){
	var val = x[0].toNum().value;
	if(val < 0 || val > 1){
		throw "MSG: p is a probability and must be between 0 and 1 inclusive."
	}
	var mu = x[1]?x[1].toNum().value:0;
	var sd = x[2]?x[2].toNum().value:1;
	
	return new Material(jStat.normal.inv(val, mu, sd));
});

defineFunction("CDFLogNormal", {params: [{name:"x", noUnits:true, noVector:true}, {name:"Mean", defaultVal: 0, noUnits:true, noVector:true}, {name:"Standard Deviation", defaultVal: 1, noUnits:true, noVector:true}]}, function(x){
	var val = x[0].toNum().value;
	var mu = x[1]?x[1].toNum().value:0;
	var sd = x[2]?x[2].toNum().value:1;
	
	return new Material(jStat.lognormal.cdf(val, mu, sd));
});

defineFunction("PDFLogNormal", {params: [{name:"x", noUnits:true, noVector:true}, {name:"Mean", defaultVal: 0, noUnits:true, noVector:true}, {name:"Standard Deviation", defaultVal: 1, noUnits:true, noVector:true}]}, function(x){
	var val = x[0].toNum().value;
	var mu = x[1]?x[1].toNum().value:0;
	var sd = x[2]?x[2].toNum().value:1;
	
	return new Material(jStat.lognormal.pdf(val, mu, sd));
});

defineFunction("InvLogNormal", {params: [{name:"p", noUnits:true, noVector:true}, {name:"Mean", defaultVal: 0, noUnits:true, noVector:true}, {name:"Standard Deviation", defaultVal: 1, noUnits:true, noVector:true}]}, function(x){
	var val = x[0].toNum().value;
	if(val < 0 || val > 1){
		throw "MSG: p is a probability and must be between 0 and 1 inclusive."
	}
	var mu = x[1]?x[1].toNum().value:0;
	var sd = x[2]?x[2].toNum().value:1;
	
	return new Material(jStat.lognormal.inv(val, mu, sd));
});

defineFunction("CDFt", {params: [{name:"x", noUnits:true, noVector:true}, {name:"Degrees of Freedom", noUnits:true, noVector:true}]}, function(x){
	var val = x[0].toNum().value;
	var dof = x[1].toNum().value;
	if(dof <= 0){
		throw "MSG: Degrees of Freedom must be greater than 0."
	}
	
	return new Material(jStat.studentt.cdf(val, dof));
});

defineFunction("PDFt", {params: [{name:"x", noUnits:true, noVector:true}, {name:"Degrees of Freedom", noUnits:true, noVector:true}]}, function(x){
	var val = x[0].toNum().value;
	var dof = x[1].toNum().value;
	if(dof <= 0){
		throw "MSG: Degrees of Freedom must be greater than 0."
	}
	
	return new Material(jStat.studentt.pdf(val, dof));
});

defineFunction("Invt", {params: [{name:"p", noUnits:true, noVector:true}, {name:"Degrees of Freedom", noUnits:true, noVector:true}]}, function(x){
	var val = x[0].toNum().value;
	if(val < 0 || val > 1){
		throw "MSG: p is a probability and must be between 0 and 1 inclusive."
	}
	var dof = x[1].toNum().value;
	if(dof <= 0){
		throw "MSG: Degrees of Freedom must be greater than 0."
	}
	
	return new Material(jStat.studentt.inv(val, dof));
});

defineFunction("CDFF", {params: [{name:"x", noUnits:true, noVector:true}, {name:"Degrees of Freedom 1", noUnits:true, noVector:true}, {name:"Degrees of Freedom 2", noUnits:true, noVector:true}]}, function(x){
	var val = x[0].toNum().value;
	var dof1 = x[1].toNum().value;
	if(dof1 <= 0){
		throw "MSG: Degrees of Freedom must be greater than 0."
	}
	var dof2 = x[2].toNum().value;
	if(dof2 <= 0){
		throw "MSG: Degrees of Freedom must be greater than 0."
	}
	
	return new Material(jStat.centralF.cdf(val, dof1, dof2));
});

defineFunction("PDFF", {params: [{name:"x", noUnits:true, noVector:true}, {name:"Degrees of Freedom 1", noUnits:true, noVector:true}, {name:"Degrees of Freedom 2", noUnits:true, noVector:true}]}, function(x){
	var val = x[0].toNum().value;
	var dof1 = x[1].toNum().value;
	if(dof1 <= 0){
		throw "MSG: Degrees of Freedom must be greater than 0."
	}
	var dof2 = x[2].toNum().value;
	if(dof2 <= 0){
		throw "MSG: Degrees of Freedom must be greater than 0."
	}
	
	return new Material(jStat.centralF.pdf(val, dof1, dof2));
});

defineFunction("InvF", {params: [{name:"p", noUnits:true, noVector:true}, {name:"Degrees of Freedom 1", noUnits:true, noVector:true}, {name:"Degrees of Freedom 2", noUnits:true, noVector:true}]}, function(x){
	var val = x[0].toNum().value;
	if(val < 0 || val > 1){
		throw "MSG: p is a probability and must be between 0 and 1 inclusive."
	}
	var dof1 = x[1].toNum().value;
	if(dof1 <= 0){
		throw "MSG: Degrees of Freedom must be greater than 0."
	}
	var dof2 = x[2].toNum().value;
	if(dof2 <= 0){
		throw "MSG: Degrees of Freedom must be greater than 0."
	}
	
	return new Material(jStat.centralF.inv(val, dof1, dof2));
});

defineFunction("CDFChiSquared", {params: [{name:"x", noUnits:true, noVector:true}, {name:"Degrees of Freedom", noUnits:true, noVector:true}]}, function(x){
	var val = x[0].toNum().value;
	var dof = x[1].toNum().value;
	if(dof <= 0){
		throw "MSG: Degrees of Freedom must be greater than 0."
	}
	
	return new Material(jStat.chisquare.cdf(val, dof));
});

defineFunction("PDFChiSquared", {params: [{name:"x", noUnits:true, noVector:true}, {name:"Degrees of Freedom", noUnits:true, noVector:true}]}, function(x){
	var val = x[0].toNum().value;
	var dof = x[1].toNum().value;
	if(dof <= 0){
		throw "MSG: Degrees of Freedom must be greater than 0."
	}
	
	return new Material(jStat.chisquare.pdf(val, dof));
});

defineFunction("InvChiSquared", {params: [{name:"p", noUnits:true, noVector:true}, {name:"Degrees of Freedom", noUnits:true, noVector:true}]}, function(x){
	var val = x[0].toNum().value;
	if(val < 0 || val > 1){
		throw "MSG: p is a probability and must be between 0 and 1 inclusive."
	}
	var dof = x[1].toNum().value;
	if(dof <= 0){
		throw "MSG: Degrees of Freedom must be greater than 0."
	}
	
	return new Material(jStat.chisquare.inv(val, dof));
});


defineFunction("CDFExponential", {params: [{name:"x", noUnits:true, noVector:true}, {name:"Rate", noUnits:true, noVector:true}]}, function(x){
	var val = x[0].toNum().value;
	var rate = x[1].toNum().value;
	if(rate <= 0){
		throw "MSG: Rate must be greater than 0."
	}
	
	return new Material(jStat.exponential.cdf(val, rate));
});

defineFunction("PDFExponential", {params: [{name:"x", noUnits:true, noVector:true}, {name:"Rate", noUnits:true, noVector:true}]}, function(x){
	var val = x[0].toNum().value;
	var rate = x[1].toNum().value;
	if(rate <= 0){
		throw "MSG: Rate must be greater than 0."
	}
	
	return new Material(jStat.exponential.pdf(val, rate));
});

defineFunction("InvExponential", {params: [{name:"p", noUnits:true, noVector:true}, {name:"DRate", noUnits:true, noVector:true}]}, function(x){
	var val = x[0].toNum().value;
	if(val < 0 || val > 1){
		throw "MSG: p is a probability and must be between 0 and 1 inclusive."
	}
	var rate = x[1].toNum().value;
	if(rate <= 0){
		throw "MSG: Rate must be greater than 0."
	}
	
	return new Material(jStat.exponential.inv(val, rate));
});

defineFunction("CDFPoisson", {params: [{name:"x", noUnits:true, noVector:true}, {name:"Lambda", noUnits:true, noVector:true}]}, function(x){
	var val = x[0].toNum().value;
	var Lambda = x[1].toNum().value;
	if(Lambda <= 0){
		throw "MSG: Lambda must be greater than 0."
	}
	
	return new Material(jStat.poisson.cdf(val, Lambda));
});

defineFunction("PMFPoisson", {params: [{name:"x", noUnits:true, noVector:true}, {name:"Lambda", noUnits:true, noVector:true}]}, function(x){
	var val = x[0].toNum().value;
	var Lambda = x[1].toNum().value;
	if(Lambda <= 0){
		throw "MSG: Rate must be greater than 0."
	}
	
	return new Material(jStat.poisson.pdf(val, Lambda));
});



/* End Statistics */



defineFunction("SetRandSeed", {params:[{name:"Seed Number", noUnits:true, noVector:true}]}, function(x) {
	Math.seedrandom(x[0].toNum().value);
	return "Random Seed Set";
});

defineFunction("Alert", {params:[{name:"Message", allowString: true, allowBoolean: true}]}, function(x) {
	alert(x[0]);
	return 1;
});

defineFunction("Console", {params:[{name:"Message", allowString: true, allowBoolean: true}]}, function(x) {
	console.log(x[0]);
	return 1;
});

defineFunction("Prompt", {params:[{name:"Message", allowString: true, allowBoolean: true}, {name:"Default", defaultVal: "", allowString: true, allowBoolean: true}]}, function(x) {
	var y = x[1];
	if((y instanceof Material) && ! y.units){
		y = y.value;
	}
	var x = prompt(x[0], y);
	if(parseFloat(x).toString()==x){
		return new Material(parseFloat(x));
	}else{
		return x;
	}
});

defineFunction("Confirm", {params:[{name:"Message", allowString: true, allowBoolean: true}]}, function(x) {
	return confirm(x[0]);
});

defineFunction("Parse", {object: StringObject, params:[{name:"String", allowString: true}]}, function(x) {
	//if((typeof x[0] == "string") || (x[0] instanceof String)){
		return new Material(parseFloat(x[0], 10));
		//}else{
		//return x[0];
		//}
});

defineFunction("Split", {object: StringObject, params:[{name:"String", needString: true}, {name:"Splitter", needString: true}]}, function(x) {
	return s(new Vector(x[0].split(x[1])));
});

defineFunction("Join", {object: VectorObject, params:[{name:"String", needVector: true}, {name:"Joiner", needString: true}]}, function(x) {
	return s(x[0].items.join(x[1]));
});

defineFunction("Trim", {object: StringObject, params:[{name:"String", needString: true}], recurse: true}, function(x) {
	return s(x[0].trim());
});

defineFunction("Range", {object: StringObject, params:[{name:"String", needString: true}, {name:"Indexes", noUnits: true, allowVector: true}]}, function(x) {
	if(x[1] instanceof Vector){
		var res = "";
		for(var i=0; i < x[1].items.length; i++){
			res += x[0].charAt(x[1].items[i].toNum().value-1);
		}
		return s(res);
	}else{
		return s(x[0].charAt(x[1].toNum().value-1));
	}
});	

defineFunction("Length", {object: StringObject, params:[{name:"String", needString: true}]}, function(x) {
	return new Material(x[0].length);
});

defineFunction("IndexOf", {object: StringObject, params:[{name:"Haystack", needString: true}, {name:"Needle", needString: true}]}, function(x) {
	return new Material(x[0].indexOf(x[1])+1);
});

defineFunction("Contains", {object: StringObject, params:[{name:"Haystack", needString: true}, {name:"Needle", needString: true}]}, function(x) {
	return ! eq(StringObject["indexof"](x), new Material(0));
});

defineFunction("Lowercase", {object: StringObject, params:[{name:"String", needString: true}]}, function(x) {
	return s(x[0].toLowerCase());
});

defineFunction("Uppercase", {object: StringObject, params:[{name:"String", needString: true}]}, function(x) {
	return s(x[0].toUpperCase());
});

StringBase = makeObjectBase(StringObject);
VectorBase = makeObjectBase(VectorObject);

});

function s(x){
	if(x instanceof Vector){
		return x.recurseApply(s);
	}
	var res = new String(x);
	res.parent= StringBase;
	return res;
}

function makeObjectBase(x){
	var names = Object.keys(x);
	var items = [];
	for(var i=0; i<names.length; i++){
		items.push(objectizeFunction(x[names[i]]));
	}
	var vec = new Vector(items, names);
	vec.parent = undefined;
	return vec;
}


function defineFunction(name, definition, fn){
	var configs = definition.params;
	var arr = Array.isArray(configs);
	
	var vectorized = [];
	
	var requiredLength = configs.length;
	for(var i=0; i < configs.length; i++){
		if(configs[i].hasOwnProperty("defaultVal")){
			requiredLength = i;
			break;
		}
	}
	
	for(var i=0; i < configs.length; i++){
		if(configs[i].vectorize){
			vectorized.push(i);
			if(configs[i].noVector){
				throw "MSG: Cannot have a non-vector vectorized parameter. Function '" + name + "', parameter '" + configs[i].name + "'.";
			}
		}
	}
	
	
	
	
	var fnName;
	if(arr){
		if(! definition.object){
			fnName = name + "(" + configs.map(function(x){return x.name+(x.hasOwnProperty("defaultVal")?"="+x.defaultVal.toString():"");}).join(", ")+")";
		}else{
			fnName = name + "(" + configs.slice(1).map(function(x){return x.name+(x.hasOwnProperty("defaultVal")?"="+x.defaultVal.toString():"");}).join(", ")+")";
		}
	} else{
		fnName = name + "(items...)";
	}
	
	var f = function(x, id){
		if(definition.prep){
			x = definition.prep(x);
		}
		
		if ( arr && (x.length > configs.length || x.length < requiredLength) ) {
			throw "MSG: Wrong number of parameters for " + fnName + ".";
		}else if((! arr) && x.length == 0 && (! definition.allowEmpty)){
			throw "MSG: At least one parameter required for " + name + "().";
		}
		
		for (var i = 0; i < x.length; i++) {
			var config = arr?configs[i]:configs;
			
			if (config.noUnits && (!((!(x[i].toNum() instanceof Material)) || ! x[i].toNum().units))) {
				throw "MSG: " + fnName + " does not except units for the argument '"+config.name+"'.";
			}
			if (config.noVector && (x[i] instanceof Vector)) {
				throw "MSG: " + fnName + " does not except vectors for the argument '"+config.name+"'.";
			}
			if (config.vectorize && (x[i] instanceof Vector) && ! x[i].names) {
				throw "MSG: " + fnName + " does not accepted non-named vectors for the argument '"+config.name+"'.";
			}
			if (config.needVector) {
				if(x[i] instanceof Primitive){
					x[i] = x[i].toNum();
				}
				if(! (x[i] instanceof Vector)){
					throw "MSG: " + fnName + " requires a vector for the argument '"+config.name+"'.";
				}
			}
			if (config.needPrimitive && ! (x[i] instanceof Primitive)) {
				throw "MSG: " + fnName + " requires a primitive for the argument '"+config.name+"'.";
			}
			if ((! config.allowBoolean) && (typeof x[i] == "boolean")) {
				throw "MSG: " + fnName + " does not accept boolean values for the argument '"+config.name+"'.";
			}
			if (config.needAgent && (!  (x[i] instanceof Agent) )) {
				x[i] = agent(x[i], fnName, config.name);
			}
			if (config.needString) {
				if(! ((typeof x[i] == "string") || (x[i] instanceof String))){
					throw "MSG: " + fnName + " requires a string for the argument '"+config.name+"'.";
				}
			}
			if (((! config.allowString) && (! config.needString))
				&& ((typeof x[i] == "string") || (x[i] instanceof String))) {
				throw "MSG: " + fnName + " does not accept string values for the argument '" + config.name + "'.";
			}
			if (config.needAgents && (!  (x[i] instanceof Agents) )) {
				x[i] = agents(x[i], fnName, config.name);
			}
			if (config.needPopulation && (!  (x[i] instanceof Vector) )) {
				x[i] = getPopulation(x[i], fnName, config.name);
			}
			if (config.needFunction && (!  ((x[i] instanceof Function) || (x[i] instanceof UserFunction)) )) {
				throw "MSG: " + fnName + " requires a function for the argument '"+config.name+"'.";
			}
		}
		if(definition.recurse){
			var q = x[0].toNum();
		}
		if(definition.recurse && (q instanceof Vector)){
			return q.cloneApply(function(z){return f([z].concat(x.slice(1)), id)});
		}else if(vectorized.length > 0){
			// Auto-vectorize the inner function
		
			
			var base = undefined, baseI = -1;
			for(var i = 0; i < vectorized.length; i++){
				if(x[vectorized[i]]){
					var v = x[vectorized[i]].toNum();
					if( (v instanceof Vector) && (v.namesLC)){
						if(!base){
							base = v;
							baseI = vectorized[i];
						}else{
							if(!base.keysMatch(v.namesLC)){
								throw "MSG: Vector keys do not match between parameters '" + configs[baseI].name + "' and '" + configs[vectorized[i]].name +"' in " + fnName + ".";
							}
						}
					}
				}
			}
			
			if(! base){
				// Nothing is vectorized, we can behave normally
				return fn(x, id);
			}else{
				// We need to vectorize
				//console.log("getting facney!")
				var keys = base.namesLC;
				var res = [];
				for(var i = 0; i < keys.length; i++){
					var newX = [];
					for(var j = 0; j < x.length; j++){
						if(vectorized.indexOf(j) == -1){
							newX.push(x[j]);
						}else{
							var v = x[j].toNum();
							if( (v instanceof Vector) && (v.namesLC)){
								newX.push(v.select([keys[i]]));
							}else{
								newX.push(v);
							}
							
						}
					}
					//console.log(newX);
					var z = fn(newX, id);
					if(z instanceof Vector){
						if(!base.keysMatch(z.namesLC)){
							throw "MSG: Vector keys do not match between parameter '" + configs[baseI].name + "' and calculation result.";
						}
						
						res.push(z.select([keys[i]]));
					}else{
						res.push(z);
					}
				}
				return new Vector(res, keys);
			}
				
			
		}else{
			return fn(x, id);
		}
	}
	
	if(! definition.object){
		functionBank[name.toLowerCase()] = f;
	}else{
		if(definition.object instanceof Array){
			for(var i=0; i<definition.object.length; i++){
				definition.object[i][name.toLowerCase()] = f;
			}
		}else{
			definition.object[name.toLowerCase()] = f;
		}
	}
		
	if(definition.recurse){
		VectorObject[name.toLowerCase()] = f;
	}
}

function objectizeFunction(fn){
	var f = function(x, fingerprint, lastSelf){
		return fn([lastSelf].concat(x), fingerprint, lastSelf)
	}
	f.delayEvalParams = fn.delayEvalParams;
	return f;
}

function factorial(x) {
	if (Math.round(x) != x) {
		throw "MSG: The factorial() function only accepts integers.";
	} else if (x < 0) {
		throw "MSG: The factorial() function is only defined for integers 0 or larger.";
	}
	if (x > 1) {
		return x * factorial(x - 1);
	} else {
		return 1;
	}
}

function testArgumentsSize(x, name, min, max){
	if(x.length<min || x.length>max){
		throw "MSG: Wrong number of parameters for "+name+"()."
	}
}


"use strict";
/*

Copyright 2010-2015 Scott Fortmann-Roe. All rights reserved.

This file may distributed and/or modified under the
terms of the Insight Maker Public License (https://InsightMaker.com/impl).

*/


var AgentBase;
var AgentObject = {} ;

var PrimitiveBase;
var PrimitiveObject = {} ;

functionLoaders.push(function(){
	sdsLoadFunctions();	

	defineFunction("Stop", {params:[]}, function(x) {
		throw {
			msg: "STOP"
		};
	});
	
	defineFunction("Pause", {params:[]}, function(x) {
		simulate.sleep(true);
		return new Material(0);
	});

	defineFunction("Time", {params:[]}, function(x) {
		return simulate.time().fullClone();
	});

	defineFunction("TimeStep", {params:[]}, function(x) {
		return simulate.timeStep.fullClone();
	});

	defineFunction("TimeLength", {params:[]}, function(x) {
		return simulate.timeLength.fullClone();
	});

	defineFunction("TimeStart", {params:[]}, function(x) {
		return simulate.timeStart.fullClone();
	});

	defineFunction("TimeEnd", {params:[]}, function(x) {
		return simulate.timeEnd.fullClone();
	});

	defineFunction("Seconds", { params:[{name: "Value", defaultVal: "time", vectorize: true}]}, function(x) {
		var item;
		if (x.length == 0) {
			item = simulate.time().fullClone();
		} else {
			item = x[0].toNum();
		}
		return mult(item, new Material(1, getUnitStore(["seconds"],[-1])));
	});

	defineFunction("Minutes", { params:[{name: "Value", defaultVal: "time", vectorize: true}]}, function(x) {
		var item;
		if (x.length == 0) {
			item = simulate.time().fullClone();
		} else {
			item = x[0].toNum();
		}
		return mult(item, new Material(1, getUnitStore(["minutes"],[-1])));
	});

	defineFunction("Hours", { params:[{name: "Value", defaultVal: "time", vectorize: true}]}, function(x) {
		var item;
		if (x.length == 0) {
			item = simulate.time().fullClone();
		} else {
			item = x[0].toNum();
		}
		return mult(item, new Material(1, getUnitStore(["hours"],[-1])));
	});

	defineFunction("Days", { params:[{name: "Value", defaultVal: "time", vectorize: true}]}, function(x) {
		var item;
		if (x.length == 0) {
			item = simulate.time().fullClone();
		} else {
			item = x[0].toNum();
		}
		return mult(item, new Material(1, getUnitStore(["days"],[-1])));
	});

	defineFunction("Weeks", { params:[{name: "Value", defaultVal: "time", vectorize: true}]}, function(x) {
		var item;
		if (x.length == 0) {
			item = simulate.time().fullClone();
		} else {
			item = x[0].toNum();
		}
		return mult(item, new Material(1, getUnitStore(["weeks"],[-1])));
	});

	defineFunction("Months", { params: [{name: "Value", defaultVal: "time", vectorize: true}]}, function(x) {
		var item;
		if (x.length == 0) {
			item = simulate.time().fullClone();
		} else {
			item = x[0].toNum();
		}
		return mult(item, new Material(1, getUnitStore(["months"],[-1])));
	});

	defineFunction("Years", {params: [{name: "Value", defaultVal: "time", vectorize: true}]}, function(x) {
		var item;
		if (x.length == 0) {
			item = simulate.time().fullClone();
		} else {
			item = x[0].toNum();
		}
		return mult(item, new Material(1, getUnitStore(["years"],[-1])));
	});
	
	defineFunction("Seasonal", {params: [{name: "Peak", defaultVal: "0", vectorize: true}]}, function(x){
		var peak;
		if(x.length == 0){
			peak = new Material(0,  simulate.timeUnits);
		}else{
			peak = x[0].fullClone();
			if(! peak.units){
				peak.units = simulate.timeUnits;
			}
		}
		var position = minus(functionBank["time"]([]), peak);
		var dist = position.forceUnits(createUnitStore("years")).value * 2 * 3.14159265359;
		return new Material(Math.cos(dist));
	});

	defineFunction("Unitless", { params:[{name: "Value",  noVector: true}]}, function(x) {
		return new Material(x[0].toNum().value);
	});

	defineFunction("PastMean", {object: [functionBank, PrimitiveObject], params:[{name: "[Primitive]",  noVector: true, needPrimitive:true}, {name: "Past Range", defaultVal: "All Time", vectorize: true}]}, function(x) {
		if (x.length == 1) {
			return functionBank["mean"](x[0].getPastValues());
		} else {
			return functionBank["mean"](x[0].getPastValues(x[1].toNum()));
		}
	});

	defineFunction("PastMedian", {object: [functionBank, PrimitiveObject], params:[{name: "[Primitive]",  noVector: true, needPrimitive:true}, {name: "Past Range", defaultVal: "All Time", vectorize: true}]}, function(x) {
	
		if (x.length == 1) {
			return functionBank["median"](x[0].getPastValues());
		} else {
			return functionBank["median"](x[0].getPastValues(x[1].toNum()));
		}
	});

	defineFunction("PastValues", {object: [functionBank, PrimitiveObject], params:[{name: "[Primitive]",  noVector: true, needPrimitive:true}, {name: "Past Range", defaultVal: "All Time", vectorize: true}]}, function(x) {
	
		var items;
		if (x.length == 1) {
			items = x[0].getPastValues();
		} else {
			items = x[0].getPastValues(x[1].toNum());
		}
		return new Vector(items);
	});

	defineFunction("PastStdDev", {object: [functionBank, PrimitiveObject], params:[{name: "[Primitive]",  noVector: true, needPrimitive:true}, {name: "Past Range", defaultVal: "All Time", vectorize: true}]}, function(x) {

		var items;
		if (x.length == 1) {
			items = x[0].getPastValues();
		} else {
			items = x[0].getPastValues(x[1].toNum());
		}
		if (items.length > 1) {
			return functionBank["stddev"](items);
		} else {
			return new Material(0);
		}
	});

	defineFunction("PastCorrelation", {params:[{name: "[Primitive]",  noVector: true, needPrimitive:true}, {name: "[Primitive]",  noVector: true, needPrimitive:true, object: [functionBank, PrimitiveObject]}, {name: "Past Range", vectorize: true, defaultVal: "All Time"}]}, function(x) {
		var items1;
		var items2;
		if (x[2] != "All Time") {
			items1 = x[0].getPastValues();
			items2 = x[1].getPastValues();
		} else {
			items1 = x[0].getPastValues(x[2].toNum());
			items2 = x[1].getPastValues(x[2].toNum());
		}

		if (items1.length > 1) {
			return functionBank["correlation"]([new Vector(items1), new Vector(items2)]);
		} else {
			return new Material(0);
		}
	});

	defineFunction("PastMax", {object: [functionBank, PrimitiveObject], params:[{name: "[Primitive]",  noVector: true, needPrimitive:true}, {name: "Past Range", defaultVal: "All Time", vectorize: true}]}, function(x) {

		if (x.length == 1) {
			return functionBank["max"](x[0].getPastValues());
		} else {
			return functionBank["max"](x[0].getPastValues(x[1].toNum()));
		}
	});

	defineFunction("PastMin", {object: [functionBank, PrimitiveObject], params:[{name: "[Primitive]",  noVector: true, needPrimitive:true}, {name: "Past Range", defaultVal: "All Time", vectorize: true}]}, function(x) {

		if (x.length == 1) {
			return functionBank["min"](x[0].getPastValues());
		} else {
			return functionBank["min"](x[0].getPastValues(x[1].toNum()));
		}
	});

	defineFunction("Pulse", { params:[{name: "Start Time",  vectorize: true}, {name: "Height",  vectorize: true, defaultVal: 1}, {name: "Width",  vectorize: true, defaultVal: 0}, {name: "Repeat Period",  vectorize: true, defaultVal: 0}]}, function(x) {

		var start = x[0].toNum();
		var height = new Material(1);
		var width = new Material(0);
		var repeat = new Material(0);

		if (x.length > 1) {
			height = x[1].toNum();
			if (x.length > 2) {
				width = x[2].toNum();
				if (x.length > 3) {
					repeat = x[3].toNum();
				}
			}
		}
		if (! start.units) {
			start.units = simulate.timeUnits;
		}
		if (! width.units) {
			width.units = simulate.timeUnits;
		}
		if (! repeat.units) {
			repeat.units = simulate.timeUnits;
		}

		if (repeat.value <= 0) {
			if (eq(simulate.time(), start) || greaterThanEq(simulate.time(), start) && lessThanEq(simulate.time(), plus(start, width))) {
				return height;
			}
		} else if (greaterThanEq(simulate.time(), start)) {
			var x = minus(simulate.time(), mult(functionBank["floor"]([div(minus(simulate.time(), start), repeat)]), repeat));
			var dv = minus(simulate.time(), start);
			if (minus(functionBank["round"]([div(dv, repeat)]), div(dv, repeat)).value == 0 || (greaterThanEq(x, start) && lessThanEq(x, plus(start, width)))) {
				return height;
			}
		}
		return new Material(0, height.units);
	});

	defineFunction("Ramp", { params: [{name: "Start Time",  vectorize: true}, {name: "Finish Time",  vectorize: true}, {name: "Height",  vectorize: true, defaultVal: 1}]}, function(x) {

		var start = x[0].toNum();
		var finish = x[1].toNum();
		var height = new Material(1);
		if (x.length == 3) {
			height = x[2].toNum();
		}
		if (! start.units) {
			start.units = simulate.timeUnits;
		}
		if (! finish.units) {
			finish.units = simulate.timeUnits;
		}
		if (greaterThanEq(simulate.time(), start)) {
			var q = div(mult(functionBank["min"]([minus(finish, start), minus(simulate.time(), start)]), height), minus(finish, start));
			//console.log(q);
			return q;
		}
		return new Material(0, height.units);
	});

	defineFunction("Step", { params: [{name: "Start Time",  vectorize: true},  {name: "Height",  vectorize: true, defaultVal: 1}]}, function(x) {


		var start = x[0].toNum();
		var height = new Material(1);
		if (x.length == 2) {
			height = x[1].toNum();
		}
		if (! start.units) {
			start.units = simulate.timeUnits;
		}

		if (greaterThanEq(simulate.time(), start)) {
			return height;
		}
		
		return new Material(0, height.units);
		
	});
	functionBank["staircase"] = functionBank["step"];

	defineFunction("Smooth", {object: [functionBank, PrimitiveObject], params: [{name: "[Primitive]",  noVector: true, needPrimitive: true}, {name: "Period",  vectorize: true}, {name: "Initial Value",  vectorize: true, defaultVal: "None"}]}, function(x) {

		if (x[1].toNum().value <= 0) {
			throw "MSG: The smoothing period must be greater than 0.";
		}


		if (x.length == 2) {
			return x[0].smoothF(x[1].toNum());
		} else {
			return x[0].smoothF(x[1].toNum(), x[2].toNum()); //With default value
		}
	});

	defineFunction("Delay", {object: [functionBank, PrimitiveObject], params: [{name: "[Primitive]",  noVector: true, needPrimitive: true}, {name: "Delay", vectorize: true}, {name: "Initial Value",  defaultVal: "None", vectorize: true}]}, function(x) {

		if (x[1].toNum().value < 0) {
			throw "MSG: The delay must be greater than or equal to 0.";
		}
		if (x.length == 2) {
			return x[0].pastValue(x[1].toNum());
		} else {
			return x[0].pastValue(x[1].toNum(), x[2].toNum()); //With default value
		}
	});


	defineFunction("Delay1", {object: [functionBank, PrimitiveObject], params: [{name: "[Primitive]",  noVector: true, needPrimitive: true}, {name: "Delay",  vectorize: true}, {name: "Initial Value",  vectorize: true, defaultVal: "None"}]}, function(x) {

		if (x[1].toNum().value <= 0) {
			throw "MSG: The delay must be greater than 0.";
		}


		if (x.length == 2) {
			return x[0].expDelayF(1, x[1].toNum());
		} else {
			return x[0].expDelayF(1, x[1].toNum(), x[2].toNum()); //With default value
		}
	});

	defineFunction("Delay3", {object: [functionBank, PrimitiveObject], params: [{name: "[Primitive]",  noVector: true, needPrimitive: true}, {name: "Delay",  vectorize: true}, {name: "Initial Value",  vectorize: true, defaultVal: "None"}]}, function(x) {

		if (x[1].toNum().value <= 0) {
			throw "MSG: The delay must be greater than 0.";
		}


		if (x.length == 2) {
			return x[0].expDelayF(3, x[1].toNum());
		} else {
			return x[0].expDelayF(3, x[1].toNum(), x[2].toNum()); //With default value
		}
	});



	functionBank["fix"] = function(x, id) {
		testArgumentsSize(x, "Fix", 1, 2);
		var spacing = -1;
		if (x.length == 2) {
			spacing = evaluateNode(x[1].node, x[1].scope).toNum();
		}

		var mySeries = null;
		for (var i = 0; i < simulate.oldAggregateSeries.length; i++) {
			if (simulate.oldAggregateSeries[i].match(id)) {
				mySeries = simulate.oldAggregateSeries[i];
				break;
			}
		}

		if (mySeries === null) {
			mySeries = new AggregateSeries(id, spacing);
			simulate.oldAggregateSeries.push(mySeries);
		}

		return mySeries.get(x[0]);
	};
	functionBank["fix"].delayEvalParams = true;


	functionBank["populationsize"] = function(x) {
		testArgumentsSize(x, "PopulationSize", 1, 1);
		if( x[0] instanceof Agents){
			return new Material(sn("#e"+x[0].agents.length));
		}
		throw "MSG: PopulationSize must be passed an agent population as an argument.";
	}
	PrimitiveObject["populationsize"] = functionBank["populationsize"];

	defineFunction("Remove", {object: [functionBank, AgentObject], params: [{needAgent: true, name: "[Agent]"}]}, function(x) {	
		//console.log(x[0]);
		if(x[0].dead){
			throw "MSG: Cannot remove an already removed agent.";
		}
		
		simulate.tasks.add(new Task({
			time: simulate.time(),
			priority: 10,
			expires: 1,
			name: "Remove Agent",
			action: function(){
				x[0].die();
			}
		}))
		
		
		return new Material(1);
	});

	defineFunction("Add", {object: [functionBank, PrimitiveObject], params: [{name: "[Agent Population]"}, {needAgent: true, name: "[Base]", defaultVal: "Agent Base"}]}, function(x) {	
	
		while((! (x[0] instanceof Agents)) && x[0].container != null){
			x[0] = x[0].container;
		}
		if(! (x[0] instanceof Agents)){
			throw "MSG: You must pass an agent population as the first argument to Add().";
		}
		if(x.length == 2 ){
			return x[0].add(x[1]);
		}else{
			return x[0].add();
		}
	});

	defineFunction("FindAll", {object: [functionBank, VectorObject, PrimitiveObject], params: [{needPopulation: true, name: "[Agent Population]"}]}, function(x) {
		return x[0];	
	});

	defineFunction("ResetTimer", {object: [functionBank, PrimitiveObject], params: [{needPrimitive: true, name: "[Action]"}]}, function(x) {
		if(! (x[0] instanceof Action)){
			throw "MSG: ResetTimer requires an Action primitive.";
		}
		x[0].resetTimer();
		return new Material(0);
	});

	defineFunction("Transition", {object: [functionBank, PrimitiveObject], params: [{needPrimitive: true, name: "[Transition]"}]}, function(x) {
		if(! (x[0] instanceof Transition)){
			throw "MSG: Transition requires an Transition primitive.";
		}
		x[0].doTransition()
		return new Material(0);
	});

	defineFunction("Value", {object: [functionBank, VectorObject, AgentObject], params: [{name: "[Population]"}, {needPrimitive: true, name: "[Primitive]"}]}, function(x) {//need population should be false
		
		var id = x[1].id;
	
		//console.log("v:");
		var population = null;
		//sdsadas
		
		if(! ((x[0] instanceof Agents) || (x[0] instanceof Agent) || (x[0] instanceof Vector) || (! x[0]))){
			x[0] = x[0].toNum();
		}
		
		if(x[0] instanceof Agents){
			population = getPopulation(x[0]);
		}
	
		if(x[0] instanceof Vector){
			population = x[0];
		}
		if(population !== null){
			var res = [];
			var q = -1;
			for(var i = 0; i < population.items.length; i++){
				if(q != -1){
					res.push(population.items[i].children[q]);
				}else{
					for(var j = 0; j < population.items[i].children.length; j++){
						if(population.items[i].children[j].id == id){
							res.push(population.items[i].children[j]);
							q = j;
							break;
						}
					}
				}
			}
		
			return new Vector(res);
		}else if(x[0] instanceof Agent){
			//console.log(x[0].index);
			//console.log(id);
			for(var j = 0; j < x[0].children.length; j++){
				if(x[0].children[j].id == id){
					//console.log(id+"-"+x[0].children[j].value().toString())
					return x[0].children[j];
				}
			}
			throw "MSG: Could not find referenced primitive for \"Value()\".";
		}
		throw "MSG: Invalid type for the first argument of \"Value()\".";
	});

	defineFunction("SetValue", {object: [functionBank, VectorObject, PrimitiveObject, AgentObject], params: [{name: "[Population]"}, {needPrimitive: true, name: "[Primitive]"}, {name: "Value", noVector: true, allowBoolean: true}]}, function(x) {//need population should be false
		var id = x[1].id;
	
		//console.log("v:");
		var population = null;
	
		if(x[0] instanceof Agents){
			population = getPopulation(x[0]);
		}
		if(x[0] instanceof Vector){
			population = x[0];
		}
		if(population !== null){
			var res = [];
			for(var i = 0; i < population.length(); i++){
				for(var j = 0; j < population.items[i].children.length; j++){
					if(population.items[i].children[j].id == id){
						population.items[i].children[j].setValue(x[2]);
					}
				}
			}
			return new Material(1);
		}else if(x[0] instanceof Agent){
			//console.log(x[0].index);
			//console.log(id);
			for(var j = 0; j < x[0].children.length; j++){
				if(x[0].children[j].id == id){
					//console.log(id+"-"+x[0].children[j].value().toString())
					x[0].children[j].setValue(x[2]);
					return new Material(1);
				}
			}
			throw "MSG: Could not find referenced primitive for \"SetValue()\".";
		}
		throw "MSG: Invalid type for the first argument of \"SetValue()\".";
	});

	defineFunction("FindIndex", {object: [functionBank, VectorObject, PrimitiveObject], params: [{needPopulation: true, name: "[Agent Population]"}, {name: "Index", noVector:true, noUnits: true}]}, function(x) {
		var population = x[0];
		//console.log("hi")
		for(var i = 0; i < population.length(); i++){
			if(population.items[i].index+1 == x[1].value){
				return population.items[i];
			}
		}
		
	//	debugger;
	
		throw "MSG: Index not found in population."
	});

	defineFunction("FindState", {object: [functionBank, VectorObject, PrimitiveObject], params: [{needPopulation: true, name: "[Agent Population]"}, {needPrimitive: true, name: "[State]"}]}, function(x) {

		var population = x[0];
	
		if(! ((x[1] instanceof State) || (x[1].dna.type === "State"))){
			throw "MSG: FindState() requires a State primitive as its argument.";
		}
	
		var id = x[1].id;
		var res = [];
	
		for(var i = 0; i < population.items.length; i++){
			if(population.items[i].stateIDs.indexOf(id) !== -1){
				res.push(population.items[i]);
			}
		}
	
		return new Vector(res);
	});

	defineFunction("FindNotState", {object: [functionBank, VectorObject, PrimitiveObject], params: [{needPopulation: true, name: "[Agent Population]"}, {needPrimitive: true, name: "[State]"}]}, function(x) {
	
		var population = x[0];
		if(! ((x[1] instanceof State) || (x[1].dna.type === "State"))){
			throw "MSG: FindNotState() requires a State primitive as its argument.";
		}
	
		var id = x[1].id;
		var res = [];
	
		for(var i = 0; i < population.items.length; i++){
			if(population.items[i].stateIDs.indexOf(id) === -1){
				res.push(population.items[i]);
			}
		}
	
		return new Vector(res);
	});

	defineFunction("FindNearby", {object: [functionBank, VectorObject, PrimitiveObject], params: [{needPopulation: true, name: "[Agent Population]"}, {name: "Target"}, {name: "Distance Limit", noVector:true}]}, function(x) {
		var population = x[0];
		
		var loc = locationValue(x[1]);
		
		try{
			var a = agent(x[1]);
		}catch(err){
		}
		
		
		var res = [];
		for(var i = 0; i < population.length(); i++){
			var item = agent(population.items[i]);
			if(item !== a){
				if( lessThanEq(distance(loc, item), x[2]) ){
					res.push(item);
				}
			}
		}
		return new Vector(res);
	});

	defineFunction("FindNearest", {object: [functionBank, VectorObject, PrimitiveObject], params: [{needPopulation: true, name: "[Agent Population]"}, {name: "Target"}, {noUnits: true, noVector: true, defaultVal: 1, name: "Count"}]}, function(x) {
		var population = x[0];
		var count = 1;
		
		if(x.length == 3){
			count = x[2].value;
			
			if(count < 1){
				throw "MSG: You must select at least one agent in FindNearest().";
			}
			if(count != Math.floor(count)){
				throw "MSG: Count must be an integer."
			}
		}
		
	
		var loc = locationValue(x[1]);
		try{
			var a = agent(x[1]);
		}catch(err){
		}
		
	
		var res = [];
		for(var i = 0; i < population.items.length; i++){
			var item = agent(population.items[i]);
			if(item !== a){
				res.push({distance: distance(loc, item), item: item});
			}
		}
		
		if(res.length < count){
			throw "MSG: Can't find nearest "+count+" agents of a population of size "+res.length+".";
		}
		
	
		var minItems = [res[0]];
		for(var i = 1; i < res.length; i++){
			var added = false;
			for(var j = 0; j < minItems.length; j++){
				if(lessThan(res[i].distance, minItems[j].distance)){
					minItems.splice(j, 0, res[i])
					added = true;
					break;
				}
			}
			if((! added) && minItems.length<count){
				minItems.push(res[i]);
			}else if(minItems.length>count){
				minItems.length = count;
			}
		}
	
		if(minItems.length === 1){
			return minItems[0].item;
		}else{
			minItems.sort(function(a, b){
				return a.distance - b.distance;
			});
			return new Vector(minItems.map(function(x){return x.item}));
		}
	});


	defineFunction("FindFurthest", {object: [functionBank, VectorObject, PrimitiveObject], params: [{needPopulation: true, name: "[Agent Population]"}, {name: "Target"}, {noUnits:true, noVector:true, defaultVal:1, name: "Count"}]}, function(x) {
	
		var population = x[0];

		var count = 1;
		if(x.length === 3){
			count = x[2].value;
			
			if(count<1){
				throw "MSG: You must select at least one agent in FindFurthest().";
			}
			if(count != Math.floor(count)){
				throw "MSG: Count must be an integer."
			}
		}
		
	
	
		var loc = locationValue(x[1]);
		try{
			var a = agent(x[1]);
		}catch(err){
		}
		
		
		var res = [];
		for(var i = 0; i < population.items.length; i++){
			var item = agent(population.items[i]);
			if(item !== a){
				res.push({distance: distance(loc,item), item: item});
			}
		}
	
		if(res.length < count){
			throw "MSG: Can't find furthest "+count+" agents of a population of size "+res.length+".";
		}
	
		var minItems = [res[0]];
		for(var i = 1; i < res.length; i++){
			var added = false;
			for(var j = 0; j < minItems.length; j++){
				if(greaterThan(res[i].distance, minItems[j].distance)){
					minItems.splice(j, 0, res[i])
					added = true;
					break;
				}
			}
			if((! added) && minItems.length<count){
				minItems.push(res[i]);
			}else if(minItems.length>count){
				minItems.length = count;
			}
		}
	
		if(minItems.length === 1){
			return minItems[0].item;
		}else{
			minItems.sort(function(a, b){
				return b.distance - a.distance;
			});
			return new Vector(minItems.map(function(x){return x.item}));
		}
	});

	defineFunction("Index", {object: [functionBank, AgentObject], params: [{noVector: true, needAgent: true, name: "[Agent]"}]}, function(x) {
		//console.log("--")
		//console.log(x);
		//die
		return new Material(sn("#e"+(x[0].index+1)));
	});

	defineFunction("Connect", {object: [functionBank, AgentObject], params: [{needAgent: true, name: "[Agent 1]"}, {name: "[Agent 2]"}, {name: "Weight", defaultVal: "missing"}]}, function(x) {
		
		var weight = undefined;
		if( x[2] != "missing" ){
			weight = x[2];
		}
		
		if( x[1] instanceof Vector ){
			x[1].items.forEach(function(a){
				x[0].connect(a, weight);
			});
		}else{
			x[0].connect(x[1], weight);
		}
		return new Material(1);
	});

	defineFunction("Unconnect", {object: [functionBank, AgentObject], params: [{needAgent: true, name: "[Agent 1]"}, {name: "[Agent 2]"}]}, function(x) {
		if(x[1] instanceof Vector){
			x[1].items.forEach(function(a){
				x[0].unconnect(a);
			});
		}else{
			x[0].unconnect(x[1]);
		}
		return new Material(1);
	});

	defineFunction("Connected", {object: [functionBank, AgentObject], params: [{needAgent: true, name: "[Agent]"}]}, function(x) {
		return new Vector(x[0].connected.slice());
	});
	
	defineFunction("ConnectionWeight", {object: [functionBank, AgentObject], params: [{needAgent: true, name: "[Agent 1]"}, {name: "[Agent 2]"}]}, function(x){
		if(x[1] instanceof Vector){
			return new Vector(x[1].items.map(function(a){
				return x[0].connectionWeight(a);
			}));
		}else{
			return x[0].connectionWeight(x[1]);
		}
	} );
	
	defineFunction("SetConnectionWeight", {object: [functionBank, AgentObject], params: [{needAgent: true, name: "[Agent 1]"}, {name: "[Agent 2]"}, {name: "Weight"}]}, function(x){
		if(x[1] instanceof Vector){
			x[1].items.forEach(function(a){
				x[0].setConnectionWeight(a, x[2]);
			});
		}else{
			x[0].setConnectionWeight(x[1], x[2]);
		}
		return new Material(1);
	} );

	functionBank["die"] = function(x) {
		console.log(x);
		throw "MSG: Terminated using \"die\".";
	}

	functionBank["print"] = function(x) {
		
		if(x.length==2){
			console.log(x[0].value.toString());
			console.log(x[1]);
			return x[1];
		}else{
			console.log(x[0]);
			return x[0];
		}
	}

	defineFunction("Width", {params: [{needAgents: true, name: "[Agent Population]"}]}, function(x) {
		return x[0].geoWidth;
	});

	defineFunction("Height", {params: [{needAgents: true, name: "[Agent Population]"}]}, function(x) {
		return x[0].geoHeight;
	});

	defineFunction("Distance", {object: [functionBank, AgentObject], params: [{name: "Location 1"}, {name: "Location 2"}]}, function(x) {
		x[0] = locationValue(x[0]);
		x[1] = locationValue(x[1]);
		
		return distance(x[0], x[1]);
	});



	defineFunction("Location", {object: [functionBank, AgentObject], params: [{needAgent: true, name: "[Agent]"}]}, function(x) {
		if(! x[0].location){
			throw "MSG: The location is not defined."
		}else{
			return x[0].location.fullClone();
		}
	});

	defineFunction("SetLocation", {object: [functionBank, AgentObject], params: [{needAgent: true, name: "[Agent]"}, {needVector: true, name: "Direction"}]}, function(x) {
		var v = x[1].toNum();
		var agent = x[0];
		agent.location = v.fullClone();
		if(! agent.location.names){
			agent.location.names = ["x", "y"];
			agent.location.namesLC = ["x", "y"];
		}
		return new Material(0);
	});

	defineFunction("Move", {object: [functionBank, AgentObject], params: [{needAgent: true, name: "[Mover]"}, {needVector: true, name: "Direction"}]}, function(x) {
	
		var v = x[1].toNum();
		shiftLocation(x[0], plus(x[0].location, v));
		return new Material(0);
	});

	function locationValue(x){
		if(x instanceof Vector){
			if(x.items.length != 2){
				throw "MSG: Location vector does not contain exactly two elements."
			}
			else{
				return x;
			}
		}else{
			try{
				return agent(x).location;
			}catch(err){
				throw "MSG: Location must be a vector or an agent.";
			}
		}
	}
	
	defineFunction("MoveTowards", {object: [functionBank, AgentObject], params: [{needAgent: true, name: "[Mover]"}, {name: "[Target]"}, {name: "Distance", noVector: true}]}, function(x) {
		var a = x[0];
		
		var l1 = locationValue(x[1]);
		var l2 = a.location;
	
		var distx = minus(l1.items[0], l2.items[0]);
		var disty = minus(l1.items[1], l2.items[1]);
	
		if(distx.value==0 && disty.value==0){
			return new Material(1);
		}
	
	
		if(a.container.geoWrap){
		
			if(greaterThan(distx, a.container.halfWidth)){
				distx = minus(a.container.geoWidth, distx)
			}else if(lessThan(distx, negate(a.container.halfWidth))){
				distx = minus(distx, negate(a.container.geoWidth))
			}
			if(greaterThan(disty, a.container.halfHeight)){
				disty = minus(a.container.geoHeight, disty)
			}else if(lessThan(disty, negate(a.container.halfHeight))){
				disty = minus(disty, negate(a.container.geoHeight))
			}
		}
	
		var dir = new Vector([distx, disty], ["x","y"])
	
		//var dir = minus(agent(x[1]).location, agent(x[0]).location);

		shiftLocation(x[0], plus(x[0].location, mult(dir, div(x[2],distance(x[0], (x[1] instanceof Vector)?x[1]:agent(x[1]))))));
	
		return new Material(1);
	});

	PrimitiveBase = makeObjectBase(PrimitiveObject);

	AgentBase = makeObjectBase(AgentObject);
	
	PrimitiveBase.parent = AgentBase;

	VectorBase = makeObjectBase(VectorObject);

});


function distance(a,b){
	var l1 = (a instanceof Vector)?a:a.location;
	var l2 = (b instanceof Vector)?b:b.location;
	//console.log(a)
	//console.log(b)
	
	var s1 = l1.items[0].toString()+","+l1.items[1].toString();
	var s2 = l2.items[0].toString()+","+l2.items[1].toString();
	if(simulate.distanceCache[s1+"-"+s2]){
		return simulate.distanceCache[s1+"-"+s2];
	}else if(simulate.distanceCache[s2+"-"+s1]){
		return simulate.distanceCache[s2+"-"+s1];
	}
	var distx = minus(l1.items[0], l2.items[0]);
	var disty = minus(l1.items[1], l2.items[1]);
	
	var agents = null;
	if(! (a instanceof Vector)){
		agents = a.container;
	}else if(! (b instanceof Vector)){
		agents = b.container;
	}
	if(agents !== null && agents.geoWrap){
		if(greaterThan(distx, agents.halfWidth)){
			distx = minus(agents.geoWidth, distx)
		}else if(lessThan(distx, negate(agents.halfWidth))){
			distx = minus(distx, negate(agents.geoWidth))
		}
		if(greaterThan(disty, agents.halfHeight)){
			disty = minus(agents.geoHeight, disty)
		}else if(lessThan(disty, negate(agents.halfHeight))){
			disty = minus(disty, negate(agents.geoHeight))
		}
	}

	var v1 = distx.value;
	var v2 = disty.value;
	
	if (distx.units !== disty.units) {
		v2 = fn["*"](v2, convertUnits(distx.units, disty.units));
	}
	
	var dist = fn["real-part"](fn["sqrt"](fn["+"]( fn["*"](v1,v1), fn["*"](v2,v2)) ));
	dist = new Material(dist, distx.units);
	simulate.distanceCache[s1+s2]=dist;
	return dist;
	//var dist = functionBank["sqrt"]([plus( power(distx, (new Material(2))), power(disty, (new Material(2))) )])

	//dist.value = fn["real-part"](dist.value);
	//return dist;
}

function agent(obj){
	if((obj instanceof Variable) || (obj instanceof Stock)){
		obj = obj.toNum();
	}
	if(obj instanceof Agent){
		return obj;
	}else if((! strictAgentResolution) && obj instanceof Primitive){ // flexAgents is now disabled by default, kept for compatibility 
		return agent(obj.container);
	}else{
		throw "MSG: An agent is required here.";
	}
}

function agents(obj){
	if(obj instanceof Agents){
		return obj;
	}else if((obj instanceof Primitive) || (obj instanceof Agent)){
		return agents(obj.container);
	}else{
		throw "MSG: An agent population is required here.";
	}
}

function getPopulation(item){
	if(item.items){
		return item;
	}
	var res = [];
	if(item instanceof Agents){
		return new Vector(item.agents.slice());
	}else if(item.toNum() instanceof Vector){
		return item.toNum();
	}else{
		return new Vector([agent(item)]);
	}
}

function shiftLocation(agent, newLocation){
	
	if(agent.container.geoWrap){
		while(lessThan(newLocation.items[0], new Material(0))){
			newLocation.items[0] = plus(newLocation.items[0], agent.container.geoWidth);
		}
		while(greaterThan(newLocation.items[0], agent.container.geoWidth)){
			newLocation.items[0] = minus(newLocation.items[0], agent.container.geoWidth);
		}
		while(lessThan(newLocation.items[1], new Material(0))){
			newLocation.items[1] = plus(newLocation.items[1], agent.container.geoHeight);
		}
		while(greaterThan(newLocation.items[1], agent.container.geoHeight)){
			newLocation.items[1] = minus(newLocation.items[1], agent.container.geoHeight);
		}
	}
	
	agent.location = newLocation;
	if(! agent.location.names){
		agent.location.names = ["x","y"];
		agent.location.namesLC = ["x","y"];
	}
}

function isUndefined(item) {
	return typeof(item) == "undefined";
}

function isDefined(item) {
	return !isUndefined(item);
}

function constraintAlert(item, type, val) {
	var msg = "The " + (type == "max" ? "maximum" : "minimum") + " constraint on the primitive <b>" + clean(getName(findID(item.id))) + "</b> has been violated. The primitive's value attempted to become " + val.value + " when the " + (type == "max" ? "maximum" : "minimum") + " allowed value is " + (type == "max" ? item.dna.maxConstraint : item.dna.minConstraint) + ".";
	error(msg, item, false);
}

function error(msg, primitive, showEditor, line, details) {
	var x = {
		msg: msg,
		primitive: primitive,
		showEditor: showEditor,
		line: line,
		details: details
	};
	if (isLocal()) {
		console.log("Error:")
		console.log(x);
	}
	throw x;
}

function testPrimitive(x, name, primitiveIndexes) {
	for (var i = 0; i < primitiveIndexes.length; i++) {
		if (! (x[primitiveIndexes[i]] instanceof Primitive)) {
			throw "MSG: " + name + "() requires a primitive reference to be passed to it as argument number "+(primitiveIndexes[i]+1)+".";
		}
	}

}

// For printing vectors
function prepareDisplay(x){
	return x;
}

"use strict";
/*

Copyright 2010-2015 Scott Fortmann-Roe. All rights reserved.

This file may distributed and/or modified under the
terms of the Insight Maker Public License (https://InsightMaker.com/impl).

*/


function AggregateSeries(mid, mspacing) {
	this.id = mid;
	this.spacing = mspacing;
	this.oldValues = [];
}

AggregateSeries.method("match", function(mid) {
	return this.id == mid;
});


AggregateSeries.method("get", function(data) {
	var index = 0;
	if (this.spacing < 0) {
		index = 0;
	} else if (this.spacing == 0) {
		index = Math.floor(div(minus(simulate.time(), simulate.timeStart), simulate.UserTimeStep).value);
	} else {
		index = Math.floor(div(minus(simulate.time(), simulate.timeStart), this.spacing.forceUnits(simulate.timeUnits)).value);
	}
	
	while (this.oldValues.length - 1 < index) {
		this.oldValues.push(evaluateNode(data.node,data.scope));
	}
	if(this.oldValues[index].fullClone){
		return this.oldValues[index].fullClone();
	}else{
		return this.oldValues[index];
	}
});

function DataBank() {
	this.dataSeries = {};
}

DataBank.method("series", function(){
	return Object.keys(this.dataSeries);
});

DataBank.method("clone", function(){
	var d = new DataBank();
	var keys = this.series();
	for(var i=0; i<keys.length; i++){
		d.dataSeries[keys[i]] = this.dataSeries[keys[i]];
	}
	return d;
})

DataBank.method("getSeries", function(n) {
	if (! this.dataSeries[n]) {
		this.dataSeries[n] = [];
	}
	return this.dataSeries[n];
});

DataBank.method("trimValues", function(newUbound) {
	var series = this.series();
	for (var i = 0; i < series.length; i++) {
		var d = this.getSeries(series[i]);
		if (d.length - 1 > newUbound) {
			d.splice(newUbound+1, d.length-newUbound+1);
		}
	}
});

function ExpGroup(n , kv , iv){
  this.stocks = [];
  this.k = kv;
 
    for(var i=1; i<= n; i++){
        this.stocks.push(iv);
    }
    this.out = iv;
  }
  
ExpGroup.method("moveForward", function( inp ){
    var nexp = new ExpGroup(this.stocks.length, this.k, new Material(0));
    
    nexp.out = this.stocks[this.stocks.length-1];
    
    for(var i = this.stocks.length-1;  i > 0; i--){
      nexp.stocks[i] = plus(mult(this.stocks[i], new Material(1-this.k)), mult(this.stocks[i-1], new Material(this.k))); //this.stocks[i]*(1-k) + this.stocks[i-1]*k;
    }

    nexp.stocks[0] = plus(mult(this.stocks[0], new Material(1-this.k)), mult(inp, new Material(this.k)));//stocks[0]*(1-k) + inp*k;
    
    return nexp;
  }
);


"use strict";
/*

Copyright 2010-2015 Scott Fortmann-Roe. All rights reserved.

This file may distributed and/or modified under the
terms of the Insight Maker Public License (https://InsightMaker.com/impl).

*/


function Primitive() {
	this.id = null;
	this.agentId = null;
	this.index = null;
	this.instanceId = null;

	this.container = null;

	this.dna = null;

	this.equation = null;

	this.cachedValue = undefined;
	this.pastValues = [];
	this.pastData = new DataBank();

	this.frozen = false;

	this.parent = PrimitiveBase;
}
Primitive.method("clone", function(){
	var p = new this.constructorFunction();
	p.dna = this.dna;
	p.container = this.container;
	p.agentId = this.agentId;
	p.index = this.index;
	p.id = this.id;
	p.createIds();
	p.pastValues = this.pastValues.slice(0);

	if(this.dna.slider){
		if(simulate.sliders[this.dna.id]){
			simulate.sliders[this.dna.id].push(p);
		}else{
			simulate.sliders[this.dna.id] = [p];
		}

	}

	p.cachedValue = this.cachedValue?this.cachedValue.fullClone():this.cachedValue;

	this.innerClone(p);

	return p;
});
Primitive.method("clearCached", function(){
	this.cachedValue = undefined;
});
Primitive.method("storeValue", function(){
	if(isUndefined(this.cachedValue)){
		this.value();
	}
	this.pastValues.push(this.cachedValue)
})
Primitive.method("toNum", function(){
	return this.value();
});
Primitive.method("calculateValue", function() {
	throw "MSG: "+getText("[%s] does not have a value and can not be used as a value in an equation.", this.dna.name);
});
Primitive.method("createIds", function(){
	this.instanceId = simulate.getID(this.agentId+"-"+this.index);
});
Primitive.method("getPastValues",  function( length ){

	var items = this.pastValues.slice();

	/* Add current value to array if needed */
	var bins =  Math.ceil(div(simulate.time(), this.dna.solver.userTimeStep).value)+1;
	if(items.length < bins){
		items.push(this.value());
	}

    if( isUndefined(length) ){
      res = items.map(function(x){return x.fullClone()});
    }else{
		var bins =  Math.ceil(div(length.forceUnits(simulate.timeUnits), this.dna.solver.userTimeStep).value);

		var res = [];
	    for(var i = Math.max(0, items.length-1-bins); i < items.length; i++){
			res.push(items[i].fullClone());
	    }
	}

	//res = [this.value().fullClone()].concat(res);
	//console.log(res.map(function(x){return x.value}));
    return res;
});
Primitive.method("pastValue", function pastValue(delay, defaultValue){
    var periods;

    if( this.pastValues.length - 1 < Math.round((simulate.time().value-simulate.timeStart.value)/this.dna.solver.userTimeStep.value) ){
      periods  = div(delay.forceUnits(simulate.timeUnits), this.dna.solver.userTimeStep).value;
    }else{
      periods  = div(delay.forceUnits(simulate.timeUnits), this.dna.solver.userTimeStep).value + 1;
    }

	if(periods == 0){
		return this.value();
	}

    if( Math.ceil(periods) > this.pastValues.length ){
        if( isUndefined(defaultValue) ){
          if( this.pastValues.length > 0 ){
            return this.pastValues[0].fullClone();
          }else{
            return this.value();
          }
        }else{
          return defaultValue;
        }
    }

    if( periods == Math.round(periods) ){
      if( periods == 0 ){
        return value;
      }else{
        return this.pastValues[this.pastValues.length - periods].fullClone();
      }
    }

    var fraction =  periods - Math.floor(periods);
    var entry =  Math.floor(periods);
    var first_period, second_period;
    if( entry == 0 ){
      first_period = this.value();
    }else{
      first_period = this.pastValues[this.pastValues.length - entry];
    }
    second_period = this.pastValues[this.pastValues.length-1-entry];
    return plus(mult(first_period, new Material(1-fraction)), mult(second_period, new Material(fraction)));
});

Primitive.method("smoothF", function(delay, initialV){
	//console.log("--")
    var a =  div(this.dna.solver.userTimeStep, delay.forceUnits(simulate.timeUnits)).value;

    var dat =  this.pastData.getSeries( "Smooth: " + a + "," + initialV );

    if( dat.length == 0 ){
      if( isUndefined(initialV) ){
        dat.push(this.pastValues[0]?this.pastValues[0]:this.value());
      }else{
        dat.push(initialV);
      }
    }

	//console.log("--")
	//console.log(this.pastValues.slice())
	//console.log(dat.slice())
	var maxInd = Math.floor((simulate.time().value-simulate.timeStart.value)/this.dna.solver.userTimeStep.value);

    for(var i = dat.length-1; i < maxInd; i++){
		var m =  this.pastValues[i]?this.pastValues[i]:(this.cachedValue?this.cachedValue:this.pastValues[i-1]);
		//console.log(m.value);
		dat.push(plus(mult(dat[i], new Material(1-a)), mult(new Material(a), m)));
    }
	//if(dat.length <= maxInd){
	//	dat.push(plus(mult(dat[i-1], new Material(1-a)), mult(new Material(a), this.value())));
	//}

    return dat[dat.length-1].fullClone();
  });
Primitive.method("expDelayF", function( order , delay , initialV ){
    this.value();

    var  a =  div(this.dna.solver.userTimeStep, delay.forceUnits(simulate.timeUnits)).value * order;

    var  dat =  this.pastData.getSeries("ExpDelay: " + order+"," + delay.value + "," + initialV);

    if( dat.length == 0 ){
      if( isUndefined(initialV) ){
        dat.push(new ExpGroup( order, a, this.pastValues[0]?this.pastValues[0]:this.value() ));
      }else{
        var exIV = new ExpGroup( order, a, initialV );
        dat.push(exIV.moveForward( this.pastValues[0]?this.pastValues[0]:this.value() ));
      }
    }

    for(var i = dat.length; i < this.pastValues.length; i++){
      dat.push(dat[i-1].moveForward(this.pastValues[i]));
    }
    //console.log(dat);
    return dat[dat.length-1].out.fullClone();
  });
Primitive.method("testUnits", function(m, ignoreFlow) {
	//console.log("testing units")
	if(m instanceof Vector){
		var me = this;
		m.recurseApply(function(x){
			me.testUnits(x, ignoreFlow);
			return x;
		});
		return
	}

	if((! this.dna.units) && m.units){
		error(getText("Wrong units generated for %s. Expected no units and got %s. Either specify units for the primitive or adjust the equation.", "<i>"+clean(this.dna.name)+"</i>", "<i>"+clean(m.units.toString())+"</i>"), this, true);
	}else if (this.dna.units !== m.units) {
		var scale = convertUnits(m.units, this.dna.units, true);//XXX fixme
		if (scale == 0) {
			if(isLocal()){
				console.log(m.units);
				console.log(this.dna.units);
			}
			error(getText("Wrong units generated for %s. Expected %s, and got %s.", "<i>"+clean(this.dna.name)+"</i>", "<i>"+clean(this.dna.units.toString())+"</i>", "<i>"+clean(m.units.toString())+"</i>"), this, true);
			return
		} else {
			//console.log("----+")
			//console.log("mod1")
			//console.log(m.units.exponents)
			m.value = m.value * scale;
			m.units = this.dna.units;
			//console.log(m.units.exponents)
			//console.log((this instanceof Flow));
			//console.log(ignoreFlow);
		}
	}
	if((this instanceof Flow) && (ignoreFlow != true) && this.dna.flowUnitless){
			//console.log("mod2")
			//console.log(m.units.exponents)
		var x = mult(m, new Material(1, simulate.timeUnits));
		m.value = x.value;
		m.units = x.units;

		//console.log(m.units.exponents)
		//console.log("done")
	}
});
Primitive.method("setValue", function() {
	throw "MSG: "+getText("You cannot set the value for that primitive.");
});
Primitive.method("printPastValues", function() {
	console.log(this.pastValues.map(function(x){return x.value;}))
});

Primitive.method("value", function() {

	if(isUndefined(this.cachedValue) && this.frozen && this.pastValues.length > 0 ){
		var v = this.pastValues[this.pastValues.length - 1];
		if(v.fullClone){
			this.cachedValue = v.fullClone();
		}else{
			this.cachedValue = v;
		}
	}

	if (isUndefined(this.cachedValue)) {


		if(simulate.valuedPrimitives.indexOf(this) > -1){
			throw "MSG: "+getText("Circular equation loop identified including the primitives: %s", simulate.valuedPrimitives.slice(simulate.valuedPrimitives.indexOf(this)).map(function(x){return x.dna.name}).join(", "));
		}
		simulate.valuedPrimitives.push(this);

		try{
			var x = this.calculateValue().toNum();
			if((x instanceof Material) && ! isFinite(x.value)){
				if(isLocal()){
					console.log(x)
				}
				if(this instanceof Stock){
					throw("MSG: "+getText("The stock has become infinite in size. Check the flows into it for rapid growth."));
				}else{
					throw("MSG: "+getText("The result of this calculation is not a number (are you dividing by 0?)."));
				}
			}
		}catch(err){
			if(! err.substr){
				throw err; //it's already an object, let's kick it up the chain
			}
			if(isLocal()){
				console.log(err);
			}
			if(err.substr(0,4) == "MSG:"){
				error(err.substr(4,err.length), this, true);
			}else{
				error(err, this, true);
			}
		}
		if(! (this instanceof State)){
			this.testUnits(x);
			this.testConstraints(x);
		}
		//if (this.pastValues.length - 1 < simulate.timeIndex-1) {
		//	this.pastValues = [];
			//this.pastValues.push(null);
		//	this.cutoff = simulate.timeIndex;
		//}
		this.cachedValue = x;
	}


	if(this.cachedValue.fullClone){
		return this.cachedValue.fullClone();
	}else{
		return this.cachedValue;
	}
});
Primitive.method("testConstraints", function(x) {
	var me = this;
	var test = function(x){
		if ((me.dna.maxConstraintType == 1 && x.value > me.dna.maxConstraint) || (me.dna.maxConstraintType == 2 && x.value >= me.dna.maxConstraint)) {
			constraintAlert(me, "max", x);
		}
		if ((me.dna.minConstraintType == 1 && x.value < me.dna.minConstraint) || (me.dna.minConstraintType == 2 && x.value <= me.dna.minConstraint)) {
			constraintAlert(me, "min", x);
		}
		return x;
	}
	if(x instanceof Vector){
		x.recurseApply(test);
	}else{
		test(x);
	}
});
Primitive.method("setEquation", function(tree, neighborhood) {

	//console.log("==");
	//console.log(this.name);
	//console.log(tree);
	if (this instanceof Flow || this instanceof Transition) {
		if(this.omega !== null){
			neighborhood.omega = this.omega;
		}
		if(this.alpha !== null){
			neighborhood.alpha = this.alpha;
		}
	}

	try{
		this.equation = trimTree(tree, neighborhood);
	}catch(err){
		if(isLocal()){
			console.log(err);
		}
		error(err.substr(4,err.length), this, true);
	}
})

function Placeholder(dna, primitive){
	this.dna = dna;
	this.id = dna.id;
	this.primitive = primitive;
}
Placeholder.inherits(Primitive);
Placeholder.method("calculateValue",function(){
	error(getText("[%s] is a placeholder and cannot be used as a direct value in equations.", clean(this.dna.name)), this.primitive, true);
});

function State() {
	Primitive.call(this);
	this.active = null;
	this.downStreamTransitions = [];
	this.constructorFunction = State;
}
State.inherits(Primitive);
State.method("innerClone", function(p){
	p.setValue(this.active);

});
State.method("setValue", function(value) {
	this.setActive(trueValue(value));
	this.cachedValue = undefined;
	simulate.valuedPrimitives = [];
	this.value();
	if(this.agentId){
		this.container.updateStates();
	}
});
State.method("calculateValue", function() {
	if (this.active === null) {
		//console.log("calc");
		this.setInitialActive(true);
	}

	if (this.active){
		return new Material(1);
	}else{
		return new Material(0);
	}

});
State.method("setInitialActive", function(suppress) {
	var init;

	try{
		init = evaluateTree(this.equation, globalVars(this)).toNum();
	}catch(err){
		if(! err.substr){
			throw err; //it's already an object, let's kick it up the chain
		}
		if(isLocal()){
			console.log(err);
		}
		if(err.substr(0,4)=="MSG:"){
			error(err.substr(4,err.length), this, true);
		}else{
			error(err, this, true);
		}
	}

	//console.log("--")
	//console.log(this.dna.name)
	//console.log("init")

	this.setActive(trueValue(init), suppress);
	if(this.agentId){
		this.container.updateStates();
	}

});
State.method("setActive", function(active, suppress){
	this.active = active;

	if( (! active) || this.dna.residency === null){
		if(! suppress){
			if (active) {
				if (!simulate.transitionPrimitives) {
					simulate.transitionPrimitives = [];
				}

				if(simulate.transitionPrimitives.length > 1200 && simulate.transitionPrimitives.indexOf(this) > -1){
					throw "MSG: " + getText("Circular fully active transition loop identified including the states: %s", simulate.transitionPrimitives.slice(0, 5).map(function(x){return x.dna.name}).join(", "));
				}
				simulate.transitionPrimitives.push(this);
			}

			for(var i = 0; i < this.downStreamTransitions.length; i++){
				scheduleTrigger.call(this.downStreamTransitions[i]);
			}

			if (active) {
				simulate.transitionPrimitives = [];
			}

		}
	}else{
		var me = this;
		simulate.tasks.add(new Task({
			name: "State Residency",
			time: plus(simulate.time(), this.dna.residency),
			priority: 5,
			expires: 1,
			action: function(){
				for(var i = 0; i < me.downStreamTransitions.length; i++){
					scheduleTrigger.call(me.downStreamTransitions[i]);
				}
			}
		}));
	}

});
State.method("getActive", function(){
	if (this.active === null) {
		//console.log("get");
		this.setInitialActive(true);
	}
	return this.active;
});


function Transition() {
	Primitive.call(this);
	this.alpha = null;
	this.omega = null;
	this.scheduledTrigger = null;
	this.constructorFunction = Transition;
}
Transition.inherits(Primitive);
Transition.method("innerClone", function(p){
});
Transition.method("setEnds", function(alpha, omega) {
	this.alpha = alpha;
	this.omega = omega;
	if(alpha){
		alpha.downStreamTransitions.push(this);
	}
});
Transition.method("canTrigger", function() {
	return (! this.alpha) || (this.alpha && this.alpha.getActive()) || (this.dna.repeat && this.dna.trigger != "Condition");
});
Transition.method("trigger", function() {
	//console.log("--")
	//console.log(this.dna.name)
	//console.log(simulate.time().value);
	//console.log("transition");

	this.scheduledTrigger = null;

	if(this.frozen){
		return;
	}

	if(this.alpha){
		this.alpha.setActive(false);
	}
	if(this.omega){
		this.omega.setActive(true);
	}
	if(this.agentId){
		this.container.updateStates();
	}
	if(this.dna.repeat && this.dna.trigger != "Condition"){
		scheduleTrigger.call(this);
	}
});

function scheduleTrigger(){
	updateTrigger.call(this, true);

}

function clearTrigger(force){
	if(this.scheduledTrigger && (force || (! this.dna.repeat))){
		this.scheduledTrigger.kill();
		this.scheduledTrigger = null;
	}
}

function updateTrigger(clear){
	if( clear ){
		clearTrigger.call(this);
	}


	if( this.canTrigger() ){
		try{
			var v = evaluateTree(this.equation, globalVars(this)).toNum();
		}catch(err){
			if(! err.substr){
				throw err; //it's already an object, let's kick it up the chain
			}
			if(isLocal()){
				console.log(err);
			}
			if(err.substr(0,4)=="MSG:"){
				error(err.substr(4, err.length), this, true);
			}else{
				error(err, this, true);
			}
		}

		if(this.dna.trigger == "Condition"){
			if(trueValue(v)){
				//console.log("triggering")
				//console.log(v);
				this.trigger();
				//console.log("end triggering")
			}
		}else{
			if(! (v instanceof Material)){
				error(getText("The value of this trigger must evaluate to a number."), this, true);
			}

			var t;

			if( this.dna.trigger == "Timeout" ){

				if(! v.units){
					v.units = simulate.timeUnits;
				}

				if(this.scheduledTrigger && eq(v, this.scheduledTrigger.data.value)){
					return;
				}
				if(this.dna.repeat && v.value == 0){
					error(getText("A trigger Timeout of 0 with 'Repeat' set to true results in an infinite loop."), this, true);
				}

				t = v;

			}else if( this.dna.trigger == "Probability" ){

				if(v.units){
					error(getText("The probability for the trigger had units of %s. Probabilities must be unitless.", this.value().units.toString()), this, true);
				}
				var v = v.value
				if(this.scheduledTrigger && eq(v, this.scheduledTrigger.data.value)){
					return;
				}

				if(v == 1){
					if(this.dna.repeat){
						error(getText("A trigger probability of 1 with 'Repeat' as true results in an infinite loop."), this, true);
					}
					t = new Material(0, simulate.timeUnits);
				}else if(v > 1){
					error(getText("The probability for the trigger must be less than or equal to 1."), this, true);
				}else if(v < 0){
					error(getText("The probability for the trigger must be greater than or equal to 0."), this, true);
				}else if(v == 0){
					if(! this.scheduledTrigger){
						return;
					}
				}else{
					var l = -Math.log(1-v);
					t = new Material(RandExp(l), simulate.timeUnits);
				}

			}

			/*console.log("--");
			console.log(this);
			console.log(v);
			console.log(t);
			debugger;*/

			var start = simulate.time()

			if(this.scheduledTrigger){

				this.scheduledTrigger.kill();
				if(this.dna.trigger == "Timeout"){
					if(lessThanEq(t, minus(simulate.time(), this.scheduledTrigger.data.start))){
						this.scheduledTrigger = null;
						this.trigger();
						return;
					}else{
						var start = this.scheduledTrigger.data.start;
						t = minus(t, minus(simulate.time(), start));
						this.scheduledTrigger = null;
					}
				}else if(this.dna.trigger == "Probability"){
					if( v == 0){
						this.scheduledTrigger = null;
						return;
					}
					t = minus(this.scheduledTrigger.time, simulate.time());

					var l0 = -Math.log(1-this.scheduledTrigger.data.value);
					var l = -Math.log(1-v);

					t = mult(t, new Material(l0/l));

					start = this.scheduledTrigger.data.start;

					this.scheduledTrigger = null;
				}
			}
			//console.log(t);
			t = plus(t, simulate.time());

			var me = this;
			this.scheduledTrigger = new Task({
				name: "Trigger",
				time: t,
				priority: 5,
				expires: 1,
				action: function(){
					me.trigger();
				},
				data: {start: start, value: v}
			})
			simulate.tasks.add(this.scheduledTrigger);
		}
	}
}

function Action() {
	Primitive.call(this);
	this.action = null;
	this.scheduledTrigger = null;
	this.block = false;
	this.constructorFunction = Action;
}
Action.inherits(Primitive);
Action.method("innerClone", function(p){

});
Action.method("canTrigger", function() {
	return ! this.block;
});
Action.method("resetTimer", function(){
	scheduleTrigger.call(this);
});
Action.method("trigger", function() {

	this.scheduledTrigger = null;

	if(this.frozen){
		return;
	}

	try{
		//console.log("action")
		evaluateTree(this.action, globalVars(this));
		//console.log("end action")
		if(this.dna.repeat){
			if(this.dna.trigger !== "Condition"){
				scheduleTrigger.call(this);
			}
		}else{
			this.block = true;
		}
	}catch(err){
		if(! err.substr){
			throw err; //it's already an object, let's kick it up the chain
		}
		if(isLocal()){
			console.log(err);
		}
		if(err.substr(0,4)=="MSG:"){
			error(err.substr(4,err.length), this, true);
		}else{
			error(err, this, true);
		}
	}
});

function Agents() {
	Primitive.call(this);
	this.size = null;
	this.agents = null;
	this.geoWidth = null;
	this.geoHeight = null;
	this.halfWidth = null;
	this.halfHeight = null;
	this.geoDimUnits = null;
	this.geoDimUnitsObject = null;
	this.geoWrap = null;
	this.DNAs = null;
	this.stateIds = [];
	this.constructorFunction = Agents;

	this.vector = new Vector([],[], PrimitiveBase);
}
Agents.inherits(Primitive);
Agents.method("collectData", function() {
	var x =[];
	for(var i=0; i<this.agents.length; i++){
		var agent = this.agents[i];
		x.push({instanceId: agent.instanceId, connected: agent.connected.map(function(x){return x.instanceId}), location: simpleNum(agent.location.clone(), this.geoDimUnitsObject), state: agent.states.length>0?agent.states.slice():null});
	}
	return x;
});
Agents.method("states", function() {
	return this.stateIds.slice(0);
});
Agents.method("toNum", function(){
	throw("MSG: "+getText("[%s] is a population of agents and cannot be used as a direct value in equations.", clean(this.dna.name)));
});
Agents.method("add", function(base){
	this.size = 1 + parseInt(this.size, 10);
	//console.log("----");
	if(base){
		var agent = base.agentClone();
		agent.agentId = this.agentId;
		agent.setIndex(this.size-1);
		agent.createAgentIds();

		for(var i = 0; i < this.DNAs.length; i++){
			var x = agent.children[i];
			var dna = this.DNAs[i];

			x.container = agent;

			linkPrimitive(x, dna);

		}

		agent.updateStates();

	}else{
		//console.log("-----");
		var agent = new Agent();
		agent.container = this;
		agent.children = [];
		agent.childrenId = {};
		agent.agentId = this.agentId;

		for(var i = 0; i < this.DNAs.length; i++){
			decodeDNA(this.DNAs[i], agent);
		}

		agent.setIndex(this.size-1);
		agent.createAgentIds();

		for(var i = 0; i < this.DNAs.length; i++){
			linkPrimitive(agent.children[i], this.DNAs[i]);
		}

		setAgentInitialValues(agent);

		var hood  =  getPrimitiveNeighborhood(this, this.dna);
		//console.log(hood);
		if(this.placement == "Custom Function"){
			hood.self = agent;
			agent.location = simpleUnitsTest(simpleEquation(this.placementFunction, {"-parent": varBank, self: agent}, hood), this.geoDimUnitsObject);
			if(! agent.location.names){
				agent.location.names = ["x", "y"];
				agent.location.namesLC = ["x", "y"];
			}
		}else{
			agent.location = new Vector([mult(this.geoWidth, new Material(Rand())),mult(this.geoHeight, new Material(Rand()))], ["x", "y"]);
		}
		if(this.network == "Custom Function"){
			var tree = trimTree(createTree(this.networkFunction), hood);
			for(var j = i+1; j < this.agents.length; j++){
				if(trueValue(simpleEquation(this.networkFunction, {"-parent": varBank, "a": agent, "b": this.agents[j]}, hood, tree))){
					agent.connect(this.agents[j]);
				}
			}
		}



	}

	var me = this;
	simulate.tasks.add(new Task({
		priority: 10,
		expires: 1,
		name: "Add Agent",
		time: simulate.time(),
		action: function(){
			me.agents.push(agent);

			for(var i = 0; i < agent.children.length; i++){
				var x = agent.children[i];

				var dna = me.DNAs[i];

				if((x instanceof Action) || (x instanceof Transition)){
					if(dna.trigger != "Condition"){
						scheduleTrigger.call(x);
					}
				}

				if(base){
					if(x instanceof Action){
						dna.solver.actions.push(x);
					}else if (x instanceof Transition) {
						dna.solver.transitions.push(x);
					}else if(! (x instanceof Agents)){
						dna.solver.valued.push(x)
						if(x instanceof Flow) {
							dna.solver.flows.push(x);
						}else if (x instanceof Stock) {
							dna.solver.stocks.push(x);
						}else if (x instanceof State) {
							dna.solver.states.push(x);
						}
					}
				}


			}


		}
	}));

	return agent;
});


function Agent() {
	this.agentId = null;
	this.instanceId = null;
	this.index = null;
	this.children = null;
	this.location = null;
	this.connected = [];
	this.connectedWeights = [];
	this.dead = false;
	this.constructorFunction = Agent;
	this.stateIDs = [];
	this.states = [];

	this.vector = new Vector([],[], AgentBase);
}
Agent.prototype.createIds = Primitive.prototype.createIds;
Agent.method("toString", function(){
	return "Agent "+(this.index+1);
})
Agent.method("toNum", function(){
	return this;
	//throw("MSG: Invalid attempt to use an agent as a valued primitive.");
});
Agent.method("updateStates", function() {
	this.states = [];
	this.stateIDs = [];
	for(var c = 0; c < this.children.length; c++){
		if(this.children[c].active){
			this.states.push(this.children[c]);
			this.stateIDs.push(this.children[c].dna.id);
		}
	}
});
Agent.method("agentClone", function(){
	var agent = new Agent();
	agent.dna = this.dna;
	agent.children = [];
	agent.childrenId = {};

	for(var i = 0; i < this.children.length; i++){
		agent.children.push(this.children[i].clone());
		agent.childrenId[agent.children[i].dna.id] = agent.children[i];
	}

	agent.location = this.location.clone();
	agent.connected = this.connected.slice(0);
	agent.connectedWeights = this.connectedWeights.slice(0);
	agent.container = this.container;


	return agent;
});
Agent.method("setIndex", function(index){
	this.index = index;
	for(var i=0; i<this.children.length; i++){
		this.children[i].index = index;
	}
});
Agent.method("createAgentIds", function(){
	this.createIds();
	for(var i=0; i<this.children.length; i++){
		this.children[i].createIds();
	}
})
Agent.method("die", function(){
	while( this.connected.length > 0 ){
		this.unconnect(this.connected[0]);
	}

	for(var i=0; i<this.container.agents.length; i++){
		if(this.container.agents[i] == this){
			this.container.agents.splice(i,1);
			break;
		}
	}

	for(var i = 0; i < this.children.length; i++){
		var x = this.children[i];
		var solver = x.dna.solver;
		if(x instanceof Action){
			solver.actions.splice(solver.actions.indexOf(x),1);
			clearTrigger.call(x, true);
		}else if(x instanceof Transition){
			solver.transitions.splice(solver.transitions.indexOf(x),1);
			clearTrigger.call(x, true);
		}else if(! (x instanceof Agents)){
			solver.valued.splice(solver.valued.indexOf(x),1);
			if(x instanceof Flow) {
				solver.flows.splice(solver.flows.indexOf(x),1);
			}
			else if (x instanceof Stock) {
				solver.stocks.splice(solver.stocks.indexOf(x),1);
			}
			else if (x instanceof State) {
				solver.states.splice(solver.states.indexOf(x),1);
			}
		}
	}


	this.dead = true;
});
Agent.method("connect", function(x, weight) {

	var w = (weight === undefined)?new Material(1):weight;
	if(x !== this){
		if(this.connected.indexOf(x) == -1){
			if(x instanceof Agent){
				this.connected.push(x);
				this.connectedWeights.push(w);
				x.connected.push(this);
				x.connectedWeights.push(w);
			}else{
				throw("MSG: Only agents may be connected.");
			}
		}else if(weight !== undefined){
			this.connectedWeights[this.connected.indexOf(x)] = weight;
			x.connectedWeights[x.connected.indexOf(x)] = weight;
		}
	}

});
Agent.method("unconnect", function(x) {
	if(x !== this){
		var i = this.connected.indexOf(x);
		if(i != -1){
			this.connected.splice(i, 1);
			this.connectedWeights.splice(i, 1);
			i = x.connected.indexOf(this);
			x.connected.splice(i, 1);
			x.connectedWeights.splice(i, 1);
		}
	}
});

Agent.method("connectionWeight", function(x) {
	if(x !== this){
		var i = this.connected.indexOf(x);

		if(i != -1){
			return this.connectedWeights[i].fullClone();
		}
	}
	throw "MSG: Agents are not connected and so do not have a connection weight.";
});

Agent.method("setConnectionWeight", function(x, w) {
	if(x !== this){
		var i = this.connected.indexOf(x);
		if(i != -1){
			this.connectedWeights[i] = w.fullClone();
			return;
		}
	}
	throw "MSG: Agents are not connected and so do not have a connection weight.";
});

function Stock() {
	Primitive.call(this);
	this.level = null;
	this.constructorFunction = Stock;
	this.delay = undefined;
	this.tasks = [];
	this.initRate = null;
	this.oldLevel;
}
Stock.inherits(Primitive);
Stock.method("innerClone", function(p){
	p.level = this.level;
	p.oldLevel = this.oldLevel;
	p.tasks = this.tasks;
	p.delay = this.delay;
});
Stock.method("setValue", function(value) {
	//console.log("--")
	this.level = value;
	this.cachedValue = undefined;
	simulate.valuedPrimitives = [];
	this.value();
});
Stock.method("print", function(){
	console.log(this.level.map(function(x){return x.value}));
});
Stock.method("preserveLevel", function() {
	//console.log("PRESERVING")
	//console.log("total:"+this.level.value)
	for(var i = this.tasks.length - 1; i >= 0; i--){
		this.tasks[i].data.tentative = false;
	}
	this.oldLevel = this.level;
});
Stock.method("restoreLevel", function() {
	//console.log("RESTORING")
	for(var i = this.tasks.length - 1; i >= 0; i--){
		if(this.tasks[i].data.tentative){
			this.tasks[i].remove();
			this.tasks.splice(i,1);
		}
	}
	this.level = this.oldLevel;
	//console.log("total: "+this.level.value)
});
Stock.method("setDelay", function(delay){
	delay = delay || this.dna.delay;
	this.delay = delay;
});
Stock.method("setInitialValue", function() {
	var me = this;
	var init;

	//console.log("Setting Initial value:"+this.dna.name);
	try{
		//console.log(this.equation);
		//console.log(globalVars(this))
		init = evaluateTree(this.equation, globalVars(this)).toNum();
	//	console.log(init);
	}catch(err){
		if(! err.substr){
			throw err; //it's already an object, let's kick it up the chain
		}
		if(isLocal()){
			console.log(err);
		}
		if(err.substr(0,4)=="MSG:"){
			error(err.substr(4,err.length), this, true);
		}else{
			error(err, this, true);
		}
	}

	if(typeof init == "boolean"){
		if(init){
			init = new Material(1);
		}else{
			init = new Material(0);
		}
	}

	if(init instanceof Vector){
		var d = this.dna;
		init.recurseApply(function(x){
			if (d.nonNegative && x.value < 0) {
				x = new Material(0, d.units);
			}
			if (! x.units) {
				x.units = d.units;
			}
			return x;
		})
	}else{
		if (this.dna.nonNegative && init.value < 0) {
			init = new Material(0, this.dna.units);
		}
		if (! init.units) {
			init.units = this.dna.units;
		}
	}


	if (isUndefined(this.delay)) {
		//it's a non-serialized stock;
		this.level = init;
	} else {
		//it's serialized
		var startVal = mult(init, div(simulate.userTimeStep, this.delay))
		this.initRate = div(init, this.delay.forceUnits(simulate.timeUnits));
		//console.log(this.initRate);
		this.level = startVal;

		var me = this;

		simulate.tasks.addEvent(function(timeChange, oldTime, newTime){
			/*console.log('--')
			console.log(timeChange.value);
			console.log(me.totalContents().value);*/
			if(timeChange.value > 0){
				if(lessThanEq(minus(newTime, simulate.timeStart), minus(me.delay, simulate.userTimeStep))){
					timeChange = functionBank["min"]([timeChange, minus(me.delay, minus(oldTime, simulate.timeStart))]);
					me.level = plus(me.level, mult(timeChange, me.initRate));
				}
			}
		});
	}
});
Stock.method("subtract", function(amnt, time) {
	this.level = minus(this.level, amnt);
	if (this.dna.nonNegative) {
		if(this.level instanceof Vector){
			var d = this.dna;
			this.level.recurseApply(function(x){
				if(x.value < 0){
					return new Material(0, d.units);
				}else{
					return x;
				}
			});
		}else if(this.level.value < 0){
			this.level = new Material(0, this.dna.units);
		}
	}
});
Stock.method("add", function(amnt, time) {
	if(isUndefined(this.delay)){
		this.level = plus(this.level, amnt);
		if (this.dna.nonNegative) {
			if(this.level instanceof Vector) {
				var d = this.dna;
				this.level.recurseApply(function(x){
					if(x.value < 0){
						return new Material(0, d.units);
					}else{
						return x;
					}
				});
			}else if(this.level.value < 0){
				this.level = new Material(0, this.dna.units);
			}
		}
	}else{
		this.scheduleAdd(amnt, time);
	}
});
Stock.method("scheduleAdd", function(amnt, time, delay){
	//console.log("SCEDULING ADD "+time)
	//console.log(amnt)

	var me = this;
	delay = delay || this.delay;

	var oldLevel;

	var t = new Task({
		time: plus(time, delay),
		data: {
			amnt: amnt,
			tentative: true
		},
		priority: -100,
		name: "Conveyor Add ("+this.dna.name+")",
		action: function(){
			oldLevel = me.level;
			//console.log("ADDING "+amnt.value);
			me.level = plus(me.level, amnt);
			//console.log("total "+me.level.value);
			if (me.dna.nonNegative) {
				if(me.level instanceof Vector) {
					var d = me.dna;
					me.level.recurseApply(function(x){
						if(x.value < 0){
							return new Material(0, d.units);
						}else{
							return x;
						}
					});
				}else if(me.level.value < 0){
					me.level = new Material(0, me.dna.units);
				}
			}
		},
		rollback: function(){
			me.level = oldLevel;
		}
	});
	this.tasks.push(t);
	simulate.tasks.add(t);
})
Stock.method("totalContents", function() {
	if(isDefined(this.delay)){
		var res = this.level;
		for(var i = 0; i < this.tasks.length; i++){
			if(greaterThan(this.tasks[i].time, simulate.time()) && lessThanEq(this.tasks[i].time, plus(simulate.time(), this.delay)) ){
				res = plus(res, this.tasks[i].data.amnt);
			}
		}

		var x = minus(this.delay, simulate.userTimeStep);
		if(greaterThan(x, simulate.timeProgressed())){
			var timeLeft = minus(x, simulate.timeProgressed());
			res = plus(res, mult(this.initRate, timeLeft));
		}

		return res;
	}else{
		return this.level;
	}
});
Stock.method("calculateValue", function() {
	if (this.level === null) {
		this.setInitialValue();
	}
	if(isDefined(this.delay) && this.dna.solver.RKOrder == 4){
		var res = this.level;
		for(var i = 0; i < this.tasks.length; i++){
			if(greaterThan(this.tasks[i].time, simulate.time()) && lessThanEq(this.tasks[i].time, plus(simulate.time(), this.dna.solver.timeStep)) ){
				res = plus(res, this.tasks[i].data.amnt);
			}
		}
		return res;
	}else{
		return this.level;
	}
});

function Converter() {
	Primitive.call(this);
	this.source = null;
	this.constructorFunction = Converter;
}
Converter.inherits(Primitive);
Converter.method("innerClone", function(p){
});
Converter.method("setSource", function(source){
	this.source = source;
});
Converter.method("getInputValue", function(){
     var inp;
     if( this.source == "*time"){
        inp = simulate.time();
      }else{
		  /*console.log("---")
		  console.log(this.source.value());
		  console.log("====")
		  console.log(this.source);
		  console.log(this.source.value())
		  console.log(this.source.value().toNum());
		  */
        inp = this.source.value().toNum();
		if(! inp){
			error(getText("Undefined input value."), this, false);
		}
		if(inp instanceof Vector){
			error(getText("Converters do not accept vectors as input values."), this, false);
		}
		//console.log(inp);
      }
      return inp;
  }
);
Converter.method("calculateValue", function() {
	return new Material(this.getOutputValue().value, this.dna.units);
});
Converter.method("getOutputValue", function() {
	//console.log("---")

	var inp = this.getInputValue();

	if (this.dna.inputs.length == 0) {
		return new Material(0);
	}
	//console.log("+++")
	for (var i = 0; i < this.dna.inputs.length; i++) {
		if (this.dna.interpolation == "discrete") {

			if (greaterThan(this.dna.inputs[i], inp)) {
				if (i == 0) {
					return this.dna.outputs[0];
				} else {
					return this.dna.outputs[i - 1];
				}
			}

		} else if (this.dna.interpolation == "linear") {
			//console.log(i)
			if (eq(this.dna.inputs[i], inp)) {
				//console.log("eq")
				return this.dna.outputs[i];
			} else if (greaterThan(this.dna.inputs[i], inp)) {
				//console.log("gt")
				if (i == 0) {
					return this.dna.outputs[0];
				} else {
					///console.log("----")
					//console.log(mult(minus(inp, this.inputs[i - 1]), this.outputs[i]));
					//console.log(mult(minus(this.inputs[i], inp), this.outputs[i - 1]))
					var x = div(
						plus(
							mult(minus(inp, this.dna.inputs[i - 1]), this.dna.outputs[i]),
							mult(minus(this.dna.inputs[i], inp), this.dna.outputs[i - 1])
						),
						minus(this.dna.inputs[i], this.dna.inputs[i - 1]));
					//console.log("===")
					return x;
				}
			}
		}
	}
	return this.dna.outputs[this.dna.outputs.length-1];
});


function Variable() {
	Primitive.call(this);
	this.constructorFunction = Variable;
}
Variable.inherits(Primitive);
Variable.method("innerClone", function(p){
});
Variable.method("calculateValue", function() {
	//console.log("--")
	//console.log(this)
	//console.log("calc!");
	//console.log("--");
	//console.log(this.dna.name);
	//console.log(this.equation);
	//try{
	var x = evaluateTree(this.equation, globalVars(this));
	//console.log(x);
	//}catch(err){
	//	console.log(this.dna.name);
	//	throw "calc value error";
	//}
	//console.log(x);
	//return x;
	//console.log(x);
	if(typeof x == "boolean"){
		if(x){
			x = new Material(1);
		}else{
			x = new Material(0);
		}
	}else if(x instanceof Vector){
		return x;
	//	error("Cannot set a variable value to a vector.", this, true)
	}
	if(! x.units) {
		x.units = this.dna.units;
	}
	return x;
});

function Flow() {
	Primitive.call(this);
	this.alpha = null;
	this.omega = null;
	this.rate = null;
	this.RKPrimary = [];
	this.constructorFunction = Flow;
}
Flow.inherits(Primitive);
Flow.method("innerClone", function(p){
});
Flow.method("setEnds", function(alpha, omega) {
	this.alpha = alpha;
	this.omega = omega;
});
Flow.method("calculateValue", function() {
	//while(this.RKPrimary.length < this.dna.solver.RKPosition){
		this.predict();
		//}
	return this.rate.fullClone();
});
Flow.method("clean", function() {
	this.rate = null;
	this.RKPrimary = [];
});
Flow.method("predict", function(override) {
	if (this.rate === null || override) {

		try{
			//console.log("---");
			var x = evaluateTree(this.equation, globalVars(this)).toNum();
			//console.log(this.equation);
			//console.log(x);
			if(!((x instanceof Vector) || isFinite(x.value))){
				throw("MSG: "+getText("The result of this calculation is not finite. Flows must have finite values. Are you dividing by 0?"));
			}

		}catch(err){
			if(! err.substr){
				throw err; //it's already an object, let's kick it up the chain
			}
			if(isLocal()){
				console.log(err);
			}
			if(err.substr(0,4)=="MSG:"){
				error(err.substr(4,err.length), this, true);
			}else{
				error(err, this, true);
			}
		}
		if(typeof x== "boolean"){
			if(x){
				x = new Material(1);
			}else{
				x = new Material(0);
			}
		}

		this.rate = x.fullClone();

		if(this.rate instanceof Vector){
			var d = this.dna;
			this.rate.recurseApply(function(x){
				if (! x.units) {
					x.units = d.units;
				}
				return x
			})
		}else if (! this.rate.units) {
			this.rate.units = this.dna.units;
		}

		this.testUnits(this.rate, true);

		this.rate = mult(this.rate, this.dna.solver.timeStep);

		if(override){
			if(this.RKPrimary.length > 0){
				this.RKPrimary[this.RKPrimary.length-1] = this.rate;
			}else{
				this.RKPrimary.push(this.rate);
			}

		}else{
			this.RKPrimary.push(this.rate);
		}

		if (this.dna.solver.RKOrder == 4) {
			if (this.dna.solver.RKPosition == 1) {
				this.rate = this.RKPrimary[0];
			} else if (this.dna.solver.RKPosition == 2) {
				this.rate = this.RKPrimary[1];
			} else if (this.dna.solver.RKPosition == 3) {
				this.rate = this.RKPrimary[2];
			} else if (this.dna.solver.RKPosition == 4) {
				this.rate = div((plus(plus(plus(this.RKPrimary[0], mult(new Material(2), this.RKPrimary[1])), mult(new Material(2), this.RKPrimary[2])), this.RKPrimary[3])), new Material(6));
			}
		}

		this.rate  = div(this.rate, this.dna.solver.timeStep);

		if(this.dna.onlyPositive){
			if(this.rate instanceof Vector){
				this.rate.recurseApply(function(x){
					if(x.value >= 0 ){
						return x
					}else{
						return new Material(0, x.units);
					}
				});
			}else{
				if(this.rate.value <= 0){
					this.rate = new Material(0, this.rate.units);
				}
			}
		}



	}
});
Flow.method("apply", function(timeChange, oldTime, newTime) {

	try{

		//console.log(this.dna.name+" - apply")
		//console.log("RKPosition: "+this.dna.solver.RKPosition);
		//console.log(this.RKPrimary.map(function(x){return x.value}));
		//console.log(this.rate.value);

		if(this.rate === null){
			return;
		}

		var rate = this.rate.fullClone();

		rate = mult(rate, timeChange);


		var in_rate = rate;
		var out_rate = rate;
		var collapsed = false;

		if(this.alpha !== null){
			var v = this.alpha.level;
			if((rate instanceof Vector) && ( (! (v instanceof Vector)) || v.depth() < rate.depth())){
				in_rate = rate.fullClone().collapseDimensions(v);
				collapsed = true;
			}else if((v instanceof Vector) && ( (!(rate instanceof Vector)) || v.depth() > rate.depth()) ){
				error(getText("The alpha of the flow is a vector with a higher order than the flow rate. There has to be at least one element in the flow rate for each element in the alpha."), this, true)
			}
		}
		if(this.omega !== null){
			//console.log("c")
			var v = this.omega.level;
			if((rate instanceof Vector) && ((! (v instanceof Vector)) || v.depth() < rate.depth())){
				out_rate = rate.fullClone().collapseDimensions(v);
				collapsed = true;
			}else if((v instanceof Vector) && ( (!(rate instanceof Vector)) || v.depth() > rate.depth()) ){
				error(getText("The omega of the flow is a vector with a higher order than the flow rate. There has to be at least one element in the flow rate for each element in the omega."), this, true)
			}
		}

		if(! collapsed){
			var constraints = 0;

			if (this.omega !== null && this.omega.dna.nonNegative) {
				var modifier = plus(this.omega.level.toNum(), rate);
				if(modifier instanceof Vector){
					modifier.recurseApply(function(x){
						if (x.value < 0 ) {
							return x;
						}else{
							return new Material(0, x.units);
						}
					});
					rate = minus(rate, modifier);
				}else{
					if (modifier.value < 0 ) {
						rate = negate(this.omega.level.toNum());
					}
				}
				constraints++;
			}

			if (this.alpha !== null && this.alpha.dna.nonNegative) {

				var modifier = minus(this.alpha.level.toNum(), rate);
				if(modifier instanceof Vector){
					modifier.recurseApply(function(x){
						if (x.value < 0 ) {
							return x;
						}else{
							return new Material(0, x.units);
						}
					})
					rate = minus(rate, modifier);
					rate = minus(rate, modifier);
				}else{
					if (modifier.value < 0 ) {
						rate = this.alpha.level.toNum();
					}
				}
				constraints++;
			}

			if (this.omega !== null && this.omega.dna.nonNegative) {

				if(rate instanceof Vector){
					var vec = functionBank["flatten"]([plus(this.omega.level.toNum(), rate)]);
					for(var i=0; i<vec.items.length; i++){
						if (vec.items[i].value < 0 ) {
							error(getText("Inconsistent non-negative constraints for flow."), this, false);
						}
					}
				}else{
					if (plus(this.omega.level.toNum(), rate).value < 0) {

						error(getText("Inconsistent non-negative constraints for flow."), this, false);
					}
				}
			}
		}else{
			if (this.alpha !== null && this.alpha.dna.nonNegative) {
				error(getText("Cannot use non-negative stocks when the flow rate is a vector that needs to be collapsed."), this.alpha, false);
			}
			if (this.omega !== null && this.omega.dna.nonNegative) {
				error(getText("Cannot use non-negative stocks when the flow rate is a vector that needs to be collapsed."), this.omega, false);
			}
		}

		var additionTest = 0;
		try{
			if (this.omega !== null) {
				additionTest = 1;
				if(collapsed){
					this.omega.add(out_rate, oldTime);
				}else{
					this.omega.add(rate, oldTime);
				}
			}
			if (this.alpha !== null) {
				additionTest = 2;

				if(collapsed){
					this.alpha.subtract(in_rate, oldTime);
				}else{
					this.alpha.subtract(rate, oldTime);
				}
			}
		}catch(err){
			//throw err;
			var stock = "";
			if(additionTest==1){
				stock= this.omega;
			}else if(additionTest==2){
				stock= this.alpha;
			}

			if(err == "MSG: Keys do not match for vector operation."){
				error(getText("Incompatible vector keys for flow %s and connected stock %s.", "<i>["+clean(this.dna.name)+"]</i>", "<i>["+clean(stock.dna.name)+"]</i>"), this, false);
			}else{
				error(getText("Incompatible units for flow %s and connected stock %s. Stock has units of %s. The flow should have the equivalent units divided by some time unit such as Years.", "<i>["+clean(this.dna.name)+"]</i>", "<i>["+clean(stock.dna.name)+"]</i>", "<i>"+(stock.dna.units?clean(stock.dna.units.toString()):"unitless")+"</i>"), this, false);
			}

		}

		//console.log("null: "+this.id)
	}catch(err){
		if(! err.substr){
			throw err; //it's already an object, let's kick it up the chain
		}
		if(err.substr(0,4)=="MSG:"){
			error(err.substr(4,err.length), this, true);
		}else{
			error(err, this, true);
		}
	}
});

function globalVars(primitive){
	if(primitive instanceof Agent){
		return {"-parent": varBank, "self": primitive};
	}else if(primitive.container){
		return {"-parent": varBank, "self": primitive.container};
	}else{
		return varBank;
	}
}

"use strict";
/*

Copyright 2010-2015 Scott Fortmann-Roe. All rights reserved.

This file may distributed and/or modified under the
terms of the Insight Maker Public License (https://InsightMaker.com/impl).

*/

/*

	var t = new TaskQueue({start: new Material(0), end: new Material(20)});
	var a = new Task({
		name: "A",
		time: new Material(10),
		priority: 0,
		action: function(){
			console.log("A");
		}
	});
	var b = new Task({
		name: "B",
		time: new Material(10),
		priority: 1,
		action: function(){
			console.log("B");
			b.kill();
		}
	});
	var c = new Task({
		name: "C",
		time: new Material(10),
		priority: 1,
		action: function(){
			console.log("C");
		}
	});
	t.add(a);
	t.add(b);
	t.add(c);
	t.tasks.goMin();
	while(! t.completed()){
		t.step();
	}

	var t = new TaskQueue;
	t.add(new Task({
		name:"test 1",
		time: new Material(10),
		priority: -10,
		expires: 1,
		action: function(){},
		rollback: function(){}
	}));


var t =  new RedBlackTree();
function N(x){
	this.value = x;
}
N.prototype.toString = function(){
	return this.value.toString()
}
N.prototype.compare = function(other){
   if(this.value ==  other.value){
     return 0
   }else if(this.value < other.value){
		return -1
   }else{
		return 1;
   }
}
t.add(new N(10))
t.add(new N(5))
t.add(new N(2))
t.add(new N(11))
t.add(new N(3))
t.add(new N(12))
t.add(new N(15))
t.toString()

	var t = new TaskQueue(new Material(20));
	t.add(new Task({
		name:"test 1",
		time: new Material(10),
		priority: -10,
		expires: 1,
		action: function(){},
		rollback: function(){}
	}));

	var z = new Task({
		name:"test 12",
		time: new Material(10),
		priority: -10
	});
	t.add(z)
	
	t.add(new Task({
		name:"test 2",
		time: new Material(10),
		priority: -5
	}))
	t.add(new Task({
		name:"test 3",
		time: new Material(10),
		priority: -20
	}))

	t.add(new Task({
		name:"test b 1",
		time: new Material(20),
		priority: -10
	}))
	
	t.add(new Task({
		name:"test b 2",
		time: new Material(20),
		priority: -5
	}))
	t.add(new Task({
		name:"test b 3",
		time: new Material(20),
		priority: -20
	}))

	t.step();
	t.stepBack();
	t.step();
	t.stepBack();
	t.step();
	t.stepBack();
	t.step();
	t.stepBack();
	t.step();
	t.stepBack();
	t.step(); t.step()
	
	t.print();

	t.add(new Task({
		name:"test 4",
		time: new Material(10),
		priority: 0
	}))
	var q = new Task({
		name:"Early 1",
		time: new Material(5),
		priority: -10
	});
	t.add(q)
	t.add(new Task({
		name:"Late 1",
		time: new Material(15),
		priority: -10
	}))
	t.add(new Task({
		name:"test b 1",
		time: new Material(20),
		priority: -10
	}))
	
	t.add(new Task({
		name:"test b 2",
		time: new Material(20),
		priority: -5
	}))
	t.add(new Task({
		name:"test b 3",
		time: new Material(20),
		priority: -20
	}))
	t.add(new Task({
		name:"test b 4",
		time: new Material(20),
		priority: 0
	}))
	t.print()
	q.remove();
	z.remove();
	console.log("---")
	t.print();
	
	var t = new TaskQueue;
	scheduleRepeated(t, {name: "a", priority: -10}, new Material(0), new Material(10), new Material(30));
	scheduleRepeated(t, {name: "b", priority: -5}, new Material(0), new Material(10), new Material(30));
	t.print();
*/


function TaskQueue(config){
	config = config || {};
	this.tasks = new RedBlackTree();
	this.onMoveEvents = [];
	this.setTime(config.start);
	this.debug = false;
	this.end = config.end;
	this.states = {};
}

TaskQueue.prototype.print = function(){
	console.log("Current Time: "+this.time.value);
	this.tasks.goMin();
	while(this.tasks.current() !== null){
		console.log(this.tasks.current().name);
		console.log("    Time: "+this.tasks.current().time.value);
		console.log("    Priority: "+this.tasks.current().priority);
		if(isDefined(this.tasks.current().expires)){
			console.log("    Expires: "+this.tasks.current().expires);
		}
		if(isDefined(this.tasks.current().skip)){
			console.log("    Skip: "+this.tasks.current().skip);
		}
		this.tasks.next()
	}
}

TaskQueue.prototype.addEvent = function(event){
	this.onMoveEvents.push(event)
}

TaskQueue.prototype.fireEvents = function(timeChange, oldTime, newTime){
	if(this.debug){
		console.log("Firing Events")
	}
	for(var i = 0; i < this.onMoveEvents.length; i++){
		this.onMoveEvents[i](timeChange, oldTime, newTime);
	}
}

TaskQueue.prototype.setTime = function(t){
	if(isUndefined(this.time) || neq(t, this.time)){
		var oldTime = this.time;
		
		this.time = t;
		
		if(isDefined(oldTime)){
			this.fireEvents(minus(t, oldTime), oldTime, t);
		}
		
	}
}

TaskQueue.prototype.moveTime = function(timeChange){
	if(this.debug){
		console.log("Shifting time by: "+timeChange.value);
	}
	this.moveTo(timePlus(this.time, timeChange));
}

TaskQueue.prototype.moveTo = function(newTime){
	if(eq(this.time, newTime)){
		return;
	}else{
		if(this.debug){
			console.log("Shifting time to: " + newTime.value);
		}
		
		if(this.tasks.current() !== null){ // we have something defined
			var maxTime = this.tasks.max().time;
			var minTime = this.tasks.min().time;
			
			while(lessThan(this.time, newTime) && (! greaterThan(this.time, maxTime))){
				this.step()
			}
			while(greaterThan(this.time, newTime) && greaterThan(this.time, minTime)){
				this.stepBack();
			}
		}
		
		this.setTime(newTime);
		
		if(this.debug){
			console.log("Time shift to  "+newTime.value+" completed.");
		}
	}
}

TaskQueue.prototype.add = function(task){
	task.queue = this;
	
	this.tasks.add(task);
}

TaskQueue.prototype.step = function(){
	if(isUndefined(this.time)){
		this.tasks.goMin();
		this.setTime(this.tasks.current().time);
	}
	
	var t = this.tasks.current().time;
	//debugger;
	
//	console.log("--")
	if(this.tasks.current() !== null /*&& eq(t, this.tasks.current().time)*/){
		var dead = this.tasks.current().deadAction;
		this.tasks.current().execute();
		if((! dead) && this.tasks.current().timeShift){
			this.tasks.current().timeShift()
			return;
		}
		//console.log(this.tasks.current());
		this.tasks.next();
	}
	
//	console.log(this.tasks.current());
	
	if(this.tasks.current() !== null){
		this.setTime(this.tasks.current().time);
	}else{
//		console.log("null");
		this.tasks.next();
//		console.log(this.tasks.current())
		this.setTime(mult(this.tasks.max().time, new Material(10)));
	}
}

TaskQueue.prototype.stepBack = function(){
	if(isUndefined(this.time)){
		this.tasks.goMin();
		this.setTime(this.tasks.current().time);
		return;
	}
	
	if( this.tasks.current() === null){
		this.tasks.goMax();
	}else{
		this.tasks.previous();
	}
	
	var t = this.tasks.current().time;
	while(this.tasks.current() !== null && eq(t, this.tasks.current().time)){
		this.tasks.current().rollback();
		this.tasks.previous();
	}
	
	if(this.tasks.current() === null){
		this.tasks.goMin();
	}else{
		this.tasks.next();
	}
	
	this.setTime(this.tasks.current().time);
}

TaskQueue.prototype.atStart = function(){
	return isUndefined(this.time) || this.tasks.current() === this.tasks.min();
}

TaskQueue.prototype.completed = function(){
	return isDefined(this.time) && (greaterThan(this.time, this.end) || (this.tasks.current() === null));
}

TaskQueue.prototype.remove = function(task){
	//var c;
	if(task == this.tasks.current()){
		//console.log("overlap!!!")
		//console.log(this.time.value);
		this.tasks.next();
		//if(this.tasks.current() !== null){
		//	this.setTime(this.tasks.current().time);
		//}else{
		//	this.tasks.next();
		//	this.setTime(mult(this.tasks.max().time, new Material(10)));
		//}
		//var c = this.tasks._cursor;
	}
	this.tasks.remove(task);
	//if(c){
	//	this.tasks._cursor = c;
		//console.log(this.time.value);
		//console.log(this.tasks.current().name);
		//}
}

var TaskId = 0
// new Take({name: "solver", time: t, action: fn(), rollback: fn(), priority: -10, expires: 1})
function Task(config){
	this.id = TaskId++;
	this.name =  config.name;
	this.time = config.time;
	this.action = config.action;
	this.reverse = config.rollback;
	this.priority = config.priority || 0; // Lower priorities will be run before higher priorities at the same time
	this.expires = config.expires; // if defined, the number of times this is called before it expires
	this.skip = config.skip;
	this.timeShift = config.timeShift;
	this.data = config.data; //optional data object to be carried along, the task scheduler makes no use of this
	this.blocker = config.blocker;
	
	this.deadAction = false; // once dead no longer executes
	this.deadReverse = false; // once dead no longer executes
	
	if(this.action){
		this.action.task = this;
	}
	if(this.reverse){
		this.action.reverse = this
	}

}

Task.prototype.execute = function(){
	if(this.action && (! this.deadAction) && ((! this.blocker) || ! this.queue.states[this.blocker])){
		if(isDefined(this.skip) && this.skip > 0){
			this.skip--;
			if(this.queue.debug){
				console.log("Skipping: "+this.name);
			}
		}else{
			if(this.queue.debug){
				console.log("%c Executing: "+this.name+ " (Time: "+this.time.value+")", "color:blue");
			}
		
			if(isDefined(this.expires)){
				this.expires--;
				if(this.queue.debug){
					console.log("    Current count before expire: "+this.expires);
				}
				if(this.expires <= 0){
					if(this.queue.debug){
						console.log("    Task expired.");
					}
					this.deadAction = true;
				}
			}
		}
		

		this.action();
	}
}

Task.prototype.rollback = function(){
	if(this.reverse && (! this.deadReverse) && ((! this.blocker) || ! this.queue.states[this.blocker]) ){
		if(this.queue.debug){
			console.log("Rolling back: "+this.name+" (Time: "+this.time.value+")");
		}

		if(isDefined(this.expires)){
			if(this.expires <= 0){
				if(this.queue.debug){
					console.log("    Rollback expired.");
				}
				this.deadReverse = true;
			}
		}

		this.reverse();
	}
}

Task.prototype.reschedule = function(newTime){
	this.queue.remove(this);
	this.time = newTime;
	this.queue.add(this);
}

Task.prototype.remove = function(){
	this.queue.remove(this);
}

Task.prototype.kill = function(){
	this.deadAction = true;
	this.deadReverse = true;
}

Task.prototype.block = function(id){
	id = id || this.blocker;
	this.queue.states[id] = true;
}

Task.prototype.unblock = function(id){
	id = id || this.blocker;
	this.queue.states[id] = false;
}

Task.prototype.compare = function(other){
	if(eq(other.time, this.time)){
		if(other.priority == this.priority){
			if(other.id == this.id){
				return 0;
			}else if(other.id < this.id){
				return 1;
			}else{
				return -1;
			}
		}else if(other.priority < this.priority){
			return 1
		}else{
			return -1;
		}
	}else{
		if(lessThan(other.time, this.time)){
			return 1
		}else{
			return -1;
		}
	}
	throw "Comparison error";
}

Task.prototype.toString = function(){
	return this.name+" - "+this.id;
}


function scheduleRepeated(queue, config, start, step, end){
	var count = div(minus(end, start), step);
	for(var i = 0; i <= count; i++){
		config.time = plus(start, mult(step, new Material(i)));
		queue.add(new Task(config));
	}
}


"use strict";
/*

Copyright 2010-2015 Scott Fortmann-Roe. All rights reserved.

This file may distributed and/or modified under the
terms of the Insight Maker Public License (https://InsightMaker.com/impl).

*/

function Simulator(config){

	this.randLoc = -1;
	this.lastRandPos = -1;
	this.previousRandLists = [];
	this.valuedPrimitives = [];
	this.unitsToBases = {};

	this.distanceCache = {};


	this.sliders = {};

	this.ids = {};
	this.idCount = 0;

	this.stochastic = false;

}

Simulator.prototype.setup = function(config){


	this.model = config.model;

	this.solversCompletedFirstPass = 0;

	this.timeStart = this.model.timeStart;
	this.timeLength = this.model.timeLength;
	this.timePause  = this.model.timePause;
	this.timeEnd = plus(this.timeStart, this.timeLength);
	this.timeStep = this.model.solvers.base.timeStep;
	this.userTimeStep = this.model.solvers.base.userTimeStep;
	this.timeUnits = this.timeStart.units;
	this.timeUnits.addBase();

	this.oldAggregateSeries = [];
	this.distanceCache = {};
	this.tasks = new TaskQueue({
		start: this.timeStart,
		end: this.timeEnd
	});

}

Simulator.prototype.getID = function(x){
	//console.log(x);
	if(! this.ids[x]){
		this.idCount++;
		this.ids[x] = this.idCount;
	}
	//console.log(this.ids[x])
	return this.ids[x];
}

Simulator.prototype.time = function(){
	return this.tasks.time;
}

Simulator.prototype.timeProgressed = function(){
	return minus(this.time(), this.timeStart);
}

Simulator.prototype.frame = function(valued, displayed){
	var l = valued.length;
	for(var i = 0; i < l; i++){
		valued[i].storeValue();
	}

	this.printStates(displayed);
}

Simulator.prototype.step = function(solver){
	if(! solver.completedFirstPass){
		solver.completedFirstPass = true;
		this.solversCompletedFirstPass++;
		if(this.solversCompletedFirstPass == Object.keys(this.model.solvers).length){
			if(this.config.onCompletedFirstPass){
				this.config.onCompletedFirstPass();
			}
		}
	}

	if(solver.displayed.length > 0){
		for (var i = this.results[solver.displayed[0].id].results.length; i < this.results.Time.length; i++) {
			//console.log(i)
			for(var j = 0; j < solver.displayed.length; j++){
				this.results[solver.displayed[j].id].results.push(this.results.data[i][solver.displayed[j].id])
			}
		}
	}

	if(this.config.onStep){
		this.config.onStep(solver);
	}
}

Simulator.prototype.sleep = function(updateWindow){
	var me = this;

	if(this.config){
		if(! this.config.silent){
			if(! window.storyConverter){
				this.shouldSleep = true;
			}else{
				this.shouldSleep = false;
			}
			//~ this.shouldUpdateScripter = updateWindow;
		}else{
			if(this.config.onPause){

				this.shouldSleep = true;

			}
		}
	}

}

Simulator.prototype.resume = function(){

	try{
		this.run();
	}catch(err){
		return checkErr(err, this.config);
	}

}

Simulator.prototype.completed = function(){
	return this.terminated || this.tasks.completed();
}

Simulator.prototype.terminate = function(){
	if(! this.terminated){
		clearTimeout(this.timer);
		this.sleep();
		this.terminated = true;
		if(this.resultsWindow){
			this.resultsWindow.scripter.finished();
		}
	}
}

Simulator.prototype.run = function(config){
	var me = this;

	var addPause = function(time, repeat){
		me.tasks.add(new Task({
			time: time,
			expires: 1,
			name: "Interval Pause",
			priority: 1,
			action: function(){
				me.sleep(true);
				if(repeat && lessThan(plus(time, me.timePause), me.timeEnd)){
					addPause(plus(time, me.timePause), repeat);
				}
			}
		}));

		me.tasks.add(new Task({
			time: time,
			expires: 1,
			name: "Interval Pause",
			priority: 1,
			action: function(){
				if(me.valueChange){
					simulate.valuedPrimitives = [];
					for(var s in me.model.solvers){
						var solver = me.model.solvers[s];
						for(var i = 0; i < solver.valued.length; i++){
							solver.valued[i].clearCached();
						}
						for(var i = 0; i < solver.flows.length; i++){
							solver.flows[i].predict(true);
						}
					}
					me.valueChange = false;
				}
			}
		}));
	}

	if(config){
		this.config = config;

		var solvers = Object.keys(this.model.solvers);
		for(var i = 0; i < solvers.length; i++){
			this.createSolver(this.model.solvers[solvers[i]]);
		}

		if(this.timePause /*&& (! this.config.silent)*/ && (! window.storyConverter)){
			addPause(plus(this.timeStart, this.timePause), true);
		}

		this.tasks.tasks.goMin();
	}

	this.wakeUpTime = (new Date()).getTime();

	try{
		while (! this.completed()){
			this.tasks.step();

			if(this.shouldSleep){
				for(var solver in this.model.solvers){
					updateDisplayed(this.model.solvers[solver]);
				}
				if(this.shouldUpdateScripter){
					this.resultsWindow.scripter.endMode = "pause";
					this.shouldUpdateScripter = false;
				}
				if(this.config.onPause){
					setTimeout((function(){
						/*console.log(this);
						console.log(this.results);
						return;*/
						var res = formatSimResults(this.results);
						var l = res.data.length;
						var data = res.data[l-1];
						for(var key in data){
							if(res[key].results.length < l){
								res[key].results.push(data[key]);
							}
						}

						res.resume = me.resume.bind(this);
						res.setValue = function(cell, value){
							var val = simpleEquation(""+value, {"-parent": varBank});
							/*if(! this.sliders[cell.id]){
								throw "Primitive '" + getName(cell) + "' must have a slider defined for it to change its value.";
							}

							for (var i = 0; i < this.sliders[cell.id].length; i++) {
								this.sliders[cell.id][i].equation = val;
							}
							this.sliders[cell.id][0].dna.equation = val;*/
							this.valuedPrimitives.forEach(function(x){
								if(x.id == cell.id){
									if(val.fullClone){
										x.dna.equation = val.fullClone();
										x.equation = val.fullClone();
									}else{
										x.dna.equation = val;
										x.equation = val;
									}
								}
							})
							this.valueChange = true;
						}.bind(this);

						me.config.onPause(res);
					}).bind(this), 10);
				}

				this.shouldSleep = false;
				return;
			}
		}

	}catch(err){
		if(err.msg != "STOP"){
			throw err;
		}
	}


	this.results = formatSimResults(this.results);


	this.results.stochastic = this.stochastic;

	if(this.config.onSuccess){
		this.config.onSuccess(this.results);
	}

	this.terminate();

	if(this.resultsWindow){
		this.results.window = this.resultsWindow;
		for(var solver in this.model.solvers){
			updateDisplayed(this.model.solvers[solver]);
		}
	}

	return this.results;
}

Simulator.prototype.progress  = function(){
	return div(minus(this.time(), this.timeStart), this.timeLength).value;
}

Simulator.prototype.printStates = function(displayed){
	var t = parseFloat(this.time().value.toPrecision(20));

	if(this.results.Time.indexOf(t) == -1){
		for(var i = this.results.Time.length; i > 0; i--){
			if(this.results.Time[i-1]<t){
				this.results.Time.splice(i,0, t)
				this.results.data.splice(i,0, {})
				break;
			}
		}
		if(i == 0){
			this.results.Time.splice(0,0, t)
			this.results.data.splice(0,0, {})
		}
	}

	var data = this.results.data[this.results.Time.indexOf(t)];

	for(var i = 0; i < displayed.length; i++){
		var v = displayed[i];
		//console.log(v.dna.name);

		if( !( (v instanceof State) && isDefined(data[v.id]) ) ){
			if(v instanceof Agents){
				this.results[v.id].dataMode = "agents";
				data[v.id] = {current: v.collectData()};
			}else{
				var x = v.value();

				if((x instanceof Vector) && (! x.names)){
					data[v.id] = x;
					this.results[v.id].dataMode = "auto";
				}else if(x instanceof Vector){
					var me = this;
					x.recurseApply(function(x){
						return me.adjustNum(v, x);
					});
					data[v.id] = x;
				}else if(x instanceof Agent){
					data[v.id] = x;
					this.results[v.id].dataMode = "auto";
				}else{
					data[v.id] = this.adjustNum(v, x);
					//console.log(this.adjustNum(v, x));
				}

			}
		}
	}
}

Simulator.prototype.unitsToBase = function(v, u, flow){
	var i = v.id+"-"+(u?u.id:"");

	if(i in this.unitsToBases){
		return this.unitsToBases[i];
	}

	var x = 1;
	if(flow){
		 x = this.timeUnits.toBase;
	}
	var toBase = 1;
	if(u){
		u.addBase();
		toBase = u.toBase;
	}
	this.unitsToBases[i] = fn["/"](fn["/"](sn("#e"+toBase), v.dna.toBase),sn("#e"+x));
	return this.unitsToBases[i];

}

Simulator.prototype.adjustNum = function(v, x){
	if(v.unitless && x.units){
		error(getText("The result of the calculation has units %s, but the primitive is unitless. Please set the units for the primitive so we can determine the proper output.", x.units.toString()), findID(v.id), true);
	}
	//console.log(x);
	if((v instanceof Flow) && (! v.dna.flowUnitless)){
		x = mult(x, new Material(1, this.timeUnits));
	}
	//console.log(x);

	if( (v instanceof State) || (! x.units) && (! v instanceof Flow)){
		x = x.value;
	}else{
		x = fn["*"](x.value, this.unitsToBase(v, x.units, v instanceof Flow));
	}

	return x+0;
}

Simulator.prototype.createSolver = function(solver){

	var me = this;

	var stocks = solver.stocks;
	var flows = solver.flows;

	var actions = solver.actions;
	var states = solver.states;
	var transitions = solver.transitions;
	var valued = solver.valued;
	var displayed = solver.displayed;

	var id = solver.id;

	var timeStep = solver.timeStep;
	var userTimeStep = solver.userTimeStep;
	var RKOrder = solver.RKOrder;
	solver.RKPosition = 1;

	var ts = timeStep.value;
	ts = ts.toPrecision();
	if(ts.indexOf(".") == -1){
		var timeStepDecimals = 0;
	}else{
		var timeStepDecimals = ts.length - ts.indexOf(".") - 1;
	}
	var timeStepScaled = parseFloat(ts.replace(".", ""));

	var index = 0;
	var times = [];
	var maxIndex = Math.ceil((me.timeEnd.value - me.timeStart.value)/timeStep.value)
	for(var i = 0; i <= maxIndex+2; i++){
		times.push(new Material(me.timeStart.value + i * timeStepScaled / Math.pow(10, timeStepDecimals), timeStep.units) );
	}


	var l = actions.length;
	for(var i = 0; i < l; i++){
		if(actions[i].dna.trigger !== "Condition"){
			updateTrigger.call(actions[i]);
		}
	}

	var l = transitions.length;
	for(var i = 0; i < l; i++){
		updateTrigger.call(transitions[i]);
	}


	function addRK1Solver(time, repeat, clear){
		me.tasks.add(new Task({
				time: time,
				expires: 1,
				name: "RK1 Solver - " +solver.id,
				action: function(){
        	simulate.valuedPrimitives = [];
          if (clear) {
  					var l = flows.length;
  					for(var i = 0; i < l; i++){
  						flows[i].clean();
  					}


  					l = valued.length;
  					for(var i = 0; i < l; i++){
  						valued[i].clearCached();
  					}
          }

					me.frame(valued, displayed);

					var l = actions.length;
					for(var i = 0; i < l; i++){
						if(actions[i].dna.recalculate && ! actions[i].block){
							updateTrigger.call(actions[i]);
						}
					}

					l = transitions.length;
					for(var i = 0; i < l; i++){
						if( transitions[i].dna.recalculate ){
							updateTrigger.call(transitions[i]);
						}
					}
					//console.log("B")
					me.step(solver);


					if(repeat &&  index <= maxIndex){
						index++;
						addRK1Solver(times[index], true, true)
					}

				}
			})
		);
	}

	function addRK4Solver(time, repeat){
		/*

		1. (t=0) Calculate rates at t=0, move to t=0.5 (rollback restore stocks)
		2. (t=0.5) Calculate rates at t=0.5
		3. (t=0) Use rate of (t=0.5) to move to t=0.5 (rollback restores stocks)
		4. (t=0.5) Calculate rates at t=0.5
		5. (t=0) Use rates of (t=0.5 (2)) to move to t=1 (rollback restores stocks)
		6. (t=1) Calculate rates at t=1
		7. (t=0) Use average rates to move to t=0

		*/


		me.tasks.add(new Task({
				time: time,
				name: "RK4 Solver (Init)  - " +solver.id,
				priority: -10,
				expires: 1,
				blocker: id+" init",
				action: function(){


					var l = flows.length;
					for(var i = 0; i < l; i++){
						flows[i].clean();
					}

					simulate.valuedPrimitives =[];

					l = valued.length;
					for(var i = 0; i < l; i++){
						valued[i].clearCached();
					}

					solver.RKPosition = 1;

					this.unblock(id+" start");
					this.block();
				}
			})
		);
		me.tasks.add(new Task({
				time: time,
				name: "RK4 Solver (step 1) - " +solver.id,
				priority: -5,
				expires: 4,
				blocker: id+" start",
				action: function(){
					if(solver.RKPosition > 1){
						simulate.valuedPrimitives = [];
						var l = valued.length;
						for(var i = 0; i < l; i++){
							valued[i].clearCached();
							valued[i].pastValues.pop();
						}
					}

					me.frame(valued, displayed);

					if(solver.RKPosition == 4){

						var l = actions.length;
						for(var i = 0; i < l; i++){
							if(actions[i].dna.recalculate && ! actions[i].block){
								updateTrigger.call(actions[i]);
							}
						}

						l = transitions.length;
						for(var i = 0; i < l; i++){
							if( transitions[i].dna.recalculate ){
								updateTrigger.call(transitions[i]);
							}
						}

						this.unblock(id+" init")

						if(repeat &&  index <= maxIndex){
							index += 2;
							addRK4Solver(times[index], true)
						}

						me.step(solver);
					}else if(eq(simulate.time(), simulate.timeEnd)){
						me.step(solver);
					}else{
						var l = stocks.length;
						for(var i = 0; i < l; i++){
							stocks[i].preserveLevel();
						}
					}

					this.block();
					this.unblock(id+" mid")
				},
				rollback: function(){
					var l = stocks.length;
					for(var i = 0; i < l; i++){
						stocks[i].restoreLevel();
					}

				}
			})
		);
		me.tasks.add(new Task({
				time: times[index+1],
				name: "RK4 Solver (step 2,3) - " +solver.id,
				priority: -10,
				expires: 2,
				blocker: id+" mid",
				action: function(){

					simulate.valuedPrimitives = [];
					var l = valued.length;
					for(var i = 0; i < l; i++){
						if(!( valued[i] instanceof State)){
							valued[i].clearCached();
						}
					}


					solver.RKPosition++;

					l = flows.length;
					for(var i = 0; i < l; i++){
						flows[i].rate = null;
						flows[i].predict();

					}

					this.unblock(id+" start");
					this.block();
				},
				timeShift: function(){

					me.tasks.moveTo(times[index]);
				}
			})
		);

		me.tasks.add(new Task({
				time: times[index+2],
				name: "RK4 Solver (step 4) - " +solver.id,
				priority: -30,
				expires: 1,
				action: function(){

					simulate.valuedPrimitives = [];
					var l = valued.length;
					for(var i = 0; i < l; i++){
						if(!( valued[i] instanceof State)){
							valued[i].clearCached();
						}

					}

					solver.RKPosition++;

					l = flows.length;
					for(var i = 0; i < l; i++){
						flows[i].rate = null;
						flows[i].predict();
					}

					this.unblock(id + " start");
				},
				timeShift: function(){

					me.tasks.moveTo(times[index]);
				}
			})
		);
	}

	function valMatches(val, fn) {
		if (val instanceof Vector) {
			var matches = false;
			val.recurseApply(function(x){
				matches =  matches || fn(x);
			});
			return matches;
		} else {
			return fn(val);
		}
	}

	function valHasNegative(val) {
		return val && valMatches(val.toNum(), function(x) {return (x instanceof Material) && x.value < 0});
	}

	function valHasPositive(val) {
		return val && valMatches(val.toNum(), function(x) {return (x instanceof Material) && x.value > 0});
	}

	function doFlows(timeChange, oldTime, newTime) {
		var l = flows.length;
		var post = [];
		for(var i = 0; i < l; i++){
			if (flows[i].alpha && flows[i].alpha.dna.nonNegative && valHasPositive(flows[i].rate)) {
				post.push(flows[i]);
			} else if (flows[i].omega && flows[i].omega.dna.nonNegative && valHasNegative(flows[i].rate)) {
				post.push(flows[i]);
			} else {
				flows[i].apply(timeChange, oldTime, newTime);
			}
		}
		for(var i = 0; i < post.length; i++){
			post[i].apply(timeChange, oldTime, newTime);
		}
	}


	if(RKOrder == 1){
		this.tasks.addEvent(function(timeChange, oldTime, newTime){
			doFlows.apply(null, arguments);
		})

		addRK1Solver(this.timeStart, true);
	}else if(RKOrder == 4){

		this.tasks.addEvent(function(timeChange, oldTime, newTime){
			if(timeChange.value > 0){
				doFlows.apply(null, arguments);
			}
		});

		addRK4Solver(this.timeStart, true);

	}else{
		throw "Unknown solution algorithm."
	}
}

"use strict";
/*

Copyright 2010-2015 Scott Fortmann-Roe. All rights reserved.

This file may distributed and/or modified under the
terms of the Insight Maker Public License (https://InsightMaker.com/impl).

*/


var simulate;
var model;

var strictUnits = null;
var strictAgentResolution = false;
var strictLinks = false;


function runSimulation(config) {

	try {
		return innerRunSimulation(config); //have an inner function call to escape try-catch performance pathologies
	} catch (err) {
		return checkErr(err, config);
	}
}

function checkErr(err, config, results) {
	if (simulate) {
		simulate.terminate();
	}
	if (isLocal()) {
		console.log(err);
	}

	var errOut;
	if (err.msg) {
		errOut = {
			error: err.msg,
			errorPrimitive: isDefined(err.primitive) ? findID(err.primitive.id) : null
		};
	} else {
		errOut = {
			error: getText("An unknown simulation error occurred. Please report this issue to the Insight Maker team."),
			errorPrimitive: null
		};
		if (typeof err == "string") {
			if (err.substr(0, 4) === "MSG:") {
				errOut.error = err.substr(4);
			}
			err = {
				msg: errOut.error
			};
		} else {
			err.msg = errOut.msg;
		}
	}

	if (!simulate.results) {
		simulate.results = {};
	}
	simulate.results.error = err.msg;


	if (config.onError) {
		config.onError(errOut);
	}

	if (!config.silent) {
		handleErrorObject(err)
	} else {
		return errOut;
	}
}

var timeUnits = null;

function innerRunSimulation(config) {

	evaluatingLine = null;

	simulate = new Simulator();

	if(config.resultsWindow){
		//console.log("ABC")
		simulate.resultsWindow = config.resultsWindow;
	}

	bootCalc();


	allPlaceholders = [];
	model = {};
	model.submodels = {
		"base": {
			id: "base",
			"DNAs": [],
			agents: [{
				children: [],
				childrenId: {}
			}],
			size: 1
		}
	};
	var setting = getSetting();

	strictUnits = isTrue(setting.getAttribute("StrictUnits"));
	//strictUnits = false; //Historical mode, can do "{1 cow}+5"
	strictAgentResolution = isTrue(setting.getAttribute("StrictAgentResolution"));
	//strictAgentResolution = false // Historical mode, [stoctk].move() will resolve the stock to the agent
	strictLinks = isTrue(getSetting().getAttribute("StrictLinks"));
	//strictLinks = false // All links are implicitly bidirectional


	//Begin custom units setup

	var customUnits = setting.getAttribute("Units");
	if (isDefined(customUnits)) {
		var units = setting.getAttribute("Units").split("\n");
		var newSources = [],
			newScalings = [],
			newTargets = [];
		for (var i = 0; i < units.length; i++) {
			var us = units[i].split("<>");
			if (us[2] && us[2].trim() != "") { //It has a synonym, otherwise we don't need to add it
				newSources.push(us[0]);
				newScalings.push(us[1]);
				var newU = createUnitStore(us[2]);
				if (isUndefined(newU)) {
					throw {
						msg: 'You cannot define a units synonym for "unitless".'
					};
				} else {
					newTargets.push(newU.toStringShort());
				}
			}
		}
		loadUnits(newSources, newTargets, newScalings);

	}

	//End custom units setup

	//Set Up simulation time settings

	timeUnits = setting.getAttribute("TimeUnits").toLowerCase();
	var u = getUnitStore([timeUnits], [1]);
	model["timeLength"] = new Material(sn("#i" + setting.getAttribute("TimeLength")), u);
	model["timeStart"] = new Material(sn("#i" + setting.getAttribute("TimeStart")), u);
	model["timeStep"] = new Material(sn("#i" + setting.getAttribute("TimeStep")), u);
	if (setting.getAttribute("TimePause") > 0) {
		model["timePause"] = new Material(sn("#i" + setting.getAttribute("TimePause")), u);
	}
	simulate.timeUnits = u;


	//End Simulation time settings setup

	var solvers = {}; // Simulation solvers
	solvers.base = {
		timeStep: new Material(sn("#i" + setting.getAttribute("TimeStep")), u),
		algorithm: setting.getAttribute("SolutionAlgorithm"),
		id: "base",
		maxLoaded: -1
	};

	model.solvers = solvers;
	var folders = findType("Folder");
	for (var i = 0; i < folders.length; i++) {
		var json = folders[i].getAttribute("Solver");
		if (json) {
			var solver = JSON.parse(json);
			if (solver.enabled) {
				solvers[folders[i].id] = solver;
				solvers[folders[i].id].timeStep = new Material(sn("#i" + solvers[folders[i].id].timeStep), u);
				solvers[folders[i].id].id = folders[i].id;
				solvers[folders[i].id].maxLoaded = -1;
			}
		}
	}

	var solverKeys = Object.keys(solvers);
	for (var i = 0; i < solverKeys.length; i++) {
		var solver = solvers[solverKeys[i]];

		solver.userTimeStep = solver.timeStep;
		if (solver.algorithm == "RK4") {
			solver.RKOrder = 4;
		} else {
			solver.RKOrder = 1;
		}
		if (solver.RKOrder == 4) {
			solver.timeStep = div(solver.userTimeStep, new Material(2));
		} else {
			solver.timeStep = solver.userTimeStep;
		}

		solver.stocks = [];
		solver.flows = [];
		solver.transitions = [];
		solver.actions = [];
		solver.states = [];
		solver.valued = [];
		solver.displayed = [];
	}

	if (isDefined(setting.getAttribute("Macros"))) {
		try {
			evaluateMacros(setting.getAttribute("Macros"));
		} catch (err) {
			var annotations = [];

			var msg = getText("An error with the macros prevented the simulation from running.");

			if (err.msg) {
				msg = msg + "<br/><br/>" + err.msg;
			} else if (err.toString && err.toString().substr(0, 4) == "MSG:") {
				msg = msg + "<br/><br/>" + err.toString().substr(4);
			} else if (err.toString) {
				if (err.match && err.match(/line (\d+)/i)) {
					var l = err.match(/line (\d+)/i)[1];

					annotations.push({
						type: "error",
						row: (l !== undefined) ? (l - 1) : (evaluatingLine - 1),
						text: err
					})
				}
			}

			showMacros(annotations);

			throw {
				msg: msg
			};

		}
	}

	var modelItems = primitives();

	for (var i = 0; i < modelItems.length; i++) {

		if (modelItems[i].value.nodeName == "Agents") {
			var item = modelItems[i];

			var id = item.getAttribute("Agent");
			var z = parseInt(id, 10);
			if (z == id) {
				id = z;
			}
			if (isUndefined(id)) {
				throw {
					msg: getText("You must select a base agent for the primitive %s. You can create agent definitions using Folder primitives.", "<i>" + clean(item.getAttribute("name")) + "</i>"),
					primitive: item,
					showEditor: false
				};
			}

			var x = new Agents();

			x.dna = new DNA(item, id);
			x.id = item.id;

			x.agentId = id;
			x.createIds();

			x.dna.solver = folderSolvers(item, solvers);
			x.dna.solver.displayed.push(x);

			x.geoDimUnits = item.getAttribute("GeoDimUnits");
			x.geoDimUnitsObject = createUnitStore(item.getAttribute("GeoDimUnits"));
			x.geoWidth = simpleUnitsTest(simpleEquation(item.getAttribute("GeoWidth")), x.geoDimUnitsObject, item);
			x.geoHeight = simpleUnitsTest(simpleEquation(item.getAttribute("GeoHeight")), x.geoDimUnitsObject, item);
			x.halfWidth = div(x.geoWidth, new Material(2));
			x.halfHeight = div(x.geoHeight, new Material(2));
			x.geoWrap = isTrue(item.getAttribute("GeoWrap"));
			x.placement = item.getAttribute("Placement");
			x.placementFunction = item.getAttribute("PlacementFunction");
			x.network = item.getAttribute("Network");
			x.networkFunction = item.getAttribute("NetworkFunction");
			x.agentBase = findID(id).getAttribute("AgentBase") || "";
			if (x.agentBase.trim() != "") {
				x.agentBase = simpleEquation(x.agentBase, varBank);
			}

			var agentCells = getChildren(findID(id));

			x.DNAs = [];
			for (var j = 0; j < agentCells.length; j++) {
				if (modelType(agentCells[j].value.nodeName)) {
					x.DNAs.push(getDNA(agentCells[j], solvers));
				}
				if (agentCells[j].value.nodeName == "State") {
					x.stateIds.push(agentCells[j].id);
				}
			}

			x.size = item.getAttribute("Size");

			x.agents = [];

			x.dna.agents = x;

			model.submodels[item.id] = x;
			model.submodels.base.DNAs.push(x.dna);
		} else if (!inAgent(modelItems[i])) {
			if (modelType(modelItems[i].value.nodeName)) {
				model.submodels.base.DNAs.push(getDNA(modelItems[i], solvers));
			}
		}
	};


	for (var submodel in model.submodels) {
		submodel = model.submodels[submodel];
		for (var j = 0; j < submodel.size; j++) {
			var agent;
			if (submodel.id == "base") {
				agent = submodel.agents[0];
			} else {
				agent = new Agent();
				agent.container = submodel;
				agent.index = j;
				agent.children = [];
				agent.childrenId = {};
				agent.agentId = submodel.id;
				agent.createIds();
				if (submodel.agentBase) {
					agent.vector.parent = submodel.agentBase;
				}

				submodel.agents.push(agent);
			}
			for (var i = 0; i < submodel.DNAs.length; i++) {
				decodeDNA(submodel.DNAs[i], agent);
			}
		}
	}


	// Initialize Actual Simulation
	simulate.setup({
		model: model
	});

	for (var submodel in model.submodels) {
		submodel = model.submodels[submodel];
		for (var j = 0; j < submodel.size; j++) {
			for (var i = 0; i < submodel.DNAs.length; i++) {
				linkPrimitive(submodel.agents[j].children[i], submodel.DNAs[i]);
			}
		}
	}

	for (var submodel in model.submodels) {
		submodel = model.submodels[submodel];
		for (var j = 0; j < submodel.size; j++) {
			setAgentInitialValues(submodel.agents[j]);
		}
	}

	for (var submodel in model.submodels) {
		if (submodel != "base") {
			try {
				buildNetwork(model.submodels[submodel]);
			} catch (err) {
				if (isLocal()) {
					console.log(err);
				}
				var msg = getText("An error with the custom network function prevented the simulation from running.");
				if (err.msg) {
					msg = msg + "<br/><br/>" + err.msg;
				} else if (err.toString().substr(0, 4) == "MSG:") {
					msg = msg + "<br/><br/>" + err.toString().substr(4);
				}

				throw {
					msg: msg,
					primitive: model.submodels[submodel].cell,
					showEditor: false
				};
			}


			try {

				buildPlacements(model.submodels[submodel]);

			} catch (err) {
				if (isLocal()) {
					console.log(err);
				}
				var msg = getText("An error with the agent placement function prevented the simulation from running.");
				if (err.msg) {
					msg = msg + "<br/><br/>" + err.msg;
				} else if (err.toString().substr(0, 4) == "MSG:") {
					msg = msg + "<br/><br/>" + err.toString().substr(4);
				}

				throw {
					msg: msg,
					primitive: model.submodels[submodel].cell,
					showEditor: false
				};
			}

		}
	}



	simulate.results = {
		Time: [],
		data: []
	};
	simulate.displayInformation = {
		ids: [],
		times: [],
		objects: []
	};
	model.submodels["base"].agents[0].children.forEach(function(x) {
		if (!((x instanceof Action) || (x instanceof Transition))) {
			simulate.displayInformation.objects.push(x);
			simulate.displayInformation.ids.push(x.id);
			var data = {};
			if (x instanceof Agents) {
				data.width = x.geoWidth;
				data.height = x.geoHeight
				data.units = x.geoDimUnitsObject;
				data.states = x.states();
			} else {
				x.dna.solver.displayed.push(x);
			}
			simulate.results[x.id] = {
				data: data,
				results: [],
				dataMode: "float"
			};
		}
	});



	if (config.silent) {
		if(config.onPause){
			simulate.run(config);
		}else{
			return formatSimResults(simulate.run(config));
		}

	} else {


		var count = div(model.timeLength, model.timeStep);
		for (var i = 0; i <= count; i++) {
			simulate.displayInformation.times.push(plus(model.timeStart, mult(model.timeStep, new Material(i))).value);
		}


		var oldSuccess = config.onSuccess;
		config.onSuccess = function(res) {
			updateDisplayed(null);

			//~ simulate.resultsWindow.results = formatSimResults(simulate.results);

			//simulate.tasks.print()

			oldSuccess ? oldSuccess(res) : null;
		}

		config.onCompletedFirstPass = function() {
			if(config.resultsWindow){
				//console.log("foo")

				config.resultsWindow.displayInformation.store.suspendEvents();
				config.resultsWindow.displayInformation.store.maxLoaded = -1

				config.resultsWindow.displayInformation.store.clearFilter();

				config.resultsWindow.displayInformation.store.removeAll();

				simulate.displayInformation = config.resultsWindow.displayInformation;

				var scripter = config.resultsWindow.displayInformation.scripter;

				scripter.simulator = simulate;

				scripter.playBut.setGlyph(0xf04c);
				scripter.combo.setValue(-1);
				scripter.time = 0;
				scripter.timeIndex = 0;
				scripter.isFinished = false;
				scripter.updatingSlider = true;
				scripter.slider.setValue(scripter.minTime);
				scripter.updatingSlider = false;

				//console.log("Changed")
				scripter.advanceTimer();
				//console.log("Changed 2")

				config.resultsWindow.displayInformation.store.resumeEvents();
				//window.x = config.resultsWindow.displayInformation.store;

				clearInterval(scripter.animInter);
				scripter.animInter = setInterval(function() {
					scripter.advanceTimer()
				}, 200);


				for (var i = 0; i < simulate.displayInformation.origIds.length; i++) {

					var id = simulate.displayInformation.origIds[i];
					var object = simulate.displayInformation.objects[i];
					var dna = object.dna;

					if (dna.type == "Agents") {
						simulate.results[id].states = object.stateIds;

						simulate.displayInformation.agents[id.toString()].data = simulate.results[id].data;
						simulate.displayInformation.agents[id.toString()].results = simulate.results[id].results;


					} else if ((simulate.results.data[0][id] instanceof Vector) && simulate.results.data[0][id].names) {

						var names = simulate.results.data[0][id].fullNames();

						simulate.results[id].indexedFullNames = names.slice();
						for (var j = 0; j < names.length; j++) {
							names[j] = names[j].join(", ");
						}
						simulate.results[id].indexedNames = names;

					}
				}

			}else{
				/*
				simulate.displayInformation.colors = [];
				simulate.displayInformation.headers = [];
				simulate.displayInformation.agents = [];
				simulate.displayInformation.displayedHeaders = [];
				simulate.displayInformation.displayedIds = [];
				simulate.displayInformation.renderers = [];
				simulate.displayInformation.elementIds = [];
				simulate.displayInformation.res = simulate.results;

				var ids = [];

				simulate.displayInformation.origIds = simulate.displayInformation.ids.slice();
				for (var i = 0; i < simulate.displayInformation.origIds.length; i++) {
					var id = simulate.displayInformation.origIds[i];
					var object = simulate.displayInformation.objects[i];
					var dna = object.dna;

					simulate.displayInformation.displayedIds.push(id);
					simulate.displayInformation.displayedHeaders.push(dna.name);

					//console.log(simulate.results);

					if (dna.type == "Agents") {
						var states = object.stateIds;

						simulate.results[id].states = states;

						for (var j = 0; j < states.length; j++) {
							var innerItem = findID(states[j]);
							ids.push(id);
							simulate.displayInformation.elementIds.push("e" + id + "-" + states[j]);
							simulate.displayInformation.headers.push(getName(innerItem));
							simulate.displayInformation.colors.push(getLineColor(innerItem));
							if (simulate.results[id].dataMode == "float") {
								simulate.displayInformation.renderers.push(commaStr);
							} else if (simulate.results[id].dataMode == "agents") {
								simulate.displayInformation.renderers.push(function(x) {
									return x;
								});
							} else {
								simulate.displayInformation.renderers.push(undefined);
							}
						}

						//console.log("--")
						//console.log(simulate.results[id].results);

						simulate.displayInformation.agents[id.toString()] = {
							id: id,
							item: dna.cell,
							data: simulate.results[id].data,
							results: simulate.results[id].results
						};


					} else if ((simulate.results.data[0][id] instanceof Vector) && simulate.results.data[0][id].names) {

						var col = getLineColor(dna.cell);

						var names = simulate.results.data[0][id].fullNames();

						simulate.results[id].indexedFullNames = names.slice();
						for (var j = 0; j < names.length; j++) {
							names[j] = names[j].join(", ");
						}
						simulate.results[id].indexedNames = names;

						for (var j = 0; j < names.length; j++) {
							ids.push(id);
							simulate.displayInformation.elementIds.push("e" + id + "-" + j);
							simulate.displayInformation.headers.push(dna.name + " (" + names[j] + ")");
							simulate.displayInformation.colors.push(col);
							simulate.displayInformation.renderers.push(commaStr);
						}

					} else {
						ids.push(id)
						simulate.displayInformation.elementIds.push("e" + id);
						simulate.displayInformation.headers.push(dna.name);
						simulate.displayInformation.colors.push(getLineColor(dna.cell));
						if (simulate.results[id].dataMode == "float") {
							simulate.displayInformation.renderers.push(commaStr);
						} else {
							simulate.displayInformation.renderers.push(undefined);
						}
					}

				}

				var storeFields = [{
					type: "float",
					name: "Time"
				}, {
					type: "int",
					name: "id"
				}];

				for (var i = 0; i < simulate.displayInformation.elementIds.length; i++) {
					storeFields.push({
						type: 'auto',
						name: simulate.displayInformation.elementIds[i],
						defaultValue: undefined
					});
				}


				simulate.displayInformation.store = new Ext.data.Store({
					fields: storeFields,
					data: undefined
				});
				simulate.displayInformation.store.maxLoaded = -1;
				simulate.displayInformation.ids = ids;
				*/
			}



		}



		var oldStep = config.onStep;
		config.onStep = function(solver) {

			// See if we should sleep to let the main UI update

			var updated = false;
			var progress = simulate.progress();


			if (!simulate.shouldSleep) {
				var timeTaken = new Date().getTime() - simulate.wakeUpTime;

				if (((!simulate.resultsWindow) && timeTaken > 100) || timeTaken > 600) {

					updateDisplayed(solver);
					updated = true;


					simulate.timer = setTimeout(function() {
						simulate.resume();
					}, 20);

					simulate.sleep();
				}
			}

			if (progress == 1 && !updated) {
				updateDisplayed(solver);
			}

			// Call any user defined step function

			oldStep ? oldStep(solver) : null;
		}

		var oldError = config.onError;
		config.onError = function(res) {

			try {
				for (var solver in simulate.model.solvers) {
					updateDisplayed(simulate.model.solvers[solver]);
				}
			} catch (err) {

			}

			if (simulate.resultsWindow) {
				simulate.resultsWindow.scripter.pause(false);
				simulate.resultsWindow.scripter.finished();
			}

			oldError ? oldError(res) : null;
		}

		simulate.run(config);
	}


}

function formatSimResults(res) {
	var makeMap = function(returnNonVecs){
		return function(x){
			if(x instanceof Vector){
				if(x.names){
					var r = {};
					for(var i = 0; i < x.names.length; i++){
						r[x.names[i]] = vecMap(x.items[i]);
					}
					return r;
				}else{
					return x.items.slice().map(vecMap);
				}
			}else{
				if(returnNonVecs){
					return x;
				}else{
					return undefined;
				}
			}
		}
	}

	var vecMap = makeMap(true);

	res = deepClone({}, res, 3, makeMap(false));

	if (isUndefined(res.error)) {
		res.error = "none";
		res.errorPrimitive = null;
	}
	res.names = {};
	var items = model.submodels["base"].agents[0].children;
	for (var i = 0; i < items.length; i++) {
		res.names[items[i].name] = items[i].id;
	}
	res.value = function(item) {
		return this[item.id].results;
	};
	res.lastValue = function(item) {
		return this[item.id].results[this[item.id].results.length - 1];
	};
	if (res.Time) {
		res.periods = res.Time.length;
		res.times = res.Time;
	}

	return res;
}

function createUnitStore(u) {
	if ((!u) || u.trim() == "" || u.trim().toLowerCase() == "unitless") {
		return undefined;
	}
	return simpleEquation("{1 " + u + "}").units;
}

function simpleEquation(eq, scope, primitiveBank, tree) {
	if (!scope) {
		scope = {};
	}
	if (!primitiveBank) {
		primitiveBank = {};
	}
	if (!tree) {
		tree = trimTree(createTree(eq), primitiveBank);
	}

	var res = evaluateTree(tree, scope);

	return res;
}

function simpleNum(mat, units) {
	if (mat instanceof Vector) {
		return new Vector(mat.items.map(function(x) {
			return simpleNum(x, units);
		}));
	}

	if ((!units) && (mat.units)) {
		throw (getText("The result of the calculation has units %s, but no units are specified for the calculation. Please set the units for the calculation so we can determine the proper output.", mat.units.toString()));
	}

	if (!mat.units) {
		return 0 + mat.value;
	} else {

		mat.units.addBase();
		units.addBase();

		return 0 + fn["*"](mat.value, fn["/"](sn("#e" + mat.units.toBase), units.toBase));
	}

}

function simpleUnitsTest(mat, units, primitive, showEditor) {
	if (mat instanceof Vector) {
		return new Vector(mat.items.map(function(x) {
			return simpleUnitsTest(x, units, primitive, showEditor);
		}));
	}


	if ((!mat.units) && (!units)) {
		return mat;
	} else if ((!mat.units)) {
		mat.units = units;
		return mat;
	} else if (mat.units === units) {
		return mat;
	} else {
		var scale = convertUnits(mat.units, units, false); //XXX fixme true
		if (scale == 0) {
			if (isLocal()) {
				console.log(mat.units);
				console.log(units);
			}
			throw {
				msg: getText("Wrong units generated. Expected %s, and got %s.", "<i>" + clean(units ? units.toString() : "unitless") + "</i>", "<i>" + clean(mat.units ? mat.units.toString() : "unitless") + "</i>"),
				primitive: primitive,
				showEditor: showEditor
			};
		} else {
			//console.log("----+")
			mat.value = mat.value * scale;
			mat.units = units;
			return mat;
		}
	}
}


function handleErrorObject(err) {

	if (isLocal()) {
		console.log(err);
		if (console.trace) {
			console.trace();
		}
	}
	if (err.msg) {
		// Moved up because the alert should happen before the editor is opened
		mxUtils.alert(err.msg, function() {
			if (isDefined(err.primitive)) {
				var cell = findID(err.primitive.id)
				highlight(cell);
				if (err.showEditor) {
					//console.log( err);
					showEditor(cell, [{
						type: "error",
						row: (err.line !== undefined) ? (err.line - 1) : (evaluatingLine - 1),
						text: err.details ? err.details : "Error"
					}]);
				}
			}
		});
	} else if (err.error) {
		mxUtils.alert(err);
	} else {
		mxUtils.alert("Unkown error occured "+err.message+" Stacktrace:"+err.stack);
		//~ mxUtils.alert(getText("An unknown model simulation error occurred. Please report this issue to the Insight Maker team."));
	}
}

function evaluateMacros(macros) {
	evaluateTree(trimTree(createTree(macros), {}), varBank);
}

function DNA(cell, id) {
	this.type = cell.value.nodeName;
	this.cell = cell;
	id = id || cell.id;
	var x = parseInt(cell.id, 10);
	if (x == cell.id) {
		this.id = x;
	} else {
		this.id = id;
	}
	this.name = cell.getAttribute("name");
	this.units = null;

}

function getDNA(cell, solvers) {
	var dna = new DNA(cell);
	dna.solver = folderSolvers(cell, solvers);
	if(cell){
		var p = getParent(cell);
		if(p){
			dna.frozen = isTrue(getFrozen(p));
		}
	}

	if (dna.type === "Variable" || dna.type == "Flow") {
		if (isTrue(cell.getAttribute("ShowSlider"))) {
			dna.slider = true;
		}
	}

	if (dna.type == "Flow" || dna.type == "Transition") {
		if (cell.target !== null) {
			dna.targetId = orig(cell.target).id;
		}
		if (cell.source !== null) {
			dna.sourceId = orig(cell.source).id;
		}
	}

	if (dna.type == "Converter") {
		dna.value = getValue(cell);
	} else {
		try {
			dna.value = createTree(getValue(cell));
		} catch (err) {
			if (isLocal()) {
				//console.log(this);
				//console.log(eq);
				//console.log(neighborhood);
				console.log(err);
			}
			var msg = getText("The primitive %s has an equation error that must be corrected before the model can be run.", "<i>[" + clean(dna.name) + "]</i>");
			if (err.substr && err.substr(0, 4) == "MSG:") {
				msg += "<br/><br/>" + err.toString().substr(4);
			}

			var l = undefined;
			if (err.match && err.match(/line (\d+)/i)) {
				l = err.match(/line (\d+)/i)[1];
			}

			error(msg, cell, true, l, err.match ? err : undefined);

		}
	}


	if (dna.type == "Action") {
		dna.trigger = cell.getAttribute("Trigger");
		dna.repeat = isTrue(cell.getAttribute("Repeat"));
		dna.recalculate = isTrue(cell.getAttribute("Recalculate")) || dna.trigger == "Condition";
		try {
			dna.triggerValue = createTree(""+cell.getAttribute("Value"));
		} catch (err) {
			var msg = getText("The trigger for %s has an equation error that must be corrected before the model can be run.", "<i>[" + clean(dna.name) + "]</i>");
			if (err.substr && err.substr(0, 4) == "MSG:") {
				msg += "<br/><br/>" + err.toString().substr(4);
			}
			error(msg, dna.cell, false, l);
		}
	} else if (dna.type == "Transition") {
		dna.trigger = cell.getAttribute("Trigger");
		dna.repeat = isTrue(cell.getAttribute("Repeat"));
		dna.recalculate = isTrue(cell.getAttribute("Recalculate")) || dna.trigger == "Condition";
	} else if (dna.type == "State") {
		if (isUndefined(cell.getAttribute("Residency")) || cell.getAttribute("Residency").trim() == "") {
			dna.residency = null;
		} else {
			try {
				dna.residency = evaluateTree(trimTree(createTree(cell.getAttribute("Residency")), {}));
				if (!dna.residency.units) {
					dna.residency.units = simulate.timeUnits;
				}
				if (eq(dna.residency, new Material(0, simulate.timeUnits))) {
					dna.residency = null;
				}
			} catch (err) {
				if (isLocal()) {
					console.log(err);
				}

				throw ({
					msg: getText("Invalid state residency."),
					primitive: cell,
					showEditor: false
				});
			}
		}
	} else if (dna.type == "Stock") {
		dna.nonNegative = isTrue(cell.getAttribute("NonNegative"));
		if (cell.getAttribute("StockMode") == "Conveyor") {
			dna.stockType = "Conveyor";
			try {
				dna.delay = evaluateTree(trimTree(createTree(cell.getAttribute("Delay")), {}));
				if (!dna.delay.units) {
					dna.delay.units = simulate.timeUnits;
				}
			} catch (err) {
				if (isLocal()) {
					console.log(err);
				}

				throw ({
					msg: getText("Invalid stock delay."),
					primitive: cell,
					showEditor: false
				});
			}
		}
	} else if (dna.type == "Flow") {
		dna.onlyPositive = isTrue(cell.getAttribute("OnlyPositive"));
	} else if (dna.type == "Converter") {
		dna.source = cell.getAttribute("Source");
		dna.interpolation = cell.getAttribute("Interpolation") == "Linear" ? "linear" : "discrete";


		if (isUndefined(cell.getAttribute("Data")) || cell.getAttribute("Data").trim() == "") {

			throw ({
				msg: getText("The converter %s does not have any data.", "<i>" + clean(dna.name) + "</i>"),
				primitive: cell,
				showEditor: true
			});
		}

		var data = cell.getAttribute("Data").split(";");


		var inp = [];
		var out = [];
		var myU;
		if (dna.source == "Time") {
			myU = simulate.timeUnits;
		} else {
			myU = createUnitStore(orig(findID(dna.source)).getAttribute("Units"));
		}
		for (var i = 0; i < data.length; i++) {
			var b = data[i].split(",");
			inp.push(new Material(sn(b[0].trim()), myU));
			out.push(new Material(sn(b[1].trim())));
		}
		dna.inputs = inp;
		dna.outputs = out;
	}

	if (dna.type != "State") {
		if (dna.type != "Transition" && dna.type != "Action") {
			var u = cell.getAttribute("Units");
			try {
				if (dna.type != "Flow" || (u && u.trim() != "" && u.trim().toLowerCase() != "unitless")) {
					dna.units = createUnitStore(u);
				} else {
					dna.units = getUnitStore([timeUnits], [-1]);
					dna.flowUnitless = true;
				}
			} catch (err) {
				if (isLocal()) {
					console.log(err);
				}
				throw {
					msg: getText("Invalid units specified for primitive: \"%s\".", clean(u)),
					primitive: cell,
					showEditor: true
				};

			}
		} else {
			if (dna.trigger == "Timeout") {
				dna.units = simulate.timeUnits;
			}
		}
		dna.maxConstraint = cell.getAttribute("MaxConstraint");
		dna.maxConstraintType = isTrue(cell.getAttribute("MaxConstraintUsed")) ? 1 : null;
		dna.minConstraint = cell.getAttribute("MinConstraint");
		dna.minConstraintType = isTrue(cell.getAttribute("MinConstraintUsed")) ? 1 : null;

	}

	if (dna.units) {
		dna.units.addBase();
		dna.toBase = dna.units.toBase;
	} else {
		dna.toBase = 1;
	}

	dna.unitless = !dna.units;

	return dna;
}

function folderSolvers(cell, solvers) {
	if ((!cell) || cell == null) {
		return solvers.base;
	}
	if (cell.value.nodeName == "Agents") {
		//console.log("AGENTS")
		var x = cell.getAttribute("Agent");
		//console.log(x)
		if (solvers[x]) {
			//console.log("SET!")
			//console.log(solvers[x])
			return solvers[x];
		}
	}

	var p = getParent(cell);
	if (p && solvers[p.id]) {
		return solvers[p.id];
	}

	return folderSolvers(p, solvers);
}


function decodeDNA(dna, agent) {
	var type = dna.type;
	var x;
	if (type == "Variable") {
		x = new Variable();
	} else if (type == "State") {
		x = new State();
	} else if (type == "Transition") {
		x = new Transition();
	} else if (type == "Action") {
		x = new Action();
	} else if (type == "Stock") {
		x = new Stock();
	} else if (type == "Flow") {
		x = new Flow();
	} else if (type == "Converter") {
		x = new Converter();
	}

	if (x) {
		x.dna = dna;
		x.id = dna.id;
		x.index = agent.index;
		x.agentId = agent.agentId;
		x.container = agent;
		x.createIds();

		x.frozen = dna.frozen;

		agent.children.push(x);
		agent.childrenId[x.id] = x;

		if (dna.slider) {
			if (simulate.sliders[dna.id]) {
				simulate.sliders[dna.id].push(x);
			} else {
				simulate.sliders[dna.id] = [x];
			}
		}


		if (x instanceof Action) {
			dna.solver.actions.push(x);
		} else if (x instanceof Transition) {
			dna.solver.transitions.push(x);
		} else if (!(x instanceof Agents)) {
			dna.solver.valued.push(x)
			if (x instanceof Flow) {
				dna.solver.flows.push(x);
			} else if (x instanceof Stock) {
				dna.solver.stocks.push(x);
			} else if (x instanceof State) {
				dna.solver.states.push(x);
			}
		}
	} else if (type == "Agents") {
		agent.children.push(dna.agents);
		agent.childrenId[dna.id] = dna;
	}

}

function linkPrimitive(primitive, dna) {
	var type = dna.type;
	//console.log("--"+dna.name);
	if (type != "Agents") {
		var myNeighborhood = getPrimitiveNeighborhood(primitive, dna);

		if (type == "Flow" || type == "Transition") {
			var alpha = null,
				omega = null;

			if (myNeighborhood["alpha"]) {
				alpha = myNeighborhood["alpha"];
			}

			if (myNeighborhood["omega"]) {
				omega = myNeighborhood["omega"];
			}

			primitive.setEnds(alpha, omega);
		}

		if (type == "Action") {
			//console.log(myNeighborhood);
			try {
				primitive.equation = trimTree(dna.triggerValue, myNeighborhood);
			} catch (err) {
				var msg = getText("The primitive %s has an equation error that must be corrected before the model can be run.", "<i>[" + clean(dna.name) + "]</i>");
				if (err.substr && err.substr(0, 4) == "MSG:") {
					msg += "<br/><br/>" + err.toString().substr(4);
				}
				error(msg, dna.cell, false, l);
			}
			try {
				primitive.action = trimTree(dna.value, myNeighborhood);
			} catch (err) {
				var msg = getText("The primitive %s has an equation error that must be corrected before the model can be run.", "<i>[" + clean(dna.name) + "]</i>");
				if (err.substr && err.substr(0, 4) == "MSG:") {
					msg += "<br/><br/>" + err.toString().substr(4);
				}
				var l = undefined;
				if (err.match && err.match(/line (\d+)/i)) {
					l = err.match(/line (\d+)/i)[1]
				}
				error(msg, dna.cell, true, l, err.match ? err : undefined);
			}
			//primitive.resetTimer();
		} else if (type == "Converter") {
			if (dna.source == "Time") {
				primitive.setSource("*time");
			} else {
				var source = orig(findID(dna.source)).id;
				var sourceSet = false;
				for (var neighbor in myNeighborhood) {
					if (source == myNeighborhood[neighbor].id) {
						primitive.setSource(myNeighborhood[neighbor]);
						sourceSet = true;
						break;
					}
				}

				if(! sourceSet){
					error("Converter source could not be found. Please redefine it.", dna.cell, false);
				}


			}
		} else {
			//console.log("setting: "+dna.name);
			//console.log(dna.value);
			primitive.setEquation(dna.value, myNeighborhood);
		}
	}
}

function setAgentInitialValues(agent) {

	for (var i = 0; i < agent.children.length; i++) {
		if (agent.children[i] instanceof Stock) {
			agent.children[i].setDelay();
			try {
				agent.children[i].setInitialValue();
			} catch (err) {
				if (isLocal()) {
					console.log(err);
				}
				if (err instanceof String) {
					error(err.substr(4, err.length), agent.children[i], true);
				} else {
					throw err;
				}
			}
		} else if (agent.children[i] instanceof State) {
			try {
				if (agent.children[i].active === null) {
					agent.children[i].setInitialActive(true);
				}
			} catch (err) {
				if (isLocal()) {
					console.log(err);
				}
				if (err instanceof String) {
					error(err.substr(4, err.length), agent.children[i], true);
				} else {
					throw err;
				}
			}
		}
	}

}

function buildNetwork(submodel) {
	if (submodel.network == "Custom Function") {
		var hood = getPrimitiveNeighborhood(submodel, submodel.dna);
		var tree = trimTree(createTree(submodel.networkFunction), hood);
		for (var i = 0; i < submodel.agents.length - 1; i++) {
			for (var j = i + 1; j < submodel.agents.length; j++) {
				if (trueValue(simpleEquation(submodel.networkFunction, {
					"-parent": varBank,
					"a": submodel.agents[i],
					"b": submodel.agents[j]
				}, hood, tree))) {
					submodel.agents[i].connect(submodel.agents[j]);
				}
			}
		}
	} else if (submodel.network == "None") {
		//nothing to do
	} else {
		throw {
			msg: "Unknown network type: " + submodel.network + ".",
			primitive: submodel.cell,
			showEditor: false
		};
	}
}

function buildPlacements(submodel, items) {
	var tree;
	var wCount, hCount;


	if (submodel.placement == "Random") {
		submodel.agents.forEach(function(s) {
			s.location = new Vector([mult(submodel.geoWidth, new Material(Rand())), mult(submodel.geoHeight, new Material(Rand()))], ['x', 'y']);
		});
	} else if (submodel.placement == "Custom Function") {
		submodel.agents.forEach(function(s) {
			var n = getPrimitiveNeighborhood(submodel, submodel.dna);
			n.self = s;
			s.location = simpleUnitsTest(simpleEquation(submodel.placementFunction, {
				"-parent": varBank,
				"self": s
			}, n), submodel.geoDimUnitsObject);
			if (!s.location.names) {
				s.location.names = ['x', 'y'];
				s.location.namesLC = ['x', 'y'];
			}
		});
	} else if (submodel.placement == "Grid") {
		tree = trimTree(createTree("{x: x*width(self), y: y*height(self)}"), {});
		var size = submodel.agents.length;
		var ratio = simpleNum(simpleEquation("width(self)/height(self)", {
			"-parent": varBank,
			"self": submodel
		}, {}), submodel.geoDimUnitsObject);
		//console.log(ratio)
		hCount = Math.sqrt(size / ratio);
		wCount = Math.floor(hCount * ratio);

		hCount = Math.ceil(hCount);
		if (!hCount * wCount >= size) {
			wCount = wCount + 1
		}

		var j = 0;
		submodel.agents.forEach(function(s) {
			var xPos = ((j % wCount) + 0.5) / wCount;
			var yPos = (Math.floor(j / wCount) + 0.5) / hCount;
			s.location = simpleUnitsTest(simpleEquation("{x: x*width(self), y: y*height(self)}", {
				"self": s,
				"x": new Material(xPos),
				"y": new Material(yPos),
				"-parent": varBank
			}, {}, tree), submodel.geoDimUnitsObject);
			j++;
		});
	} else if (submodel.placement == "Ellipse") {
		tree = trimTree(createTree("{width(self), height(self)}/2+{sin(index(self)/size*2*3.14159), cos(index(self)/size*2*3.14159)}*{width(self), height(self)}/2"), {});
		var size = new Material(submodel.agents.length);
		submodel.agents.forEach(function(s) {
			s.location = simpleUnitsTest(simpleEquation("{width(self), height(self)}/2+{sin(index(self)/size*2*3.14159), cos(index(self)/size*2*3.14159)}*{width(self), heigh(self)}/2", {
				"self": s,
				"size": size,
				"-parent": varBank
			}, {}, tree), submodel.geoDimUnitsObject);
		});
	} else if (submodel.placement == "Network") {
		tree = trimTree(createTree("{x: x*width(self), y: y*height(self)}"), {});

		var graph = new Graph();

		var nodes = submodel.agents.map(function(s) {
			return graph.newNode({
				data: s
			});
		});
		var getNode = function(item) {
			for (var i = 0; i < nodes.length; i++) {

				if (nodes[i].data.data === item) {
					return nodes[i];
				}
			}
			return null;
		}
		submodel.agents.forEach(function(a) {
			a.connected.forEach(function(target) {
				graph.newEdge(getNode(a), getNode(target));
			});
		});
		//console.log("ZZ");
		var layout = new Layout.ForceDirected(graph, 400.0, 600.0, 0.5);

		for (var i = 0; i < 60; i++) {
			layout.applyCoulombsLaw();
			layout.applyHookesLaw();
			layout.attractToCentre();
			layout.updateVelocity(0.03);
			layout.updatePosition(0.03);
		}

		/*while(layout.totalEnergy() > 0.01) {
			layout.applyCoulombsLaw();
			layout.applyHookesLaw();
			layout.attractToCentre();
			layout.updateVelocity(0.03);
			layout.updatePosition(0.03);
		}*/

		var bb = layout.getBoundingBox();
		//console.log(bb);
		bb.width = bb.topright.x - bb.bottomleft.x;
		bb.height = bb.topright.y - bb.bottomleft.y;
		//console.log(bb);
		var scalePoint = function(p) {
			return {
				x: (p.x - bb.bottomleft.x) / bb.width,
				y: (p.y - bb.bottomleft.y) / bb.height
			};
		}

		layout.eachNode(function(node, point) {
			var p = scalePoint(point.p);
			//console.log(scalePoint(p));
			node.data.data.location = simpleUnitsTest(simpleEquation("{x: x*width(self), y: y*height(self)}", {
				"self": submodel,
				"x": new Material(p.x),
				"y": new Material(p.y),
				"-parent": varBank
			}, {}, tree), submodel.geoDimUnitsObject);
		});
		//console.log("done");

	} else {
		throw {
			msg: "Unknown placement type: " + submodel.placement + ".",
			primitive: submodel.cell,
			showEditor: false
		};
	}

}


var allPlaceholders = {};

function getPrimitiveNeighborhood(primitive, dna) {
	
	var neighbors = neighborhood(dna.cell);
	var placeholders = allPlaceholders[dna.id] ? allPlaceholders[dna.id] : {};

	var hood = {
		self: primitive
	};

	/*console.log("----");
	console.log(dna.name);
	console.log(neighbors)*/

	if (!neighbors.placeholders) {
		if (dna.type == "Agents") {
			for (var i = 0; i < primitive.DNAs.length; i++) {
				placeholders[primitive.DNAs[i].name.toLowerCase()] = new Placeholder(primitive.DNAs[i], primitive);
			}
		}
	}

	for (var k = 0; k < neighbors.length; k++) {
		var item = neighbors[k].item;
		if (item.value.nodeName == "Agents") {
			hood[model.submodels[item.id].dna.name.toLowerCase()] = model.submodels[item.id];
			if (!neighbors.placeholders) {
				for (var i = 0; i < model.submodels[item.id].DNAs.length; i++) {
					hood[model.submodels[item.id].DNAs[i].name.toLowerCase()] = new Placeholder(model.submodels[item.id].DNAs[i], primitive);
				}
			}
		} else if(neighbors[k].type != "agent"){



			var found = false;
			if (primitive.container) {
				if (primitive.container.childrenId[item.id]) {
					var hoodName = primitive.container.childrenId[item.id].dna.name.toLowerCase();
					//while(hood[hoodName]){
					//hoodName += ".extra";
					//}
					hood[hoodName] = primitive.container.childrenId[item.id];
					found = true;
				}
			}
			if (!found) {
				if (model.submodels["base"]["agents"][0].childrenId[item.id]) {
					var hoodName = model.submodels["base"]["agents"][0].childrenId[item.id].dna.name.toLowerCase();
					//while(hood[hoodName]){
					//	hoodName += ".extra";
					//}
					hood[hoodName] = model.submodels["base"]["agents"][0].childrenId[item.id];
					found = true;
				}
			}


			if ((!found) && (dna.type == "Flow" || dna.type == "Transition") && item == findID(item.id)) {

				error(dna.type + " primitives may not cross agent boundaries.", dna.cell, false);
			}

			if (dna.type == "Flow" || dna.type == "Transition") {

				if (hood[hoodName]) {
					if (dna.targetId == hood[hoodName].id) {
						hood["omega"] = hood[hoodName];
					} else if (dna.sourceId == hood[hoodName].id) {
						hood["alpha"] = hood[hoodName];
					}
				}
			}
		}
	}


	var keys = Object.keys(placeholders);
	for (var i = 0; i < keys.length; i++) {
		hood[keys[i]] = placeholders[keys[i]];
	}
	allPlaceholders[dna.id] = placeholders;

	//console.log(hood);

	return hood;
}

function modelType(type) {
	// Check type is in allModelTypes. This are the types that affect the simulation
	if (allModelTypes.indexOf(type) != -1) {
		return true;
	} else {
		return false;
	}
}

function updateDisplayed(solver) {
	var displayed = solver ? solver.displayed : [];

	if (simulate.displayInformation.store) {
		if (displayed.length > 0) {
			var storeData = [];
			var maxTime = solver.maxLoaded;
			maxTime = isDefined(maxTime) ? (maxTime + 1) : 0;
			var maxInData = solver.maxLoaded;
			for (var k = maxTime; k < simulate.results.Time.length; k++) {
				var inStore = simulate.displayInformation.store.getById(k);
				var d = {};
				if (!inStore) {
					d["id"] = k;
					d["Time"] = simulate.results["Time"][k];
				}
				//console.log("--");
				//console.log(solver);
				//console.log(displayed.length);
				//console.log(d.Time+" -"+k)

				if (isUndefined(simulate.results.data[k][displayed[0].id])) {
					//continue;
				} else {
					maxInData = k;
					for (var j = 0; j < displayed.length; j++) {

						//console.log(displayed[j].id)
						var i = simulate.displayInformation.ids.indexOf(displayed[j].id);

						if (i > -1) {
							if (simulate.results[simulate.displayInformation.ids[i]].states) {
								var states = simulate.results[simulate.displayInformation.ids[i]].states;

								//console.log("--")
								//console.log(k);
								//console.log(displayed[j].id)
								//console.log(simulate.results.data);
								if (simulate.results.data[k][displayed[j].id]) {
									var current = simulate.results.data[k][displayed[j].id].current;

									var tally = {};
									for (var q = 0; q < current.length; q++) {
										if (current[q].state) {
											for (var s = 0; s < current[q].state.length; s++) {
												tally[current[q].state[s].id.toString()] = (tally[current[q].state[s].id.toString()] + 1) || 1;
											}
										}
									}

									for (var q = 0; q < states.length; q++) {
										d[simulate.displayInformation.elementIds[i + q]] = tally[states[q]] || 0;
									}
								}
							} else if (simulate.results[simulate.displayInformation.ids[i]].indexedNames) {
								var z = 0;
								while (i < simulate.displayInformation.ids.length && simulate.displayInformation.ids[i] == displayed[j].id) {
									try {
										d[simulate.displayInformation.elementIds[i]] = selectFromMatrix(simulate.results.data[k][displayed[j].id].fullClone(), simulate.results[simulate.displayInformation.ids[i]].indexedFullNames[z].slice());
									} catch (err) {
										throw ({
											msg: getText("Cannot change vector keys during a simulation."),
											primitive: displayed[j].dna.cell,
											showEditor: true
										});

									}

									z++;
									i++;
								}

							} else {
								/*console.log("--")
								console.log(d);
								console.log(simulate.displayInformation.elementIds);
								console.log(i);
								console.log(simulate.results.data);
								console.log(k);
								console.log(displayed[j].id)*/
								d[simulate.displayInformation.elementIds[i]] = simulate.results.data[k][displayed[j].id];
							}
						}
					}
				}

				if (inStore) {
					inStore.set(d);
					inStore.commit();
				} else {
					storeData.push(d);
				}
			}
			solver.maxLoaded = maxInData;
			simulate.displayInformation.store.maxLoaded = Math.max(simulate.displayInformation.store.maxLoaded, solver.maxLoaded)

			//console.log(storeData)

			simulate.displayInformation.store.suspendEvents();
			simulate.displayInformation.store.add(storeData);
			simulate.displayInformation.store.resumeEvents();
			simulate.displayInformation.store.filter();
		}
		//window.store = simulate.displayInformation.store;

		if (!simulate.resultsWindow) {
			simulate.resultsWindow = createResultsWindow(simulate.displayInformation, simulate.config);


			simulate.resultsWindow.scripter.loadTime(0);

			var period = (simulate.resultsWindow.scripter.combo.getValue() == -1) ? 200 : 100 / Math.min(0.5, simulate.resultsWindow.scripter.combo.getValue());

			var s = simulate.resultsWindow.scripter;
			simulate.resultsWindow.scripter.animInter = setInterval(function() {
				s.advanceTimer()
			}, period);
		}

		simulate.resultsWindow.sliders = simulate.sliders;

		if (k == simulate.displayInformation.times.length) {
			simulate.resultsWindow.scripter.finished();
		}
	}
}

/*****
*
*   RedBlackNode.js
*
*   copyright 2004, Kevin Lindsey
*   licensing info available at: http://www.kevlindev.com/license.txt
*
*****/

/*****
*
*   class variables
*
*****/
RedBlackNode.VERSION = 1.0;


/*****
*
*   constructor
*
*****/
function RedBlackNode(value, parent) {
    this._left   = null;
    this._right  = null;
    this._value  = value;
    this._height = 1;
	this.parent = parent;
}


/*****
*
*   add
*
*****/
RedBlackNode.prototype.add = function(value) {
    var relation = value.compare(this._value);
    var addResult;
    var result;
    var newNode;

    if ( relation != 0 ) {
        if ( relation < 0 ) {
            if ( this._left != null ) {
                addResult = this._left.add(value);
                this._left = addResult[0];
				this._left.parent = this;
                newNode = addResult[1];
            } else {
                newNode = this._left = new RedBlackNode(value, this);
            }
        } else if ( relation > 0 ) {
            if ( this._right != null ) {
                addResult = this._right.add(value);
                this._right = addResult[0];
				this._right.parent = this;
                newNode = addResult[1];
            } else {
                newNode = this._right = new RedBlackNode(value, this);
            }
        }
        result = [this.balanceTree(), newNode];
    } else {
        result = [this, this];
    }

    return result;
};


/*****
*
*   balanceTree
*
*****/
RedBlackNode.prototype.balanceTree = function() {
    var leftHeight  = (this._left  != null) ? this._left._height  : 0;
    var rightHeight = (this._right != null) ? this._right._height : 0;
    var result;

    if ( leftHeight > rightHeight + 1 ) {
        result = this.swingRight();
    } else if ( rightHeight > leftHeight + 1 ) {
        result = this.swingLeft();
    } else {
        this.setHeight();
        result = this;
    }

    return result;
};


/*****
*
*   join
*
*****/
RedBlackNode.prototype.join = function(that) {
    var result;

    if ( that == null ) {
        result = this;
    } else {
        var top;

        if ( this._height > that._height ) {
            top = this;
            top._right = that.join(top._right);
			top._right.parent = top;
        } else {
            top = that;
            top._left = this.join(top._left);
			top._left.parent = top;
        }

        result = top.balanceTree();
    }

    return result;
};


/*****
*
*   moveLeft
*
*****/
RedBlackNode.prototype.moveLeft = function() {
    var right = this._right;
    var rightLeft = right._left;
    
    this._right = rightLeft;
	if(this._right){
		this._right.parent = this;
	}
	
    right._left = this;
	right._left.parent = right;
	
    this.setHeight();
    right.setHeight();

    return right;
};


/*****
*
*   moveRight
*
*****/
RedBlackNode.prototype.moveRight = function() {
    var left = this._left;
    var leftRight = left._right;
    
    this._left = leftRight;
	if(this._left){
		this._left.parent = this;
	}
	
    left._right = this;
	left._right.parent = left;
	
    this.setHeight();
    left.setHeight();

    return left;
};


/*****
*
*   remove
*
*****/
RedBlackNode.prototype.remove = function(value) {
    var relation = value.compare(this._value);
    var remResult;
    var result;
    var remNode;

    if ( relation != 0 ) {
        if ( relation < 0 ) {
            if ( this._left != null ) {
                remResult = this._left.remove(value);
                this._left = remResult[0];
				if(this._left){
					this._left.parent = this;
				}
                remNode = remResult[1];
            } else {
                remNode = null;
            }
        } else {
            if ( this._right != null ) {
                remResult = this._right.remove(value);
                this._right = remResult[0];
				if(this._right){
                	this._right.parent = this;
				}
                remNode = remResult[1];
            } else {
                remNode = null;
            }
        }

        result = this;
    } else {
        remNode = this;

        if ( this._left == null ) {
            result = this._right;
        } else if ( this._right == null ) {
            result = this._left;
        } else {
            result = this._left.join(this._right);
            this._left = null;
            this._right = null;
        }
    }

    if ( remNode != null ) {
        if ( result != null ) {
            return [result.balanceTree(), remNode];
        } else {
            return [result, remNode];
        }
    } else {
        return [this, null];
    }
};


/*****
*
*   setHeight
*
*****/
RedBlackNode.prototype.setHeight = function() {
    var leftHeight  = (this._left  != null) ? this._left._height  : 0;
    var rightHeight = (this._right != null) ? this._right._height : 0;
    
    this._height = (leftHeight < rightHeight) ? rightHeight + 1 : leftHeight + 1;
};


/*****
*
*   swingLeft
*
*****/
RedBlackNode.prototype.swingLeft = function() {
    var right      = this._right;
    var rightLeft  = right._left;
    var rightRight = right._right;
    var left       = this._left;

    var leftHeight       = (left       != null ) ? left._height       : 0;
    var rightLeftHeight  = (rightLeft  != null ) ? rightLeft._height  : 0;
    var rightRightHeight = (rightRight != null ) ? rightRight._height : 0;

    if ( rightLeftHeight > rightRightHeight ) {
        this._right = right.moveRight();
		this._right.parent = this;
    }

    return this.moveLeft();
};


/*****
*
*   swingRight
*
*****/
RedBlackNode.prototype.swingRight = function() {
    var left      = this._left;
    var leftRight = left._right;
    var leftLeft  = left._left;
    var right     = this._right;

    var rightHeight     = (right     != null ) ? right._height     : 0;
    var leftRightHeight = (leftRight != null ) ? leftRight._height : 0;
    var leftLeftHeight  = (leftLeft  != null ) ? leftLeft._height  : 0;

    if ( leftRightHeight > leftLeftHeight ) {
        this._left = left.moveLeft();
		this._left.parent = this;
    }

    return this.moveRight();
};


/*****
*
*   traverse
*
*****/
RedBlackNode.prototype.traverse = function(func) {
    if ( this._left  != null ) this._left.traverse(func);
    func(this);
    if ( this._right != null ) this._right.traverse(func);
};


/*****
*
*   toString
*
*****/
RedBlackNode.prototype.toString = function() {
    return this._value.toString();
};

RedBlackNode.prototype.validateParents = function(){
	if(this._right){
		if(this._right.parent !== this){
			console.log("Invalid right");
			console.log(this)
		}
		this._right.validateParents();
	}
	if(this._left){
		if(this._left.parent !== this){
			console.log("Invalid left");
			console.log(this)
		}
		this._left.validateParents();
	}
}


/*****
*
*   RedBlackTree.js
*
*   copyright 2004, Kevin Lindsey
*   licensing info available at: http://www.kevlindev.com/license.txt
*
*****/

/*****
*
*   class variables
*
*****/
RedBlackTree.VERSION = 1.0;


/*****
*
*   constructor
*
*****/
function RedBlackTree() {
    this._root      = null;
    this._cursor    = null;
}


/*****  private methods *****/

/*****
*
*   _findNode
*
*****/
RedBlackTree.prototype._findNode = function(value) {

    var result = this._root;

    
    while ( result != null ) {
        var relation = value.compare(result._value);

        if ( relation != 0 ) {
            if ( relation < 0 ) {
                result = result._left;
            } else {
                result = result._right;
            }
        } else {
            break;
        }
    }

    return result;
};


/*****
*
*   _maxNode
*
*****/
RedBlackTree.prototype._maxNode = function(node) {
    if ( node == null ) node = this._root;

    if ( node != null ) {
        while ( node._right != null ) {
            node = node._right;
        }
    }

    return node;
};


/*****
*
*   _minNode
*
*****/
RedBlackTree.prototype._minNode = function(node) {
    if ( node == null ) node = this._root;

    if ( node != null ) {
        while ( node._left != null ) {
            node = node._left;
        }
    }

    return node;
};


/*****
*
*   _nextNode
*
*****/
RedBlackTree.prototype._nextNode = function(node) {
    if ( node != null ) {
        if ( node._right != null ) {
            node = this._minNode(node._right);
        } else {
			//console.log("--")
			//console.log(node._value.value)
            while ( node.parent != null && node.parent._right === node ) {
                node = node.parent;

			//	console.log(node._value.value)
            }

            node = node.parent;
			//console.log("-")
			//console.log(node._value.value)
        }
    } else {
        node = this._minNode(this._root);
    }

    return node;
};


/*****
*
*   _previousNode
*
*****/
RedBlackTree.prototype._previousNode = function(node) {
    if ( node != null ) {
        if ( node._left != null ) {
            node = this._maxNode(node._left);
        } else {
            
            while ( node.parent != null && node.parent._left === node ) {
                node = node.parent;
            }

            node = node.parent;
        }
    } else {
        node = this._maxNode(this._root);
    }

    return node;
};


/*****  public methods  *****/

/*****
*
*   add
*
*****/
RedBlackTree.prototype.add = function(value) {
    var result;
    
    if ( this._root == null ) {
        result = this._root = new RedBlackNode(value);
    } else {
        var addResult = this._root.add(value);

        this._root = addResult[0];
		this._root.parent = null;
        result = addResult[1];
    }

    return result;
};


/*****
*
*   find
*
*****/
RedBlackTree.prototype.find = function(value) {
    var node = this._findNode(value);
    
    return ( node != null ) ? node : null;
};


/*****
*
*   findNext
*
*****/
RedBlackTree.prototype.findNext = function(value) {
    var current = this._findNode(value, true);

    current = this._nextNode(current);

    return (current != null ) ? current._value : null;
};


/*****
*
*   findPrevious
*
*****/
RedBlackTree.prototype.findPrevious = function(value) {
    var current = this._findNode(value, true);

    current = this._previousNode(current);

    return (current != null ) ? current._value : null;
};


/*****
*
*   max
*
*****/
RedBlackTree.prototype.max = function() {
    var result = this._maxNode();

    return ( result != null ) ? result._value : null;
};


/*****
*
*   min
*
*****/
RedBlackTree.prototype.min = function() {
    var result = this._minNode();

    return ( result != null ) ? result._value : null;
};


/*****
*
*   next
*
*****/
RedBlackTree.prototype.next = function() {
    this._cursor = this._nextNode(this._cursor);

    return ( this._cursor ) ? this._cursor._value : null;
};


/*****
*
*   previous
*
*****/
RedBlackTree.prototype.previous = function() {
    this._cursor = this._previousNode(this._cursor);

    return ( this._cursor ) ? this._cursor._value : null;
};


/*****
*
*   remove
*
*****/
RedBlackTree.prototype.remove = function(value) {
    var result;

    if ( this._root != null ) {
        var remResult = this._root.remove(value);

        this._root = remResult[0];
        result = remResult[1];
    } else {
        result = null;
    }

    return result;
};


/*****
*
*   set
*
*****/
RedBlackTree.prototype.goMin = function() {
    this._cursor = this._minNode(this._root);
};

RedBlackTree.prototype.goMax = function() {
	this._cursor = this._maxNode(this._root);
};


RedBlackTree.prototype.current = function() {
    return this._cursor?this._cursor._value:null;
};



/*****
*
*   traverse
*
*****/
RedBlackTree.prototype.traverse = function(func) {
    if ( this._root != null ) {
        this._root.traverse(func);
    }
};


/*****
*
*   toString
*
*****/
RedBlackTree.prototype.toString = function() {
    var lines = [];

    if ( this._root != null ) {
        var indentText = "  ";
        var stack = [[this._root, 0, "^"]];

        while ( stack.length > 0 ) {
            var current = stack.pop();
            var node    = current[0];
            var indent  = current[1];
            var line    = "";

            for ( var i = 0; i < indent; i++ ) {
                line += indentText;
            }
            
            line += current[2] + "(" + node.toString() + ")";
            lines.push(line);

            if ( node._right != null ) stack.push([node._right, indent+1, "R"]);
            if ( node._left  != null ) stack.push([node._left,  indent+1, "L"]);
        }
    }
    
    return lines.join("\n");
};

RedBlackTree.prototype.validateParents = function(){
	if(! (this._root.parent == null)){
		console.log("Invalid root node parent");
		this._root.validateParents();
	}
	console.log("done");
}
/**
 * Springy v1.0.1
 *
 * Copyright (c) 2010 Dennis Hotson
 *
 * Permission is hereby granted, free of charge, to any person
 * obtaining a copy of this software and associated documentation
 * files (the "Software"), to deal in the Software without
 * restriction, including without limitation the rights to use,
 * copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following
 * conditions:
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
 * OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
 * WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
 * OTHER DEALINGS IN THE SOFTWARE.
 */

var Graph = function() {
	this.nodeSet = {};
	this.nodes = [];
	this.edges = [];
	this.adjacency = {};

	this.nextNodeId = 0;
	this.nextEdgeId = 0;
	this.eventListeners = [];
};

var Node = function(id, data) {
	this.id = id;
	this.data = typeof(data) !== 'undefined' ? data : {};
};

var Edge = function(id, source, target, data) {
	this.id = id;
	this.source = source;
	this.target = target;
	this.data = typeof(data) !== 'undefined' ? data : {};
};

Graph.prototype.addNode = function(node) {
	if (typeof(this.nodeSet[node.id]) === 'undefined') {
		this.nodes.push(node);
	}

	this.nodeSet[node.id] = node;

	this.notify();
	return node;
};

Graph.prototype.addEdge = function(edge) {
	var exists = false;
	this.edges.forEach(function(e) {
		if (edge.id === e.id) { exists = true; }
	});

	if (!exists) {
		this.edges.push(edge);
	}

	if (typeof(this.adjacency[edge.source.id]) === 'undefined') {
		this.adjacency[edge.source.id] = {};
	}
	if (typeof(this.adjacency[edge.source.id][edge.target.id]) === 'undefined') {
		this.adjacency[edge.source.id][edge.target.id] = [];
	}

	exists = false;
	this.adjacency[edge.source.id][edge.target.id].forEach(function(e) {
			if (edge.id === e.id) { exists = true; }
	});

	if (!exists) {
		this.adjacency[edge.source.id][edge.target.id].push(edge);
	}

	this.notify();
	return edge;
};

Graph.prototype.newNode = function(data) {
	var node = new Node(this.nextNodeId++, data);
	this.addNode(node);
	return node;
};

Graph.prototype.newEdge = function(source, target, data) {
	var edge = new Edge(this.nextEdgeId++, source, target, data);
	this.addEdge(edge);
	return edge;
};

// find the edges from node1 to node2
Graph.prototype.getEdges = function(node1, node2) {
	if (typeof(this.adjacency[node1.id]) !== 'undefined'
		&& typeof(this.adjacency[node1.id][node2.id]) !== 'undefined') {
		return this.adjacency[node1.id][node2.id];
	}

	return [];
};

// remove a node and it's associated edges from the graph
Graph.prototype.removeNode = function(node) {
	if (typeof(this.nodeSet[node.id]) !== 'undefined') {
		delete this.nodeSet[node.id];
	}

	for (var i = this.nodes.length - 1; i >= 0; i--) {
		if (this.nodes[i].id === node.id) {
			this.nodes.splice(i, 1);
		}
	}

	this.detachNode(node);

};

// removes edges associated with a given node
Graph.prototype.detachNode = function(node) {
	var tmpEdges = this.edges.slice();
	tmpEdges.forEach(function(e) {
		if (e.source.id === node.id || e.target.id === node.id) {
			this.removeEdge(e);
		}
	}, this);

	this.notify();
};

// remove a node and it's associated edges from the graph
Graph.prototype.removeEdge = function(edge) {
	for (var i = this.edges.length - 1; i >= 0; i--) {
		if (this.edges[i].id === edge.id) {
			this.edges.splice(i, 1);
		}
	}

	for (var x in this.adjacency) {
		for (var y in this.adjacency[x]) {
			var edges = this.adjacency[x][y];

			for (var j=edges.length - 1; j>=0; j--) {
				if (this.adjacency[x][y][j].id === edge.id) {
					this.adjacency[x][y].splice(j, 1);
				}
			}
		}
	}

	this.notify();
};

/* Merge a list of nodes and edges into the current graph. eg.
var o = {
	nodes: [
		{id: 123, data: {type: 'user', userid: 123, displayname: 'aaa'}},
		{id: 234, data: {type: 'user', userid: 234, displayname: 'bbb'}}
	],
	edges: [
		{from: 0, to: 1, type: 'submitted_design', directed: true, data: {weight: }}
	]
}
*/
Graph.prototype.merge = function(data) {
	var nodes = [];
	data.nodes.forEach(function(n) {
		nodes.push(this.addNode(new Node(n.id, n.data)));
	}, this);

	data.edges.forEach(function(e) {
		var from = nodes[e.from];
		var to = nodes[e.to];

		var id = (e.directed)
			? (id = e.type + "-" + from.id + "-" + to.id)
			: (from.id < to.id) // normalise id for non-directed edges
				? e.type + "-" + from.id + "-" + to.id
				: e.type + "-" + to.id + "-" + from.id;

		var edge = this.addEdge(new Edge(id, from, to, e.data));
		edge.data.type = e.type;
	}, this);
};

Graph.prototype.filterNodes = function(fn) {
	var tmpNodes = this.nodes.slice();
	tmpNodes.forEach(function(n) {
		if (!fn(n)) {
			this.removeNode(n);
		}
	}, this);
};

Graph.prototype.filterEdges = function(fn) {
	var tmpEdges = this.edges.slice();
	tmpEdges.forEach(function(e) {
		if (!fn(e)) {
			this.removeEdge(e);
		}
	}, this);
};


Graph.prototype.addGraphListener = function(obj) {
	this.eventListeners.push(obj);
};

Graph.prototype.notify = function() {
	this.eventListeners.forEach(function(obj){
		obj.graphChanged();
	});
};

// -----------
var Layout = {};
Layout.ForceDirected = function(graph, stiffness, repulsion, damping) {
	this.graph = graph;
	this.stiffness = stiffness; // spring stiffness constant
	this.repulsion = repulsion; // repulsion constant
	this.damping = damping; // velocity damping factor

	this.nodePoints = {}; // keep track of points associated with nodes
	this.edgeSprings = {}; // keep track of springs associated with edges
};

Layout.ForceDirected.prototype.point = function(node) {
	if (typeof(this.nodePoints[node.id]) === 'undefined') {
		var mass = typeof(node.data.mass) !== 'undefined' ? node.data.mass : 1.0;
		this.nodePoints[node.id] = new Layout.ForceDirected.Point(gVector.random(), mass);
	}

	return this.nodePoints[node.id];
};

Layout.ForceDirected.prototype.spring = function(edge) {
	if (typeof(this.edgeSprings[edge.id]) === 'undefined') {
		var length = typeof(edge.data.length) !== 'undefined' ? edge.data.length : 1.0;

		var existingSpring = false;

		var from = this.graph.getEdges(edge.source, edge.target);
		from.forEach(function(e) {
			if (existingSpring === false && typeof(this.edgeSprings[e.id]) !== 'undefined') {
				existingSpring = this.edgeSprings[e.id];
			}
		}, this);

		if (existingSpring !== false) {
			return new Layout.ForceDirected.Spring(existingSpring.point1, existingSpring.point2, 0.0, 0.0);
		}

		var to = this.graph.getEdges(edge.target, edge.source);
		from.forEach(function(e){
			if (existingSpring === false && typeof(this.edgeSprings[e.id]) !== 'undefined') {
				existingSpring = this.edgeSprings[e.id];
			}
		}, this);

		if (existingSpring !== false) {
			return new Layout.ForceDirected.Spring(existingSpring.point2, existingSpring.point1, 0.0, 0.0);
		}

		this.edgeSprings[edge.id] = new Layout.ForceDirected.Spring(
			this.point(edge.source), this.point(edge.target), length, this.stiffness
		);
	}

	return this.edgeSprings[edge.id];
};

// callback should accept two arguments: Node, Point
Layout.ForceDirected.prototype.eachNode = function(callback) {
	var t = this;
	this.graph.nodes.forEach(function(n){
		callback.call(t, n, t.point(n));
	});
};

// callback should accept two arguments: Edge, Spring
Layout.ForceDirected.prototype.eachEdge = function(callback) {
	var t = this;
	this.graph.edges.forEach(function(e){
		callback.call(t, e, t.spring(e));
	});
};

// callback should accept one argument: Spring
Layout.ForceDirected.prototype.eachSpring = function(callback) {
	var t = this;
	this.graph.edges.forEach(function(e){
		callback.call(t, t.spring(e));
	});
};


// Physics stuff
Layout.ForceDirected.prototype.applyCoulombsLaw = function() {
	this.eachNode(function(n1, point1) {
		this.eachNode(function(n2, point2) {
			if (point1 !== point2)
			{
				var d = point1.p.subtract(point2.p);
				var distance = d.magnitude() + 0.1; // avoid massive forces at small distances (and divide by zero)
				var direction = d.normalise();

				// apply force to each end point
				point1.applyForce(direction.multiply(this.repulsion).divide(distance * distance * 0.5));
				point2.applyForce(direction.multiply(this.repulsion).divide(distance * distance * -0.5));
			}
		});
	});
};

Layout.ForceDirected.prototype.applyHookesLaw = function() {
	this.eachSpring(function(spring){
		var d = spring.point2.p.subtract(spring.point1.p); // the direction of the spring
		var displacement = spring.length - d.magnitude();
		var direction = d.normalise();

		// apply force to each end point
		spring.point1.applyForce(direction.multiply(spring.k * displacement * -0.5));
		spring.point2.applyForce(direction.multiply(spring.k * displacement * 0.5));
	});
};

Layout.ForceDirected.prototype.attractToCentre = function() {
	this.eachNode(function(node, point) {
		var direction = point.p.multiply(-1.0);
		point.applyForce(direction.multiply(this.repulsion / 50.0));
	});
};


Layout.ForceDirected.prototype.updateVelocity = function(timestep) {
	this.eachNode(function(node, point) {
		// Is this, along with updatePosition below, the only places that your
		// integration code exist?
		point.v = point.v.add(point.a.multiply(timestep)).multiply(this.damping);
		point.a = new gVector(0,0);
	});
};

Layout.ForceDirected.prototype.updatePosition = function(timestep) {
	this.eachNode(function(node, point) {
		// Same question as above; along with updateVelocity, is this all of
		// your integration code?
		point.p = point.p.add(point.v.multiply(timestep));
	});
};

// Calculate the total kinetic energy of the system
Layout.ForceDirected.prototype.totalEnergy = function(timestep) {
	var energy = 0.0;
	this.eachNode(function(node, point) {
		var speed = point.v.magnitude();
		energy += 0.5 * point.m * speed * speed;
	});

	return energy;
};

var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; }; // stolen from coffeescript, thanks jashkenas! ;-)

Layout.requestAnimationFrame = __bind(window.requestAnimationFrame ||
	window.webkitRequestAnimationFrame ||
	window.mozRequestAnimationFrame ||
	window.oRequestAnimationFrame ||
	window.msRequestAnimationFrame ||
	function(callback, element) {
		window.setTimeout(callback, 10);
	}, window);


// start simulation
Layout.ForceDirected.prototype.start = function(interval, render, done) {
	var t = this;

	if (this._started) return;
	this._started = true;

	Layout.requestAnimationFrame(function step() {
		t.applyCoulombsLaw();
		t.applyHookesLaw();
		t.attractToCentre();
		t.updateVelocity(0.03);
		t.updatePosition(0.03);

		if (typeof(render) !== 'undefined')
			render();

		// stop simulation when energy of the system goes below a threshold
		if (t.totalEnergy() < 0.01) {
			t._started = false;
			if (typeof(done) !== 'undefined') { done(); }
		} else {
			Layout.requestAnimationFrame(step);
		}
	});
};

// Find the nearest point to a particular position
Layout.ForceDirected.prototype.nearest = function(pos) {
	var min = {node: null, point: null, distance: null};
	var t = this;
	this.graph.nodes.forEach(function(n){
		var point = t.point(n);
		var distance = point.p.subtract(pos).magnitude();

		if (min.distance === null || distance < min.distance) {
			min = {node: n, point: point, distance: distance};
		}
	});

	return min;
};

// returns [bottomleft, topright]
Layout.ForceDirected.prototype.getBoundingBox = function() {
	var bottomleft = new gVector(-2,-2);
	var topright = new gVector(2,2);

	this.eachNode(function(n, point) {
		if (point.p.x < bottomleft.x) {
			bottomleft.x = point.p.x;
		}
		if (point.p.y < bottomleft.y) {
			bottomleft.y = point.p.y;
		}
		if (point.p.x > topright.x) {
			topright.x = point.p.x;
		}
		if (point.p.y > topright.y) {
			topright.y = point.p.y;
		}
	});

	var padding = topright.subtract(bottomleft).multiply(0.07); // ~5% padding

	return {bottomleft: bottomleft.subtract(padding), topright: topright.add(padding)};
};


// gVector
gVector = function(x, y) {
	this.x = x;
	this.y = y;
};

gVector.random = function() {
	return new gVector(10.0 * (Math.random() - 0.5), 10.0 * (Math.random() - 0.5));
};

gVector.prototype.add = function(v2) {
	return new gVector(this.x + v2.x, this.y + v2.y);
};

gVector.prototype.subtract = function(v2) {
	return new gVector(this.x - v2.x, this.y - v2.y);
};

gVector.prototype.multiply = function(n) {
	return new gVector(this.x * n, this.y * n);
};

gVector.prototype.divide = function(n) {
	return new gVector((this.x / n) || 0, (this.y / n) || 0); // Avoid divide by zero errors..
};

gVector.prototype.magnitude = function() {
	return Math.sqrt(this.x*this.x + this.y*this.y);
};

gVector.prototype.normal = function() {
	return new gVector(-this.y, this.x);
};

gVector.prototype.normalise = function() {
	return this.divide(this.magnitude());
};

// Point
Layout.ForceDirected.Point = function(position, mass) {
	this.p = position; // position
	this.m = mass; // mass
	this.v = new gVector(0, 0); // velocity
	this.a = new gVector(0, 0); // acceleration
};

Layout.ForceDirected.Point.prototype.applyForce = function(force) {
	this.a = this.a.add(force.divide(this.m));
};

// Spring
Layout.ForceDirected.Spring = function(point1, point2, length, k) {
	this.point1 = point1;
	this.point2 = point2;
	this.length = length; // spring length at rest
	this.k = k; // spring constant (See Hooke's law) .. how stiff the spring is
};

// Layout.ForceDirected.Spring.prototype.distanceToPoint = function(point)
// {
// 	// hardcore gVector arithmetic.. ohh yeah!
// 	// .. see http://stackoverflow.com/questions/849211/shortest-distance-between-a-point-and-a-line-segment/865080#865080
// 	var n = this.point2.p.subtract(this.point1.p).normalise().normal();
// 	var ac = point.p.subtract(this.point1.p);
// 	return Math.abs(ac.x * n.x + ac.y * n.y);
// };

// Renderer handles the layout rendering loop
function Renderer(interval, layout, clear, drawEdge, drawNode) {
	this.interval = interval;
	this.layout = layout;
	this.clear = clear;
	this.drawEdge = drawEdge;
	this.drawNode = drawNode;

	this.layout.graph.addGraphListener(this);
}

Renderer.prototype.graphChanged = function(e) {
	this.start();
};

Renderer.prototype.start = function() {
	var t = this;
	this.layout.start(50, function render() {
		t.clear();

		t.layout.eachEdge(function(edge, spring) {
			t.drawEdge(edge, spring.point1.p, spring.point2.p);
		});

		t.layout.eachNode(function(node, point) {
			t.drawNode(node, point.p);
		});
	});
};


/*

Copyright 2017 Erik Gustafsson. All rights reserved.

This file may distributed and/or modified under the
terms of the Insight Maker Public License (https://InsightMaker.com/impl).

*/

// Call e.g centerCoordinates([[10,10],[100,100]]);
function centerCoordinates(coordinateList) {
	if(coordinateList.length<1) {
		return null;
	}
	var minX = coordinateList[0][0];
	var minY = coordinateList[0][1];
	var maxX = coordinateList[0][0];
	var maxY = coordinateList[0][1];
	for(var i in coordinateList) {
		if(minX < coordinateList[i][0]) {
			minX = coordinateList[i][0];
		}
		if(minY < coordinateList[i][1]) {
			minY = coordinateList[i][1];
		}
		if(maxX > coordinateList[i][0]) {
			minY = coordinateList[i][0];
		}
		if(maxY > coordinateList[i][1]) {
			maxY = coordinateList[i][1];
		}
	}
	var centerX = (maxX+minX)/2;
	var centerY = (maxY+minY)/2;
	return [centerX,centerY];
}

function positionDifference(pos1, pos2) {
	return [pos1[0]-pos2[0],pos1[1]-pos2[1]];
} 
function positionSum(pos1, pos2) {
	return [pos1[0]+pos2[0],pos1[1]+pos2[1]];
}

function nameIsFree(name) {
	var result=findName(name);
	if(result==null) {
		return true;
	} else {
		return false;
	}
}

var makeGhost = function(item, pos=null) {
	if(!item) {
		alert("Item must be provided");
		return;
	}
	dpopup("Makeing ghost");
	//~ var provided = item.value;
	//~ item = provided ? item : graph.getSelectionCell();
	
	if(graph instanceof SimpleNode){
		var parent = graph.children[0].children[0];
		var t = "ghost"; // type.toLowerCase();
		var vertex = simpleCloneNode(primitiveBank[t], parent);
		last_vertex=vertex;
		//~ vertex.value.children.push({"children":[{"attributes"}]
		//vertex.value.children[0].children[0].attributes
		
		// This poisition will be overriden later, but we need a position to place it
		
		var sourceType=getType(findID(item.id)).toLowerCase();
		var size=type_size[sourceType];
		var position;
		if(pos!=null) {
			position=[pos[0]-size[0]/2,pos[1]-size[1]/2];
		} else {
			position=[0,0];
		}
		parent.children.push(vertex);
		setSize(vertex,size);
		setPosition(vertex,position);
		vertex.setAttribute("Source", item.id);
		vertex.setAttribute("name", item.getAttribute("name"));
		
		vertex.value.setAttribute("Source", item.id);
		vertex.value.setAttribute("name", item.getAttribute("name"));
		
		clearPrimitiveCache();
		//~ var new_primitive = new primitive_class(vertex.id,"stock",position[0],position[1]);
		
		return vertex;
	} else {
	 // This code is not tested out. Rellay on the old makeGhost in InsightEditor.js
	dpopup("This code is not tested out. Rellay on the old makeGhost in InsightEditor.js");
	var parent = graph.getDefaultParent();

	var location = getPosition(item);

	var vertex;
	var style = item.getStyle();
	style = mxUtils.setStyle(style, "opacity", 30);
	graph.getModel().beginUpdate();

	vertex = graph.insertVertex(parent, null, primitiveBank.ghost.cloneNode(true), location[0] + 10, location[1] + 10, item.getGeometry().width, item.getGeometry().height, style);
	vertex.value.setAttribute("Source", item.id);
	vertex.value.setAttribute("name", item.getAttribute("name"));
	if (!provided) {
		graph.setSelectionCell(vertex);
	}
		graph.getModel().endUpdate();

		return vertex;
	}
};

function findGhostsOfID(id) {
	var results=[];
	var ghosts = primitives("Ghost");
	for (var i = 0; i < ghosts.length; i++) {
		if (ghosts[i].getAttribute("Source") == id) {
			results.push(ghosts[i].getAttribute("id"));
		}
	}
	return results;
}

function propogateGhosts(cell) {
	var ghosts = primitives("Ghost");
	for (var i = 0; i < ghosts.length; i++) {
		if (ghosts[i].getAttribute("Source") == cell.id) {
			if(graph instanceof SimpleNode){
				// We don't need to do anything specific SimpleNode
				// Only set Attribute undoable is enought
			} else {
				var style = cell.getStyle();
				style = mxUtils.setStyle(style, "opacity", 30);
				ghosts[i].setStyle(style);
				//console.log(cell.getAttribute("name"));
			}
			var edit = setAttributeUndoable(ghosts[i], "name", cell.getAttribute("name"));

		}
	}
}

/*

Copyright 2017 Erik Gustafsson. All rights reserved.

This file may distributed and/or modified under the
terms of the Insight Maker Public License (https://InsightMaker.com/impl).

*/

var xmlDoc;
var root;

function xmlNode(type,nodeAttributes,cellAttributes,geometryAttributes,geometryChildren=null) {	
	var node=xmlDoc.createElement(type);
	var cell=xmlDoc.createElement("mxCell");
	var geometry = xmlDoc.createElement("mxGeometry");
	
	for(var key in nodeAttributes) {
		node.setAttribute(key,nodeAttributes[key]);
	}
	
	cell.setAttribute("parent","1");
	
	for(var key in cellAttributes) {
		cell.setAttribute(key,cellAttributes[key]);
	}
	
	
	// <mxGeometry x="240" y="90" width="100" height="40" as="geometry"/>
	geometry.setAttribute("x",100);
	geometry.setAttribute("y",100);
	geometry.setAttribute("width",100);
	geometry.setAttribute("height",100);
	geometry.setAttribute("as","geometry");

	for(var key in geometryAttributes) {
		geometry.setAttribute(key,geometryAttributes[key]);
	}

	for(var i in geometryChildren) {
			geometry.appendChild(geometryChildren[i]);	
	}
	cell.appendChild(geometry);
	node.appendChild(cell);
	return node;
}

function xmlStock(name,x,y) {
	return xmlNode("Stock",{"name":name},{},{"x":x,"y":y});
}

function xmlSetting() {
	return xmlNode("Setting",{},{"visible":"0"},{});
}


function XmlAttributesHashMap(xmlAttributes) {
	var result={};
	for(var i in xmlAttributes) {
		var name = xmlAttributes[i].name;
		var value = xmlAttributes[i].value;
		if(name==undefined || value==undefined) {
			continue;
		}
		result[name]=value;
	}
	return result;
}

function xmlPrimitive(primitive) {
	var type = getType(primitive);
	var superClass = get_object(getID(primitive)).superClass;
	// Settings and other non visible primtives does not have any superClass
	if(superClass == undefined) {
		superClass = "";
	}
	//~ alert(type+" "+superClass);
	
	var nodeAttributes = {};
	for(let attribute of primitive.value.attributes) {
		let name = attribute.name;
		let value = attribute.value;
		nodeAttributes[name]=value;
	}
	
	var style=type.toLowerCase();
	
	var cellAttributes={};
	var geometryAttributes={};
	var geometryChildren=null;
	
	const graphEnum={
		VERTEX:1,
		EDGE:2
	};
	var graphType=graphEnum.VERTEX;
	
	// Extracting visiblity from primitive
	//primitives("Display")[0].value.children[0].attributes["visible"];
	
	// If we have cell values add them
	if(primitive.value.children.length>0) {
		cellAttributes=XmlAttributesHashMap(primitive.value.children[0].attributes);
		geometryAttributes=XmlAttributesHashMap(primitive.value.children[0].children[0].attributes);
	}
	
	if(type=="Ghost") {
		var sourceID=primitive.getAttribute("Source");
		var sourceType=getType(findID(sourceID));
		style=sourceType.toLowerCase()+";opacity=30;";
	}
	
	if(superClass == "TwoPointer") {
		graphType = graphEnum.EDGE;
		
		var ends=getEnds(primitive);
		var source=ends[0];
		var target=ends[1];
		
		if(source!=null) {
			cellAttributes["source"]=source.getAttribute("id");
		}
		if(target!=null) {
			cellAttributes["target"]=target.getAttribute("id");
		}
		
		if(!(type=="Link" || type=="Flow")) {
			cellAttributes["visible"]="0";
		}
		
		var point1=xmlDoc.createElement("mxPoint");
		var point2=xmlDoc.createElement("mxPoint");
		
		let sourcePosition = getSourcePosition(primitive);
		let targetPosition = getTargetPosition(primitive);
		
		point1.setAttribute("as","sourcePoint");
		point1.setAttribute("x",sourcePosition[0].toString());
		point1.setAttribute("y",sourcePosition[1].toString());
				
		point2.setAttribute("as","targetPoint");
		point2.setAttribute("x",targetPosition[0].toString());
		point2.setAttribute("y",targetPosition[1].toString());
		
		geometryChildren=[];
		
		geometryChildren.push(point1);
		geometryChildren.push(point2);
	}
	
	switch(graphType) {
	case graphEnum.VERTEX:
		cellAttributes["vertex"]="1";
		break;
	case graphEnum.EDGE:
		cellAttributes["edge"]="1";
		break;
	}
	cellAttributes["style"]=style;
	
	var pos=getPosition(primitive);
	geometryAttributes["x"]=pos[0];
	geometryAttributes["y"]=pos[1];
	
	//~ for(var key in primitive["@attributes"]) {
		//~ alert(key+" "+primitive["@attributes"][key]);
	//~ }

	return xmlNode(type,nodeAttributes,cellAttributes,geometryAttributes,geometryChildren);
}

class InsightMakerDocument {
	constructor() {
		// http://stackoverflow.com/questions/14340894/create-xml-in-javascript
		xmlDoc = document.implementation.createDocument(null, "InsightMakerModel");
		root = xmlDoc.createElement("root");
		
		//~ <mxCell id="0"/>
		//~ <mxCell id="1" parent="0"/>
		var introCell1 = xmlDoc.createElement("mxCell");
		var introCell2 = xmlDoc.createElement("mxCell");
		introCell1.setAttribute("id","0");
		introCell2.setAttribute("id","1");
		introCell2.setAttribute("parent","0");
		root.appendChild(introCell1);
		root.appendChild(introCell2);
		
		//~ root.appendChild(xmlSetting());
		//~ root.appendChild(xmlStock("Stock1",80,50));
		
		xmlDoc.documentElement.appendChild(root);
	}
	appendPrimitives() {
		for(let type of saveblePrimitiveTypes) {
			var primitiveArray = primitives(type);
			for(var i in primitiveArray) {
				root.appendChild(xmlPrimitive(primitiveArray[i]));
			}
		}
	}
	getXmlString() {
		var xmlText = new XMLSerializer().serializeToString(xmlDoc);
		var formatedXmlText = xmlText.replace(/\>/g,">\n");
		return formatedXmlText;
	}
}

function createModelFileData() {
	InsightMakerDocumentWriter = new InsightMakerDocument();
	InsightMakerDocumentWriter.appendPrimitives();
	return InsightMakerDocumentWriter.getXmlString();
}

/*

Copyright 2017 Erik Gustafsson. All rights reserved.

This file may distributed and/or modified under the
terms of the Insight Maker Public License (https://InsightMaker.com/impl).

*/

/*
 * This is for saving and restoring the model
 */
var state_store = new function() {
	self=this;
	self.state="";
	self.debug = function() {
		alert(self.state);
	};
	self.save = function() {
		self.state=getGraphXml(graph);
	};
	self.load = function() {
		importMXGraph(self.state);
	};
};


var imc_attribute_name={
	"STOCK":"InitialValue",
	"VARIABLE":"Equation",
	"FLOW":"FlowRate"
};

function imc_set_value(primitive, value) {
	var valueObj = findName(primitive).getValue();
	var attribute_name=imc_attribute_name[valueObj.tagName.toUpperCase()];
	if(attribute_name===undefined) {
		console.log("imc_set_value not implemented for "+valueObj.tagName);
		console.log(valueObj);
		return;
	}
	
	valueObj.setAttribute(attribute_name,value);
}

function imc_get_value(primitive) {
	// http://www.w3schools.com/xml/dom_nodes_get.asp
	var valueObj = findName(primitive).getValue();
	var attribute_name=imc_attribute_name[valueObj.tagName.toUpperCase()];

	if(attribute_name===undefined) {
		console.log("imc_get_value not implemented for "+valueObj.tagName);
		console.log(valueObj);
		return;
	}
	return valueObj.getAttribute(attribute_name);
}

/*
 * This is for saving and restoring variables
 */
var vars_store = new function() {
	self=this;
	self.state={};
	self.debug = function() {
		alert(JSON.stringify(self.state));
	};
	self.save = function(varname_array) {
		self.state={};
		for (i=0;i<varname_array.length; i++) {
			var varname = varname_array[i];
			var value=imc_get_value(varname_array[i]);
			console.log(varname+":"+value);
			self.state[varname]=value;
		}
	};
	self.load = function() {
		for (var key in self.state) {
			imc_set_value(key  , self.state[key]);
		}
	};
};

/*
 * This is used for saving the state before optimisation
 * And restoring afterwards  */
var state_store = new function() {
	self=this;
	self.state="";
	self.debug = function() {
		alert(self.state);
	};
	self.save = function() {
		self.state=getGraphXml(graph);
	};
	self.load = function() {
		importMXGraph(self.state);
	};
};

function import_model(model_xml_enc) {
    model_xml=decodeURI(model_xml_enc)
    importMXGraph(model_xml);
}
function returnresult(returnobj,target) {
    results={};
    results.target=target;
    results.returnobj=returnobj;
    parent.postMessage(JSON.stringify(results), "*");
}
function imc_gettimestep(target) {
    returnobj={};
    returnobj.timestep=getTimeStep();
    returnresult(returnobj,target);
}
function var_exists(varname,target) {
    returnobj={};
    returnobj.varname=varname;
    returnobj.exists=(findName(varname)!=null)?true:false;
    returnresult(returnobj,target);
}
function var_array_exists(varname_array,target) {
	returnobj={};
	returnobj.varname_array=varname_array;
	var result = {}
	for (i=0;i<varname_array.length; i++) {
		var exists=(findName(varname_array[i])!=null)?true:false;
		result[varname_array[i]] = exists;
	}
	returnobj.result=result;
	returnresult(returnobj,target);
}
function setstartseed(seedvalue) {
    // The {"value":seedvalue) instead of just seedvalue
    // is to replicate the behavoiur of insightmaker SetRandSeed
    Math.seedrandom(seedvalue);
}
function export_model() {
    returnobj={};
    var enc = new mxCodec();
    // IM uses getGraphXml(graph)
    // see Utilities.js
    var graph_dom=enc.encode(graph.getModel());
    //returnobj.xml_data="<InsightMakerModel>"+graph_dom.innerHTML+"</InsightMakerModel>";
    returnobj.xml_data=getGraphXml(graph);
    returnresult(returnobj,"export_model_return");
}
function imc_test() {
    alert("The IMC API is active");
}
//toggleSideBar();
//getmodelname();

/*

Copyright 2017 Erik Gustafsson. All rights reserved.

This file may distributed and/or modified under the
terms of the Insight Maker Public License (https://InsightMaker.com/impl).

*/

function svg_from_string_with_group(instring) {
	  var newElement = document.createElementNS("http://www.w3.org/2000/svg", 'g'); //Create a path in SVG's namespace
	  newElement.innerHTML=instring;
	  svgplane.appendChild(newElement);
	  return newElement;
}

function svg_from_string(instring) {
	  var container = document.createElementNS("http://www.w3.org/2000/svg", 'temp'); //Create a path in SVG's namespace
	  container.innerHTML=instring;
	  newElement=container.children[0];
	  svgplane.appendChild(newElement);
	  return newElement;
}

function svg_image(x,y,width,height,image_file) {
	// Does no work because image does not load byt XML object is created
	var newElement = document.createElementNS("http://www.w3.org/2000/svg", 'image'); //Create a path in SVG's namespace
	newElement.setAttribute("x",x);
	newElement.setAttribute("y",y);
	newElement.setAttribute("width",width);
	newElement.setAttribute("height",height);
	newElement.setAttribute("xlink:href",image_file);
	svgplane.appendChild(newElement);
	return newElement;
}

//   Make a group
function svg_group(elementArray,transform=null,markclass=null) {
	//<rect width="300" height="100" style="fill:rgb(0,0,255);stroke-width:3;stroke:rgb(0,0,0)" />
	var newElement = document.createElementNS("http://www.w3.org/2000/svg", 'g'); //Create a path in SVG's namespace
	for(i=0;i<elementArray.length;i++) {
		newElement.appendChild(elementArray[i]);
	}
	if(transform!=null) {
		newElement.setAttribute("transform",transform);
	}
	if(markclass!=null) {
		newElement.setAttribute("class",markclass);
	}
	svgplane.appendChild(newElement);
	return newElement;
}

function svg_translate(element,x,y) {
	element.setAttribute("transform","translate("+x+","+y+") rotate(0)");
}

function svg_transform(element,x,y,r,s) {
	element.setAttribute("transform",svg_transform_string(x,y,r,s));
}

function svg_transform_string(x,y,r,s) {
	return "translate("+x+","+y+") rotate("+r+") scale("+s+")";
}

function svg_curve(x1,y1,x2,y2,x3,y3,x4,y4,extra_attributes=null) {
	var newElement = document.createElementNS("http://www.w3.org/2000/svg", 'path'); //Create a path in SVG's namespace
	//var d="M"+x1+","+y1+" Q"+x2+","+x2+" "+x3+","+y3+" "+x4+","+y4;
	//newElement.setAttribute("d",d);
	newElement.setAttribute("stroke","black");
	newElement.setAttribute("fill","transparent");
	newElement.x1=x1;
	newElement.y1=y1;
	newElement.x2=x2;
	newElement.y2=y2;
	newElement.x3=x3;
	newElement.y3=y3;
	newElement.x4=x4;
	newElement.y4=y4;
	
	// Is set last so it can override default attributes
	if(extra_attributes) {
		for(var key in extra_attributes) {
			newElement.setAttribute(key,extra_attributes[key]); //Set path's data
		}
	}
	
	newElement.update=function() {
		var d="M"+this.x1+","+this.y1+" C"+this.x2+","+this.y2+" "+this.x3+","+this.y3+" "+this.x4+","+this.y4;
		this.setAttribute("d",d);
	};
	newElement.update();
	svgplane.appendChild(newElement);
	return newElement;
}

function svg_path(dstring,stroke,fill , markclass) {
	var newElement = document.createElementNS("http://www.w3.org/2000/svg", 'path'); //Create a path in SVG's namespace
	newElement.setAttribute("class",markclass); //Set path's data
	newElement.setAttribute("stroke","black");
	newElement.setAttribute("fill","transparent");
	newElement.dstring=dstring;
	newElement.setAttribute("fill",fill);
	newElement.setAttribute("stroke",stroke);
	newElement.update=function() {
		this.setAttribute("d",this.dstring);
	};
	newElement.update();
	svgplane.appendChild(newElement);
	return newElement;
}



// Drawing primitive for drawing svg rects
function svg_text(x, y, text ,markclass,extra_attributes) {
	
	/* example
	 * <text class="svgtext" x="400" y="35" font-family="Verdana" font-size="35">
    Hello, out there
</text>
	*/
	//<rect width="300" height="100" style="fill:rgb(0,0,255);stroke-width:3;stroke:rgb(0,0,0)" />
	var newElement = document.createElementNS("http://www.w3.org/2000/svg", 'text'); //Create a path in SVG's namespace
	newElement.setAttribute("class",markclass); //Set path's data
	newElement.setAttribute("x",x); //Set path's data
	newElement.setAttribute("y",y); //Set path's data
	newElement.innerHTML=text;
	newElement.setAttribute("text-anchor","middle");
	newElement.setAttribute("style","font-size: "+Settings.primitiveFontSize+"px");
	
	// Is set last so it can override default attributes
	if(extra_attributes!=undefined) {
		for(var key in extra_attributes) {
			newElement.setAttribute(key,extra_attributes[key]); //Set path's data
		}
	}
	
	svgplane.appendChild(newElement);
	return newElement;
}

// Drawing primitive for drawing svg rects
function svg_rect(x, y, width, height, stroke, fill,markclass) {
	//<rect width="300" height="100" style="fill:rgb(0,0,255);stroke-width:3;stroke:rgb(0,0,0)" />
	var newElement = document.createElementNS("http://www.w3.org/2000/svg", 'rect'); //Create a path in SVG's namespace
	newElement.setAttribute("class",markclass); //Set path's data
	newElement.setAttribute("x",x); //Set path's data
	newElement.setAttribute("y",y); //Set path's data	
	newElement.setAttribute("width",width); //Set path's data
	newElement.setAttribute("height",height); //Set path's data
	newElement.setAttribute("fill",fill);
	newElement.setAttribute("stroke",stroke);
	svgplane.appendChild(newElement);
	return newElement;
}

// Drawing primitive for drawing svg rects
function svg_foreignobject(x, y, width, height, innerHTML) {
	//<rect width="300" height="100" style="fill:rgb(0,0,255);stroke-width:3;stroke:rgb(0,0,0)" />
	// foreignObject tag must be cammel case to work which is wierd
	



	
	
	// Using a tag on top might be better http://stackoverflow.com/questions/6538918/can-i-embed-html-into-an-html5-svg-fragment
	let newElement = document.createElementNS("http://www.w3.org/2000/svg", 'foreignObject'); //Create a path in SVG's namespace



	let cutDiv = document.createElement("div");
	// This div is nessecary to avoid overflow in some browsers
	cutDiv.setAttribute("style","overflow: hidden");
	cutDiv.setAttribute("class","cutDiv");

	// This div holds the scrolling and sets the background color
	let scrollDiv = document.createElement("div");
	scrollDiv.setAttribute("style","background-color: white; overflow: scroll");
	scrollDiv.setAttribute("class","scrollDiv");

	// This div is on the inside of the scroll div and reacts to things such as clicks
	let innerDiv = document.createElement("div");
	innerDiv.setAttribute("style","width: 100%; height: 100%; overflow: visible;background-color: white");
	innerDiv.setAttribute("class","innerDiv");
	
	// This div is where we put the content
	let contentDiv = document.createElement("div");
	contentDiv.innerHTML=innerHTML;
	contentDiv.setAttribute("style","overflow: visible;background-color: hite");
	contentDiv.setAttribute("class","contentDiv");
	
	innerDiv.appendChild(contentDiv);
	scrollDiv.appendChild(innerDiv);
	cutDiv.appendChild(scrollDiv);
	newElement.appendChild(cutDiv);
	
	newElement.contentDiv = contentDiv;
	newElement.scrollDiv = scrollDiv;
	newElement.innerDiv = innerDiv;
	
	
	newElement.setAttribute("x",x); //Set path's data
	newElement.setAttribute("y",y); //Set path's data	
	newElement.setAttribute("width",width); //Set path's data
	newElement.setAttribute("height",height); //Set path's data
	svgplane.appendChild(newElement);
	return newElement;
}

// Drawing primitive for drawing svg circles
function svg_circle(cx, cy, r, stroke, fill,markclass) {
	var newElement = document.createElementNS("http://www.w3.org/2000/svg", 'circle'); //Create a path in SVG's namespace
	newElement.setAttribute("class",markclass); //Set path's data
	newElement.setAttribute("cx",cx); //Set path's data
	newElement.setAttribute("cy",cy); //Set path's data
	newElement.setAttribute("r",r); //Set path's data
	newElement.setAttribute("fill",fill);
	newElement.setAttribute("stroke",stroke);
	newElement.setAttribute("data-attr","selected");
	svgplane.appendChild(newElement);
	return newElement;
}

// Drawing primitive for drawing svg circles
function svg_line(x1, y1, x2, y2, stroke, fill,markclass,dasharray,extra_attributes) {
	var newElement = document.createElementNS("http://www.w3.org/2000/svg", 'line'); //Create a path in SVG's namespace
	if(dasharray!=undefined && dasharray!="") {
		newElement.setAttribute("stroke-dasharray",dasharray);
	}
	newElement.setAttribute("class",markclass); //Set path's data
	newElement.setAttribute("x1",x1); //Set path's data
	newElement.setAttribute("y1",y1); //Set path's data
	newElement.setAttribute("x2",x2); //Set path's data
	newElement.setAttribute("y2",y2); //Set path's data
	newElement.setAttribute("fill",fill);
	newElement.setAttribute("stroke",stroke);
	newElement.setAttribute("data-attr","selected");
	newElement.setAttribute("stroke-width","1");
	
	// Is set last so it can override default attributes
	if(extra_attributes!=undefined) {
		for(var key in extra_attributes) {
			newElement.setAttribute(key,extra_attributes[key]); //Set path's data
		}
	}
	
	svgplane.appendChild(newElement);
	return newElement;
}

/*! jQuery v1.8.3 jquery.com | jquery.org/license */
(function(e,t){function _(e){var t=M[e]={};return v.each(e.split(y),function(e,n){t[n]=!0}),t}function H(e,n,r){if(r===t&&e.nodeType===1){var i="data-"+n.replace(P,"-$1").toLowerCase();r=e.getAttribute(i);if(typeof r=="string"){try{r=r==="true"?!0:r==="false"?!1:r==="null"?null:+r+""===r?+r:D.test(r)?v.parseJSON(r):r}catch(s){}v.data(e,n,r)}else r=t}return r}function B(e){var t;for(t in e){if(t==="data"&&v.isEmptyObject(e[t]))continue;if(t!=="toJSON")return!1}return!0}function et(){return!1}function tt(){return!0}function ut(e){return!e||!e.parentNode||e.parentNode.nodeType===11}function at(e,t){do e=e[t];while(e&&e.nodeType!==1);return e}function ft(e,t,n){t=t||0;if(v.isFunction(t))return v.grep(e,function(e,r){var i=!!t.call(e,r,e);return i===n});if(t.nodeType)return v.grep(e,function(e,r){return e===t===n});if(typeof t=="string"){var r=v.grep(e,function(e){return e.nodeType===1});if(it.test(t))return v.filter(t,r,!n);t=v.filter(t,r)}return v.grep(e,function(e,r){return v.inArray(e,t)>=0===n})}function lt(e){var t=ct.split("|"),n=e.createDocumentFragment();if(n.createElement)while(t.length)n.createElement(t.pop());return n}function Lt(e,t){return e.getElementsByTagName(t)[0]||e.appendChild(e.ownerDocument.createElement(t))}function At(e,t){if(t.nodeType!==1||!v.hasData(e))return;var n,r,i,s=v._data(e),o=v._data(t,s),u=s.events;if(u){delete o.handle,o.events={};for(n in u)for(r=0,i=u[n].length;r<i;r++)v.event.add(t,n,u[n][r])}o.data&&(o.data=v.extend({},o.data))}function Ot(e,t){var n;if(t.nodeType!==1)return;t.clearAttributes&&t.clearAttributes(),t.mergeAttributes&&t.mergeAttributes(e),n=t.nodeName.toLowerCase(),n==="object"?(t.parentNode&&(t.outerHTML=e.outerHTML),v.support.html5Clone&&e.innerHTML&&!v.trim(t.innerHTML)&&(t.innerHTML=e.innerHTML)):n==="input"&&Et.test(e.type)?(t.defaultChecked=t.checked=e.checked,t.value!==e.value&&(t.value=e.value)):n==="option"?t.selected=e.defaultSelected:n==="input"||n==="textarea"?t.defaultValue=e.defaultValue:n==="script"&&t.text!==e.text&&(t.text=e.text),t.removeAttribute(v.expando)}function Mt(e){return typeof e.getElementsByTagName!="undefined"?e.getElementsByTagName("*"):typeof e.querySelectorAll!="undefined"?e.querySelectorAll("*"):[]}function _t(e){Et.test(e.type)&&(e.defaultChecked=e.checked)}function Qt(e,t){if(t in e)return t;var n=t.charAt(0).toUpperCase()+t.slice(1),r=t,i=Jt.length;while(i--){t=Jt[i]+n;if(t in e)return t}return r}function Gt(e,t){return e=t||e,v.css(e,"display")==="none"||!v.contains(e.ownerDocument,e)}function Yt(e,t){var n,r,i=[],s=0,o=e.length;for(;s<o;s++){n=e[s];if(!n.style)continue;i[s]=v._data(n,"olddisplay"),t?(!i[s]&&n.style.display==="none"&&(n.style.display=""),n.style.display===""&&Gt(n)&&(i[s]=v._data(n,"olddisplay",nn(n.nodeName)))):(r=Dt(n,"display"),!i[s]&&r!=="none"&&v._data(n,"olddisplay",r))}for(s=0;s<o;s++){n=e[s];if(!n.style)continue;if(!t||n.style.display==="none"||n.style.display==="")n.style.display=t?i[s]||"":"none"}return e}function Zt(e,t,n){var r=Rt.exec(t);return r?Math.max(0,r[1]-(n||0))+(r[2]||"px"):t}function en(e,t,n,r){var i=n===(r?"border":"content")?4:t==="width"?1:0,s=0;for(;i<4;i+=2)n==="margin"&&(s+=v.css(e,n+$t[i],!0)),r?(n==="content"&&(s-=parseFloat(Dt(e,"padding"+$t[i]))||0),n!=="margin"&&(s-=parseFloat(Dt(e,"border"+$t[i]+"Width"))||0)):(s+=parseFloat(Dt(e,"padding"+$t[i]))||0,n!=="padding"&&(s+=parseFloat(Dt(e,"border"+$t[i]+"Width"))||0));return s}function tn(e,t,n){var r=t==="width"?e.offsetWidth:e.offsetHeight,i=!0,s=v.support.boxSizing&&v.css(e,"boxSizing")==="border-box";if(r<=0||r==null){r=Dt(e,t);if(r<0||r==null)r=e.style[t];if(Ut.test(r))return r;i=s&&(v.support.boxSizingReliable||r===e.style[t]),r=parseFloat(r)||0}return r+en(e,t,n||(s?"border":"content"),i)+"px"}function nn(e){if(Wt[e])return Wt[e];var t=v("<"+e+">").appendTo(i.body),n=t.css("display");t.remove();if(n==="none"||n===""){Pt=i.body.appendChild(Pt||v.extend(i.createElement("iframe"),{frameBorder:0,width:0,height:0}));if(!Ht||!Pt.createElement)Ht=(Pt.contentWindow||Pt.contentDocument).document,Ht.write("<!doctype html><html><body>"),Ht.close();t=Ht.body.appendChild(Ht.createElement(e)),n=Dt(t,"display"),i.body.removeChild(Pt)}return Wt[e]=n,n}function fn(e,t,n,r){var i;if(v.isArray(t))v.each(t,function(t,i){n||sn.test(e)?r(e,i):fn(e+"["+(typeof i=="object"?t:"")+"]",i,n,r)});else if(!n&&v.type(t)==="object")for(i in t)fn(e+"["+i+"]",t[i],n,r);else r(e,t)}function Cn(e){return function(t,n){typeof t!="string"&&(n=t,t="*");var r,i,s,o=t.toLowerCase().split(y),u=0,a=o.length;if(v.isFunction(n))for(;u<a;u++)r=o[u],s=/^\+/.test(r),s&&(r=r.substr(1)||"*"),i=e[r]=e[r]||[],i[s?"unshift":"push"](n)}}function kn(e,n,r,i,s,o){s=s||n.dataTypes[0],o=o||{},o[s]=!0;var u,a=e[s],f=0,l=a?a.length:0,c=e===Sn;for(;f<l&&(c||!u);f++)u=a[f](n,r,i),typeof u=="string"&&(!c||o[u]?u=t:(n.dataTypes.unshift(u),u=kn(e,n,r,i,u,o)));return(c||!u)&&!o["*"]&&(u=kn(e,n,r,i,"*",o)),u}function Ln(e,n){var r,i,s=v.ajaxSettings.flatOptions||{};for(r in n)n[r]!==t&&((s[r]?e:i||(i={}))[r]=n[r]);i&&v.extend(!0,e,i)}function An(e,n,r){var i,s,o,u,a=e.contents,f=e.dataTypes,l=e.responseFields;for(s in l)s in r&&(n[l[s]]=r[s]);while(f[0]==="*")f.shift(),i===t&&(i=e.mimeType||n.getResponseHeader("content-type"));if(i)for(s in a)if(a[s]&&a[s].test(i)){f.unshift(s);break}if(f[0]in r)o=f[0];else{for(s in r){if(!f[0]||e.converters[s+" "+f[0]]){o=s;break}u||(u=s)}o=o||u}if(o)return o!==f[0]&&f.unshift(o),r[o]}function On(e,t){var n,r,i,s,o=e.dataTypes.slice(),u=o[0],a={},f=0;e.dataFilter&&(t=e.dataFilter(t,e.dataType));if(o[1])for(n in e.converters)a[n.toLowerCase()]=e.converters[n];for(;i=o[++f];)if(i!=="*"){if(u!=="*"&&u!==i){n=a[u+" "+i]||a["* "+i];if(!n)for(r in a){s=r.split(" ");if(s[1]===i){n=a[u+" "+s[0]]||a["* "+s[0]];if(n){n===!0?n=a[r]:a[r]!==!0&&(i=s[0],o.splice(f--,0,i));break}}}if(n!==!0)if(n&&e["throws"])t=n(t);else try{t=n(t)}catch(l){return{state:"parsererror",error:n?l:"No conversion from "+u+" to "+i}}}u=i}return{state:"success",data:t}}function Fn(){try{return new e.XMLHttpRequest}catch(t){}}function In(){try{return new e.ActiveXObject("Microsoft.XMLHTTP")}catch(t){}}function $n(){return setTimeout(function(){qn=t},0),qn=v.now()}function Jn(e,t){v.each(t,function(t,n){var r=(Vn[t]||[]).concat(Vn["*"]),i=0,s=r.length;for(;i<s;i++)if(r[i].call(e,t,n))return})}function Kn(e,t,n){var r,i=0,s=0,o=Xn.length,u=v.Deferred().always(function(){delete a.elem}),a=function(){var t=qn||$n(),n=Math.max(0,f.startTime+f.duration-t),r=n/f.duration||0,i=1-r,s=0,o=f.tweens.length;for(;s<o;s++)f.tweens[s].run(i);return u.notifyWith(e,[f,i,n]),i<1&&o?n:(u.resolveWith(e,[f]),!1)},f=u.promise({elem:e,props:v.extend({},t),opts:v.extend(!0,{specialEasing:{}},n),originalProperties:t,originalOptions:n,startTime:qn||$n(),duration:n.duration,tweens:[],createTween:function(t,n,r){var i=v.Tween(e,f.opts,t,n,f.opts.specialEasing[t]||f.opts.easing);return f.tweens.push(i),i},stop:function(t){var n=0,r=t?f.tweens.length:0;for(;n<r;n++)f.tweens[n].run(1);return t?u.resolveWith(e,[f,t]):u.rejectWith(e,[f,t]),this}}),l=f.props;Qn(l,f.opts.specialEasing);for(;i<o;i++){r=Xn[i].call(f,e,l,f.opts);if(r)return r}return Jn(f,l),v.isFunction(f.opts.start)&&f.opts.start.call(e,f),v.fx.timer(v.extend(a,{anim:f,queue:f.opts.queue,elem:e})),f.progress(f.opts.progress).done(f.opts.done,f.opts.complete).fail(f.opts.fail).always(f.opts.always)}function Qn(e,t){var n,r,i,s,o;for(n in e){r=v.camelCase(n),i=t[r],s=e[n],v.isArray(s)&&(i=s[1],s=e[n]=s[0]),n!==r&&(e[r]=s,delete e[n]),o=v.cssHooks[r];if(o&&"expand"in o){s=o.expand(s),delete e[r];for(n in s)n in e||(e[n]=s[n],t[n]=i)}else t[r]=i}}function Gn(e,t,n){var r,i,s,o,u,a,f,l,c,h=this,p=e.style,d={},m=[],g=e.nodeType&&Gt(e);n.queue||(l=v._queueHooks(e,"fx"),l.unqueued==null&&(l.unqueued=0,c=l.empty.fire,l.empty.fire=function(){l.unqueued||c()}),l.unqueued++,h.always(function(){h.always(function(){l.unqueued--,v.queue(e,"fx").length||l.empty.fire()})})),e.nodeType===1&&("height"in t||"width"in t)&&(n.overflow=[p.overflow,p.overflowX,p.overflowY],v.css(e,"display")==="inline"&&v.css(e,"float")==="none"&&(!v.support.inlineBlockNeedsLayout||nn(e.nodeName)==="inline"?p.display="inline-block":p.zoom=1)),n.overflow&&(p.overflow="hidden",v.support.shrinkWrapBlocks||h.done(function(){p.overflow=n.overflow[0],p.overflowX=n.overflow[1],p.overflowY=n.overflow[2]}));for(r in t){s=t[r];if(Un.exec(s)){delete t[r],a=a||s==="toggle";if(s===(g?"hide":"show"))continue;m.push(r)}}o=m.length;if(o){u=v._data(e,"fxshow")||v._data(e,"fxshow",{}),"hidden"in u&&(g=u.hidden),a&&(u.hidden=!g),g?v(e).show():h.done(function(){v(e).hide()}),h.done(function(){var t;v.removeData(e,"fxshow",!0);for(t in d)v.style(e,t,d[t])});for(r=0;r<o;r++)i=m[r],f=h.createTween(i,g?u[i]:0),d[i]=u[i]||v.style(e,i),i in u||(u[i]=f.start,g&&(f.end=f.start,f.start=i==="width"||i==="height"?1:0))}}function Yn(e,t,n,r,i){return new Yn.prototype.init(e,t,n,r,i)}function Zn(e,t){var n,r={height:e},i=0;t=t?1:0;for(;i<4;i+=2-t)n=$t[i],r["margin"+n]=r["padding"+n]=e;return t&&(r.opacity=r.width=e),r}function tr(e){return v.isWindow(e)?e:e.nodeType===9?e.defaultView||e.parentWindow:!1}var n,r,i=e.document,s=e.location,o=e.navigator,u=e.jQuery,a=e.$,f=Array.prototype.push,l=Array.prototype.slice,c=Array.prototype.indexOf,h=Object.prototype.toString,p=Object.prototype.hasOwnProperty,d=String.prototype.trim,v=function(e,t){return new v.fn.init(e,t,n)},m=/[\-+]?(?:\d*\.|)\d+(?:[eE][\-+]?\d+|)/.source,g=/\S/,y=/\s+/,b=/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g,w=/^(?:[^#<]*(<[\w\W]+>)[^>]*$|#([\w\-]*)$)/,E=/^<(\w+)\s*\/?>(?:<\/\1>|)$/,S=/^[\],:{}\s]*$/,x=/(?:^|:|,)(?:\s*\[)+/g,T=/\\(?:["\\\/bfnrt]|u[\da-fA-F]{4})/g,N=/"[^"\\\r\n]*"|true|false|null|-?(?:\d\d*\.|)\d+(?:[eE][\-+]?\d+|)/g,C=/^-ms-/,k=/-([\da-z])/gi,L=function(e,t){return(t+"").toUpperCase()},A=function(){i.addEventListener?(i.removeEventListener("DOMContentLoaded",A,!1),v.ready()):i.readyState==="complete"&&(i.detachEvent("onreadystatechange",A),v.ready())},O={};v.fn=v.prototype={constructor:v,init:function(e,n,r){var s,o,u,a;if(!e)return this;if(e.nodeType)return this.context=this[0]=e,this.length=1,this;if(typeof e=="string"){e.charAt(0)==="<"&&e.charAt(e.length-1)===">"&&e.length>=3?s=[null,e,null]:s=w.exec(e);if(s&&(s[1]||!n)){if(s[1])return n=n instanceof v?n[0]:n,a=n&&n.nodeType?n.ownerDocument||n:i,e=v.parseHTML(s[1],a,!0),E.test(s[1])&&v.isPlainObject(n)&&this.attr.call(e,n,!0),v.merge(this,e);o=i.getElementById(s[2]);if(o&&o.parentNode){if(o.id!==s[2])return r.find(e);this.length=1,this[0]=o}return this.context=i,this.selector=e,this}return!n||n.jquery?(n||r).find(e):this.constructor(n).find(e)}return v.isFunction(e)?r.ready(e):(e.selector!==t&&(this.selector=e.selector,this.context=e.context),v.makeArray(e,this))},selector:"",jquery:"1.8.3",length:0,size:function(){return this.length},toArray:function(){return l.call(this)},get:function(e){return e==null?this.toArray():e<0?this[this.length+e]:this[e]},pushStack:function(e,t,n){var r=v.merge(this.constructor(),e);return r.prevObject=this,r.context=this.context,t==="find"?r.selector=this.selector+(this.selector?" ":"")+n:t&&(r.selector=this.selector+"."+t+"("+n+")"),r},each:function(e,t){return v.each(this,e,t)},ready:function(e){return v.ready.promise().done(e),this},eq:function(e){return e=+e,e===-1?this.slice(e):this.slice(e,e+1)},first:function(){return this.eq(0)},last:function(){return this.eq(-1)},slice:function(){return this.pushStack(l.apply(this,arguments),"slice",l.call(arguments).join(","))},map:function(e){return this.pushStack(v.map(this,function(t,n){return e.call(t,n,t)}))},end:function(){return this.prevObject||this.constructor(null)},push:f,sort:[].sort,splice:[].splice},v.fn.init.prototype=v.fn,v.extend=v.fn.extend=function(){var e,n,r,i,s,o,u=arguments[0]||{},a=1,f=arguments.length,l=!1;typeof u=="boolean"&&(l=u,u=arguments[1]||{},a=2),typeof u!="object"&&!v.isFunction(u)&&(u={}),f===a&&(u=this,--a);for(;a<f;a++)if((e=arguments[a])!=null)for(n in e){r=u[n],i=e[n];if(u===i)continue;l&&i&&(v.isPlainObject(i)||(s=v.isArray(i)))?(s?(s=!1,o=r&&v.isArray(r)?r:[]):o=r&&v.isPlainObject(r)?r:{},u[n]=v.extend(l,o,i)):i!==t&&(u[n]=i)}return u},v.extend({noConflict:function(t){return e.$===v&&(e.$=a),t&&e.jQuery===v&&(e.jQuery=u),v},isReady:!1,readyWait:1,holdReady:function(e){e?v.readyWait++:v.ready(!0)},ready:function(e){if(e===!0?--v.readyWait:v.isReady)return;if(!i.body)return setTimeout(v.ready,1);v.isReady=!0;if(e!==!0&&--v.readyWait>0)return;r.resolveWith(i,[v]),v.fn.trigger&&v(i).trigger("ready").off("ready")},isFunction:function(e){return v.type(e)==="function"},isArray:Array.isArray||function(e){return v.type(e)==="array"},isWindow:function(e){return e!=null&&e==e.window},isNumeric:function(e){return!isNaN(parseFloat(e))&&isFinite(e)},type:function(e){return e==null?String(e):O[h.call(e)]||"object"},isPlainObject:function(e){if(!e||v.type(e)!=="object"||e.nodeType||v.isWindow(e))return!1;try{if(e.constructor&&!p.call(e,"constructor")&&!p.call(e.constructor.prototype,"isPrototypeOf"))return!1}catch(n){return!1}var r;for(r in e);return r===t||p.call(e,r)},isEmptyObject:function(e){var t;for(t in e)return!1;return!0},error:function(e){throw new Error(e)},parseHTML:function(e,t,n){var r;return!e||typeof e!="string"?null:(typeof t=="boolean"&&(n=t,t=0),t=t||i,(r=E.exec(e))?[t.createElement(r[1])]:(r=v.buildFragment([e],t,n?null:[]),v.merge([],(r.cacheable?v.clone(r.fragment):r.fragment).childNodes)))},parseJSON:function(t){if(!t||typeof t!="string")return null;t=v.trim(t);if(e.JSON&&e.JSON.parse)return e.JSON.parse(t);if(S.test(t.replace(T,"@").replace(N,"]").replace(x,"")))return(new Function("return "+t))();v.error("Invalid JSON: "+t)},parseXML:function(n){var r,i;if(!n||typeof n!="string")return null;try{e.DOMParser?(i=new DOMParser,r=i.parseFromString(n,"text/xml")):(r=new ActiveXObject("Microsoft.XMLDOM"),r.async="false",r.loadXML(n))}catch(s){r=t}return(!r||!r.documentElement||r.getElementsByTagName("parsererror").length)&&v.error("Invalid XML: "+n),r},noop:function(){},globalEval:function(t){t&&g.test(t)&&(e.execScript||function(t){e.eval.call(e,t)})(t)},camelCase:function(e){return e.replace(C,"ms-").replace(k,L)},nodeName:function(e,t){return e.nodeName&&e.nodeName.toLowerCase()===t.toLowerCase()},each:function(e,n,r){var i,s=0,o=e.length,u=o===t||v.isFunction(e);if(r){if(u){for(i in e)if(n.apply(e[i],r)===!1)break}else for(;s<o;)if(n.apply(e[s++],r)===!1)break}else if(u){for(i in e)if(n.call(e[i],i,e[i])===!1)break}else for(;s<o;)if(n.call(e[s],s,e[s++])===!1)break;return e},trim:d&&!d.call("\ufeff\u00a0")?function(e){return e==null?"":d.call(e)}:function(e){return e==null?"":(e+"").replace(b,"")},makeArray:function(e,t){var n,r=t||[];return e!=null&&(n=v.type(e),e.length==null||n==="string"||n==="function"||n==="regexp"||v.isWindow(e)?f.call(r,e):v.merge(r,e)),r},inArray:function(e,t,n){var r;if(t){if(c)return c.call(t,e,n);r=t.length,n=n?n<0?Math.max(0,r+n):n:0;for(;n<r;n++)if(n in t&&t[n]===e)return n}return-1},merge:function(e,n){var r=n.length,i=e.length,s=0;if(typeof r=="number")for(;s<r;s++)e[i++]=n[s];else while(n[s]!==t)e[i++]=n[s++];return e.length=i,e},grep:function(e,t,n){var r,i=[],s=0,o=e.length;n=!!n;for(;s<o;s++)r=!!t(e[s],s),n!==r&&i.push(e[s]);return i},map:function(e,n,r){var i,s,o=[],u=0,a=e.length,f=e instanceof v||a!==t&&typeof a=="number"&&(a>0&&e[0]&&e[a-1]||a===0||v.isArray(e));if(f)for(;u<a;u++)i=n(e[u],u,r),i!=null&&(o[o.length]=i);else for(s in e)i=n(e[s],s,r),i!=null&&(o[o.length]=i);return o.concat.apply([],o)},guid:1,proxy:function(e,n){var r,i,s;return typeof n=="string"&&(r=e[n],n=e,e=r),v.isFunction(e)?(i=l.call(arguments,2),s=function(){return e.apply(n,i.concat(l.call(arguments)))},s.guid=e.guid=e.guid||v.guid++,s):t},access:function(e,n,r,i,s,o,u){var a,f=r==null,l=0,c=e.length;if(r&&typeof r=="object"){for(l in r)v.access(e,n,l,r[l],1,o,i);s=1}else if(i!==t){a=u===t&&v.isFunction(i),f&&(a?(a=n,n=function(e,t,n){return a.call(v(e),n)}):(n.call(e,i),n=null));if(n)for(;l<c;l++)n(e[l],r,a?i.call(e[l],l,n(e[l],r)):i,u);s=1}return s?e:f?n.call(e):c?n(e[0],r):o},now:function(){return(new Date).getTime()}}),v.ready.promise=function(t){if(!r){r=v.Deferred();if(i.readyState==="complete")setTimeout(v.ready,1);else if(i.addEventListener)i.addEventListener("DOMContentLoaded",A,!1),e.addEventListener("load",v.ready,!1);else{i.attachEvent("onreadystatechange",A),e.attachEvent("onload",v.ready);var n=!1;try{n=e.frameElement==null&&i.documentElement}catch(s){}n&&n.doScroll&&function o(){if(!v.isReady){try{n.doScroll("left")}catch(e){return setTimeout(o,50)}v.ready()}}()}}return r.promise(t)},v.each("Boolean Number String Function Array Date RegExp Object".split(" "),function(e,t){O["[object "+t+"]"]=t.toLowerCase()}),n=v(i);var M={};v.Callbacks=function(e){e=typeof e=="string"?M[e]||_(e):v.extend({},e);var n,r,i,s,o,u,a=[],f=!e.once&&[],l=function(t){n=e.memory&&t,r=!0,u=s||0,s=0,o=a.length,i=!0;for(;a&&u<o;u++)if(a[u].apply(t[0],t[1])===!1&&e.stopOnFalse){n=!1;break}i=!1,a&&(f?f.length&&l(f.shift()):n?a=[]:c.disable())},c={add:function(){if(a){var t=a.length;(function r(t){v.each(t,function(t,n){var i=v.type(n);i==="function"?(!e.unique||!c.has(n))&&a.push(n):n&&n.length&&i!=="string"&&r(n)})})(arguments),i?o=a.length:n&&(s=t,l(n))}return this},remove:function(){return a&&v.each(arguments,function(e,t){var n;while((n=v.inArray(t,a,n))>-1)a.splice(n,1),i&&(n<=o&&o--,n<=u&&u--)}),this},has:function(e){return v.inArray(e,a)>-1},empty:function(){return a=[],this},disable:function(){return a=f=n=t,this},disabled:function(){return!a},lock:function(){return f=t,n||c.disable(),this},locked:function(){return!f},fireWith:function(e,t){return t=t||[],t=[e,t.slice?t.slice():t],a&&(!r||f)&&(i?f.push(t):l(t)),this},fire:function(){return c.fireWith(this,arguments),this},fired:function(){return!!r}};return c},v.extend({Deferred:function(e){var t=[["resolve","done",v.Callbacks("once memory"),"resolved"],["reject","fail",v.Callbacks("once memory"),"rejected"],["notify","progress",v.Callbacks("memory")]],n="pending",r={state:function(){return n},always:function(){return i.done(arguments).fail(arguments),this},then:function(){var e=arguments;return v.Deferred(function(n){v.each(t,function(t,r){var s=r[0],o=e[t];i[r[1]](v.isFunction(o)?function(){var e=o.apply(this,arguments);e&&v.isFunction(e.promise)?e.promise().done(n.resolve).fail(n.reject).progress(n.notify):n[s+"With"](this===i?n:this,[e])}:n[s])}),e=null}).promise()},promise:function(e){return e!=null?v.extend(e,r):r}},i={};return r.pipe=r.then,v.each(t,function(e,s){var o=s[2],u=s[3];r[s[1]]=o.add,u&&o.add(function(){n=u},t[e^1][2].disable,t[2][2].lock),i[s[0]]=o.fire,i[s[0]+"With"]=o.fireWith}),r.promise(i),e&&e.call(i,i),i},when:function(e){var t=0,n=l.call(arguments),r=n.length,i=r!==1||e&&v.isFunction(e.promise)?r:0,s=i===1?e:v.Deferred(),o=function(e,t,n){return function(r){t[e]=this,n[e]=arguments.length>1?l.call(arguments):r,n===u?s.notifyWith(t,n):--i||s.resolveWith(t,n)}},u,a,f;if(r>1){u=new Array(r),a=new Array(r),f=new Array(r);for(;t<r;t++)n[t]&&v.isFunction(n[t].promise)?n[t].promise().done(o(t,f,n)).fail(s.reject).progress(o(t,a,u)):--i}return i||s.resolveWith(f,n),s.promise()}}),v.support=function(){var t,n,r,s,o,u,a,f,l,c,h,p=i.createElement("div");p.setAttribute("className","t"),p.innerHTML="  <link/><table></table><a href='/a'>a</a><input type='checkbox'/>",n=p.getElementsByTagName("*"),r=p.getElementsByTagName("a")[0];if(!n||!r||!n.length)return{};s=i.createElement("select"),o=s.appendChild(i.createElement("option")),u=p.getElementsByTagName("input")[0],r.style.cssText="top:1px;float:left;opacity:.5",t={leadingWhitespace:p.firstChild.nodeType===3,tbody:!p.getElementsByTagName("tbody").length,htmlSerialize:!!p.getElementsByTagName("link").length,style:/top/.test(r.getAttribute("style")),hrefNormalized:r.getAttribute("href")==="/a",opacity:/^0.5/.test(r.style.opacity),cssFloat:!!r.style.cssFloat,checkOn:u.value==="on",optSelected:o.selected,getSetAttribute:p.className!=="t",enctype:!!i.createElement("form").enctype,html5Clone:i.createElement("nav").cloneNode(!0).outerHTML!=="<:nav></:nav>",boxModel:i.compatMode==="CSS1Compat",submitBubbles:!0,changeBubbles:!0,focusinBubbles:!1,deleteExpando:!0,noCloneEvent:!0,inlineBlockNeedsLayout:!1,shrinkWrapBlocks:!1,reliableMarginRight:!0,boxSizingReliable:!0,pixelPosition:!1},u.checked=!0,t.noCloneChecked=u.cloneNode(!0).checked,s.disabled=!0,t.optDisabled=!o.disabled;try{delete p.test}catch(d){t.deleteExpando=!1}!p.addEventListener&&p.attachEvent&&p.fireEvent&&(p.attachEvent("onclick",h=function(){t.noCloneEvent=!1}),p.cloneNode(!0).fireEvent("onclick"),p.detachEvent("onclick",h)),u=i.createElement("input"),u.value="t",u.setAttribute("type","radio"),t.radioValue=u.value==="t",u.setAttribute("checked","checked"),u.setAttribute("name","t"),p.appendChild(u),a=i.createDocumentFragment(),a.appendChild(p.lastChild),t.checkClone=a.cloneNode(!0).cloneNode(!0).lastChild.checked,t.appendChecked=u.checked,a.removeChild(u),a.appendChild(p);if(p.attachEvent)for(l in{submit:!0,change:!0,focusin:!0})f="on"+l,c=f in p,c||(p.setAttribute(f,"return;"),c=typeof p[f]=="function"),t[l+"Bubbles"]=c;return v(function(){var n,r,s,o,u="padding:0;margin:0;border:0;display:block;overflow:hidden;",a=i.getElementsByTagName("body")[0];if(!a)return;n=i.createElement("div"),n.style.cssText="visibility:hidden;border:0;width:0;height:0;position:static;top:0;margin-top:1px",a.insertBefore(n,a.firstChild),r=i.createElement("div"),n.appendChild(r),r.innerHTML="<table><tr><td></td><td>t</td></tr></table>",s=r.getElementsByTagName("td"),s[0].style.cssText="padding:0;margin:0;border:0;display:none",c=s[0].offsetHeight===0,s[0].style.display="",s[1].style.display="none",t.reliableHiddenOffsets=c&&s[0].offsetHeight===0,r.innerHTML="",r.style.cssText="box-sizing:border-box;-moz-box-sizing:border-box;-webkit-box-sizing:border-box;padding:1px;border:1px;display:block;width:4px;margin-top:1%;position:absolute;top:1%;",t.boxSizing=r.offsetWidth===4,t.doesNotIncludeMarginInBodyOffset=a.offsetTop!==1,e.getComputedStyle&&(t.pixelPosition=(e.getComputedStyle(r,null)||{}).top!=="1%",t.boxSizingReliable=(e.getComputedStyle(r,null)||{width:"4px"}).width==="4px",o=i.createElement("div"),o.style.cssText=r.style.cssText=u,o.style.marginRight=o.style.width="0",r.style.width="1px",r.appendChild(o),t.reliableMarginRight=!parseFloat((e.getComputedStyle(o,null)||{}).marginRight)),typeof r.style.zoom!="undefined"&&(r.innerHTML="",r.style.cssText=u+"width:1px;padding:1px;display:inline;zoom:1",t.inlineBlockNeedsLayout=r.offsetWidth===3,r.style.display="block",r.style.overflow="visible",r.innerHTML="<div></div>",r.firstChild.style.width="5px",t.shrinkWrapBlocks=r.offsetWidth!==3,n.style.zoom=1),a.removeChild(n),n=r=s=o=null}),a.removeChild(p),n=r=s=o=u=a=p=null,t}();var D=/(?:\{[\s\S]*\}|\[[\s\S]*\])$/,P=/([A-Z])/g;v.extend({cache:{},deletedIds:[],uuid:0,expando:"jQuery"+(v.fn.jquery+Math.random()).replace(/\D/g,""),noData:{embed:!0,object:"clsid:D27CDB6E-AE6D-11cf-96B8-444553540000",applet:!0},hasData:function(e){return e=e.nodeType?v.cache[e[v.expando]]:e[v.expando],!!e&&!B(e)},data:function(e,n,r,i){if(!v.acceptData(e))return;var s,o,u=v.expando,a=typeof n=="string",f=e.nodeType,l=f?v.cache:e,c=f?e[u]:e[u]&&u;if((!c||!l[c]||!i&&!l[c].data)&&a&&r===t)return;c||(f?e[u]=c=v.deletedIds.pop()||v.guid++:c=u),l[c]||(l[c]={},f||(l[c].toJSON=v.noop));if(typeof n=="object"||typeof n=="function")i?l[c]=v.extend(l[c],n):l[c].data=v.extend(l[c].data,n);return s=l[c],i||(s.data||(s.data={}),s=s.data),r!==t&&(s[v.camelCase(n)]=r),a?(o=s[n],o==null&&(o=s[v.camelCase(n)])):o=s,o},removeData:function(e,t,n){if(!v.acceptData(e))return;var r,i,s,o=e.nodeType,u=o?v.cache:e,a=o?e[v.expando]:v.expando;if(!u[a])return;if(t){r=n?u[a]:u[a].data;if(r){v.isArray(t)||(t in r?t=[t]:(t=v.camelCase(t),t in r?t=[t]:t=t.split(" ")));for(i=0,s=t.length;i<s;i++)delete r[t[i]];if(!(n?B:v.isEmptyObject)(r))return}}if(!n){delete u[a].data;if(!B(u[a]))return}o?v.cleanData([e],!0):v.support.deleteExpando||u!=u.window?delete u[a]:u[a]=null},_data:function(e,t,n){return v.data(e,t,n,!0)},acceptData:function(e){var t=e.nodeName&&v.noData[e.nodeName.toLowerCase()];return!t||t!==!0&&e.getAttribute("classid")===t}}),v.fn.extend({data:function(e,n){var r,i,s,o,u,a=this[0],f=0,l=null;if(e===t){if(this.length){l=v.data(a);if(a.nodeType===1&&!v._data(a,"parsedAttrs")){s=a.attributes;for(u=s.length;f<u;f++)o=s[f].name,o.indexOf("data-")||(o=v.camelCase(o.substring(5)),H(a,o,l[o]));v._data(a,"parsedAttrs",!0)}}return l}return typeof e=="object"?this.each(function(){v.data(this,e)}):(r=e.split(".",2),r[1]=r[1]?"."+r[1]:"",i=r[1]+"!",v.access(this,function(n){if(n===t)return l=this.triggerHandler("getData"+i,[r[0]]),l===t&&a&&(l=v.data(a,e),l=H(a,e,l)),l===t&&r[1]?this.data(r[0]):l;r[1]=n,this.each(function(){var t=v(this);t.triggerHandler("setData"+i,r),v.data(this,e,n),t.triggerHandler("changeData"+i,r)})},null,n,arguments.length>1,null,!1))},removeData:function(e){return this.each(function(){v.removeData(this,e)})}}),v.extend({queue:function(e,t,n){var r;if(e)return t=(t||"fx")+"queue",r=v._data(e,t),n&&(!r||v.isArray(n)?r=v._data(e,t,v.makeArray(n)):r.push(n)),r||[]},dequeue:function(e,t){t=t||"fx";var n=v.queue(e,t),r=n.length,i=n.shift(),s=v._queueHooks(e,t),o=function(){v.dequeue(e,t)};i==="inprogress"&&(i=n.shift(),r--),i&&(t==="fx"&&n.unshift("inprogress"),delete s.stop,i.call(e,o,s)),!r&&s&&s.empty.fire()},_queueHooks:function(e,t){var n=t+"queueHooks";return v._data(e,n)||v._data(e,n,{empty:v.Callbacks("once memory").add(function(){v.removeData(e,t+"queue",!0),v.removeData(e,n,!0)})})}}),v.fn.extend({queue:function(e,n){var r=2;return typeof e!="string"&&(n=e,e="fx",r--),arguments.length<r?v.queue(this[0],e):n===t?this:this.each(function(){var t=v.queue(this,e,n);v._queueHooks(this,e),e==="fx"&&t[0]!=="inprogress"&&v.dequeue(this,e)})},dequeue:function(e){return this.each(function(){v.dequeue(this,e)})},delay:function(e,t){return e=v.fx?v.fx.speeds[e]||e:e,t=t||"fx",this.queue(t,function(t,n){var r=setTimeout(t,e);n.stop=function(){clearTimeout(r)}})},clearQueue:function(e){return this.queue(e||"fx",[])},promise:function(e,n){var r,i=1,s=v.Deferred(),o=this,u=this.length,a=function(){--i||s.resolveWith(o,[o])};typeof e!="string"&&(n=e,e=t),e=e||"fx";while(u--)r=v._data(o[u],e+"queueHooks"),r&&r.empty&&(i++,r.empty.add(a));return a(),s.promise(n)}});var j,F,I,q=/[\t\r\n]/g,R=/\r/g,U=/^(?:button|input)$/i,z=/^(?:button|input|object|select|textarea)$/i,W=/^a(?:rea|)$/i,X=/^(?:autofocus|autoplay|async|checked|controls|defer|disabled|hidden|loop|multiple|open|readonly|required|scoped|selected)$/i,V=v.support.getSetAttribute;v.fn.extend({attr:function(e,t){return v.access(this,v.attr,e,t,arguments.length>1)},removeAttr:function(e){return this.each(function(){v.removeAttr(this,e)})},prop:function(e,t){return v.access(this,v.prop,e,t,arguments.length>1)},removeProp:function(e){return e=v.propFix[e]||e,this.each(function(){try{this[e]=t,delete this[e]}catch(n){}})},addClass:function(e){var t,n,r,i,s,o,u;if(v.isFunction(e))return this.each(function(t){v(this).addClass(e.call(this,t,this.className))});if(e&&typeof e=="string"){t=e.split(y);for(n=0,r=this.length;n<r;n++){i=this[n];if(i.nodeType===1)if(!i.className&&t.length===1)i.className=e;else{s=" "+i.className+" ";for(o=0,u=t.length;o<u;o++)s.indexOf(" "+t[o]+" ")<0&&(s+=t[o]+" ");i.className=v.trim(s)}}}return this},removeClass:function(e){var n,r,i,s,o,u,a;if(v.isFunction(e))return this.each(function(t){v(this).removeClass(e.call(this,t,this.className))});if(e&&typeof e=="string"||e===t){n=(e||"").split(y);for(u=0,a=this.length;u<a;u++){i=this[u];if(i.nodeType===1&&i.className){r=(" "+i.className+" ").replace(q," ");for(s=0,o=n.length;s<o;s++)while(r.indexOf(" "+n[s]+" ")>=0)r=r.replace(" "+n[s]+" "," ");i.className=e?v.trim(r):""}}}return this},toggleClass:function(e,t){var n=typeof e,r=typeof t=="boolean";return v.isFunction(e)?this.each(function(n){v(this).toggleClass(e.call(this,n,this.className,t),t)}):this.each(function(){if(n==="string"){var i,s=0,o=v(this),u=t,a=e.split(y);while(i=a[s++])u=r?u:!o.hasClass(i),o[u?"addClass":"removeClass"](i)}else if(n==="undefined"||n==="boolean")this.className&&v._data(this,"__className__",this.className),this.className=this.className||e===!1?"":v._data(this,"__className__")||""})},hasClass:function(e){var t=" "+e+" ",n=0,r=this.length;for(;n<r;n++)if(this[n].nodeType===1&&(" "+this[n].className+" ").replace(q," ").indexOf(t)>=0)return!0;return!1},val:function(e){var n,r,i,s=this[0];if(!arguments.length){if(s)return n=v.valHooks[s.type]||v.valHooks[s.nodeName.toLowerCase()],n&&"get"in n&&(r=n.get(s,"value"))!==t?r:(r=s.value,typeof r=="string"?r.replace(R,""):r==null?"":r);return}return i=v.isFunction(e),this.each(function(r){var s,o=v(this);if(this.nodeType!==1)return;i?s=e.call(this,r,o.val()):s=e,s==null?s="":typeof s=="number"?s+="":v.isArray(s)&&(s=v.map(s,function(e){return e==null?"":e+""})),n=v.valHooks[this.type]||v.valHooks[this.nodeName.toLowerCase()];if(!n||!("set"in n)||n.set(this,s,"value")===t)this.value=s})}}),v.extend({valHooks:{option:{get:function(e){var t=e.attributes.value;return!t||t.specified?e.value:e.text}},select:{get:function(e){var t,n,r=e.options,i=e.selectedIndex,s=e.type==="select-one"||i<0,o=s?null:[],u=s?i+1:r.length,a=i<0?u:s?i:0;for(;a<u;a++){n=r[a];if((n.selected||a===i)&&(v.support.optDisabled?!n.disabled:n.getAttribute("disabled")===null)&&(!n.parentNode.disabled||!v.nodeName(n.parentNode,"optgroup"))){t=v(n).val();if(s)return t;o.push(t)}}return o},set:function(e,t){var n=v.makeArray(t);return v(e).find("option").each(function(){this.selected=v.inArray(v(this).val(),n)>=0}),n.length||(e.selectedIndex=-1),n}}},attrFn:{},attr:function(e,n,r,i){var s,o,u,a=e.nodeType;if(!e||a===3||a===8||a===2)return;if(i&&v.isFunction(v.fn[n]))return v(e)[n](r);if(typeof e.getAttribute=="undefined")return v.prop(e,n,r);u=a!==1||!v.isXMLDoc(e),u&&(n=n.toLowerCase(),o=v.attrHooks[n]||(X.test(n)?F:j));if(r!==t){if(r===null){v.removeAttr(e,n);return}return o&&"set"in o&&u&&(s=o.set(e,r,n))!==t?s:(e.setAttribute(n,r+""),r)}return o&&"get"in o&&u&&(s=o.get(e,n))!==null?s:(s=e.getAttribute(n),s===null?t:s)},removeAttr:function(e,t){var n,r,i,s,o=0;if(t&&e.nodeType===1){r=t.split(y);for(;o<r.length;o++)i=r[o],i&&(n=v.propFix[i]||i,s=X.test(i),s||v.attr(e,i,""),e.removeAttribute(V?i:n),s&&n in e&&(e[n]=!1))}},attrHooks:{type:{set:function(e,t){if(U.test(e.nodeName)&&e.parentNode)v.error("type property can't be changed");else if(!v.support.radioValue&&t==="radio"&&v.nodeName(e,"input")){var n=e.value;return e.setAttribute("type",t),n&&(e.value=n),t}}},value:{get:function(e,t){return j&&v.nodeName(e,"button")?j.get(e,t):t in e?e.value:null},set:function(e,t,n){if(j&&v.nodeName(e,"button"))return j.set(e,t,n);e.value=t}}},propFix:{tabindex:"tabIndex",readonly:"readOnly","for":"htmlFor","class":"className",maxlength:"maxLength",cellspacing:"cellSpacing",cellpadding:"cellPadding",rowspan:"rowSpan",colspan:"colSpan",usemap:"useMap",frameborder:"frameBorder",contenteditable:"contentEditable"},prop:function(e,n,r){var i,s,o,u=e.nodeType;if(!e||u===3||u===8||u===2)return;return o=u!==1||!v.isXMLDoc(e),o&&(n=v.propFix[n]||n,s=v.propHooks[n]),r!==t?s&&"set"in s&&(i=s.set(e,r,n))!==t?i:e[n]=r:s&&"get"in s&&(i=s.get(e,n))!==null?i:e[n]},propHooks:{tabIndex:{get:function(e){var n=e.getAttributeNode("tabindex");return n&&n.specified?parseInt(n.value,10):z.test(e.nodeName)||W.test(e.nodeName)&&e.href?0:t}}}}),F={get:function(e,n){var r,i=v.prop(e,n);return i===!0||typeof i!="boolean"&&(r=e.getAttributeNode(n))&&r.nodeValue!==!1?n.toLowerCase():t},set:function(e,t,n){var r;return t===!1?v.removeAttr(e,n):(r=v.propFix[n]||n,r in e&&(e[r]=!0),e.setAttribute(n,n.toLowerCase())),n}},V||(I={name:!0,id:!0,coords:!0},j=v.valHooks.button={get:function(e,n){var r;return r=e.getAttributeNode(n),r&&(I[n]?r.value!=="":r.specified)?r.value:t},set:function(e,t,n){var r=e.getAttributeNode(n);return r||(r=i.createAttribute(n),e.setAttributeNode(r)),r.value=t+""}},v.each(["width","height"],function(e,t){v.attrHooks[t]=v.extend(v.attrHooks[t],{set:function(e,n){if(n==="")return e.setAttribute(t,"auto"),n}})}),v.attrHooks.contenteditable={get:j.get,set:function(e,t,n){t===""&&(t="false"),j.set(e,t,n)}}),v.support.hrefNormalized||v.each(["href","src","width","height"],function(e,n){v.attrHooks[n]=v.extend(v.attrHooks[n],{get:function(e){var r=e.getAttribute(n,2);return r===null?t:r}})}),v.support.style||(v.attrHooks.style={get:function(e){return e.style.cssText.toLowerCase()||t},set:function(e,t){return e.style.cssText=t+""}}),v.support.optSelected||(v.propHooks.selected=v.extend(v.propHooks.selected,{get:function(e){var t=e.parentNode;return t&&(t.selectedIndex,t.parentNode&&t.parentNode.selectedIndex),null}})),v.support.enctype||(v.propFix.enctype="encoding"),v.support.checkOn||v.each(["radio","checkbox"],function(){v.valHooks[this]={get:function(e){return e.getAttribute("value")===null?"on":e.value}}}),v.each(["radio","checkbox"],function(){v.valHooks[this]=v.extend(v.valHooks[this],{set:function(e,t){if(v.isArray(t))return e.checked=v.inArray(v(e).val(),t)>=0}})});var $=/^(?:textarea|input|select)$/i,J=/^([^\.]*|)(?:\.(.+)|)$/,K=/(?:^|\s)hover(\.\S+|)\b/,Q=/^key/,G=/^(?:mouse|contextmenu)|click/,Y=/^(?:focusinfocus|focusoutblur)$/,Z=function(e){return v.event.special.hover?e:e.replace(K,"mouseenter$1 mouseleave$1")};v.event={add:function(e,n,r,i,s){var o,u,a,f,l,c,h,p,d,m,g;if(e.nodeType===3||e.nodeType===8||!n||!r||!(o=v._data(e)))return;r.handler&&(d=r,r=d.handler,s=d.selector),r.guid||(r.guid=v.guid++),a=o.events,a||(o.events=a={}),u=o.handle,u||(o.handle=u=function(e){return typeof v=="undefined"||!!e&&v.event.triggered===e.type?t:v.event.dispatch.apply(u.elem,arguments)},u.elem=e),n=v.trim(Z(n)).split(" ");for(f=0;f<n.length;f++){l=J.exec(n[f])||[],c=l[1],h=(l[2]||"").split(".").sort(),g=v.event.special[c]||{},c=(s?g.delegateType:g.bindType)||c,g=v.event.special[c]||{},p=v.extend({type:c,origType:l[1],data:i,handler:r,guid:r.guid,selector:s,needsContext:s&&v.expr.match.needsContext.test(s),namespace:h.join(".")},d),m=a[c];if(!m){m=a[c]=[],m.delegateCount=0;if(!g.setup||g.setup.call(e,i,h,u)===!1)e.addEventListener?e.addEventListener(c,u,!1):e.attachEvent&&e.attachEvent("on"+c,u)}g.add&&(g.add.call(e,p),p.handler.guid||(p.handler.guid=r.guid)),s?m.splice(m.delegateCount++,0,p):m.push(p),v.event.global[c]=!0}e=null},global:{},remove:function(e,t,n,r,i){var s,o,u,a,f,l,c,h,p,d,m,g=v.hasData(e)&&v._data(e);if(!g||!(h=g.events))return;t=v.trim(Z(t||"")).split(" ");for(s=0;s<t.length;s++){o=J.exec(t[s])||[],u=a=o[1],f=o[2];if(!u){for(u in h)v.event.remove(e,u+t[s],n,r,!0);continue}p=v.event.special[u]||{},u=(r?p.delegateType:p.bindType)||u,d=h[u]||[],l=d.length,f=f?new RegExp("(^|\\.)"+f.split(".").sort().join("\\.(?:.*\\.|)")+"(\\.|$)"):null;for(c=0;c<d.length;c++)m=d[c],(i||a===m.origType)&&(!n||n.guid===m.guid)&&(!f||f.test(m.namespace))&&(!r||r===m.selector||r==="**"&&m.selector)&&(d.splice(c--,1),m.selector&&d.delegateCount--,p.remove&&p.remove.call(e,m));d.length===0&&l!==d.length&&((!p.teardown||p.teardown.call(e,f,g.handle)===!1)&&v.removeEvent(e,u,g.handle),delete h[u])}v.isEmptyObject(h)&&(delete g.handle,v.removeData(e,"events",!0))},customEvent:{getData:!0,setData:!0,changeData:!0},trigger:function(n,r,s,o){if(!s||s.nodeType!==3&&s.nodeType!==8){var u,a,f,l,c,h,p,d,m,g,y=n.type||n,b=[];if(Y.test(y+v.event.triggered))return;y.indexOf("!")>=0&&(y=y.slice(0,-1),a=!0),y.indexOf(".")>=0&&(b=y.split("."),y=b.shift(),b.sort());if((!s||v.event.customEvent[y])&&!v.event.global[y])return;n=typeof n=="object"?n[v.expando]?n:new v.Event(y,n):new v.Event(y),n.type=y,n.isTrigger=!0,n.exclusive=a,n.namespace=b.join("."),n.namespace_re=n.namespace?new RegExp("(^|\\.)"+b.join("\\.(?:.*\\.|)")+"(\\.|$)"):null,h=y.indexOf(":")<0?"on"+y:"";if(!s){u=v.cache;for(f in u)u[f].events&&u[f].events[y]&&v.event.trigger(n,r,u[f].handle.elem,!0);return}n.result=t,n.target||(n.target=s),r=r!=null?v.makeArray(r):[],r.unshift(n),p=v.event.special[y]||{};if(p.trigger&&p.trigger.apply(s,r)===!1)return;m=[[s,p.bindType||y]];if(!o&&!p.noBubble&&!v.isWindow(s)){g=p.delegateType||y,l=Y.test(g+y)?s:s.parentNode;for(c=s;l;l=l.parentNode)m.push([l,g]),c=l;c===(s.ownerDocument||i)&&m.push([c.defaultView||c.parentWindow||e,g])}for(f=0;f<m.length&&!n.isPropagationStopped();f++)l=m[f][0],n.type=m[f][1],d=(v._data(l,"events")||{})[n.type]&&v._data(l,"handle"),d&&d.apply(l,r),d=h&&l[h],d&&v.acceptData(l)&&d.apply&&d.apply(l,r)===!1&&n.preventDefault();return n.type=y,!o&&!n.isDefaultPrevented()&&(!p._default||p._default.apply(s.ownerDocument,r)===!1)&&(y!=="click"||!v.nodeName(s,"a"))&&v.acceptData(s)&&h&&s[y]&&(y!=="focus"&&y!=="blur"||n.target.offsetWidth!==0)&&!v.isWindow(s)&&(c=s[h],c&&(s[h]=null),v.event.triggered=y,s[y](),v.event.triggered=t,c&&(s[h]=c)),n.result}return},dispatch:function(n){n=v.event.fix(n||e.event);var r,i,s,o,u,a,f,c,h,p,d=(v._data(this,"events")||{})[n.type]||[],m=d.delegateCount,g=l.call(arguments),y=!n.exclusive&&!n.namespace,b=v.event.special[n.type]||{},w=[];g[0]=n,n.delegateTarget=this;if(b.preDispatch&&b.preDispatch.call(this,n)===!1)return;if(m&&(!n.button||n.type!=="click"))for(s=n.target;s!=this;s=s.parentNode||this)if(s.disabled!==!0||n.type!=="click"){u={},f=[];for(r=0;r<m;r++)c=d[r],h=c.selector,u[h]===t&&(u[h]=c.needsContext?v(h,this).index(s)>=0:v.find(h,this,null,[s]).length),u[h]&&f.push(c);f.length&&w.push({elem:s,matches:f})}d.length>m&&w.push({elem:this,matches:d.slice(m)});for(r=0;r<w.length&&!n.isPropagationStopped();r++){a=w[r],n.currentTarget=a.elem;for(i=0;i<a.matches.length&&!n.isImmediatePropagationStopped();i++){c=a.matches[i];if(y||!n.namespace&&!c.namespace||n.namespace_re&&n.namespace_re.test(c.namespace))n.data=c.data,n.handleObj=c,o=((v.event.special[c.origType]||{}).handle||c.handler).apply(a.elem,g),o!==t&&(n.result=o,o===!1&&(n.preventDefault(),n.stopPropagation()))}}return b.postDispatch&&b.postDispatch.call(this,n),n.result},props:"attrChange attrName relatedNode srcElement altKey bubbles cancelable ctrlKey currentTarget eventPhase metaKey relatedTarget shiftKey target timeStamp view which".split(" "),fixHooks:{},keyHooks:{props:"char charCode key keyCode".split(" "),filter:function(e,t){return e.which==null&&(e.which=t.charCode!=null?t.charCode:t.keyCode),e}},mouseHooks:{props:"button buttons clientX clientY fromElement offsetX offsetY pageX pageY screenX screenY toElement".split(" "),filter:function(e,n){var r,s,o,u=n.button,a=n.fromElement;return e.pageX==null&&n.clientX!=null&&(r=e.target.ownerDocument||i,s=r.documentElement,o=r.body,e.pageX=n.clientX+(s&&s.scrollLeft||o&&o.scrollLeft||0)-(s&&s.clientLeft||o&&o.clientLeft||0),e.pageY=n.clientY+(s&&s.scrollTop||o&&o.scrollTop||0)-(s&&s.clientTop||o&&o.clientTop||0)),!e.relatedTarget&&a&&(e.relatedTarget=a===e.target?n.toElement:a),!e.which&&u!==t&&(e.which=u&1?1:u&2?3:u&4?2:0),e}},fix:function(e){if(e[v.expando])return e;var t,n,r=e,s=v.event.fixHooks[e.type]||{},o=s.props?this.props.concat(s.props):this.props;e=v.Event(r);for(t=o.length;t;)n=o[--t],e[n]=r[n];return e.target||(e.target=r.srcElement||i),e.target.nodeType===3&&(e.target=e.target.parentNode),e.metaKey=!!e.metaKey,s.filter?s.filter(e,r):e},special:{load:{noBubble:!0},focus:{delegateType:"focusin"},blur:{delegateType:"focusout"},beforeunload:{setup:function(e,t,n){v.isWindow(this)&&(this.onbeforeunload=n)},teardown:function(e,t){this.onbeforeunload===t&&(this.onbeforeunload=null)}}},simulate:function(e,t,n,r){var i=v.extend(new v.Event,n,{type:e,isSimulated:!0,originalEvent:{}});r?v.event.trigger(i,null,t):v.event.dispatch.call(t,i),i.isDefaultPrevented()&&n.preventDefault()}},v.event.handle=v.event.dispatch,v.removeEvent=i.removeEventListener?function(e,t,n){e.removeEventListener&&e.removeEventListener(t,n,!1)}:function(e,t,n){var r="on"+t;e.detachEvent&&(typeof e[r]=="undefined"&&(e[r]=null),e.detachEvent(r,n))},v.Event=function(e,t){if(!(this instanceof v.Event))return new v.Event(e,t);e&&e.type?(this.originalEvent=e,this.type=e.type,this.isDefaultPrevented=e.defaultPrevented||e.returnValue===!1||e.getPreventDefault&&e.getPreventDefault()?tt:et):this.type=e,t&&v.extend(this,t),this.timeStamp=e&&e.timeStamp||v.now(),this[v.expando]=!0},v.Event.prototype={preventDefault:function(){this.isDefaultPrevented=tt;var e=this.originalEvent;if(!e)return;e.preventDefault?e.preventDefault():e.returnValue=!1},stopPropagation:function(){this.isPropagationStopped=tt;var e=this.originalEvent;if(!e)return;e.stopPropagation&&e.stopPropagation(),e.cancelBubble=!0},stopImmediatePropagation:function(){this.isImmediatePropagationStopped=tt,this.stopPropagation()},isDefaultPrevented:et,isPropagationStopped:et,isImmediatePropagationStopped:et},v.each({mouseenter:"mouseover",mouseleave:"mouseout"},function(e,t){v.event.special[e]={delegateType:t,bindType:t,handle:function(e){var n,r=this,i=e.relatedTarget,s=e.handleObj,o=s.selector;if(!i||i!==r&&!v.contains(r,i))e.type=s.origType,n=s.handler.apply(this,arguments),e.type=t;return n}}}),v.support.submitBubbles||(v.event.special.submit={setup:function(){if(v.nodeName(this,"form"))return!1;v.event.add(this,"click._submit keypress._submit",function(e){var n=e.target,r=v.nodeName(n,"input")||v.nodeName(n,"button")?n.form:t;r&&!v._data(r,"_submit_attached")&&(v.event.add(r,"submit._submit",function(e){e._submit_bubble=!0}),v._data(r,"_submit_attached",!0))})},postDispatch:function(e){e._submit_bubble&&(delete e._submit_bubble,this.parentNode&&!e.isTrigger&&v.event.simulate("submit",this.parentNode,e,!0))},teardown:function(){if(v.nodeName(this,"form"))return!1;v.event.remove(this,"._submit")}}),v.support.changeBubbles||(v.event.special.change={setup:function(){if($.test(this.nodeName)){if(this.type==="checkbox"||this.type==="radio")v.event.add(this,"propertychange._change",function(e){e.originalEvent.propertyName==="checked"&&(this._just_changed=!0)}),v.event.add(this,"click._change",function(e){this._just_changed&&!e.isTrigger&&(this._just_changed=!1),v.event.simulate("change",this,e,!0)});return!1}v.event.add(this,"beforeactivate._change",function(e){var t=e.target;$.test(t.nodeName)&&!v._data(t,"_change_attached")&&(v.event.add(t,"change._change",function(e){this.parentNode&&!e.isSimulated&&!e.isTrigger&&v.event.simulate("change",this.parentNode,e,!0)}),v._data(t,"_change_attached",!0))})},handle:function(e){var t=e.target;if(this!==t||e.isSimulated||e.isTrigger||t.type!=="radio"&&t.type!=="checkbox")return e.handleObj.handler.apply(this,arguments)},teardown:function(){return v.event.remove(this,"._change"),!$.test(this.nodeName)}}),v.support.focusinBubbles||v.each({focus:"focusin",blur:"focusout"},function(e,t){var n=0,r=function(e){v.event.simulate(t,e.target,v.event.fix(e),!0)};v.event.special[t]={setup:function(){n++===0&&i.addEventListener(e,r,!0)},teardown:function(){--n===0&&i.removeEventListener(e,r,!0)}}}),v.fn.extend({on:function(e,n,r,i,s){var o,u;if(typeof e=="object"){typeof n!="string"&&(r=r||n,n=t);for(u in e)this.on(u,n,r,e[u],s);return this}r==null&&i==null?(i=n,r=n=t):i==null&&(typeof n=="string"?(i=r,r=t):(i=r,r=n,n=t));if(i===!1)i=et;else if(!i)return this;return s===1&&(o=i,i=function(e){return v().off(e),o.apply(this,arguments)},i.guid=o.guid||(o.guid=v.guid++)),this.each(function(){v.event.add(this,e,i,r,n)})},one:function(e,t,n,r){return this.on(e,t,n,r,1)},off:function(e,n,r){var i,s;if(e&&e.preventDefault&&e.handleObj)return i=e.handleObj,v(e.delegateTarget).off(i.namespace?i.origType+"."+i.namespace:i.origType,i.selector,i.handler),this;if(typeof e=="object"){for(s in e)this.off(s,n,e[s]);return this}if(n===!1||typeof n=="function")r=n,n=t;return r===!1&&(r=et),this.each(function(){v.event.remove(this,e,r,n)})},bind:function(e,t,n){return this.on(e,null,t,n)},unbind:function(e,t){return this.off(e,null,t)},live:function(e,t,n){return v(this.context).on(e,this.selector,t,n),this},die:function(e,t){return v(this.context).off(e,this.selector||"**",t),this},delegate:function(e,t,n,r){return this.on(t,e,n,r)},undelegate:function(e,t,n){return arguments.length===1?this.off(e,"**"):this.off(t,e||"**",n)},trigger:function(e,t){return this.each(function(){v.event.trigger(e,t,this)})},triggerHandler:function(e,t){if(this[0])return v.event.trigger(e,t,this[0],!0)},toggle:function(e){var t=arguments,n=e.guid||v.guid++,r=0,i=function(n){var i=(v._data(this,"lastToggle"+e.guid)||0)%r;return v._data(this,"lastToggle"+e.guid,i+1),n.preventDefault(),t[i].apply(this,arguments)||!1};i.guid=n;while(r<t.length)t[r++].guid=n;return this.click(i)},hover:function(e,t){return this.mouseenter(e).mouseleave(t||e)}}),v.each("blur focus focusin focusout load resize scroll unload click dblclick mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave change select submit keydown keypress keyup error contextmenu".split(" "),function(e,t){v.fn[t]=function(e,n){return n==null&&(n=e,e=null),arguments.length>0?this.on(t,null,e,n):this.trigger(t)},Q.test(t)&&(v.event.fixHooks[t]=v.event.keyHooks),G.test(t)&&(v.event.fixHooks[t]=v.event.mouseHooks)}),function(e,t){function nt(e,t,n,r){n=n||[],t=t||g;var i,s,a,f,l=t.nodeType;if(!e||typeof e!="string")return n;if(l!==1&&l!==9)return[];a=o(t);if(!a&&!r)if(i=R.exec(e))if(f=i[1]){if(l===9){s=t.getElementById(f);if(!s||!s.parentNode)return n;if(s.id===f)return n.push(s),n}else if(t.ownerDocument&&(s=t.ownerDocument.getElementById(f))&&u(t,s)&&s.id===f)return n.push(s),n}else{if(i[2])return S.apply(n,x.call(t.getElementsByTagName(e),0)),n;if((f=i[3])&&Z&&t.getElementsByClassName)return S.apply(n,x.call(t.getElementsByClassName(f),0)),n}return vt(e.replace(j,"$1"),t,n,r,a)}function rt(e){return function(t){var n=t.nodeName.toLowerCase();return n==="input"&&t.type===e}}function it(e){return function(t){var n=t.nodeName.toLowerCase();return(n==="input"||n==="button")&&t.type===e}}function st(e){return N(function(t){return t=+t,N(function(n,r){var i,s=e([],n.length,t),o=s.length;while(o--)n[i=s[o]]&&(n[i]=!(r[i]=n[i]))})})}function ot(e,t,n){if(e===t)return n;var r=e.nextSibling;while(r){if(r===t)return-1;r=r.nextSibling}return 1}function ut(e,t){var n,r,s,o,u,a,f,l=L[d][e+" "];if(l)return t?0:l.slice(0);u=e,a=[],f=i.preFilter;while(u){if(!n||(r=F.exec(u)))r&&(u=u.slice(r[0].length)||u),a.push(s=[]);n=!1;if(r=I.exec(u))s.push(n=new m(r.shift())),u=u.slice(n.length),n.type=r[0].replace(j," ");for(o in i.filter)(r=J[o].exec(u))&&(!f[o]||(r=f[o](r)))&&(s.push(n=new m(r.shift())),u=u.slice(n.length),n.type=o,n.matches=r);if(!n)break}return t?u.length:u?nt.error(e):L(e,a).slice(0)}function at(e,t,r){var i=t.dir,s=r&&t.dir==="parentNode",o=w++;return t.first?function(t,n,r){while(t=t[i])if(s||t.nodeType===1)return e(t,n,r)}:function(t,r,u){if(!u){var a,f=b+" "+o+" ",l=f+n;while(t=t[i])if(s||t.nodeType===1){if((a=t[d])===l)return t.sizset;if(typeof a=="string"&&a.indexOf(f)===0){if(t.sizset)return t}else{t[d]=l;if(e(t,r,u))return t.sizset=!0,t;t.sizset=!1}}}else while(t=t[i])if(s||t.nodeType===1)if(e(t,r,u))return t}}function ft(e){return e.length>1?function(t,n,r){var i=e.length;while(i--)if(!e[i](t,n,r))return!1;return!0}:e[0]}function lt(e,t,n,r,i){var s,o=[],u=0,a=e.length,f=t!=null;for(;u<a;u++)if(s=e[u])if(!n||n(s,r,i))o.push(s),f&&t.push(u);return o}function ct(e,t,n,r,i,s){return r&&!r[d]&&(r=ct(r)),i&&!i[d]&&(i=ct(i,s)),N(function(s,o,u,a){var f,l,c,h=[],p=[],d=o.length,v=s||dt(t||"*",u.nodeType?[u]:u,[]),m=e&&(s||!t)?lt(v,h,e,u,a):v,g=n?i||(s?e:d||r)?[]:o:m;n&&n(m,g,u,a);if(r){f=lt(g,p),r(f,[],u,a),l=f.length;while(l--)if(c=f[l])g[p[l]]=!(m[p[l]]=c)}if(s){if(i||e){if(i){f=[],l=g.length;while(l--)(c=g[l])&&f.push(m[l]=c);i(null,g=[],f,a)}l=g.length;while(l--)(c=g[l])&&(f=i?T.call(s,c):h[l])>-1&&(s[f]=!(o[f]=c))}}else g=lt(g===o?g.splice(d,g.length):g),i?i(null,o,g,a):S.apply(o,g)})}function ht(e){var t,n,r,s=e.length,o=i.relative[e[0].type],u=o||i.relative[" "],a=o?1:0,f=at(function(e){return e===t},u,!0),l=at(function(e){return T.call(t,e)>-1},u,!0),h=[function(e,n,r){return!o&&(r||n!==c)||((t=n).nodeType?f(e,n,r):l(e,n,r))}];for(;a<s;a++)if(n=i.relative[e[a].type])h=[at(ft(h),n)];else{n=i.filter[e[a].type].apply(null,e[a].matches);if(n[d]){r=++a;for(;r<s;r++)if(i.relative[e[r].type])break;return ct(a>1&&ft(h),a>1&&e.slice(0,a-1).join("").replace(j,"$1"),n,a<r&&ht(e.slice(a,r)),r<s&&ht(e=e.slice(r)),r<s&&e.join(""))}h.push(n)}return ft(h)}function pt(e,t){var r=t.length>0,s=e.length>0,o=function(u,a,f,l,h){var p,d,v,m=[],y=0,w="0",x=u&&[],T=h!=null,N=c,C=u||s&&i.find.TAG("*",h&&a.parentNode||a),k=b+=N==null?1:Math.E;T&&(c=a!==g&&a,n=o.el);for(;(p=C[w])!=null;w++){if(s&&p){for(d=0;v=e[d];d++)if(v(p,a,f)){l.push(p);break}T&&(b=k,n=++o.el)}r&&((p=!v&&p)&&y--,u&&x.push(p))}y+=w;if(r&&w!==y){for(d=0;v=t[d];d++)v(x,m,a,f);if(u){if(y>0)while(w--)!x[w]&&!m[w]&&(m[w]=E.call(l));m=lt(m)}S.apply(l,m),T&&!u&&m.length>0&&y+t.length>1&&nt.uniqueSort(l)}return T&&(b=k,c=N),x};return o.el=0,r?N(o):o}function dt(e,t,n){var r=0,i=t.length;for(;r<i;r++)nt(e,t[r],n);return n}function vt(e,t,n,r,s){var o,u,f,l,c,h=ut(e),p=h.length;if(!r&&h.length===1){u=h[0]=h[0].slice(0);if(u.length>2&&(f=u[0]).type==="ID"&&t.nodeType===9&&!s&&i.relative[u[1].type]){t=i.find.ID(f.matches[0].replace($,""),t,s)[0];if(!t)return n;e=e.slice(u.shift().length)}for(o=J.POS.test(e)?-1:u.length-1;o>=0;o--){f=u[o];if(i.relative[l=f.type])break;if(c=i.find[l])if(r=c(f.matches[0].replace($,""),z.test(u[0].type)&&t.parentNode||t,s)){u.splice(o,1),e=r.length&&u.join("");if(!e)return S.apply(n,x.call(r,0)),n;break}}}return a(e,h)(r,t,s,n,z.test(e)),n}function mt(){}var n,r,i,s,o,u,a,f,l,c,h=!0,p="undefined",d=("sizcache"+Math.random()).replace(".",""),m=String,g=e.document,y=g.documentElement,b=0,w=0,E=[].pop,S=[].push,x=[].slice,T=[].indexOf||function(e){var t=0,n=this.length;for(;t<n;t++)if(this[t]===e)return t;return-1},N=function(e,t){return e[d]=t==null||t,e},C=function(){var e={},t=[];return N(function(n,r){return t.push(n)>i.cacheLength&&delete e[t.shift()],e[n+" "]=r},e)},k=C(),L=C(),A=C(),O="[\\x20\\t\\r\\n\\f]",M="(?:\\\\.|[-\\w]|[^\\x00-\\xa0])+",_=M.replace("w","w#"),D="([*^$|!~]?=)",P="\\["+O+"*("+M+")"+O+"*(?:"+D+O+"*(?:(['\"])((?:\\\\.|[^\\\\])*?)\\3|("+_+")|)|)"+O+"*\\]",H=":("+M+")(?:\\((?:(['\"])((?:\\\\.|[^\\\\])*?)\\2|([^()[\\]]*|(?:(?:"+P+")|[^:]|\\\\.)*|.*))\\)|)",B=":(even|odd|eq|gt|lt|nth|first|last)(?:\\("+O+"*((?:-\\d)?\\d*)"+O+"*\\)|)(?=[^-]|$)",j=new RegExp("^"+O+"+|((?:^|[^\\\\])(?:\\\\.)*)"+O+"+$","g"),F=new RegExp("^"+O+"*,"+O+"*"),I=new RegExp("^"+O+"*([\\x20\\t\\r\\n\\f>+~])"+O+"*"),q=new RegExp(H),R=/^(?:#([\w\-]+)|(\w+)|\.([\w\-]+))$/,U=/^:not/,z=/[\x20\t\r\n\f]*[+~]/,W=/:not\($/,X=/h\d/i,V=/input|select|textarea|button/i,$=/\\(?!\\)/g,J={ID:new RegExp("^#("+M+")"),CLASS:new RegExp("^\\.("+M+")"),NAME:new RegExp("^\\[name=['\"]?("+M+")['\"]?\\]"),TAG:new RegExp("^("+M.replace("w","w*")+")"),ATTR:new RegExp("^"+P),PSEUDO:new RegExp("^"+H),POS:new RegExp(B,"i"),CHILD:new RegExp("^:(only|nth|first|last)-child(?:\\("+O+"*(even|odd|(([+-]|)(\\d*)n|)"+O+"*(?:([+-]|)"+O+"*(\\d+)|))"+O+"*\\)|)","i"),needsContext:new RegExp("^"+O+"*[>+~]|"+B,"i")},K=function(e){var t=g.createElement("div");try{return e(t)}catch(n){return!1}finally{t=null}},Q=K(function(e){return e.appendChild(g.createComment("")),!e.getElementsByTagName("*").length}),G=K(function(e){return e.innerHTML="<a href='#'></a>",e.firstChild&&typeof e.firstChild.getAttribute!==p&&e.firstChild.getAttribute("href")==="#"}),Y=K(function(e){e.innerHTML="<select></select>";var t=typeof e.lastChild.getAttribute("multiple");return t!=="boolean"&&t!=="string"}),Z=K(function(e){return e.innerHTML="<div class='hidden e'></div><div class='hidden'></div>",!e.getElementsByClassName||!e.getElementsByClassName("e").length?!1:(e.lastChild.className="e",e.getElementsByClassName("e").length===2)}),et=K(function(e){e.id=d+0,e.innerHTML="<a name='"+d+"'></a><div name='"+d+"'></div>",y.insertBefore(e,y.firstChild);var t=g.getElementsByName&&g.getElementsByName(d).length===2+g.getElementsByName(d+0).length;return r=!g.getElementById(d),y.removeChild(e),t});try{x.call(y.childNodes,0)[0].nodeType}catch(tt){x=function(e){var t,n=[];for(;t=this[e];e++)n.push(t);return n}}nt.matches=function(e,t){return nt(e,null,null,t)},nt.matchesSelector=function(e,t){return nt(t,null,null,[e]).length>0},s=nt.getText=function(e){var t,n="",r=0,i=e.nodeType;if(i){if(i===1||i===9||i===11){if(typeof e.textContent=="string")return e.textContent;for(e=e.firstChild;e;e=e.nextSibling)n+=s(e)}else if(i===3||i===4)return e.nodeValue}else for(;t=e[r];r++)n+=s(t);return n},o=nt.isXML=function(e){var t=e&&(e.ownerDocument||e).documentElement;return t?t.nodeName!=="HTML":!1},u=nt.contains=y.contains?function(e,t){var n=e.nodeType===9?e.documentElement:e,r=t&&t.parentNode;return e===r||!!(r&&r.nodeType===1&&n.contains&&n.contains(r))}:y.compareDocumentPosition?function(e,t){return t&&!!(e.compareDocumentPosition(t)&16)}:function(e,t){while(t=t.parentNode)if(t===e)return!0;return!1},nt.attr=function(e,t){var n,r=o(e);return r||(t=t.toLowerCase()),(n=i.attrHandle[t])?n(e):r||Y?e.getAttribute(t):(n=e.getAttributeNode(t),n?typeof e[t]=="boolean"?e[t]?t:null:n.specified?n.value:null:null)},i=nt.selectors={cacheLength:50,createPseudo:N,match:J,attrHandle:G?{}:{href:function(e){return e.getAttribute("href",2)},type:function(e){return e.getAttribute("type")}},find:{ID:r?function(e,t,n){if(typeof t.getElementById!==p&&!n){var r=t.getElementById(e);return r&&r.parentNode?[r]:[]}}:function(e,n,r){if(typeof n.getElementById!==p&&!r){var i=n.getElementById(e);return i?i.id===e||typeof i.getAttributeNode!==p&&i.getAttributeNode("id").value===e?[i]:t:[]}},TAG:Q?function(e,t){if(typeof t.getElementsByTagName!==p)return t.getElementsByTagName(e)}:function(e,t){var n=t.getElementsByTagName(e);if(e==="*"){var r,i=[],s=0;for(;r=n[s];s++)r.nodeType===1&&i.push(r);return i}return n},NAME:et&&function(e,t){if(typeof t.getElementsByName!==p)return t.getElementsByName(name)},CLASS:Z&&function(e,t,n){if(typeof t.getElementsByClassName!==p&&!n)return t.getElementsByClassName(e)}},relative:{">":{dir:"parentNode",first:!0}," ":{dir:"parentNode"},"+":{dir:"previousSibling",first:!0},"~":{dir:"previousSibling"}},preFilter:{ATTR:function(e){return e[1]=e[1].replace($,""),e[3]=(e[4]||e[5]||"").replace($,""),e[2]==="~="&&(e[3]=" "+e[3]+" "),e.slice(0,4)},CHILD:function(e){return e[1]=e[1].toLowerCase(),e[1]==="nth"?(e[2]||nt.error(e[0]),e[3]=+(e[3]?e[4]+(e[5]||1):2*(e[2]==="even"||e[2]==="odd")),e[4]=+(e[6]+e[7]||e[2]==="odd")):e[2]&&nt.error(e[0]),e},PSEUDO:function(e){var t,n;if(J.CHILD.test(e[0]))return null;if(e[3])e[2]=e[3];else if(t=e[4])q.test(t)&&(n=ut(t,!0))&&(n=t.indexOf(")",t.length-n)-t.length)&&(t=t.slice(0,n),e[0]=e[0].slice(0,n)),e[2]=t;return e.slice(0,3)}},filter:{ID:r?function(e){return e=e.replace($,""),function(t){return t.getAttribute("id")===e}}:function(e){return e=e.replace($,""),function(t){var n=typeof t.getAttributeNode!==p&&t.getAttributeNode("id");return n&&n.value===e}},TAG:function(e){return e==="*"?function(){return!0}:(e=e.replace($,"").toLowerCase(),function(t){return t.nodeName&&t.nodeName.toLowerCase()===e})},CLASS:function(e){var t=k[d][e+" "];return t||(t=new RegExp("(^|"+O+")"+e+"("+O+"|$)"))&&k(e,function(e){return t.test(e.className||typeof e.getAttribute!==p&&e.getAttribute("class")||"")})},ATTR:function(e,t,n){return function(r,i){var s=nt.attr(r,e);return s==null?t==="!=":t?(s+="",t==="="?s===n:t==="!="?s!==n:t==="^="?n&&s.indexOf(n)===0:t==="*="?n&&s.indexOf(n)>-1:t==="$="?n&&s.substr(s.length-n.length)===n:t==="~="?(" "+s+" ").indexOf(n)>-1:t==="|="?s===n||s.substr(0,n.length+1)===n+"-":!1):!0}},CHILD:function(e,t,n,r){return e==="nth"?function(e){var t,i,s=e.parentNode;if(n===1&&r===0)return!0;if(s){i=0;for(t=s.firstChild;t;t=t.nextSibling)if(t.nodeType===1){i++;if(e===t)break}}return i-=r,i===n||i%n===0&&i/n>=0}:function(t){var n=t;switch(e){case"only":case"first":while(n=n.previousSibling)if(n.nodeType===1)return!1;if(e==="first")return!0;n=t;case"last":while(n=n.nextSibling)if(n.nodeType===1)return!1;return!0}}},PSEUDO:function(e,t){var n,r=i.pseudos[e]||i.setFilters[e.toLowerCase()]||nt.error("unsupported pseudo: "+e);return r[d]?r(t):r.length>1?(n=[e,e,"",t],i.setFilters.hasOwnProperty(e.toLowerCase())?N(function(e,n){var i,s=r(e,t),o=s.length;while(o--)i=T.call(e,s[o]),e[i]=!(n[i]=s[o])}):function(e){return r(e,0,n)}):r}},pseudos:{not:N(function(e){var t=[],n=[],r=a(e.replace(j,"$1"));return r[d]?N(function(e,t,n,i){var s,o=r(e,null,i,[]),u=e.length;while(u--)if(s=o[u])e[u]=!(t[u]=s)}):function(e,i,s){return t[0]=e,r(t,null,s,n),!n.pop()}}),has:N(function(e){return function(t){return nt(e,t).length>0}}),contains:N(function(e){return function(t){return(t.textContent||t.innerText||s(t)).indexOf(e)>-1}}),enabled:function(e){return e.disabled===!1},disabled:function(e){return e.disabled===!0},checked:function(e){var t=e.nodeName.toLowerCase();return t==="input"&&!!e.checked||t==="option"&&!!e.selected},selected:function(e){return e.parentNode&&e.parentNode.selectedIndex,e.selected===!0},parent:function(e){return!i.pseudos.empty(e)},empty:function(e){var t;e=e.firstChild;while(e){if(e.nodeName>"@"||(t=e.nodeType)===3||t===4)return!1;e=e.nextSibling}return!0},header:function(e){return X.test(e.nodeName)},text:function(e){var t,n;return e.nodeName.toLowerCase()==="input"&&(t=e.type)==="text"&&((n=e.getAttribute("type"))==null||n.toLowerCase()===t)},radio:rt("radio"),checkbox:rt("checkbox"),file:rt("file"),password:rt("password"),image:rt("image"),submit:it("submit"),reset:it("reset"),button:function(e){var t=e.nodeName.toLowerCase();return t==="input"&&e.type==="button"||t==="button"},input:function(e){return V.test(e.nodeName)},focus:function(e){var t=e.ownerDocument;return e===t.activeElement&&(!t.hasFocus||t.hasFocus())&&!!(e.type||e.href||~e.tabIndex)},active:function(e){return e===e.ownerDocument.activeElement},first:st(function(){return[0]}),last:st(function(e,t){return[t-1]}),eq:st(function(e,t,n){return[n<0?n+t:n]}),even:st(function(e,t){for(var n=0;n<t;n+=2)e.push(n);return e}),odd:st(function(e,t){for(var n=1;n<t;n+=2)e.push(n);return e}),lt:st(function(e,t,n){for(var r=n<0?n+t:n;--r>=0;)e.push(r);return e}),gt:st(function(e,t,n){for(var r=n<0?n+t:n;++r<t;)e.push(r);return e})}},f=y.compareDocumentPosition?function(e,t){return e===t?(l=!0,0):(!e.compareDocumentPosition||!t.compareDocumentPosition?e.compareDocumentPosition:e.compareDocumentPosition(t)&4)?-1:1}:function(e,t){if(e===t)return l=!0,0;if(e.sourceIndex&&t.sourceIndex)return e.sourceIndex-t.sourceIndex;var n,r,i=[],s=[],o=e.parentNode,u=t.parentNode,a=o;if(o===u)return ot(e,t);if(!o)return-1;if(!u)return 1;while(a)i.unshift(a),a=a.parentNode;a=u;while(a)s.unshift(a),a=a.parentNode;n=i.length,r=s.length;for(var f=0;f<n&&f<r;f++)if(i[f]!==s[f])return ot(i[f],s[f]);return f===n?ot(e,s[f],-1):ot(i[f],t,1)},[0,0].sort(f),h=!l,nt.uniqueSort=function(e){var t,n=[],r=1,i=0;l=h,e.sort(f);if(l){for(;t=e[r];r++)t===e[r-1]&&(i=n.push(r));while(i--)e.splice(n[i],1)}return e},nt.error=function(e){throw new Error("Syntax error, unrecognized expression: "+e)},a=nt.compile=function(e,t){var n,r=[],i=[],s=A[d][e+" "];if(!s){t||(t=ut(e)),n=t.length;while(n--)s=ht(t[n]),s[d]?r.push(s):i.push(s);s=A(e,pt(i,r))}return s},g.querySelectorAll&&function(){var e,t=vt,n=/'|\\/g,r=/\=[\x20\t\r\n\f]*([^'"\]]*)[\x20\t\r\n\f]*\]/g,i=[":focus"],s=[":active"],u=y.matchesSelector||y.mozMatchesSelector||y.webkitMatchesSelector||y.oMatchesSelector||y.msMatchesSelector;K(function(e){e.innerHTML="<select><option selected=''></option></select>",e.querySelectorAll("[selected]").length||i.push("\\["+O+"*(?:checked|disabled|ismap|multiple|readonly|selected|value)"),e.querySelectorAll(":checked").length||i.push(":checked")}),K(function(e){e.innerHTML="<p test=''></p>",e.querySelectorAll("[test^='']").length&&i.push("[*^$]="+O+"*(?:\"\"|'')"),e.innerHTML="<input type='hidden'/>",e.querySelectorAll(":enabled").length||i.push(":enabled",":disabled")}),i=new RegExp(i.join("|")),vt=function(e,r,s,o,u){if(!o&&!u&&!i.test(e)){var a,f,l=!0,c=d,h=r,p=r.nodeType===9&&e;if(r.nodeType===1&&r.nodeName.toLowerCase()!=="object"){a=ut(e),(l=r.getAttribute("id"))?c=l.replace(n,"\\$&"):r.setAttribute("id",c),c="[id='"+c+"'] ",f=a.length;while(f--)a[f]=c+a[f].join("");h=z.test(e)&&r.parentNode||r,p=a.join(",")}if(p)try{return S.apply(s,x.call(h.querySelectorAll(p),0)),s}catch(v){}finally{l||r.removeAttribute("id")}}return t(e,r,s,o,u)},u&&(K(function(t){e=u.call(t,"div");try{u.call(t,"[test!='']:sizzle"),s.push("!=",H)}catch(n){}}),s=new RegExp(s.join("|")),nt.matchesSelector=function(t,n){n=n.replace(r,"='$1']");if(!o(t)&&!s.test(n)&&!i.test(n))try{var a=u.call(t,n);if(a||e||t.document&&t.document.nodeType!==11)return a}catch(f){}return nt(n,null,null,[t]).length>0})}(),i.pseudos.nth=i.pseudos.eq,i.filters=mt.prototype=i.pseudos,i.setFilters=new mt,nt.attr=v.attr,v.find=nt,v.expr=nt.selectors,v.expr[":"]=v.expr.pseudos,v.unique=nt.uniqueSort,v.text=nt.getText,v.isXMLDoc=nt.isXML,v.contains=nt.contains}(e);var nt=/Until$/,rt=/^(?:parents|prev(?:Until|All))/,it=/^.[^:#\[\.,]*$/,st=v.expr.match.needsContext,ot={children:!0,contents:!0,next:!0,prev:!0};v.fn.extend({find:function(e){var t,n,r,i,s,o,u=this;if(typeof e!="string")return v(e).filter(function(){for(t=0,n=u.length;t<n;t++)if(v.contains(u[t],this))return!0});o=this.pushStack("","find",e);for(t=0,n=this.length;t<n;t++){r=o.length,v.find(e,this[t],o);if(t>0)for(i=r;i<o.length;i++)for(s=0;s<r;s++)if(o[s]===o[i]){o.splice(i--,1);break}}return o},has:function(e){var t,n=v(e,this),r=n.length;return this.filter(function(){for(t=0;t<r;t++)if(v.contains(this,n[t]))return!0})},not:function(e){return this.pushStack(ft(this,e,!1),"not",e)},filter:function(e){return this.pushStack(ft(this,e,!0),"filter",e)},is:function(e){return!!e&&(typeof e=="string"?st.test(e)?v(e,this.context).index(this[0])>=0:v.filter(e,this).length>0:this.filter(e).length>0)},closest:function(e,t){var n,r=0,i=this.length,s=[],o=st.test(e)||typeof e!="string"?v(e,t||this.context):0;for(;r<i;r++){n=this[r];while(n&&n.ownerDocument&&n!==t&&n.nodeType!==11){if(o?o.index(n)>-1:v.find.matchesSelector(n,e)){s.push(n);break}n=n.parentNode}}return s=s.length>1?v.unique(s):s,this.pushStack(s,"closest",e)},index:function(e){return e?typeof e=="string"?v.inArray(this[0],v(e)):v.inArray(e.jquery?e[0]:e,this):this[0]&&this[0].parentNode?this.prevAll().length:-1},add:function(e,t){var n=typeof e=="string"?v(e,t):v.makeArray(e&&e.nodeType?[e]:e),r=v.merge(this.get(),n);return this.pushStack(ut(n[0])||ut(r[0])?r:v.unique(r))},addBack:function(e){return this.add(e==null?this.prevObject:this.prevObject.filter(e))}}),v.fn.andSelf=v.fn.addBack,v.each({parent:function(e){var t=e.parentNode;return t&&t.nodeType!==11?t:null},parents:function(e){return v.dir(e,"parentNode")},parentsUntil:function(e,t,n){return v.dir(e,"parentNode",n)},next:function(e){return at(e,"nextSibling")},prev:function(e){return at(e,"previousSibling")},nextAll:function(e){return v.dir(e,"nextSibling")},prevAll:function(e){return v.dir(e,"previousSibling")},nextUntil:function(e,t,n){return v.dir(e,"nextSibling",n)},prevUntil:function(e,t,n){return v.dir(e,"previousSibling",n)},siblings:function(e){return v.sibling((e.parentNode||{}).firstChild,e)},children:function(e){return v.sibling(e.firstChild)},contents:function(e){return v.nodeName(e,"iframe")?e.contentDocument||e.contentWindow.document:v.merge([],e.childNodes)}},function(e,t){v.fn[e]=function(n,r){var i=v.map(this,t,n);return nt.test(e)||(r=n),r&&typeof r=="string"&&(i=v.filter(r,i)),i=this.length>1&&!ot[e]?v.unique(i):i,this.length>1&&rt.test(e)&&(i=i.reverse()),this.pushStack(i,e,l.call(arguments).join(","))}}),v.extend({filter:function(e,t,n){return n&&(e=":not("+e+")"),t.length===1?v.find.matchesSelector(t[0],e)?[t[0]]:[]:v.find.matches(e,t)},dir:function(e,n,r){var i=[],s=e[n];while(s&&s.nodeType!==9&&(r===t||s.nodeType!==1||!v(s).is(r)))s.nodeType===1&&i.push(s),s=s[n];return i},sibling:function(e,t){var n=[];for(;e;e=e.nextSibling)e.nodeType===1&&e!==t&&n.push(e);return n}});var ct="abbr|article|aside|audio|bdi|canvas|data|datalist|details|figcaption|figure|footer|header|hgroup|mark|meter|nav|output|progress|section|summary|time|video",ht=/ jQuery\d+="(?:null|\d+)"/g,pt=/^\s+/,dt=/<(?!area|br|col|embed|hr|img|input|link|meta|param)(([\w:]+)[^>]*)\/>/gi,vt=/<([\w:]+)/,mt=/<tbody/i,gt=/<|&#?\w+;/,yt=/<(?:script|style|link)/i,bt=/<(?:script|object|embed|option|style)/i,wt=new RegExp("<(?:"+ct+")[\\s/>]","i"),Et=/^(?:checkbox|radio)$/,St=/checked\s*(?:[^=]|=\s*.checked.)/i,xt=/\/(java|ecma)script/i,Tt=/^\s*<!(?:\[CDATA\[|\-\-)|[\]\-]{2}>\s*$/g,Nt={option:[1,"<select multiple='multiple'>","</select>"],legend:[1,"<fieldset>","</fieldset>"],thead:[1,"<table>","</table>"],tr:[2,"<table><tbody>","</tbody></table>"],td:[3,"<table><tbody><tr>","</tr></tbody></table>"],col:[2,"<table><tbody></tbody><colgroup>","</colgroup></table>"],area:[1,"<map>","</map>"],_default:[0,"",""]},Ct=lt(i),kt=Ct.appendChild(i.createElement("div"));Nt.optgroup=Nt.option,Nt.tbody=Nt.tfoot=Nt.colgroup=Nt.caption=Nt.thead,Nt.th=Nt.td,v.support.htmlSerialize||(Nt._default=[1,"X<div>","</div>"]),v.fn.extend({text:function(e){return v.access(this,function(e){return e===t?v.text(this):this.empty().append((this[0]&&this[0].ownerDocument||i).createTextNode(e))},null,e,arguments.length)},wrapAll:function(e){if(v.isFunction(e))return this.each(function(t){v(this).wrapAll(e.call(this,t))});if(this[0]){var t=v(e,this[0].ownerDocument).eq(0).clone(!0);this[0].parentNode&&t.insertBefore(this[0]),t.map(function(){var e=this;while(e.firstChild&&e.firstChild.nodeType===1)e=e.firstChild;return e}).append(this)}return this},wrapInner:function(e){return v.isFunction(e)?this.each(function(t){v(this).wrapInner(e.call(this,t))}):this.each(function(){var t=v(this),n=t.contents();n.length?n.wrapAll(e):t.append(e)})},wrap:function(e){var t=v.isFunction(e);return this.each(function(n){v(this).wrapAll(t?e.call(this,n):e)})},unwrap:function(){return this.parent().each(function(){v.nodeName(this,"body")||v(this).replaceWith(this.childNodes)}).end()},append:function(){return this.domManip(arguments,!0,function(e){(this.nodeType===1||this.nodeType===11)&&this.appendChild(e)})},prepend:function(){return this.domManip(arguments,!0,function(e){(this.nodeType===1||this.nodeType===11)&&this.insertBefore(e,this.firstChild)})},before:function(){if(!ut(this[0]))return this.domManip(arguments,!1,function(e){this.parentNode.insertBefore(e,this)});if(arguments.length){var e=v.clean(arguments);return this.pushStack(v.merge(e,this),"before",this.selector)}},after:function(){if(!ut(this[0]))return this.domManip(arguments,!1,function(e){this.parentNode.insertBefore(e,this.nextSibling)});if(arguments.length){var e=v.clean(arguments);return this.pushStack(v.merge(this,e),"after",this.selector)}},remove:function(e,t){var n,r=0;for(;(n=this[r])!=null;r++)if(!e||v.filter(e,[n]).length)!t&&n.nodeType===1&&(v.cleanData(n.getElementsByTagName("*")),v.cleanData([n])),n.parentNode&&n.parentNode.removeChild(n);return this},empty:function(){var e,t=0;for(;(e=this[t])!=null;t++){e.nodeType===1&&v.cleanData(e.getElementsByTagName("*"));while(e.firstChild)e.removeChild(e.firstChild)}return this},clone:function(e,t){return e=e==null?!1:e,t=t==null?e:t,this.map(function(){return v.clone(this,e,t)})},html:function(e){return v.access(this,function(e){var n=this[0]||{},r=0,i=this.length;if(e===t)return n.nodeType===1?n.innerHTML.replace(ht,""):t;if(typeof e=="string"&&!yt.test(e)&&(v.support.htmlSerialize||!wt.test(e))&&(v.support.leadingWhitespace||!pt.test(e))&&!Nt[(vt.exec(e)||["",""])[1].toLowerCase()]){e=e.replace(dt,"<$1></$2>");try{for(;r<i;r++)n=this[r]||{},n.nodeType===1&&(v.cleanData(n.getElementsByTagName("*")),n.innerHTML=e);n=0}catch(s){}}n&&this.empty().append(e)},null,e,arguments.length)},replaceWith:function(e){return ut(this[0])?this.length?this.pushStack(v(v.isFunction(e)?e():e),"replaceWith",e):this:v.isFunction(e)?this.each(function(t){var n=v(this),r=n.html();n.replaceWith(e.call(this,t,r))}):(typeof e!="string"&&(e=v(e).detach()),this.each(function(){var t=this.nextSibling,n=this.parentNode;v(this).remove(),t?v(t).before(e):v(n).append(e)}))},detach:function(e){return this.remove(e,!0)},domManip:function(e,n,r){e=[].concat.apply([],e);var i,s,o,u,a=0,f=e[0],l=[],c=this.length;if(!v.support.checkClone&&c>1&&typeof f=="string"&&St.test(f))return this.each(function(){v(this).domManip(e,n,r)});if(v.isFunction(f))return this.each(function(i){var s=v(this);e[0]=f.call(this,i,n?s.html():t),s.domManip(e,n,r)});if(this[0]){i=v.buildFragment(e,this,l),o=i.fragment,s=o.firstChild,o.childNodes.length===1&&(o=s);if(s){n=n&&v.nodeName(s,"tr");for(u=i.cacheable||c-1;a<c;a++)r.call(n&&v.nodeName(this[a],"table")?Lt(this[a],"tbody"):this[a],a===u?o:v.clone(o,!0,!0))}o=s=null,l.length&&v.each(l,function(e,t){t.src?v.ajax?v.ajax({url:t.src,type:"GET",dataType:"script",async:!1,global:!1,"throws":!0}):v.error("no ajax"):v.globalEval((t.text||t.textContent||t.innerHTML||"").replace(Tt,"")),t.parentNode&&t.parentNode.removeChild(t)})}return this}}),v.buildFragment=function(e,n,r){var s,o,u,a=e[0];return n=n||i,n=!n.nodeType&&n[0]||n,n=n.ownerDocument||n,e.length===1&&typeof a=="string"&&a.length<512&&n===i&&a.charAt(0)==="<"&&!bt.test(a)&&(v.support.checkClone||!St.test(a))&&(v.support.html5Clone||!wt.test(a))&&(o=!0,s=v.fragments[a],u=s!==t),s||(s=n.createDocumentFragment(),v.clean(e,n,s,r),o&&(v.fragments[a]=u&&s)),{fragment:s,cacheable:o}},v.fragments={},v.each({appendTo:"append",prependTo:"prepend",insertBefore:"before",insertAfter:"after",replaceAll:"replaceWith"},function(e,t){v.fn[e]=function(n){var r,i=0,s=[],o=v(n),u=o.length,a=this.length===1&&this[0].parentNode;if((a==null||a&&a.nodeType===11&&a.childNodes.length===1)&&u===1)return o[t](this[0]),this;for(;i<u;i++)r=(i>0?this.clone(!0):this).get(),v(o[i])[t](r),s=s.concat(r);return this.pushStack(s,e,o.selector)}}),v.extend({clone:function(e,t,n){var r,i,s,o;v.support.html5Clone||v.isXMLDoc(e)||!wt.test("<"+e.nodeName+">")?o=e.cloneNode(!0):(kt.innerHTML=e.outerHTML,kt.removeChild(o=kt.firstChild));if((!v.support.noCloneEvent||!v.support.noCloneChecked)&&(e.nodeType===1||e.nodeType===11)&&!v.isXMLDoc(e)){Ot(e,o),r=Mt(e),i=Mt(o);for(s=0;r[s];++s)i[s]&&Ot(r[s],i[s])}if(t){At(e,o);if(n){r=Mt(e),i=Mt(o);for(s=0;r[s];++s)At(r[s],i[s])}}return r=i=null,o},clean:function(e,t,n,r){var s,o,u,a,f,l,c,h,p,d,m,g,y=t===i&&Ct,b=[];if(!t||typeof t.createDocumentFragment=="undefined")t=i;for(s=0;(u=e[s])!=null;s++){typeof u=="number"&&(u+="");if(!u)continue;if(typeof u=="string")if(!gt.test(u))u=t.createTextNode(u);else{y=y||lt(t),c=t.createElement("div"),y.appendChild(c),u=u.replace(dt,"<$1></$2>"),a=(vt.exec(u)||["",""])[1].toLowerCase(),f=Nt[a]||Nt._default,l=f[0],c.innerHTML=f[1]+u+f[2];while(l--)c=c.lastChild;if(!v.support.tbody){h=mt.test(u),p=a==="table"&&!h?c.firstChild&&c.firstChild.childNodes:f[1]==="<table>"&&!h?c.childNodes:[];for(o=p.length-1;o>=0;--o)v.nodeName(p[o],"tbody")&&!p[o].childNodes.length&&p[o].parentNode.removeChild(p[o])}!v.support.leadingWhitespace&&pt.test(u)&&c.insertBefore(t.createTextNode(pt.exec(u)[0]),c.firstChild),u=c.childNodes,c.parentNode.removeChild(c)}u.nodeType?b.push(u):v.merge(b,u)}c&&(u=c=y=null);if(!v.support.appendChecked)for(s=0;(u=b[s])!=null;s++)v.nodeName(u,"input")?_t(u):typeof u.getElementsByTagName!="undefined"&&v.grep(u.getElementsByTagName("input"),_t);if(n){m=function(e){if(!e.type||xt.test(e.type))return r?r.push(e.parentNode?e.parentNode.removeChild(e):e):n.appendChild(e)};for(s=0;(u=b[s])!=null;s++)if(!v.nodeName(u,"script")||!m(u))n.appendChild(u),typeof u.getElementsByTagName!="undefined"&&(g=v.grep(v.merge([],u.getElementsByTagName("script")),m),b.splice.apply(b,[s+1,0].concat(g)),s+=g.length)}return b},cleanData:function(e,t){var n,r,i,s,o=0,u=v.expando,a=v.cache,f=v.support.deleteExpando,l=v.event.special;for(;(i=e[o])!=null;o++)if(t||v.acceptData(i)){r=i[u],n=r&&a[r];if(n){if(n.events)for(s in n.events)l[s]?v.event.remove(i,s):v.removeEvent(i,s,n.handle);a[r]&&(delete a[r],f?delete i[u]:i.removeAttribute?i.removeAttribute(u):i[u]=null,v.deletedIds.push(r))}}}}),function(){var e,t;v.uaMatch=function(e){e=e.toLowerCase();var t=/(chrome)[ \/]([\w.]+)/.exec(e)||/(webkit)[ \/]([\w.]+)/.exec(e)||/(opera)(?:.*version|)[ \/]([\w.]+)/.exec(e)||/(msie) ([\w.]+)/.exec(e)||e.indexOf("compatible")<0&&/(mozilla)(?:.*? rv:([\w.]+)|)/.exec(e)||[];return{browser:t[1]||"",version:t[2]||"0"}},e=v.uaMatch(o.userAgent),t={},e.browser&&(t[e.browser]=!0,t.version=e.version),t.chrome?t.webkit=!0:t.webkit&&(t.safari=!0),v.browser=t,v.sub=function(){function e(t,n){return new e.fn.init(t,n)}v.extend(!0,e,this),e.superclass=this,e.fn=e.prototype=this(),e.fn.constructor=e,e.sub=this.sub,e.fn.init=function(r,i){return i&&i instanceof v&&!(i instanceof e)&&(i=e(i)),v.fn.init.call(this,r,i,t)},e.fn.init.prototype=e.fn;var t=e(i);return e}}();var Dt,Pt,Ht,Bt=/alpha\([^)]*\)/i,jt=/opacity=([^)]*)/,Ft=/^(top|right|bottom|left)$/,It=/^(none|table(?!-c[ea]).+)/,qt=/^margin/,Rt=new RegExp("^("+m+")(.*)$","i"),Ut=new RegExp("^("+m+")(?!px)[a-z%]+$","i"),zt=new RegExp("^([-+])=("+m+")","i"),Wt={BODY:"block"},Xt={position:"absolute",visibility:"hidden",display:"block"},Vt={letterSpacing:0,fontWeight:400},$t=["Top","Right","Bottom","Left"],Jt=["Webkit","O","Moz","ms"],Kt=v.fn.toggle;v.fn.extend({css:function(e,n){return v.access(this,function(e,n,r){return r!==t?v.style(e,n,r):v.css(e,n)},e,n,arguments.length>1)},show:function(){return Yt(this,!0)},hide:function(){return Yt(this)},toggle:function(e,t){var n=typeof e=="boolean";return v.isFunction(e)&&v.isFunction(t)?Kt.apply(this,arguments):this.each(function(){(n?e:Gt(this))?v(this).show():v(this).hide()})}}),v.extend({cssHooks:{opacity:{get:function(e,t){if(t){var n=Dt(e,"opacity");return n===""?"1":n}}}},cssNumber:{fillOpacity:!0,fontWeight:!0,lineHeight:!0,opacity:!0,orphans:!0,widows:!0,zIndex:!0,zoom:!0},cssProps:{"float":v.support.cssFloat?"cssFloat":"styleFloat"},style:function(e,n,r,i){if(!e||e.nodeType===3||e.nodeType===8||!e.style)return;var s,o,u,a=v.camelCase(n),f=e.style;n=v.cssProps[a]||(v.cssProps[a]=Qt(f,a)),u=v.cssHooks[n]||v.cssHooks[a];if(r===t)return u&&"get"in u&&(s=u.get(e,!1,i))!==t?s:f[n];o=typeof r,o==="string"&&(s=zt.exec(r))&&(r=(s[1]+1)*s[2]+parseFloat(v.css(e,n)),o="number");if(r==null||o==="number"&&isNaN(r))return;o==="number"&&!v.cssNumber[a]&&(r+="px");if(!u||!("set"in u)||(r=u.set(e,r,i))!==t)try{f[n]=r}catch(l){}},css:function(e,n,r,i){var s,o,u,a=v.camelCase(n);return n=v.cssProps[a]||(v.cssProps[a]=Qt(e.style,a)),u=v.cssHooks[n]||v.cssHooks[a],u&&"get"in u&&(s=u.get(e,!0,i)),s===t&&(s=Dt(e,n)),s==="normal"&&n in Vt&&(s=Vt[n]),r||i!==t?(o=parseFloat(s),r||v.isNumeric(o)?o||0:s):s},swap:function(e,t,n){var r,i,s={};for(i in t)s[i]=e.style[i],e.style[i]=t[i];r=n.call(e);for(i in t)e.style[i]=s[i];return r}}),e.getComputedStyle?Dt=function(t,n){var r,i,s,o,u=e.getComputedStyle(t,null),a=t.style;return u&&(r=u.getPropertyValue(n)||u[n],r===""&&!v.contains(t.ownerDocument,t)&&(r=v.style(t,n)),Ut.test(r)&&qt.test(n)&&(i=a.width,s=a.minWidth,o=a.maxWidth,a.minWidth=a.maxWidth=a.width=r,r=u.width,a.width=i,a.minWidth=s,a.maxWidth=o)),r}:i.documentElement.currentStyle&&(Dt=function(e,t){var n,r,i=e.currentStyle&&e.currentStyle[t],s=e.style;return i==null&&s&&s[t]&&(i=s[t]),Ut.test(i)&&!Ft.test(t)&&(n=s.left,r=e.runtimeStyle&&e.runtimeStyle.left,r&&(e.runtimeStyle.left=e.currentStyle.left),s.left=t==="fontSize"?"1em":i,i=s.pixelLeft+"px",s.left=n,r&&(e.runtimeStyle.left=r)),i===""?"auto":i}),v.each(["height","width"],function(e,t){v.cssHooks[t]={get:function(e,n,r){if(n)return e.offsetWidth===0&&It.test(Dt(e,"display"))?v.swap(e,Xt,function(){return tn(e,t,r)}):tn(e,t,r)},set:function(e,n,r){return Zt(e,n,r?en(e,t,r,v.support.boxSizing&&v.css(e,"boxSizing")==="border-box"):0)}}}),v.support.opacity||(v.cssHooks.opacity={get:function(e,t){return jt.test((t&&e.currentStyle?e.currentStyle.filter:e.style.filter)||"")?.01*parseFloat(RegExp.$1)+"":t?"1":""},set:function(e,t){var n=e.style,r=e.currentStyle,i=v.isNumeric(t)?"alpha(opacity="+t*100+")":"",s=r&&r.filter||n.filter||"";n.zoom=1;if(t>=1&&v.trim(s.replace(Bt,""))===""&&n.removeAttribute){n.removeAttribute("filter");if(r&&!r.filter)return}n.filter=Bt.test(s)?s.replace(Bt,i):s+" "+i}}),v(function(){v.support.reliableMarginRight||(v.cssHooks.marginRight={get:function(e,t){return v.swap(e,{display:"inline-block"},function(){if(t)return Dt(e,"marginRight")})}}),!v.support.pixelPosition&&v.fn.position&&v.each(["top","left"],function(e,t){v.cssHooks[t]={get:function(e,n){if(n){var r=Dt(e,t);return Ut.test(r)?v(e).position()[t]+"px":r}}}})}),v.expr&&v.expr.filters&&(v.expr.filters.hidden=function(e){return e.offsetWidth===0&&e.offsetHeight===0||!v.support.reliableHiddenOffsets&&(e.style&&e.style.display||Dt(e,"display"))==="none"},v.expr.filters.visible=function(e){return!v.expr.filters.hidden(e)}),v.each({margin:"",padding:"",border:"Width"},function(e,t){v.cssHooks[e+t]={expand:function(n){var r,i=typeof n=="string"?n.split(" "):[n],s={};for(r=0;r<4;r++)s[e+$t[r]+t]=i[r]||i[r-2]||i[0];return s}},qt.test(e)||(v.cssHooks[e+t].set=Zt)});var rn=/%20/g,sn=/\[\]$/,on=/\r?\n/g,un=/^(?:color|date|datetime|datetime-local|email|hidden|month|number|password|range|search|tel|text|time|url|week)$/i,an=/^(?:select|textarea)/i;v.fn.extend({serialize:function(){return v.param(this.serializeArray())},serializeArray:function(){return this.map(function(){return this.elements?v.makeArray(this.elements):this}).filter(function(){return this.name&&!this.disabled&&(this.checked||an.test(this.nodeName)||un.test(this.type))}).map(function(e,t){var n=v(this).val();return n==null?null:v.isArray(n)?v.map(n,function(e,n){return{name:t.name,value:e.replace(on,"\r\n")}}):{name:t.name,value:n.replace(on,"\r\n")}}).get()}}),v.param=function(e,n){var r,i=[],s=function(e,t){t=v.isFunction(t)?t():t==null?"":t,i[i.length]=encodeURIComponent(e)+"="+encodeURIComponent(t)};n===t&&(n=v.ajaxSettings&&v.ajaxSettings.traditional);if(v.isArray(e)||e.jquery&&!v.isPlainObject(e))v.each(e,function(){s(this.name,this.value)});else for(r in e)fn(r,e[r],n,s);return i.join("&").replace(rn,"+")};var ln,cn,hn=/#.*$/,pn=/^(.*?):[ \t]*([^\r\n]*)\r?$/mg,dn=/^(?:about|app|app\-storage|.+\-extension|file|res|widget):$/,vn=/^(?:GET|HEAD)$/,mn=/^\/\//,gn=/\?/,yn=/<script\b[^<]*(?:(?!<\/script>)<[^<]*)*<\/script>/gi,bn=/([?&])_=[^&]*/,wn=/^([\w\+\.\-]+:)(?:\/\/([^\/?#:]*)(?::(\d+)|)|)/,En=v.fn.load,Sn={},xn={},Tn=["*/"]+["*"];try{cn=s.href}catch(Nn){cn=i.createElement("a"),cn.href="",cn=cn.href}ln=wn.exec(cn.toLowerCase())||[],v.fn.load=function(e,n,r){if(typeof e!="string"&&En)return En.apply(this,arguments);if(!this.length)return this;var i,s,o,u=this,a=e.indexOf(" ");return a>=0&&(i=e.slice(a,e.length),e=e.slice(0,a)),v.isFunction(n)?(r=n,n=t):n&&typeof n=="object"&&(s="POST"),v.ajax({url:e,type:s,dataType:"html",data:n,complete:function(e,t){r&&u.each(r,o||[e.responseText,t,e])}}).done(function(e){o=arguments,u.html(i?v("<div>").append(e.replace(yn,"")).find(i):e)}),this},v.each("ajaxStart ajaxStop ajaxComplete ajaxError ajaxSuccess ajaxSend".split(" "),function(e,t){v.fn[t]=function(e){return this.on(t,e)}}),v.each(["get","post"],function(e,n){v[n]=function(e,r,i,s){return v.isFunction(r)&&(s=s||i,i=r,r=t),v.ajax({type:n,url:e,data:r,success:i,dataType:s})}}),v.extend({getScript:function(e,n){return v.get(e,t,n,"script")},getJSON:function(e,t,n){return v.get(e,t,n,"json")},ajaxSetup:function(e,t){return t?Ln(e,v.ajaxSettings):(t=e,e=v.ajaxSettings),Ln(e,t),e},ajaxSettings:{url:cn,isLocal:dn.test(ln[1]),global:!0,type:"GET",contentType:"application/x-www-form-urlencoded; charset=UTF-8",processData:!0,async:!0,accepts:{xml:"application/xml, text/xml",html:"text/html",text:"text/plain",json:"application/json, text/javascript","*":Tn},contents:{xml:/xml/,html:/html/,json:/json/},responseFields:{xml:"responseXML",text:"responseText"},converters:{"* text":e.String,"text html":!0,"text json":v.parseJSON,"text xml":v.parseXML},flatOptions:{context:!0,url:!0}},ajaxPrefilter:Cn(Sn),ajaxTransport:Cn(xn),ajax:function(e,n){function T(e,n,s,a){var l,y,b,w,S,T=n;if(E===2)return;E=2,u&&clearTimeout(u),o=t,i=a||"",x.readyState=e>0?4:0,s&&(w=An(c,x,s));if(e>=200&&e<300||e===304)c.ifModified&&(S=x.getResponseHeader("Last-Modified"),S&&(v.lastModified[r]=S),S=x.getResponseHeader("Etag"),S&&(v.etag[r]=S)),e===304?(T="notmodified",l=!0):(l=On(c,w),T=l.state,y=l.data,b=l.error,l=!b);else{b=T;if(!T||e)T="error",e<0&&(e=0)}x.status=e,x.statusText=(n||T)+"",l?d.resolveWith(h,[y,T,x]):d.rejectWith(h,[x,T,b]),x.statusCode(g),g=t,f&&p.trigger("ajax"+(l?"Success":"Error"),[x,c,l?y:b]),m.fireWith(h,[x,T]),f&&(p.trigger("ajaxComplete",[x,c]),--v.active||v.event.trigger("ajaxStop"))}typeof e=="object"&&(n=e,e=t),n=n||{};var r,i,s,o,u,a,f,l,c=v.ajaxSetup({},n),h=c.context||c,p=h!==c&&(h.nodeType||h instanceof v)?v(h):v.event,d=v.Deferred(),m=v.Callbacks("once memory"),g=c.statusCode||{},b={},w={},E=0,S="canceled",x={readyState:0,setRequestHeader:function(e,t){if(!E){var n=e.toLowerCase();e=w[n]=w[n]||e,b[e]=t}return this},getAllResponseHeaders:function(){return E===2?i:null},getResponseHeader:function(e){var n;if(E===2){if(!s){s={};while(n=pn.exec(i))s[n[1].toLowerCase()]=n[2]}n=s[e.toLowerCase()]}return n===t?null:n},overrideMimeType:function(e){return E||(c.mimeType=e),this},abort:function(e){return e=e||S,o&&o.abort(e),T(0,e),this}};d.promise(x),x.success=x.done,x.error=x.fail,x.complete=m.add,x.statusCode=function(e){if(e){var t;if(E<2)for(t in e)g[t]=[g[t],e[t]];else t=e[x.status],x.always(t)}return this},c.url=((e||c.url)+"").replace(hn,"").replace(mn,ln[1]+"//"),c.dataTypes=v.trim(c.dataType||"*").toLowerCase().split(y),c.crossDomain==null&&(a=wn.exec(c.url.toLowerCase()),c.crossDomain=!(!a||a[1]===ln[1]&&a[2]===ln[2]&&(a[3]||(a[1]==="http:"?80:443))==(ln[3]||(ln[1]==="http:"?80:443)))),c.data&&c.processData&&typeof c.data!="string"&&(c.data=v.param(c.data,c.traditional)),kn(Sn,c,n,x);if(E===2)return x;f=c.global,c.type=c.type.toUpperCase(),c.hasContent=!vn.test(c.type),f&&v.active++===0&&v.event.trigger("ajaxStart");if(!c.hasContent){c.data&&(c.url+=(gn.test(c.url)?"&":"?")+c.data,delete c.data),r=c.url;if(c.cache===!1){var N=v.now(),C=c.url.replace(bn,"$1_="+N);c.url=C+(C===c.url?(gn.test(c.url)?"&":"?")+"_="+N:"")}}(c.data&&c.hasContent&&c.contentType!==!1||n.contentType)&&x.setRequestHeader("Content-Type",c.contentType),c.ifModified&&(r=r||c.url,v.lastModified[r]&&x.setRequestHeader("If-Modified-Since",v.lastModified[r]),v.etag[r]&&x.setRequestHeader("If-None-Match",v.etag[r])),x.setRequestHeader("Accept",c.dataTypes[0]&&c.accepts[c.dataTypes[0]]?c.accepts[c.dataTypes[0]]+(c.dataTypes[0]!=="*"?", "+Tn+"; q=0.01":""):c.accepts["*"]);for(l in c.headers)x.setRequestHeader(l,c.headers[l]);if(!c.beforeSend||c.beforeSend.call(h,x,c)!==!1&&E!==2){S="abort";for(l in{success:1,error:1,complete:1})x[l](c[l]);o=kn(xn,c,n,x);if(!o)T(-1,"No Transport");else{x.readyState=1,f&&p.trigger("ajaxSend",[x,c]),c.async&&c.timeout>0&&(u=setTimeout(function(){x.abort("timeout")},c.timeout));try{E=1,o.send(b,T)}catch(k){if(!(E<2))throw k;T(-1,k)}}return x}return x.abort()},active:0,lastModified:{},etag:{}});var Mn=[],_n=/\?/,Dn=/(=)\?(?=&|$)|\?\?/,Pn=v.now();v.ajaxSetup({jsonp:"callback",jsonpCallback:function(){var e=Mn.pop()||v.expando+"_"+Pn++;return this[e]=!0,e}}),v.ajaxPrefilter("json jsonp",function(n,r,i){var s,o,u,a=n.data,f=n.url,l=n.jsonp!==!1,c=l&&Dn.test(f),h=l&&!c&&typeof a=="string"&&!(n.contentType||"").indexOf("application/x-www-form-urlencoded")&&Dn.test(a);if(n.dataTypes[0]==="jsonp"||c||h)return s=n.jsonpCallback=v.isFunction(n.jsonpCallback)?n.jsonpCallback():n.jsonpCallback,o=e[s],c?n.url=f.replace(Dn,"$1"+s):h?n.data=a.replace(Dn,"$1"+s):l&&(n.url+=(_n.test(f)?"&":"?")+n.jsonp+"="+s),n.converters["script json"]=function(){return u||v.error(s+" was not called"),u[0]},n.dataTypes[0]="json",e[s]=function(){u=arguments},i.always(function(){e[s]=o,n[s]&&(n.jsonpCallback=r.jsonpCallback,Mn.push(s)),u&&v.isFunction(o)&&o(u[0]),u=o=t}),"script"}),v.ajaxSetup({accepts:{script:"text/javascript, application/javascript, application/ecmascript, application/x-ecmascript"},contents:{script:/javascript|ecmascript/},converters:{"text script":function(e){return v.globalEval(e),e}}}),v.ajaxPrefilter("script",function(e){e.cache===t&&(e.cache=!1),e.crossDomain&&(e.type="GET",e.global=!1)}),v.ajaxTransport("script",function(e){if(e.crossDomain){var n,r=i.head||i.getElementsByTagName("head")[0]||i.documentElement;return{send:function(s,o){n=i.createElement("script"),n.async="async",e.scriptCharset&&(n.charset=e.scriptCharset),n.src=e.url,n.onload=n.onreadystatechange=function(e,i){if(i||!n.readyState||/loaded|complete/.test(n.readyState))n.onload=n.onreadystatechange=null,r&&n.parentNode&&r.removeChild(n),n=t,i||o(200,"success")},r.insertBefore(n,r.firstChild)},abort:function(){n&&n.onload(0,1)}}}});var Hn,Bn=e.ActiveXObject?function(){for(var e in Hn)Hn[e](0,1)}:!1,jn=0;v.ajaxSettings.xhr=e.ActiveXObject?function(){return!this.isLocal&&Fn()||In()}:Fn,function(e){v.extend(v.support,{ajax:!!e,cors:!!e&&"withCredentials"in e})}(v.ajaxSettings.xhr()),v.support.ajax&&v.ajaxTransport(function(n){if(!n.crossDomain||v.support.cors){var r;return{send:function(i,s){var o,u,a=n.xhr();n.username?a.open(n.type,n.url,n.async,n.username,n.password):a.open(n.type,n.url,n.async);if(n.xhrFields)for(u in n.xhrFields)a[u]=n.xhrFields[u];n.mimeType&&a.overrideMimeType&&a.overrideMimeType(n.mimeType),!n.crossDomain&&!i["X-Requested-With"]&&(i["X-Requested-With"]="XMLHttpRequest");try{for(u in i)a.setRequestHeader(u,i[u])}catch(f){}a.send(n.hasContent&&n.data||null),r=function(e,i){var u,f,l,c,h;try{if(r&&(i||a.readyState===4)){r=t,o&&(a.onreadystatechange=v.noop,Bn&&delete Hn[o]);if(i)a.readyState!==4&&a.abort();else{u=a.status,l=a.getAllResponseHeaders(),c={},h=a.responseXML,h&&h.documentElement&&(c.xml=h);try{c.text=a.responseText}catch(p){}try{f=a.statusText}catch(p){f=""}!u&&n.isLocal&&!n.crossDomain?u=c.text?200:404:u===1223&&(u=204)}}}catch(d){i||s(-1,d)}c&&s(u,f,c,l)},n.async?a.readyState===4?setTimeout(r,0):(o=++jn,Bn&&(Hn||(Hn={},v(e).unload(Bn)),Hn[o]=r),a.onreadystatechange=r):r()},abort:function(){r&&r(0,1)}}}});var qn,Rn,Un=/^(?:toggle|show|hide)$/,zn=new RegExp("^(?:([-+])=|)("+m+")([a-z%]*)$","i"),Wn=/queueHooks$/,Xn=[Gn],Vn={"*":[function(e,t){var n,r,i=this.createTween(e,t),s=zn.exec(t),o=i.cur(),u=+o||0,a=1,f=20;if(s){n=+s[2],r=s[3]||(v.cssNumber[e]?"":"px");if(r!=="px"&&u){u=v.css(i.elem,e,!0)||n||1;do a=a||".5",u/=a,v.style(i.elem,e,u+r);while(a!==(a=i.cur()/o)&&a!==1&&--f)}i.unit=r,i.start=u,i.end=s[1]?u+(s[1]+1)*n:n}return i}]};v.Animation=v.extend(Kn,{tweener:function(e,t){v.isFunction(e)?(t=e,e=["*"]):e=e.split(" ");var n,r=0,i=e.length;for(;r<i;r++)n=e[r],Vn[n]=Vn[n]||[],Vn[n].unshift(t)},prefilter:function(e,t){t?Xn.unshift(e):Xn.push(e)}}),v.Tween=Yn,Yn.prototype={constructor:Yn,init:function(e,t,n,r,i,s){this.elem=e,this.prop=n,this.easing=i||"swing",this.options=t,this.start=this.now=this.cur(),this.end=r,this.unit=s||(v.cssNumber[n]?"":"px")},cur:function(){var e=Yn.propHooks[this.prop];return e&&e.get?e.get(this):Yn.propHooks._default.get(this)},run:function(e){var t,n=Yn.propHooks[this.prop];return this.options.duration?this.pos=t=v.easing[this.easing](e,this.options.duration*e,0,1,this.options.duration):this.pos=t=e,this.now=(this.end-this.start)*t+this.start,this.options.step&&this.options.step.call(this.elem,this.now,this),n&&n.set?n.set(this):Yn.propHooks._default.set(this),this}},Yn.prototype.init.prototype=Yn.prototype,Yn.propHooks={_default:{get:function(e){var t;return e.elem[e.prop]==null||!!e.elem.style&&e.elem.style[e.prop]!=null?(t=v.css(e.elem,e.prop,!1,""),!t||t==="auto"?0:t):e.elem[e.prop]},set:function(e){v.fx.step[e.prop]?v.fx.step[e.prop](e):e.elem.style&&(e.elem.style[v.cssProps[e.prop]]!=null||v.cssHooks[e.prop])?v.style(e.elem,e.prop,e.now+e.unit):e.elem[e.prop]=e.now}}},Yn.propHooks.scrollTop=Yn.propHooks.scrollLeft={set:function(e){e.elem.nodeType&&e.elem.parentNode&&(e.elem[e.prop]=e.now)}},v.each(["toggle","show","hide"],function(e,t){var n=v.fn[t];v.fn[t]=function(r,i,s){return r==null||typeof r=="boolean"||!e&&v.isFunction(r)&&v.isFunction(i)?n.apply(this,arguments):this.animate(Zn(t,!0),r,i,s)}}),v.fn.extend({fadeTo:function(e,t,n,r){return this.filter(Gt).css("opacity",0).show().end().animate({opacity:t},e,n,r)},animate:function(e,t,n,r){var i=v.isEmptyObject(e),s=v.speed(t,n,r),o=function(){var t=Kn(this,v.extend({},e),s);i&&t.stop(!0)};return i||s.queue===!1?this.each(o):this.queue(s.queue,o)},stop:function(e,n,r){var i=function(e){var t=e.stop;delete e.stop,t(r)};return typeof e!="string"&&(r=n,n=e,e=t),n&&e!==!1&&this.queue(e||"fx",[]),this.each(function(){var t=!0,n=e!=null&&e+"queueHooks",s=v.timers,o=v._data(this);if(n)o[n]&&o[n].stop&&i(o[n]);else for(n in o)o[n]&&o[n].stop&&Wn.test(n)&&i(o[n]);for(n=s.length;n--;)s[n].elem===this&&(e==null||s[n].queue===e)&&(s[n].anim.stop(r),t=!1,s.splice(n,1));(t||!r)&&v.dequeue(this,e)})}}),v.each({slideDown:Zn("show"),slideUp:Zn("hide"),slideToggle:Zn("toggle"),fadeIn:{opacity:"show"},fadeOut:{opacity:"hide"},fadeToggle:{opacity:"toggle"}},function(e,t){v.fn[e]=function(e,n,r){return this.animate(t,e,n,r)}}),v.speed=function(e,t,n){var r=e&&typeof e=="object"?v.extend({},e):{complete:n||!n&&t||v.isFunction(e)&&e,duration:e,easing:n&&t||t&&!v.isFunction(t)&&t};r.duration=v.fx.off?0:typeof r.duration=="number"?r.duration:r.duration in v.fx.speeds?v.fx.speeds[r.duration]:v.fx.speeds._default;if(r.queue==null||r.queue===!0)r.queue="fx";return r.old=r.complete,r.complete=function(){v.isFunction(r.old)&&r.old.call(this),r.queue&&v.dequeue(this,r.queue)},r},v.easing={linear:function(e){return e},swing:function(e){return.5-Math.cos(e*Math.PI)/2}},v.timers=[],v.fx=Yn.prototype.init,v.fx.tick=function(){var e,n=v.timers,r=0;qn=v.now();for(;r<n.length;r++)e=n[r],!e()&&n[r]===e&&n.splice(r--,1);n.length||v.fx.stop(),qn=t},v.fx.timer=function(e){e()&&v.timers.push(e)&&!Rn&&(Rn=setInterval(v.fx.tick,v.fx.interval))},v.fx.interval=13,v.fx.stop=function(){clearInterval(Rn),Rn=null},v.fx.speeds={slow:600,fast:200,_default:400},v.fx.step={},v.expr&&v.expr.filters&&(v.expr.filters.animated=function(e){return v.grep(v.timers,function(t){return e===t.elem}).length});var er=/^(?:body|html)$/i;v.fn.offset=function(e){if(arguments.length)return e===t?this:this.each(function(t){v.offset.setOffset(this,e,t)});var n,r,i,s,o,u,a,f={top:0,left:0},l=this[0],c=l&&l.ownerDocument;if(!c)return;return(r=c.body)===l?v.offset.bodyOffset(l):(n=c.documentElement,v.contains(n,l)?(typeof l.getBoundingClientRect!="undefined"&&(f=l.getBoundingClientRect()),i=tr(c),s=n.clientTop||r.clientTop||0,o=n.clientLeft||r.clientLeft||0,u=i.pageYOffset||n.scrollTop,a=i.pageXOffset||n.scrollLeft,{top:f.top+u-s,left:f.left+a-o}):f)},v.offset={bodyOffset:function(e){var t=e.offsetTop,n=e.offsetLeft;return v.support.doesNotIncludeMarginInBodyOffset&&(t+=parseFloat(v.css(e,"marginTop"))||0,n+=parseFloat(v.css(e,"marginLeft"))||0),{top:t,left:n}},setOffset:function(e,t,n){var r=v.css(e,"position");r==="static"&&(e.style.position="relative");var i=v(e),s=i.offset(),o=v.css(e,"top"),u=v.css(e,"left"),a=(r==="absolute"||r==="fixed")&&v.inArray("auto",[o,u])>-1,f={},l={},c,h;a?(l=i.position(),c=l.top,h=l.left):(c=parseFloat(o)||0,h=parseFloat(u)||0),v.isFunction(t)&&(t=t.call(e,n,s)),t.top!=null&&(f.top=t.top-s.top+c),t.left!=null&&(f.left=t.left-s.left+h),"using"in t?t.using.call(e,f):i.css(f)}},v.fn.extend({position:function(){if(!this[0])return;var e=this[0],t=this.offsetParent(),n=this.offset(),r=er.test(t[0].nodeName)?{top:0,left:0}:t.offset();return n.top-=parseFloat(v.css(e,"marginTop"))||0,n.left-=parseFloat(v.css(e,"marginLeft"))||0,r.top+=parseFloat(v.css(t[0],"borderTopWidth"))||0,r.left+=parseFloat(v.css(t[0],"borderLeftWidth"))||0,{top:n.top-r.top,left:n.left-r.left}},offsetParent:function(){return this.map(function(){var e=this.offsetParent||i.body;while(e&&!er.test(e.nodeName)&&v.css(e,"position")==="static")e=e.offsetParent;return e||i.body})}}),v.each({scrollLeft:"pageXOffset",scrollTop:"pageYOffset"},function(e,n){var r=/Y/.test(n);v.fn[e]=function(i){return v.access(this,function(e,i,s){var o=tr(e);if(s===t)return o?n in o?o[n]:o.document.documentElement[i]:e[i];o?o.scrollTo(r?v(o).scrollLeft():s,r?s:v(o).scrollTop()):e[i]=s},e,i,arguments.length,null)}}),v.each({Height:"height",Width:"width"},function(e,n){v.each({padding:"inner"+e,content:n,"":"outer"+e},function(r,i){v.fn[i]=function(i,s){var o=arguments.length&&(r||typeof i!="boolean"),u=r||(i===!0||s===!0?"margin":"border");return v.access(this,function(n,r,i){var s;return v.isWindow(n)?n.document.documentElement["client"+e]:n.nodeType===9?(s=n.documentElement,Math.max(n.body["scroll"+e],s["scroll"+e],n.body["offset"+e],s["offset"+e],s["client"+e])):i===t?v.css(n,r,i,u):v.style(n,r,i,u)},n,o?i:t,o,null)}})}),e.jQuery=e.$=v,typeof define=="function"&&define.amd&&define.amd.jQuery&&define("jquery",[],function(){return v})})(window);
/* jqplot 1.0.9 | (c) 2009-2016 Chris Leonello | jplot.com
   jsDate | (c) 2010-2016 Chris Leonello
 */
!function(a){function b(b){a.jqplot.ElemContainer.call(this),this.name=b,this._series=[],this.show=!1,this.tickRenderer=a.jqplot.AxisTickRenderer,this.tickOptions={},this.labelRenderer=a.jqplot.AxisLabelRenderer,this.labelOptions={},this.label=null,this.showLabel=!0,this.min=null,this.max=null,this.autoscale=!1,this.pad=1.2,this.padMax=null,this.padMin=null,this.ticks=[],this.numberTicks,this.tickInterval,this.renderer=a.jqplot.LinearAxisRenderer,this.rendererOptions={},this.showTicks=!0,this.showTickMarks=!0,this.showMinorTicks=!0,this.drawMajorGridlines=!0,this.drawMinorGridlines=!1,this.drawMajorTickMarks=!0,this.drawMinorTickMarks=!0,this.useSeriesColor=!1,this.borderWidth=null,this.borderColor=null,this.scaleToHiddenSeries=!1,this._dataBounds={min:null,max:null},this._intervalStats=[],this._offsets={min:null,max:null},this._ticks=[],this._label=null,this.syncTicks=null,this.tickSpacing=75,this._min=null,this._max=null,this._tickInterval=null,this._numberTicks=null,this.__ticks=null,this._options={}}function c(b){a.jqplot.ElemContainer.call(this),this.show=!1,this.location="ne",this.labels=[],this.showLabels=!0,this.showSwatches=!0,this.placement="insideGrid",this.xoffset=0,this.yoffset=0,this.border,this.background,this.textColor,this.fontFamily,this.fontSize,this.rowSpacing="0.5em",this.renderer=a.jqplot.TableLegendRenderer,this.rendererOptions={},this.preDraw=!1,this.marginTop=null,this.marginRight=null,this.marginBottom=null,this.marginLeft=null,this.escapeHtml=!1,this._series=[],a.extend(!0,this,b)}function d(b){a.jqplot.ElemContainer.call(this),this.text=b,this.show=!0,this.fontFamily,this.fontSize,this.textAlign,this.textColor,this.renderer=a.jqplot.DivTitleRenderer,this.rendererOptions={},this.escapeHtml=!1}function e(b){b=b||{},a.jqplot.ElemContainer.call(this),this.show=!0,this.xaxis="xaxis",this._xaxis,this.yaxis="yaxis",this._yaxis,this.gridBorderWidth=2,this.renderer=a.jqplot.LineRenderer,this.rendererOptions={},this.data=[],this.gridData=[],this.label="",this.showLabel=!0,this.color,this.negativeColor,this.lineWidth=2.5,this.lineJoin="round",this.lineCap="round",this.linePattern="solid",this.shadow=!0,this.shadowAngle=45,this.shadowOffset=1.25,this.shadowDepth=3,this.shadowAlpha="0.1",this.breakOnNull=!1,this.markerRenderer=a.jqplot.MarkerRenderer,this.markerOptions={},this.showLine=!0,this.showMarker=!0,this.index,this.fill=!1,this.fillColor,this.fillAlpha,this.fillAndStroke=!1,this.disableStack=!1,this._stack=!1,this.neighborThreshold=4,this.fillToZero=!1,this.fillToValue=0,this.fillAxis="y",this.useNegativeColors=!0,this._stackData=[],this._plotData=[],this._plotValues={x:[],y:[]},this._intervals={x:{},y:{}},this._prevPlotData=[],this._prevGridData=[],this._stackAxis="y",this._primaryAxis="_xaxis",this.canvas=new a.jqplot.GenericCanvas,this.shadowCanvas=new a.jqplot.GenericCanvas,this.plugins={},this._sumy=0,this._sumx=0,this._type="",this.step=!1}function f(){a.jqplot.ElemContainer.call(this),this.drawGridlines=!0,this.gridLineColor="#cccccc",this.gridLineWidth=1,this.background="#fffdf6",this.borderColor="#999999",this.borderWidth=2,this.drawBorder=!0,this.shadow=!0,this.shadowAngle=45,this.shadowOffset=1.5,this.shadowWidth=3,this.shadowDepth=3,this.shadowColor=null,this.shadowAlpha="0.07",this._left,this._top,this._right,this._bottom,this._width,this._height,this._axes=[],this.renderer=a.jqplot.CanvasGridRenderer,this.rendererOptions={},this._offsets={top:null,bottom:null,left:null,right:null}}function g(){function h(a){for(var b,c=0;c<a.length;c++)for(var d,e=[a[c].data,a[c]._stackData,a[c]._plotData,a[c]._prevPlotData],f=0;4>f;f++)if(d=!0,b=e[f],"x"==a[c]._stackAxis){for(var g=0;g<b.length;g++)if("number"!=typeof b[g][1]){d=!1;break}d&&b.sort(function(a,b){return a[1]-b[1]})}else{for(var g=0;g<b.length;g++)if("number"!=typeof b[g][0]){d=!1;break}d&&b.sort(function(a,b){return a[0]-b[0]})}}function i(a){var b,c,d=a.data.plot,e=d.eventCanvas._elem.offset(),f={x:a.pageX-e.left,y:a.pageY-e.top},g={xaxis:null,yaxis:null,x2axis:null,y2axis:null,y3axis:null,y4axis:null,y5axis:null,y6axis:null,y7axis:null,y8axis:null,y9axis:null,yMidAxis:null},h=["xaxis","yaxis","x2axis","y2axis","y3axis","y4axis","y5axis","y6axis","y7axis","y8axis","y9axis","yMidAxis"],i=d.axes;for(b=11;b>0;b--)c=h[b-1],i[c].show&&(g[c]=i[c].series_p2u(f[c.charAt(0)]));return{offsets:e,gridPos:f,dataPos:g}}function j(b,c){function d(a,b,c){var d=(b[1]-c[1])/(b[0]-c[0]),e=b[1]-d*b[0],f=a+b[1];return[(f-e)/d,f]}var e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x=c.series;for(g=c.seriesStack.length-1;g>=0;g--)switch(e=c.seriesStack[g],h=x[e],u=h._highlightThreshold,h.renderer.constructor){case a.jqplot.BarRenderer:for(j=b.x,k=b.y,f=0;f<h._barPoints.length;f++)if(t=h._barPoints[f],s=h.gridData[f],j>t[0][0]&&j<t[2][0]&&(k>t[2][1]&&k<t[0][1]||k<t[2][1]&&k>t[0][1]))return{seriesIndex:h.index,pointIndex:f,gridData:s,data:h.data[f],points:h._barPoints[f]};break;case a.jqplot.PyramidRenderer:for(j=b.x,k=b.y,f=0;f<h._barPoints.length;f++)if(t=h._barPoints[f],s=h.gridData[f],j>t[0][0]+u[0][0]&&j<t[2][0]+u[2][0]&&k>t[2][1]&&k<t[0][1])return{seriesIndex:h.index,pointIndex:f,gridData:s,data:h.data[f],points:h._barPoints[f]};break;case a.jqplot.DonutRenderer:if(n=h.startAngle/180*Math.PI,j=b.x-h._center[0],k=b.y-h._center[1],i=Math.sqrt(Math.pow(j,2)+Math.pow(k,2)),j>0&&-k>=0?l=2*Math.PI-Math.atan(-k/j):j>0&&0>-k?l=-Math.atan(-k/j):0>j?l=Math.PI-Math.atan(-k/j):0==j&&-k>0?l=3*Math.PI/2:0==j&&0>-k?l=Math.PI/2:0==j&&0==k&&(l=0),n&&(l-=n,0>l?l+=2*Math.PI:l>2*Math.PI&&(l-=2*Math.PI)),m=h.sliceMargin/180*Math.PI,i<h._radius&&i>h._innerRadius)for(f=0;f<h.gridData.length;f++)if(o=f>0?h.gridData[f-1][1]+m:m,p=h.gridData[f][1],l>o&&p>l)return{seriesIndex:h.index,pointIndex:f,gridData:[b.x,b.y],data:h.data[f]};break;case a.jqplot.PieRenderer:if(n=h.startAngle/180*Math.PI,j=b.x-h._center[0],k=b.y-h._center[1],i=Math.sqrt(Math.pow(j,2)+Math.pow(k,2)),j>0&&-k>=0?l=2*Math.PI-Math.atan(-k/j):j>0&&0>-k?l=-Math.atan(-k/j):0>j?l=Math.PI-Math.atan(-k/j):0==j&&-k>0?l=3*Math.PI/2:0==j&&0>-k?l=Math.PI/2:0==j&&0==k&&(l=0),n&&(l-=n,0>l?l+=2*Math.PI:l>2*Math.PI&&(l-=2*Math.PI)),m=h.sliceMargin/180*Math.PI,i<h._radius)for(f=0;f<h.gridData.length;f++)if(o=f>0?h.gridData[f-1][1]+m:m,p=h.gridData[f][1],l>o&&p>l)return{seriesIndex:h.index,pointIndex:f,gridData:[b.x,b.y],data:h.data[f]};break;case a.jqplot.BubbleRenderer:j=b.x,k=b.y;var y=null;if(h.show){for(var f=0;f<h.gridData.length;f++)s=h.gridData[f],r=Math.sqrt((j-s[0])*(j-s[0])+(k-s[1])*(k-s[1])),r<=s[2]&&(q>=r||null==q)&&(q=r,y={seriesIndex:e,pointIndex:f,gridData:s,data:h.data[f]});if(null!=y)return y}break;case a.jqplot.FunnelRenderer:j=b.x,k=b.y;var z,A,B,C=h._vertices,D=C[0],E=C[C.length-1];for(z=d(k,D[0],E[3]),A=d(k,D[1],E[2]),f=0;f<C.length;f++)if(B=C[f],k>=B[0][1]&&k<=B[3][1]&&j>=z[0]&&j<=A[0])return{seriesIndex:h.index,pointIndex:f,gridData:null,data:h.data[f]};break;case a.jqplot.LineRenderer:if(j=b.x,k=b.y,i=h.renderer,h.show){if(!(!(h.fill||h.renderer.bands.show&&h.renderer.bands.fill)||c.plugins.highlighter&&c.plugins.highlighter.show)){var F=!1;if(j>h._boundingBox[0][0]&&j<h._boundingBox[1][0]&&k>h._boundingBox[1][1]&&k<h._boundingBox[0][1])for(var G,H=h._areaPoints.length,f=H-1,G=0;H>G;G++){var I=[h._areaPoints[G][0],h._areaPoints[G][1]],J=[h._areaPoints[f][0],h._areaPoints[f][1]];(I[1]<k&&J[1]>=k||J[1]<k&&I[1]>=k)&&I[0]+(k-I[1])/(J[1]-I[1])*(J[0]-I[0])<j&&(F=!F),f=G}if(F)return{seriesIndex:e,pointIndex:null,gridData:h.gridData,data:h.data,points:h._areaPoints};break}w=h.markerRenderer.size/2+h.neighborThreshold,v=w>0?w:0;for(var f=0;f<h.gridData.length;f++)if(s=h.gridData[f],i.constructor==a.jqplot.OHLCRenderer)if(i.candleStick){var K=h._yaxis.series_u2p;if(j>=s[0]-i._bodyWidth/2&&j<=s[0]+i._bodyWidth/2&&k>=K(h.data[f][2])&&k<=K(h.data[f][3]))return{seriesIndex:e,pointIndex:f,gridData:s,data:h.data[f]}}else if(i.hlc){var K=h._yaxis.series_u2p;if(j>=s[0]-i._tickLength&&j<=s[0]+i._tickLength&&k>=K(h.data[f][1])&&k<=K(h.data[f][2]))return{seriesIndex:e,pointIndex:f,gridData:s,data:h.data[f]}}else{var K=h._yaxis.series_u2p;if(j>=s[0]-i._tickLength&&j<=s[0]+i._tickLength&&k>=K(h.data[f][2])&&k<=K(h.data[f][3]))return{seriesIndex:e,pointIndex:f,gridData:s,data:h.data[f]}}else if(null!=s[0]&&null!=s[1]&&(r=Math.sqrt((j-s[0])*(j-s[0])+(k-s[1])*(k-s[1])),v>=r&&(q>=r||null==q)))return q=r,{seriesIndex:e,pointIndex:f,gridData:s,data:h.data[f]}}break;default:if(j=b.x,k=b.y,i=h.renderer,h.show){w=h.markerRenderer.size/2+h.neighborThreshold,v=w>0?w:0;for(var f=0;f<h.gridData.length;f++)if(s=h.gridData[f],i.constructor==a.jqplot.OHLCRenderer)if(i.candleStick){var K=h._yaxis.series_u2p;if(j>=s[0]-i._bodyWidth/2&&j<=s[0]+i._bodyWidth/2&&k>=K(h.data[f][2])&&k<=K(h.data[f][3]))return{seriesIndex:e,pointIndex:f,gridData:s,data:h.data[f]}}else if(i.hlc){var K=h._yaxis.series_u2p;if(j>=s[0]-i._tickLength&&j<=s[0]+i._tickLength&&k>=K(h.data[f][1])&&k<=K(h.data[f][2]))return{seriesIndex:e,pointIndex:f,gridData:s,data:h.data[f]}}else{var K=h._yaxis.series_u2p;if(j>=s[0]-i._tickLength&&j<=s[0]+i._tickLength&&k>=K(h.data[f][2])&&k<=K(h.data[f][3]))return{seriesIndex:e,pointIndex:f,gridData:s,data:h.data[f]}}else if(r=Math.sqrt((j-s[0])*(j-s[0])+(k-s[1])*(k-s[1])),v>=r&&(q>=r||null==q))return q=r,{seriesIndex:e,pointIndex:f,gridData:s,data:h.data[f]}}}return null}this.animate=!1,this.animateReplot=!1,this.axes={xaxis:new b("xaxis"),yaxis:new b("yaxis"),x2axis:new b("x2axis"),y2axis:new b("y2axis"),y3axis:new b("y3axis"),y4axis:new b("y4axis"),y5axis:new b("y5axis"),y6axis:new b("y6axis"),y7axis:new b("y7axis"),y8axis:new b("y8axis"),y9axis:new b("y9axis"),yMidAxis:new b("yMidAxis")},this.baseCanvas=new a.jqplot.GenericCanvas,this.captureRightClick=!1,this.data=[],this.dataRenderer,this.dataRendererOptions,this.defaults={axesDefaults:{},axes:{xaxis:{},yaxis:{},x2axis:{},y2axis:{},y3axis:{},y4axis:{},y5axis:{},y6axis:{},y7axis:{},y8axis:{},y9axis:{},yMidAxis:{}},seriesDefaults:{},series:[]},this.defaultAxisStart=1,this.drawIfHidden=!1,this.eventCanvas=new a.jqplot.GenericCanvas,this.fillBetween={series1:null,series2:null,color:null,baseSeries:0,fill:!0},this.fontFamily,this.fontSize,this.grid=new f,this.legend=new c,this.noDataIndicator={show:!1,indicator:"Loading Data...",axes:{xaxis:{min:0,max:10,tickInterval:2,show:!0},yaxis:{min:0,max:12,tickInterval:3,show:!0}}},this.negativeSeriesColors=a.jqplot.config.defaultNegativeColors,this.options={},this.previousSeriesStack=[],this.plugins={},this.series=[],this.seriesStack=[],this.seriesColors=a.jqplot.config.defaultColors,this.sortData=!0,this.stackSeries=!1,this.syncXTicks=!0,this.syncYTicks=!0,this.target=null,this.targetId=null,this.textColor,this.title=new d,this._drawCount=0,this._sumy=0,this._sumx=0,this._stackData=[],this._plotData=[],this._width=null,this._height=null,this._plotDimensions={height:null,width:null},this._gridPadding={top:null,right:null,bottom:null,left:null},this._defaultGridPadding={top:10,right:10,bottom:23,left:10},this._addDomReference=a.jqplot.config.addDomReference,this.preInitHooks=new a.jqplot.HooksManager,this.postInitHooks=new a.jqplot.HooksManager,this.preParseOptionsHooks=new a.jqplot.HooksManager,this.postParseOptionsHooks=new a.jqplot.HooksManager,this.preDrawHooks=new a.jqplot.HooksManager,this.postDrawHooks=new a.jqplot.HooksManager,this.preDrawSeriesHooks=new a.jqplot.HooksManager,this.postDrawSeriesHooks=new a.jqplot.HooksManager,this.preDrawLegendHooks=new a.jqplot.HooksManager,this.addLegendRowHooks=new a.jqplot.HooksManager,this.preSeriesInitHooks=new a.jqplot.HooksManager,this.postSeriesInitHooks=new a.jqplot.HooksManager,this.preParseSeriesOptionsHooks=new a.jqplot.HooksManager,this.postParseSeriesOptionsHooks=new a.jqplot.HooksManager,this.eventListenerHooks=new a.jqplot.EventListenerManager,this.preDrawSeriesShadowHooks=new a.jqplot.HooksManager,this.postDrawSeriesShadowHooks=new a.jqplot.HooksManager,this.colorGenerator=new a.jqplot.ColorGenerator,this.negativeColorGenerator=new a.jqplot.ColorGenerator,this.canvasManager=new a.jqplot.CanvasManager,this.themeEngine=new a.jqplot.ThemeEngine;this.init=function(c,d,e){e=e||{};for(var f=0;f<a.jqplot.preInitHooks.length;f++)a.jqplot.preInitHooks[f].call(this,c,d,e);for(var f=0;f<this.preInitHooks.hooks.length;f++)this.preInitHooks.hooks[f].call(this,c,d,e);if(this.targetId="#"+c,this.target=a("#"+c),this._addDomReference&&this.target.data("jqplot",this),this.target.removeClass("jqplot-error"),!this.target.get(0))throw new Error("No plot target specified");if("static"==this.target.css("position")&&this.target.css("position","relative"),this.target.hasClass("jqplot-target")||this.target.addClass("jqplot-target"),this.target.height())this._height=g=this.target.height();else{var g;g=e&&e.height?parseInt(e.height,10):this.target.attr("data-height")?parseInt(this.target.attr("data-height"),10):parseInt(a.jqplot.config.defaultHeight,10),this._height=g,this.target.css("height",g+"px")}if(this.target.width())this._width=i=this.target.width();else{var i;i=e&&e.width?parseInt(e.width,10):this.target.attr("data-width")?parseInt(this.target.attr("data-width"),10):parseInt(a.jqplot.config.defaultWidth,10),this._width=i,this.target.css("width",i+"px")}for(var f=0,j=G.length;j>f;f++)this.axes[G[f]]=new b(G[f]);if(this._plotDimensions.height=this._height,this._plotDimensions.width=this._width,this.grid._plotDimensions=this._plotDimensions,this.title._plotDimensions=this._plotDimensions,this.baseCanvas._plotDimensions=this._plotDimensions,this.eventCanvas._plotDimensions=this._plotDimensions,this.legend._plotDimensions=this._plotDimensions,this._height<=0||this._width<=0||!this._height||!this._width)throw new Error("Canvas dimension not set");if(e.dataRenderer&&a.isFunction(e.dataRenderer)&&(e.dataRendererOptions&&(this.dataRendererOptions=e.dataRendererOptions),this.dataRenderer=e.dataRenderer,d=this.dataRenderer(d,this,this.dataRendererOptions)),e.noDataIndicator&&a.isPlainObject(e.noDataIndicator)&&a.extend(!0,this.noDataIndicator,e.noDataIndicator),null==d||0==a.isArray(d)||0==d.length||0==a.isArray(d[0])||0==d[0].length){if(0==this.noDataIndicator.show)throw new Error("No data specified");for(var k in this.noDataIndicator.axes)for(var l in this.noDataIndicator.axes[k])this.axes[k][l]=this.noDataIndicator.axes[k][l];this.postDrawHooks.add(function(){var b=this.eventCanvas.getHeight(),c=this.eventCanvas.getWidth(),d=a('<div class="jqplot-noData-container" style="position:absolute;"></div>');this.target.append(d),d.height(b),d.width(c),d.css("top",this.eventCanvas._offsets.top),d.css("left",this.eventCanvas._offsets.left);var e=a('<div class="jqplot-noData-contents" style="text-align:center; position:relative; margin-left:auto; margin-right:auto;"></div>');d.append(e),e.html(this.noDataIndicator.indicator);var f=e.height(),g=e.width();e.height(f),e.width(g),e.css("top",(b-f)/2+"px")})}this.data=a.extend(!0,[],d),this.parseOptions(e),this.textColor&&this.target.css("color",this.textColor),this.fontFamily&&this.target.css("font-family",this.fontFamily),this.fontSize&&this.target.css("font-size",this.fontSize),this.title.init(),this.legend.init(),this._sumy=0,this._sumx=0,this.computePlotData();for(var f=0;f<this.series.length;f++){this.seriesStack.push(f),this.previousSeriesStack.push(f),this.series[f].shadowCanvas._plotDimensions=this._plotDimensions,this.series[f].canvas._plotDimensions=this._plotDimensions;for(var m=0;m<a.jqplot.preSeriesInitHooks.length;m++)a.jqplot.preSeriesInitHooks[m].call(this.series[f],c,this.data,this.options.seriesDefaults,this.options.series[f],this);for(var m=0;m<this.preSeriesInitHooks.hooks.length;m++)this.preSeriesInitHooks.hooks[m].call(this.series[f],c,this.data,this.options.seriesDefaults,this.options.series[f],this);this.series[f]._plotDimensions=this._plotDimensions,this.series[f].init(f,this.grid.borderWidth,this);for(var m=0;m<a.jqplot.postSeriesInitHooks.length;m++)a.jqplot.postSeriesInitHooks[m].call(this.series[f],c,this.data,this.options.seriesDefaults,this.options.series[f],this);for(var m=0;m<this.postSeriesInitHooks.hooks.length;m++)this.postSeriesInitHooks.hooks[m].call(this.series[f],c,this.data,this.options.seriesDefaults,this.options.series[f],this);this._sumy+=this.series[f]._sumy,this._sumx+=this.series[f]._sumx}for(var n,o,f=0,j=G.length;j>f;f++)n=G[f],o=this.axes[n],o._plotDimensions=this._plotDimensions,o.init(),null==this.axes[n].borderColor&&("x"!==n.charAt(0)&&o.useSeriesColor===!0&&o.show?o.borderColor=o._series[0].color:o.borderColor=this.grid.borderColor);this.sortData&&h(this.series),this.grid.init(),this.grid._axes=this.axes,this.legend._series=this.series;for(var f=0;f<a.jqplot.postInitHooks.length;f++)a.jqplot.postInitHooks[f].call(this,c,this.data,e);for(var f=0;f<this.postInitHooks.hooks.length;f++)this.postInitHooks.hooks[f].call(this,c,this.data,e)},this.resetAxesScale=function(b,c){var d=c||{},e=b||this.axes;if(e===!0&&(e=this.axes),a.isArray(e))for(var f=0;f<e.length;f++)this.axes[e[f]].resetScale(d[e[f]]);else if("object"==typeof e)for(var g in e)this.axes[g].resetScale(d[g])},this.reInitialize=function(c,d){for(var e=a.extend(!0,{},this.options,d),f=this.targetId.substr(1),g=null==c?this.data:c,i=0;i<a.jqplot.preInitHooks.length;i++)a.jqplot.preInitHooks[i].call(this,f,g,e);for(var i=0;i<this.preInitHooks.hooks.length;i++)this.preInitHooks.hooks[i].call(this,f,g,e);if(this._height=this.target.height(),this._width=this.target.width(),this._height<=0||this._width<=0||!this._height||!this._width)throw new Error("Target dimension not set");this._plotDimensions.height=this._height,this._plotDimensions.width=this._width,this.grid._plotDimensions=this._plotDimensions,this.title._plotDimensions=this._plotDimensions,this.baseCanvas._plotDimensions=this._plotDimensions,this.eventCanvas._plotDimensions=this._plotDimensions,this.legend._plotDimensions=this._plotDimensions;for(var j,k,l,m,i=0,n=G.length;n>i;i++){j=G[i],m=this.axes[j],k=m._ticks;for(var l=0,o=k.length;o>l;l++){var p=k[l]._elem;p&&(a.jqplot.use_excanvas&&window.G_vmlCanvasManager.uninitElement!==F&&window.G_vmlCanvasManager.uninitElement(p.get(0)),p.emptyForce(),p=null,k._elem=null)}k=null,delete m.ticks,delete m._ticks,this.axes[j]=new b(j),this.axes[j]._plotWidth=this._width,this.axes[j]._plotHeight=this._height}c&&(e.dataRenderer&&a.isFunction(e.dataRenderer)&&(e.dataRendererOptions&&(this.dataRendererOptions=e.dataRendererOptions),this.dataRenderer=e.dataRenderer,c=this.dataRenderer(c,this,this.dataRendererOptions)),this.data=a.extend(!0,[],c)),d&&this.parseOptions(e),this.title._plotWidth=this._width,this.textColor&&this.target.css("color",this.textColor),this.fontFamily&&this.target.css("font-family",this.fontFamily),this.fontSize&&this.target.css("font-size",this.fontSize),this.title.init(),this.legend.init(),this._sumy=0,this._sumx=0,this.seriesStack=[],this.previousSeriesStack=[],this.computePlotData();for(var i=0,n=this.series.length;n>i;i++){this.seriesStack.push(i),this.previousSeriesStack.push(i),this.series[i].shadowCanvas._plotDimensions=this._plotDimensions,this.series[i].canvas._plotDimensions=this._plotDimensions;for(var l=0;l<a.jqplot.preSeriesInitHooks.length;l++)a.jqplot.preSeriesInitHooks[l].call(this.series[i],f,this.data,this.options.seriesDefaults,this.options.series[i],this);for(var l=0;l<this.preSeriesInitHooks.hooks.length;l++)this.preSeriesInitHooks.hooks[l].call(this.series[i],f,this.data,this.options.seriesDefaults,this.options.series[i],this);this.series[i]._plotDimensions=this._plotDimensions,this.series[i].init(i,this.grid.borderWidth,this);for(var l=0;l<a.jqplot.postSeriesInitHooks.length;l++)a.jqplot.postSeriesInitHooks[l].call(this.series[i],f,this.data,this.options.seriesDefaults,this.options.series[i],this);for(var l=0;l<this.postSeriesInitHooks.hooks.length;l++)this.postSeriesInitHooks.hooks[l].call(this.series[i],f,this.data,this.options.seriesDefaults,this.options.series[i],this);this._sumy+=this.series[i]._sumy,this._sumx+=this.series[i]._sumx}for(var i=0,n=G.length;n>i;i++)j=G[i],m=this.axes[j],m._plotDimensions=this._plotDimensions,m.init(),null==m.borderColor&&("x"!==j.charAt(0)&&m.useSeriesColor===!0&&m.show?m.borderColor=m._series[0].color:m.borderColor=this.grid.borderColor);this.sortData&&h(this.series),this.grid.init(),this.grid._axes=this.axes,this.legend._series=this.series;for(var i=0,n=a.jqplot.postInitHooks.length;n>i;i++)a.jqplot.postInitHooks[i].call(this,f,this.data,e);for(var i=0,n=this.postInitHooks.hooks.length;n>i;i++)this.postInitHooks.hooks[i].call(this,f,this.data,e)},this.quickInit=function(){if(this._height=this.target.height(),this._width=this.target.width(),this._height<=0||this._width<=0||!this._height||!this._width)throw new Error("Target dimension not set");this._plotDimensions.height=this._height,this._plotDimensions.width=this._width,this.grid._plotDimensions=this._plotDimensions,this.title._plotDimensions=this._plotDimensions,this.baseCanvas._plotDimensions=this._plotDimensions,this.eventCanvas._plotDimensions=this._plotDimensions,this.legend._plotDimensions=this._plotDimensions;for(var b in this.axes)this.axes[b]._plotWidth=this._width,this.axes[b]._plotHeight=this._height;this.title._plotWidth=this._width,this.textColor&&this.target.css("color",this.textColor),this.fontFamily&&this.target.css("font-family",this.fontFamily),this.fontSize&&this.target.css("font-size",this.fontSize),this._sumy=0,this._sumx=0,this.computePlotData();for(var c=0;c<this.series.length;c++)"line"===this.series[c]._type&&this.series[c].renderer.bands.show&&this.series[c].renderer.initBands.call(this.series[c],this.series[c].renderer.options,this),this.series[c]._plotDimensions=this._plotDimensions,this.series[c].canvas._plotDimensions=this._plotDimensions,this._sumy+=this.series[c]._sumy,this._sumx+=this.series[c]._sumx;for(var d,e=0;12>e;e++){d=G[e];for(var f=this.axes[d]._ticks,c=0;c<f.length;c++){var g=f[c]._elem;g&&(a.jqplot.use_excanvas&&window.G_vmlCanvasManager.uninitElement!==F&&window.G_vmlCanvasManager.uninitElement(g.get(0)),g.emptyForce(),g=null,f._elem=null)}f=null,this.axes[d]._plotDimensions=this._plotDimensions,this.axes[d]._ticks=[]}this.sortData&&h(this.series),this.grid._axes=this.axes,this.legend._series=this.series},this.computePlotData=function(){this._plotData=[],this._stackData=[];var b,c,d;for(c=0,d=this.series.length;d>c;c++){b=this.series[c],this._plotData.push([]),this._stackData.push([]);var e=b.data;this._plotData[c]=a.extend(!0,[],e),this._stackData[c]=a.extend(!0,[],e),b._plotData=this._plotData[c],b._stackData=this._stackData[c];var f={x:[],y:[]};if(this.stackSeries&&!b.disableStack){b._stack=!0;for(var g="x"===b._stackAxis?0:1,h=0,i=e.length;i>h;h++){var j=e[h][g];if(null==j&&(j=0),this._plotData[c][h][g]=j,this._stackData[c][h][g]=j,c>0)for(var k=c;k--;){var l=this._plotData[k][h][g];if(j*l>=0){this._plotData[c][h][g]+=l,this._stackData[c][h][g]+=l;break}}}}else{for(var m=0;m<b.data.length;m++)f.x.push(b.data[m][0]),f.y.push(b.data[m][1]);this._stackData.push(b.data),this.series[c]._stackData=b.data,this._plotData.push(b.data),b._plotData=b.data,b._plotValues=f}for(c>0&&(b._prevPlotData=this.series[c-1]._plotData),b._sumy=0,b._sumx=0,m=b.data.length-1;m>-1;m--)b._sumy+=b.data[m][1],b._sumx+=b.data[m][0]}},this.populatePlotData=function(b,c){this._plotData=[],this._stackData=[],b._stackData=[],b._plotData=[];var d={x:[],y:[]};if(this.stackSeries&&!b.disableStack){b._stack=!0;for(var e,f,g,h,i="x"===b._stackAxis?0:1,j=a.extend(!0,[],b.data),k=a.extend(!0,[],b.data),l=0;c>l;l++)for(var m=this.series[l].data,n=0;n<m.length;n++)g=m[n],e=null!=g[0]?g[0]:0,f=null!=g[1]?g[1]:0,j[n][0]+=e,j[n][1]+=f,h=i?f:e,b.data[n][i]*h>=0&&(k[n][i]+=h);for(var o=0;o<k.length;o++)d.x.push(k[o][0]),d.y.push(k[o][1]);this._plotData.push(k),this._stackData.push(j),b._stackData=j,b._plotData=k,b._plotValues=d}else{for(var o=0;o<b.data.length;o++)d.x.push(b.data[o][0]),d.y.push(b.data[o][1]);this._stackData.push(b.data),this.series[c]._stackData=b.data,this._plotData.push(b.data),b._plotData=b.data,b._plotValues=d}for(c>0&&(b._prevPlotData=this.series[c-1]._plotData),b._sumy=0,b._sumx=0,o=b.data.length-1;o>-1;o--)b._sumy+=b.data[o][1],b._sumx+=b.data[o][0]},this.getNextSeriesColor=function(a){var b=0,c=a.seriesColors;return function(){return b<c.length?c[b++]:(b=0,c[b++])}}(this),this.parseOptions=function(b){for(var c=0;c<this.preParseOptionsHooks.hooks.length;c++)this.preParseOptionsHooks.hooks[c].call(this,b);for(var c=0;c<a.jqplot.preParseOptionsHooks.length;c++)a.jqplot.preParseOptionsHooks[c].call(this,b);this.options=a.extend(!0,{},this.defaults,b);var d=this.options;if(this.animate=d.animate,this.animateReplot=d.animateReplot,this.stackSeries=d.stackSeries,a.isPlainObject(d.fillBetween))for(var f,g=["series1","series2","color","baseSeries","fill"],c=0,h=g.length;h>c;c++)f=g[c],null!=d.fillBetween[f]&&(this.fillBetween[f]=d.fillBetween[f]);d.seriesColors&&(this.seriesColors=d.seriesColors),d.negativeSeriesColors&&(this.negativeSeriesColors=d.negativeSeriesColors),d.captureRightClick&&(this.captureRightClick=d.captureRightClick),this.defaultAxisStart=b&&null!=b.defaultAxisStart?b.defaultAxisStart:this.defaultAxisStart,this.colorGenerator.setColors(this.seriesColors),this.negativeColorGenerator.setColors(this.negativeSeriesColors),a.extend(!0,this._gridPadding,d.gridPadding),this.sortData=null!=d.sortData?d.sortData:this.sortData;for(var c=0;12>c;c++){var i=G[c],j=this.axes[i];j._options=a.extend(!0,{},d.axesDefaults,d.axes[i]),a.extend(!0,j,d.axesDefaults,d.axes[i]),j._plotWidth=this._width,j._plotHeight=this._height}var k=function(b,c,d){var e,f,g=[];if(c=c||"vertical",a.isArray(b[0]))a.extend(!0,g,b);else for(e=0,f=b.length;f>e;e++)"vertical"==c?g.push([d+e,b[e]]):g.push([b[e],d+e]);return g};this.series=[];for(var c=0;c<this.data.length;c++){for(var l=a.extend(!0,{index:c},{seriesColors:this.seriesColors,negativeSeriesColors:this.negativeSeriesColors},this.options.seriesDefaults,this.options.series[c],{rendererOptions:{animation:{show:this.animate}}}),g=new e(l),m=0;m<a.jqplot.preParseSeriesOptionsHooks.length;m++)a.jqplot.preParseSeriesOptionsHooks[m].call(g,this.options.seriesDefaults,this.options.series[c]);for(var m=0;m<this.preParseSeriesOptionsHooks.hooks.length;m++)this.preParseSeriesOptionsHooks.hooks[m].call(g,this.options.seriesDefaults,this.options.series[c]);a.extend(!0,g,l);var n="vertical";switch(g.renderer===a.jqplot.BarRenderer&&g.rendererOptions&&"horizontal"==g.rendererOptions.barDirection&&(n="horizontal",g._stackAxis="x",g._primaryAxis="_yaxis"),g.data=k(this.data[c],n,this.defaultAxisStart),g.xaxis){case"xaxis":g._xaxis=this.axes.xaxis;break;case"x2axis":g._xaxis=this.axes.x2axis}g._yaxis=this.axes[g.yaxis],g._xaxis._series.push(g),g._yaxis._series.push(g),g.show?(g._xaxis.show=!0,g._yaxis.show=!0):(g._xaxis.scaleToHiddenSeries&&(g._xaxis.show=!0),g._yaxis.scaleToHiddenSeries&&(g._yaxis.show=!0)),g.label||(g.label="Series "+(c+1).toString()),this.series.push(g);for(var m=0;m<a.jqplot.postParseSeriesOptionsHooks.length;m++)a.jqplot.postParseSeriesOptionsHooks[m].call(this.series[c],this.options.seriesDefaults,this.options.series[c]);for(var m=0;m<this.postParseSeriesOptionsHooks.hooks.length;m++)this.postParseSeriesOptionsHooks.hooks[m].call(this.series[c],this.options.seriesDefaults,this.options.series[c])}a.extend(!0,this.grid,this.options.grid);for(var c=0,h=G.length;h>c;c++){var i=G[c],j=this.axes[i];null==j.borderWidth&&(j.borderWidth=this.grid.borderWidth)}"string"==typeof this.options.title?this.title.text=this.options.title:"object"==typeof this.options.title&&a.extend(!0,this.title,this.options.title),this.title._plotWidth=this._width,this.legend.setOptions(this.options.legend);for(var c=0;c<a.jqplot.postParseOptionsHooks.length;c++)a.jqplot.postParseOptionsHooks[c].call(this,b);for(var c=0;c<this.postParseOptionsHooks.hooks.length;c++)this.postParseOptionsHooks.hooks[c].call(this,b)},this.destroy=function(){this.canvasManager.freeAllCanvases(),this.eventCanvas&&this.eventCanvas._elem&&this.eventCanvas._elem.unbind(),this.target.empty(),this.target[0].innerHTML=""},this.replot=function(b){var c=b||{},d=c.data||null,e=c.clear===!1?!1:!0,f=c.resetAxes||!1;delete c.data,delete c.clear,delete c.resetAxes,this.target.trigger("jqplotPreReplot"),e&&this.destroy(),d||!a.isEmptyObject(c)?this.reInitialize(d,c):this.quickInit(),f&&this.resetAxesScale(f,c.axes),this.draw(),this.target.trigger("jqplotPostReplot")},this.redraw=function(a){a=null!=a?a:!0,this.target.trigger("jqplotPreRedraw"),a&&(this.canvasManager.freeAllCanvases(),this.eventCanvas._elem.unbind(),this.target.empty());for(var b in this.axes)this.axes[b]._ticks=[];this.computePlotData(),this._sumy=0,this._sumx=0;for(var c=0,d=this.series.length;d>c;c++)this._sumy+=this.series[c]._sumy,this._sumx+=this.series[c]._sumx;this.draw(),this.target.trigger("jqplotPostRedraw")},this.draw=function(){if(this.drawIfHidden||this.target.is(":visible")){this.target.trigger("jqplotPreDraw");var b,c,d;for(b=0,d=a.jqplot.preDrawHooks.length;d>b;b++)a.jqplot.preDrawHooks[b].call(this);for(b=0,d=this.preDrawHooks.hooks.length;d>b;b++)this.preDrawHooks.hooks[b].apply(this,this.preDrawSeriesHooks.args[b]);this.target.append(this.baseCanvas.createElement({left:0,right:0,top:0,bottom:0},"jqplot-base-canvas",null,this)),this.baseCanvas.setContext(),this.target.append(this.title.draw()),this.title.pack({top:0,left:0});var e=this.legend.draw({},this),f={top:0,left:0,bottom:0,right:0};if("outsideGrid"==this.legend.placement){switch(this.target.append(e),this.legend.location){case"n":f.top+=this.legend.getHeight();break;case"s":f.bottom+=this.legend.getHeight();break;case"ne":case"e":case"se":f.right+=this.legend.getWidth();break;case"nw":case"w":case"sw":f.left+=this.legend.getWidth();break;default:f.right+=this.legend.getWidth()}e=e.detach()}var g,h=this.axes;for(b=0;12>b;b++)g=G[b],this.target.append(h[g].draw(this.baseCanvas._ctx,this)),h[g].set();h.yaxis.show&&(f.left+=h.yaxis.getWidth());var i,j=["y2axis","y3axis","y4axis","y5axis","y6axis","y7axis","y8axis","y9axis"],k=[0,0,0,0,0,0,0,0],l=0;for(i=0;8>i;i++)h[j[i]].show&&(l+=h[j[i]].getWidth(),k[i]=l);if(f.right+=l,h.x2axis.show&&(f.top+=h.x2axis.getHeight()),this.title.show&&(f.top+=this.title.getHeight()),h.xaxis.show&&(f.bottom+=h.xaxis.getHeight()),this.options.gridDimensions&&a.isPlainObject(this.options.gridDimensions)){var m=parseInt(this.options.gridDimensions.width,10)||0,n=parseInt(this.options.gridDimensions.height,10)||0,o=(this._width-f.left-f.right-m)/2,p=(this._height-f.top-f.bottom-n)/2;p>=0&&o>=0&&(f.top+=p,f.bottom+=p,f.left+=o,f.right+=o)}var q=["top","bottom","left","right"];for(var i in q)null==this._gridPadding[q[i]]&&f[q[i]]>0?this._gridPadding[q[i]]=f[q[i]]:null==this._gridPadding[q[i]]&&(this._gridPadding[q[i]]=this._defaultGridPadding[q[i]]);var r=this._gridPadding;for("outsideGrid"===this.legend.placement&&(r={top:this.title.getHeight(),left:0,right:0,bottom:0},"s"===this.legend.location&&(r.left=this._gridPadding.left,r.right=this._gridPadding.right)),h.xaxis.pack({position:"absolute",bottom:this._gridPadding.bottom-h.xaxis.getHeight(),left:0,width:this._width},{min:this._gridPadding.left,max:this._width-this._gridPadding.right}),h.yaxis.pack({position:"absolute",top:0,left:this._gridPadding.left-h.yaxis.getWidth(),height:this._height},{min:this._height-this._gridPadding.bottom,max:this._gridPadding.top}),h.x2axis.pack({position:"absolute",top:this._gridPadding.top-h.x2axis.getHeight(),left:0,width:this._width},{min:this._gridPadding.left,max:this._width-this._gridPadding.right}),b=8;b>0;b--)h[j[b-1]].pack({position:"absolute",top:0,right:this._gridPadding.right-k[b-1]},{min:this._height-this._gridPadding.bottom,max:this._gridPadding.top});var s=(this._width-this._gridPadding.left-this._gridPadding.right)/2+this._gridPadding.left-h.yMidAxis.getWidth()/2;h.yMidAxis.pack({position:"absolute",top:0,left:s,zIndex:9,textAlign:"center"},{min:this._height-this._gridPadding.bottom,
max:this._gridPadding.top}),this.target.append(this.grid.createElement(this._gridPadding,this)),this.grid.draw();var t=this.series,u=t.length;for(b=0,d=u;d>b;b++)c=this.seriesStack[b],this.target.append(t[c].shadowCanvas.createElement(this._gridPadding,"jqplot-series-shadowCanvas",null,this)),t[c].shadowCanvas.setContext(),t[c].shadowCanvas._elem.data("seriesIndex",c);for(b=0,d=u;d>b;b++)c=this.seriesStack[b],this.target.append(t[c].canvas.createElement(this._gridPadding,"jqplot-series-canvas",null,this)),t[c].canvas.setContext(),t[c].canvas._elem.data("seriesIndex",c);this.target.append(this.eventCanvas.createElement(this._gridPadding,"jqplot-event-canvas",null,this)),this.eventCanvas.setContext(),this.eventCanvas._ctx.fillStyle="rgba(0,0,0,0)",this.eventCanvas._ctx.fillRect(0,0,this.eventCanvas._ctx.canvas.width,this.eventCanvas._ctx.canvas.height),this.bindCustomEvents(),this.legend.preDraw?(this.eventCanvas._elem.before(e),this.legend.pack(r),this.legend._elem?this.drawSeries({legendInfo:{location:this.legend.location,placement:this.legend.placement,width:this.legend.getWidth(),height:this.legend.getHeight(),xoffset:this.legend.xoffset,yoffset:this.legend.yoffset}}):this.drawSeries()):(this.drawSeries(),u&&a(t[u-1].canvas._elem).after(e),this.legend.pack(r));for(var b=0,d=a.jqplot.eventListenerHooks.length;d>b;b++)this.eventCanvas._elem.bind(a.jqplot.eventListenerHooks[b][0],{plot:this},a.jqplot.eventListenerHooks[b][1]);for(var b=0,d=this.eventListenerHooks.hooks.length;d>b;b++)this.eventCanvas._elem.bind(this.eventListenerHooks.hooks[b][0],{plot:this},this.eventListenerHooks.hooks[b][1]);var v=this.fillBetween;if("number"==typeof v.series1)v.fill&&v.series1!==v.series2&&v.series1<u&&v.series2<u&&"line"===t[v.series1]._type&&"line"===t[v.series2]._type&&this.doFillBetweenLines();else if(null!=v.series1&&null!=v.series2){var w=!1;if(v.series1.length===v.series2.length)for(var x=0,y=0,z=0;z<v.series1.length;z++){if(x=v.series1[z],y=v.series2[z],!(x!==y&&u>x&&u>y&&"line"===t[x]._type&&"line"===t[y]._type)){w=!1;break}w=!0}v.fill&&w&&this.doFillBetweenLines()}for(var b=0,d=a.jqplot.postDrawHooks.length;d>b;b++)a.jqplot.postDrawHooks[b].call(this);for(var b=0,d=this.postDrawHooks.hooks.length;d>b;b++)this.postDrawHooks.hooks[b].apply(this,this.postDrawHooks.args[b]);this.target.is(":visible")&&(this._drawCount+=1);var A,B,C,D;for(b=0,d=u;d>b;b++)A=t[b],B=A.renderer,C=".jqplot-point-label.jqplot-series-"+b,B.animation&&B.animation._supported&&B.animation.show&&(this._drawCount<2||this.animateReplot)&&(D=this.target.find(C),D.stop(!0,!0).hide(),A.canvas._elem.stop(!0,!0).hide(),A.shadowCanvas._elem.stop(!0,!0).hide(),A.canvas._elem.jqplotEffect("blind",{mode:"show",direction:B.animation.direction},B.animation.speed),A.shadowCanvas._elem.jqplotEffect("blind",{mode:"show",direction:B.animation.direction},B.animation.speed),D.fadeIn(.8*B.animation.speed));D=null,this.target.trigger("jqplotPostDraw",[this])}},g.prototype.doFillBetweenLines=function(){function a(a,e){var f=c[a],g=c[e];if(g.renderer.smooth)var h=g.renderer._smoothedData.slice(0).reverse();else var h=g.gridData.slice(0).reverse();if(f.renderer.smooth)var i=f.renderer._smoothedData.concat(h);else var i=f.gridData.concat(h);var j=null!==b.color?b.color:c[d].fillColor,k=null!==b.baseSeries?b.baseSeries:a,l=c[k].renderer.shapeRenderer,m={fillStyle:j,fill:!0,closePath:!0};l.draw(f.shadowCanvas._ctx,i,m)}var b=this.fillBetween,c=this.series,d=b.series1,e=b.series2,f=0,g=0;if("number"==typeof d&&"number"==typeof e)f=e>d?d:e,g=e>d?e:d,a(f,g);else for(var h=0;h<d.length;h++)f=d[h]<e[h]?d[h]:e[h],g=e[h]>d[h]?e[h]:d[h],a(f,g)},this.bindCustomEvents=function(){this.eventCanvas._elem.bind("click",{plot:this},this.onClick),this.eventCanvas._elem.bind("dblclick",{plot:this},this.onDblClick),this.eventCanvas._elem.bind("mousedown",{plot:this},this.onMouseDown),this.eventCanvas._elem.bind("mousemove",{plot:this},this.onMouseMove),this.eventCanvas._elem.bind("mouseenter",{plot:this},this.onMouseEnter),this.eventCanvas._elem.bind("mouseleave",{plot:this},this.onMouseLeave),this.captureRightClick?(this.eventCanvas._elem.bind("mouseup",{plot:this},this.onRightClick),this.eventCanvas._elem.get(0).oncontextmenu=function(){return!1}):this.eventCanvas._elem.bind("mouseup",{plot:this},this.onMouseUp)},this.onClick=function(b){var c=i(b),d=b.data.plot,e=j(c.gridPos,d),f=a.Event("jqplotClick");f.pageX=b.pageX,f.pageY=b.pageY,a(this).trigger(f,[c.gridPos,c.dataPos,e,d])},this.onDblClick=function(b){var c=i(b),d=b.data.plot,e=j(c.gridPos,d),f=a.Event("jqplotDblClick");f.pageX=b.pageX,f.pageY=b.pageY,a(this).trigger(f,[c.gridPos,c.dataPos,e,d])},this.onMouseDown=function(b){var c=i(b),d=b.data.plot,e=j(c.gridPos,d),f=a.Event("jqplotMouseDown");f.pageX=b.pageX,f.pageY=b.pageY,a(this).trigger(f,[c.gridPos,c.dataPos,e,d])},this.onMouseUp=function(b){var c=i(b),d=a.Event("jqplotMouseUp");d.pageX=b.pageX,d.pageY=b.pageY,a(this).trigger(d,[c.gridPos,c.dataPos,null,b.data.plot])},this.onRightClick=function(b){var c=i(b),d=b.data.plot,e=j(c.gridPos,d);if(d.captureRightClick)if(3==b.which){var f=a.Event("jqplotRightClick");f.pageX=b.pageX,f.pageY=b.pageY,a(this).trigger(f,[c.gridPos,c.dataPos,e,d])}else{var f=a.Event("jqplotMouseUp");f.pageX=b.pageX,f.pageY=b.pageY,a(this).trigger(f,[c.gridPos,c.dataPos,e,d])}},this.onMouseMove=function(b){var c=i(b),d=b.data.plot,e=j(c.gridPos,d),f=a.Event("jqplotMouseMove");f.pageX=b.pageX,f.pageY=b.pageY,a(this).trigger(f,[c.gridPos,c.dataPos,e,d])},this.onMouseEnter=function(b){var c=i(b),d=b.data.plot,e=a.Event("jqplotMouseEnter");e.pageX=b.pageX,e.pageY=b.pageY,e.relatedTarget=b.relatedTarget,a(this).trigger(e,[c.gridPos,c.dataPos,null,d])},this.onMouseLeave=function(b){var c=i(b),d=b.data.plot,e=a.Event("jqplotMouseLeave");e.pageX=b.pageX,e.pageY=b.pageY,e.relatedTarget=b.relatedTarget,a(this).trigger(e,[c.gridPos,c.dataPos,null,d])},this.drawSeries=function(b,c){var d,e,f;if(c="number"==typeof b&&null==c?b:c,b="object"==typeof b?b:{},c!=F)e=this.series[c],f=e.shadowCanvas._ctx,f.clearRect(0,0,f.canvas.width,f.canvas.height),e.drawShadow(f,b,this),f=e.canvas._ctx,f.clearRect(0,0,f.canvas.width,f.canvas.height),e.draw(f,b,this),e.renderer.constructor==a.jqplot.BezierCurveRenderer&&c<this.series.length-1&&this.drawSeries(c+1);else for(d=0;d<this.series.length;d++)e=this.series[d],f=e.shadowCanvas._ctx,f.clearRect(0,0,f.canvas.width,f.canvas.height),e.drawShadow(f,b,this),f=e.canvas._ctx,f.clearRect(0,0,f.canvas.width,f.canvas.height),e.draw(f,b,this);b=c=d=e=f=null},this.moveSeriesToFront=function(b){b=parseInt(b,10);var c=a.inArray(b,this.seriesStack);if(-1!=c){if(c==this.seriesStack.length-1)return void(this.previousSeriesStack=this.seriesStack.slice(0));var d=this.seriesStack[this.seriesStack.length-1],e=this.series[b].canvas._elem.detach(),f=this.series[b].shadowCanvas._elem.detach();this.series[d].shadowCanvas._elem.after(f),this.series[d].canvas._elem.after(e),this.previousSeriesStack=this.seriesStack.slice(0),this.seriesStack.splice(c,1),this.seriesStack.push(b)}},this.moveSeriesToBack=function(b){b=parseInt(b,10);var c=a.inArray(b,this.seriesStack);if(0!=c&&-1!=c){var d=this.seriesStack[0],e=this.series[b].canvas._elem.detach(),f=this.series[b].shadowCanvas._elem.detach();this.series[d].shadowCanvas._elem.before(f),this.series[d].canvas._elem.before(e),this.previousSeriesStack=this.seriesStack.slice(0),this.seriesStack.splice(c,1),this.seriesStack.unshift(b)}},this.restorePreviousSeriesOrder=function(){var a,b,c,d,e,f;if(this.seriesStack!=this.previousSeriesStack){for(a=1;a<this.previousSeriesStack.length;a++)e=this.previousSeriesStack[a],f=this.previousSeriesStack[a-1],b=this.series[e].canvas._elem.detach(),c=this.series[e].shadowCanvas._elem.detach(),this.series[f].shadowCanvas._elem.after(c),this.series[f].canvas._elem.after(b);d=this.seriesStack.slice(0),this.seriesStack=this.previousSeriesStack.slice(0),this.previousSeriesStack=d}},this.restoreOriginalSeriesOrder=function(){var a,b,c,d=[];for(a=0;a<this.series.length;a++)d.push(a);if(this.seriesStack!=d)for(this.previousSeriesStack=this.seriesStack.slice(0),this.seriesStack=d,a=1;a<this.seriesStack.length;a++)b=this.series[a].canvas._elem.detach(),c=this.series[a].shadowCanvas._elem.detach(),this.series[a-1].shadowCanvas._elem.after(c),this.series[a-1].canvas._elem.after(b)},this.activateTheme=function(a){this.themeEngine.activate(this,a)}}function h(a,b){return(3.4182054+b)*Math.pow(a,-.3534992)}function i(a){var b=(Math.exp(2*a)-1)/(Math.exp(2*a)+1);return b}function j(a){function b(a,b){return a-b==0?Math.pow(10,10):a-b}var c=this.renderer.smooth,d=this.canvas.getWidth(),e=this._xaxis.series_p2u,f=this._yaxis.series_p2u,g=null,i=a.length/d,j=[],k=[];g=isNaN(parseFloat(c))?h(i,.5):parseFloat(c);for(var l=[],m=[],n=0,o=a.length;o>n;n++)l.push(a[n][1]),m.push(a[n][0]);for(var p,q,r,s,t=a.length-1,u=1,v=a.length;v>u;u++){for(var w=[],x=[],y=0;2>y;y++){var n=u-1+y;0==n||n==t?w[y]=Math.pow(10,10):l[n+1]-l[n]==0||l[n]-l[n-1]==0?w[y]=0:(m[n+1]-m[n])/(l[n+1]-l[n])+(m[n]-m[n-1])/(l[n]-l[n-1])==0?w[y]=0:(l[n+1]-l[n])*(l[n]-l[n-1])<0?w[y]=0:w[y]=2/(b(m[n+1],m[n])/(l[n+1]-l[n])+b(m[n],m[n-1])/(l[n]-l[n-1]))}1==u?w[0]=1.5*(l[1]-l[0])/b(m[1],m[0])-w[1]/2:u==t&&(w[1]=1.5*(l[t]-l[t-1])/b(m[t],m[t-1])-w[0]/2),x[0]=-2*(w[1]+2*w[0])/b(m[u],m[u-1])+6*(l[u]-l[u-1])/Math.pow(b(m[u],m[u-1]),2),x[1]=2*(2*w[1]+w[0])/b(m[u],m[u-1])-6*(l[u]-l[u-1])/Math.pow(b(m[u],m[u-1]),2),s=1/6*(x[1]-x[0])/b(m[u],m[u-1]),r=.5*(m[u]*x[0]-m[u-1]*x[1])/b(m[u],m[u-1]),q=(l[u]-l[u-1]-r*(Math.pow(m[u],2)-Math.pow(m[u-1],2))-s*(Math.pow(m[u],3)-Math.pow(m[u-1],3)))/b(m[u],m[u-1]),p=l[u-1]-q*m[u-1]-r*Math.pow(m[u-1],2)-s*Math.pow(m[u-1],3);for(var z,A,B=(m[u]-m[u-1])/g,y=0,o=g;o>y;y++)z=[],A=m[u-1]+y*B,z.push(A),z.push(p+q*A+r*Math.pow(A,2)+s*Math.pow(A,3)),j.push(z),k.push([e(z[0]),f(z[1])])}return j.push(a[n]),k.push([e(a[n][0]),f(a[n][1])]),[j,k]}function k(a){var b,c,d,e,f,g,j,k,l,m,n,o,p,q,r,s,t,u,v=this.renderer.smooth,w=this.renderer.tension,x=this.canvas.getWidth(),y=this._xaxis.series_p2u,z=this._yaxis.series_p2u,A=null,B=null,C=null,D=null,E=null,F=null,G=null,H=a.length/x,I=[],J=[];A=isNaN(parseFloat(v))?h(H,.5):parseFloat(v),isNaN(parseFloat(w))||(w=parseFloat(w));for(var K=0,L=a.length-1;L>K;K++)for(null===w?(E=Math.abs((a[K+1][1]-a[K][1])/(a[K+1][0]-a[K][0])),q=.3,r=.6,s=(r-q)/2,t=2.5,u=-1.4,G=E/t+u,C=s*i(G)-s*i(u)+q,K>0&&(F=Math.abs((a[K][1]-a[K-1][1])/(a[K][0]-a[K-1][0]))),G=F/t+u,D=s*i(G)-s*i(u)+q,B=(C+D)/2):B=w,b=0;A>b;b++)c=b/A,d=(1+2*c)*Math.pow(1-c,2),e=c*Math.pow(1-c,2),f=Math.pow(c,2)*(3-2*c),g=Math.pow(c,2)*(c-1),a[K-1]?(j=B*(a[K+1][0]-a[K-1][0]),k=B*(a[K+1][1]-a[K-1][1])):(j=B*(a[K+1][0]-a[K][0]),k=B*(a[K+1][1]-a[K][1])),a[K+2]?(l=B*(a[K+2][0]-a[K][0]),m=B*(a[K+2][1]-a[K][1])):(l=B*(a[K+1][0]-a[K][0]),m=B*(a[K+1][1]-a[K][1])),n=d*a[K][0]+f*a[K+1][0]+e*j+g*l,o=d*a[K][1]+f*a[K+1][1]+e*k+g*m,p=[n,o],I.push(p),J.push([y(n),z(o)]);return I.push(a[L]),J.push([y(a[L][0]),z(a[L][1])]),[I,J]}function l(b,c,d){for(var e=0;e<this.series.length;e++)this.series[e].renderer.constructor==a.jqplot.LineRenderer&&this.series[e].highlightMouseOver&&(this.series[e].highlightMouseDown=!1)}function m(){this.plugins.lineRenderer&&this.plugins.lineRenderer.highlightCanvas&&(this.plugins.lineRenderer.highlightCanvas.resetCanvas(),this.plugins.lineRenderer.highlightCanvas=null),this.plugins.lineRenderer.highlightedSeriesIndex=null,this.plugins.lineRenderer.highlightCanvas=new a.jqplot.GenericCanvas,this.eventCanvas._elem.before(this.plugins.lineRenderer.highlightCanvas.createElement(this._gridPadding,"jqplot-lineRenderer-highlight-canvas",this._plotDimensions,this)),this.plugins.lineRenderer.highlightCanvas.setContext(),this.eventCanvas._elem.bind("mouseleave",{plot:this},function(a){o(a.data.plot)})}function n(a,b,c,d){var e=a.series[b],f=a.plugins.lineRenderer.highlightCanvas;f._ctx.clearRect(0,0,f._ctx.canvas.width,f._ctx.canvas.height),e._highlightedPoint=c,a.plugins.lineRenderer.highlightedSeriesIndex=b;var g={fillStyle:e.highlightColor};"line"===e.type&&e.renderer.bands.show&&(g.fill=!0,g.closePath=!0),e.renderer.shapeRenderer.draw(f._ctx,d,g),f=null}function o(a){var b=a.plugins.lineRenderer.highlightCanvas;b._ctx.clearRect(0,0,b._ctx.canvas.width,b._ctx.canvas.height);for(var c=0;c<a.series.length;c++)a.series[c]._highlightedPoint=null;a.plugins.lineRenderer.highlightedSeriesIndex=null,a.target.trigger("jqplotDataUnhighlight"),b=null}function p(a,b,c,d,e){if(d){var f=[d.seriesIndex,d.pointIndex,d.data],g=jQuery.Event("jqplotDataMouseOver");if(g.pageX=a.pageX,g.pageY=a.pageY,e.target.trigger(g,f),e.series[f[0]].highlightMouseOver&&f[0]!=e.plugins.lineRenderer.highlightedSeriesIndex){var h=jQuery.Event("jqplotDataHighlight");h.which=a.which,h.pageX=a.pageX,h.pageY=a.pageY,e.target.trigger(h,f),n(e,d.seriesIndex,d.pointIndex,d.points)}}else null==d&&o(e)}function q(a,b,c,d,e){if(d){var f=[d.seriesIndex,d.pointIndex,d.data];if(e.series[f[0]].highlightMouseDown&&f[0]!=e.plugins.lineRenderer.highlightedSeriesIndex){var g=jQuery.Event("jqplotDataHighlight");g.which=a.which,g.pageX=a.pageX,g.pageY=a.pageY,e.target.trigger(g,f),n(e,d.seriesIndex,d.pointIndex,d.points)}}else null==d&&o(e)}function r(a,b,c,d,e){var f=e.plugins.lineRenderer.highlightedSeriesIndex;null!=f&&e.series[f].highlightMouseDown&&o(e)}function s(a,b,c,d,e){if(d){var f=[d.seriesIndex,d.pointIndex,d.data],g=jQuery.Event("jqplotDataClick");g.which=a.which,g.pageX=a.pageX,g.pageY=a.pageY,e.target.trigger(g,f)}}function t(a,b,c,d,e){if(d){var f=[d.seriesIndex,d.pointIndex,d.data],g=e.plugins.lineRenderer.highlightedSeriesIndex;null!=g&&e.series[g].highlightMouseDown&&o(e);var h=jQuery.Event("jqplotDataRightClick");h.which=a.which,h.pageX=a.pageX,h.pageY=a.pageY,e.target.trigger(h,f)}}function u(a){var b;if(a=Math.abs(a),a>=10)b="%d";else if(a>1)b=a===parseInt(a,10)?"%d":"%.1f";else{var c=-Math.floor(Math.log(a)/Math.LN10);b="%."+c+"f"}return b}function v(b,c,d){for(var e,f,g,h,i,j,k,l=Math.floor(d/2),m=Math.ceil(1.5*d),n=Number.MAX_VALUE,o=c-b,p=a.jqplot.getSignificantFigures,q=0,r=m-l+1;r>q;q++)j=l+q,e=o/(j-1),f=p(e),e=Math.abs(d-j)+f.digitsRight,n>e?(n=e,g=j,k=f.digitsRight):e===n&&f.digitsRight<k&&(g=j,k=f.digitsRight);return h=Math.max(k,Math.max(p(b).digitsRight,p(c).digitsRight)),i=0===h?"%d":"%."+h+"f",e=o/(g-1),[b,c,g,i,e]}function w(a,b){b=b||7;var c,d=a/(b-1),e=Math.pow(10,Math.floor(Math.log(d)/Math.LN10)),f=d/e;return c=1>e?f>5?10*e:f>2?5*e:f>1?2*e:e:f>5?10*e:f>4?5*e:f>3?4*e:f>2?3*e:f>1?2*e:e}function x(a,b){b=b||1;var c,d=Math.floor(Math.log(a)/Math.LN10),e=Math.pow(10,d),f=a/e;return f/=b,c=.38>=f?.1:1.6>=f?.2:4>=f?.5:8>=f?1:16>=f?2:5,c*e}function y(a,b){var c,d,e=Math.floor(Math.log(a)/Math.LN10),f=Math.pow(10,e),g=a/f;return g/=b,d=.38>=g?.1:1.6>=g?.2:4>=g?.5:8>=g?1:16>=g?2:5,c=d*f,[c,d,f]}function z(a,b){return a-b}function A(a){if(null==a||"object"!=typeof a)return a;var b=new a.constructor;for(var c in a)b[c]=A(a[c]);return b}function B(a,b){if(null!=b&&"object"==typeof b)for(var c in b)"highlightColors"==c&&(a[c]=A(b[c])),null!=b[c]&&"object"==typeof b[c]?(a.hasOwnProperty(c)||(a[c]={}),B(a[c],b[c])):a[c]=b[c]}function C(a,b){if(b.indexOf)return b.indexOf(a);for(var c=0,d=b.length;d>c;c++)if(b[c]===a)return c;return-1}function D(a){return null===a?"[object Null]":Object.prototype.toString.call(a)}function E(b,c,d,e){return a.isPlainObject(b)?b:(b={effect:b},c===F&&(c={}),a.isFunction(c)&&(e=c,d=null,c={}),("number"===a.type(c)||a.fx.speeds[c])&&(e=d,d=c,c={}),a.isFunction(d)&&(e=d,d=null),c&&a.extend(b,c),d=d||c.duration,b.duration=a.fx.off?0:"number"==typeof d?d:d in a.fx.speeds?a.fx.speeds[d]:a.fx.speeds._default,b.complete=e||c.complete,b)}var F;a.fn.emptyForce=function(){for(var b,c=0;null!=(b=a(this)[c]);c++){if(1===b.nodeType&&a.cleanData(b.getElementsByTagName("*")),a.jqplot.use_excanvas)b.outerHTML="";else for(;b.firstChild;)b.removeChild(b.firstChild);b=null}return a(this)},a.fn.removeChildForce=function(a){for(;a.firstChild;)this.removeChildForce(a.firstChild),a.removeChild(a.firstChild)},a.fn.jqplot=function(){for(var b=[],c=[],d=0,e=arguments.length;e>d;d++)a.isArray(arguments[d])?b.push(arguments[d]):a.isPlainObject(arguments[d])&&c.push(arguments[d]);return this.each(function(d){var e,f,g,h,i=a(this),j=b.length,k=c.length;g=j>d?b[d]:j?b[j-1]:null,h=k>d?c[d]:k?c[k-1]:null,e=i.attr("id"),e===F&&(e="jqplot_target_"+a.jqplot.targetCounter++,i.attr("id",e)),f=a.jqplot(e,g,h),i.data("jqplot",f)})},a.jqplot=function(b,c,d){var e=null,f=null;3===arguments.length?(e=c,f=d):2===arguments.length&&(a.isArray(c)?e=c:a.isPlainObject(c)&&(f=c)),null===e&&null!==f&&f.data&&(e=f.data);var h=new g;if(a("#"+b).removeClass("jqplot-error"),!a.jqplot.config.catchErrors)return h.init(b,e,f),h.draw(),h.themeEngine.init.call(h),h;try{return h.init(b,e,f),h.draw(),h.themeEngine.init.call(h),h}catch(i){var j=a.jqplot.config.errorMessage||i.message;a("#"+b).append('<div class="jqplot-error-message">'+j+"</div>"),a("#"+b).addClass("jqplot-error"),document.getElementById(b).style.background=a.jqplot.config.errorBackground,document.getElementById(b).style.border=a.jqplot.config.errorBorder,document.getElementById(b).style.fontFamily=a.jqplot.config.errorFontFamily,document.getElementById(b).style.fontSize=a.jqplot.config.errorFontSize,document.getElementById(b).style.fontStyle=a.jqplot.config.errorFontStyle,document.getElementById(b).style.fontWeight=a.jqplot.config.errorFontWeight}},a.jqplot.version="1.0.9",a.jqplot.revision="d96a669",a.jqplot.targetCounter=1,a.jqplot.CanvasManager=function(){"undefined"==typeof a.jqplot.CanvasManager.canvases&&(a.jqplot.CanvasManager.canvases=[],a.jqplot.CanvasManager.free=[]);var b=[];this.getCanvas=function(){var c,d=!0;if(!a.jqplot.use_excanvas)for(var e=0,f=a.jqplot.CanvasManager.canvases.length;f>e;e++)if(a.jqplot.CanvasManager.free[e]===!0){d=!1,c=a.jqplot.CanvasManager.canvases[e],a.jqplot.CanvasManager.free[e]=!1,b.push(e);break}return d&&(c=document.createElement("canvas"),b.push(a.jqplot.CanvasManager.canvases.length),a.jqplot.CanvasManager.canvases.push(c),a.jqplot.CanvasManager.free.push(!1)),c},this.initCanvas=function(b){if(a.jqplot.use_excanvas)return window.G_vmlCanvasManager.initElement(b);var c=b.getContext("2d"),d=1;window.devicePixelRatio>1&&(c.webkitBackingStorePixelRatio===F||c.webkitBackingStorePixelRatio<2)&&(d=window.devicePixelRatio);var e=b.width,f=b.height;return b.width=d*b.width,b.height=d*b.height,b.style.width=e+"px",b.style.height=f+"px",c.save(),c.scale(d,d),b},this.freeAllCanvases=function(){for(var a=0,c=b.length;c>a;a++)this.freeCanvas(b[a]);b=[]},this.freeCanvas=function(b){if(a.jqplot.use_excanvas&&window.G_vmlCanvasManager.uninitElement!==F)window.G_vmlCanvasManager.uninitElement(a.jqplot.CanvasManager.canvases[b]),a.jqplot.CanvasManager.canvases[b]=null;else{var c=a.jqplot.CanvasManager.canvases[b];c.getContext("2d").clearRect(0,0,c.width,c.height),a(c).unbind().removeAttr("class").removeAttr("style"),a(c).css({left:"",top:"",position:""}),c.width=0,c.height=0,a.jqplot.CanvasManager.free[b]=!0}}},a.jqplot.log=function(){window.console&&window.console.log.apply(window.console,arguments)},a.jqplot.config={addDomReference:!1,enablePlugins:!1,defaultHeight:300,defaultWidth:400,UTCAdjust:!1,timezoneOffset:new Date(6e4*(new Date).getTimezoneOffset()),errorMessage:"",errorBackground:"",errorBorder:"",errorFontFamily:"",errorFontSize:"",errorFontStyle:"",errorFontWeight:"",catchErrors:!1,defaultTickFormatString:"%.1f",defaultColors:["#4bb2c5","#EAA228","#c5b47f","#579575","#839557","#958c12","#953579","#4b5de4","#d8b83f","#ff5800","#0085cc","#c747a3","#cddf54","#FBD178","#26B4E3","#bd70c7"],defaultNegativeColors:["#498991","#C08840","#9F9274","#546D61","#646C4A","#6F6621","#6E3F5F","#4F64B0","#A89050","#C45923","#187399","#945381","#959E5C","#C7AF7B","#478396","#907294"],dashLength:4,gapLength:4,dotGapLength:2.5,srcLocation:"jqplot/src/",pluginLocation:"jqplot/src/plugins/"},a.jqplot.arrayMax=function(a){return Math.max.apply(Math,a)},a.jqplot.arrayMin=function(a){return Math.min.apply(Math,a)},a.jqplot.enablePlugins=a.jqplot.config.enablePlugins,a.jqplot.support_canvas=function(){return"undefined"==typeof a.jqplot.support_canvas.result&&(a.jqplot.support_canvas.result=!!document.createElement("canvas").getContext),a.jqplot.support_canvas.result},a.jqplot.support_canvas_text=function(){return"undefined"==typeof a.jqplot.support_canvas_text.result&&(window.G_vmlCanvasManager!==F&&window.G_vmlCanvasManager._version>887?a.jqplot.support_canvas_text.result=!0:a.jqplot.support_canvas_text.result=!(!document.createElement("canvas").getContext||"function"!=typeof document.createElement("canvas").getContext("2d").fillText)),a.jqplot.support_canvas_text.result},a.jqplot.use_excanvas=a.support.boxModel&&a.support.objectAll&&$support.leadingWhitespace||a.jqplot.support_canvas()?!1:!0,a.jqplot.preInitHooks=[],a.jqplot.postInitHooks=[],a.jqplot.preParseOptionsHooks=[],a.jqplot.postParseOptionsHooks=[],a.jqplot.preDrawHooks=[],a.jqplot.postDrawHooks=[],a.jqplot.preDrawSeriesHooks=[],a.jqplot.postDrawSeriesHooks=[],a.jqplot.preDrawLegendHooks=[],a.jqplot.addLegendRowHooks=[],a.jqplot.preSeriesInitHooks=[],a.jqplot.postSeriesInitHooks=[],a.jqplot.preParseSeriesOptionsHooks=[],a.jqplot.postParseSeriesOptionsHooks=[],a.jqplot.eventListenerHooks=[],a.jqplot.preDrawSeriesShadowHooks=[],a.jqplot.postDrawSeriesShadowHooks=[],a.jqplot.ElemContainer=function(){this._elem,this._plotWidth,this._plotHeight,this._plotDimensions={height:null,width:null}},a.jqplot.ElemContainer.prototype.createElement=function(b,c,d,e,f){this._offsets=c;var g=d||"jqplot",h=document.createElement(b);return this._elem=a(h),this._elem.addClass(g),this._elem.css(e),this._elem.attr(f),h=null,this._elem},a.jqplot.ElemContainer.prototype.getWidth=function(){return this._elem?this._elem.outerWidth(!0):null},a.jqplot.ElemContainer.prototype.getHeight=function(){return this._elem?this._elem.outerHeight(!0):null},a.jqplot.ElemContainer.prototype.getPosition=function(){return this._elem?this._elem.position():{top:null,left:null,bottom:null,right:null}},a.jqplot.ElemContainer.prototype.getTop=function(){return this.getPosition().top},a.jqplot.ElemContainer.prototype.getLeft=function(){return this.getPosition().left},a.jqplot.ElemContainer.prototype.getBottom=function(){return this._elem.css("bottom")},a.jqplot.ElemContainer.prototype.getRight=function(){return this._elem.css("right")},b.prototype=new a.jqplot.ElemContainer,b.prototype.constructor=b,b.prototype.init=function(){a.isFunction(this.renderer)&&(this.renderer=new this.renderer),this.tickOptions.axis=this.name,null==this.tickOptions.showMark&&(this.tickOptions.showMark=this.showTicks),null==this.tickOptions.showMark&&(this.tickOptions.showMark=this.showTickMarks),null==this.tickOptions.showLabel&&(this.tickOptions.showLabel=this.showTicks),null==this.label||""==this.label?this.showLabel=!1:this.labelOptions.label=this.label,0==this.showLabel&&(this.labelOptions.show=!1),0==this.pad&&(this.pad=1),0==this.padMax&&(this.padMax=1),0==this.padMin&&(this.padMin=1),null==this.padMax&&(this.padMax=(this.pad-1)/2+1),null==this.padMin&&(this.padMin=(this.pad-1)/2+1),this.pad=this.padMax+this.padMin-1,(null!=this.min||null!=this.max)&&(this.autoscale=!1),null==this.syncTicks&&this.name.indexOf("y")>-1?this.syncTicks=!0:null==this.syncTicks&&(this.syncTicks=!1),this.renderer.init.call(this,this.rendererOptions)},b.prototype.draw=function(a,b){return this.__ticks&&(this.__ticks=null),this.renderer.draw.call(this,a,b)},b.prototype.set=function(){this.renderer.set.call(this)},b.prototype.pack=function(a,b){this.show&&this.renderer.pack.call(this,a,b),null==this._min&&(this._min=this.min,this._max=this.max,this._tickInterval=this.tickInterval,this._numberTicks=this.numberTicks,this.__ticks=this._ticks)},b.prototype.reset=function(){this.renderer.reset.call(this)},b.prototype.resetScale=function(b){a.extend(!0,this,{min:null,max:null,numberTicks:null,tickInterval:null,_ticks:[],ticks:[]},b),this.resetDataBounds()},b.prototype.resetDataBounds=function(){var b=this._dataBounds;b.min=null,b.max=null;for(var c,d,e,f=this.show?!0:!1,g=0;g<this._series.length;g++)if(d=this._series[g],d.show||this.scaleToHiddenSeries){e=d._plotData,"line"===d._type&&d.renderer.bands.show&&"x"!==this.name.charAt(0)&&(e=[[0,d.renderer.bands._min],[1,d.renderer.bands._max]]);var h=1,i=1;null!=d._type&&"ohlc"==d._type&&(h=3,i=2);for(var j=0,c=e.length;c>j;j++)"xaxis"==this.name||"x2axis"==this.name?((null!=e[j][0]&&e[j][0]<b.min||null==b.min)&&(b.min=e[j][0]),(null!=e[j][0]&&e[j][0]>b.max||null==b.max)&&(b.max=e[j][0])):((null!=e[j][h]&&e[j][h]<b.min||null==b.min)&&(b.min=e[j][h]),(null!=e[j][i]&&e[j][i]>b.max||null==b.max)&&(b.max=e[j][i]));f&&d.renderer.constructor!==a.jqplot.BarRenderer?f=!1:f&&this._options.hasOwnProperty("forceTickAt0")&&0==this._options.forceTickAt0?f=!1:f&&d.renderer.constructor===a.jqplot.BarRenderer&&("vertical"==d.barDirection&&"xaxis"!=this.name&&"x2axis"!=this.name?(null!=this._options.pad||null!=this._options.padMin)&&(f=!1):"horizontal"!=d.barDirection||"xaxis"!=this.name&&"x2axis"!=this.name||(null!=this._options.pad||null!=this._options.padMin)&&(f=!1))}f&&this.renderer.constructor===a.jqplot.LinearAxisRenderer&&b.min>=0&&(this.padMin=1,this.forceTickAt0=!0)},c.prototype=new a.jqplot.ElemContainer,c.prototype.constructor=c,c.prototype.setOptions=function(b){if(a.extend(!0,this,b),"inside"==this.placement&&(this.placement="insideGrid"),this.xoffset>0){if("insideGrid"==this.placement)switch(this.location){case"nw":case"w":case"sw":null==this.marginLeft&&(this.marginLeft=this.xoffset+"px"),this.marginRight="0px";break;case"ne":case"e":case"se":default:null==this.marginRight&&(this.marginRight=this.xoffset+"px"),this.marginLeft="0px"}else if("outside"==this.placement)switch(this.location){case"nw":case"w":case"sw":null==this.marginRight&&(this.marginRight=this.xoffset+"px"),this.marginLeft="0px";break;case"ne":case"e":case"se":default:null==this.marginLeft&&(this.marginLeft=this.xoffset+"px"),this.marginRight="0px"}this.xoffset=0}if(this.yoffset>0){if("outside"==this.placement)switch(this.location){case"sw":case"s":case"se":null==this.marginTop&&(this.marginTop=this.yoffset+"px"),this.marginBottom="0px";break;case"ne":case"n":case"nw":default:null==this.marginBottom&&(this.marginBottom=this.yoffset+"px"),this.marginTop="0px"}else if("insideGrid"==this.placement)switch(this.location){case"sw":case"s":case"se":null==this.marginBottom&&(this.marginBottom=this.yoffset+"px"),this.marginTop="0px";break;case"ne":case"n":case"nw":default:null==this.marginTop&&(this.marginTop=this.yoffset+"px"),this.marginBottom="0px"}this.yoffset=0}},c.prototype.init=function(){a.isFunction(this.renderer)&&(this.renderer=new this.renderer),this.renderer.init.call(this,this.rendererOptions)},c.prototype.draw=function(b,c){for(var d=0;d<a.jqplot.preDrawLegendHooks.length;d++)a.jqplot.preDrawLegendHooks[d].call(this,b);return this.renderer.draw.call(this,b,c)},c.prototype.pack=function(a){this.renderer.pack.call(this,a)},d.prototype=new a.jqplot.ElemContainer,d.prototype.constructor=d,d.prototype.init=function(){a.isFunction(this.renderer)&&(this.renderer=new this.renderer),this.renderer.init.call(this,this.rendererOptions)},d.prototype.draw=function(a){return this.renderer.draw.call(this,a)},d.prototype.pack=function(){this.renderer.pack.call(this)},e.prototype=new a.jqplot.ElemContainer,e.prototype.constructor=e,e.prototype.init=function(b,c,d){this.index=b,this.gridBorderWidth=c;var e,f,g=this.data,h=[];for(e=0,f=g.length;f>e;e++)if(this.breakOnNull)h.push(g[e]);else{if(null==g[e]||null==g[e][0]||null==g[e][1])continue;h.push(g[e])}if(this.data=h,this.color||(this.color=d.colorGenerator.get(this.index)),this.negativeColor||(this.negativeColor=d.negativeColorGenerator.get(this.index)),this.fillColor||(this.fillColor=this.color),this.fillAlpha){var i=a.jqplot.normalize2rgb(this.fillColor),i=a.jqplot.getColorComponents(i);this.fillColor="rgba("+i[0]+","+i[1]+","+i[2]+","+this.fillAlpha+")"}a.isFunction(this.renderer)&&(this.renderer=new this.renderer),this.renderer.init.call(this,this.rendererOptions,d),this.markerRenderer=new this.markerRenderer,this.markerOptions.color||(this.markerOptions.color=this.color),null==this.markerOptions.show&&(this.markerOptions.show=this.showMarker),this.showMarker=this.markerOptions.show,this.markerRenderer.init(this.markerOptions)},e.prototype.draw=function(b,c,d){var e=c==F?{}:c;b=b==F?this.canvas._ctx:b;var f,g,h;for(f=0;f<a.jqplot.preDrawSeriesHooks.length;f++)a.jqplot.preDrawSeriesHooks[f].call(this,b,e);for(this.show&&(this.renderer.setGridData.call(this,d),e.preventJqPlotSeriesDrawTrigger||a(b.canvas).trigger("jqplotSeriesDraw",[this.data,this.gridData]),g=[],g=e.data?e.data:this._stack?this._plotData:this.data,h=e.gridData||this.renderer.makeGridData.call(this,g,d),"line"===this._type&&this.renderer.smooth&&this.renderer._smoothedData.length&&(h=this.renderer._smoothedData),this.renderer.draw.call(this,b,h,e,d)),f=0;f<a.jqplot.postDrawSeriesHooks.length;f++)a.jqplot.postDrawSeriesHooks[f].call(this,b,e,d);b=c=d=f=g=h=null},e.prototype.drawShadow=function(b,c,d){var e=c==F?{}:c;b=b==F?this.shadowCanvas._ctx:b;var f,g,h;for(f=0;f<a.jqplot.preDrawSeriesShadowHooks.length;f++)a.jqplot.preDrawSeriesShadowHooks[f].call(this,b,e);for(this.shadow&&(this.renderer.setGridData.call(this,d),g=[],g=e.data?e.data:this._stack?this._plotData:this.data,h=e.gridData||this.renderer.makeGridData.call(this,g,d),this.renderer.drawShadow.call(this,b,h,e,d)),f=0;f<a.jqplot.postDrawSeriesShadowHooks.length;f++)a.jqplot.postDrawSeriesShadowHooks[f].call(this,b,e);b=c=d=f=g=h=null},e.prototype.toggleDisplay=function(a,b){var c,d;c=a.data.series?a.data.series:this,a.data.speed&&(d=a.data.speed),d?c.canvas._elem.is(":hidden")||!c.show?(c.show=!0,c.canvas._elem.removeClass("jqplot-series-hidden"),c.shadowCanvas._elem&&c.shadowCanvas._elem.fadeIn(d),c.canvas._elem.fadeIn(d,b),c.canvas._elem.nextAll(".jqplot-point-label.jqplot-series-"+c.index).fadeIn(d)):(c.show=!1,c.canvas._elem.addClass("jqplot-series-hidden"),c.shadowCanvas._elem&&c.shadowCanvas._elem.fadeOut(d),c.canvas._elem.fadeOut(d,b),c.canvas._elem.nextAll(".jqplot-point-label.jqplot-series-"+c.index).fadeOut(d)):c.canvas._elem.is(":hidden")||!c.show?(c.show=!0,c.canvas._elem.removeClass("jqplot-series-hidden"),c.shadowCanvas._elem&&c.shadowCanvas._elem.show(),c.canvas._elem.show(0,b),c.canvas._elem.nextAll(".jqplot-point-label.jqplot-series-"+c.index).show()):(c.show=!1,c.canvas._elem.addClass("jqplot-series-hidden"),c.shadowCanvas._elem&&c.shadowCanvas._elem.hide(),c.canvas._elem.hide(0,b),c.canvas._elem.nextAll(".jqplot-point-label.jqplot-series-"+c.index).hide())},f.prototype=new a.jqplot.ElemContainer,f.prototype.constructor=f,f.prototype.init=function(){a.isFunction(this.renderer)&&(this.renderer=new this.renderer),this.renderer.init.call(this,this.rendererOptions)},f.prototype.createElement=function(a,b){return this._offsets=a,this.renderer.createElement.call(this,b)},f.prototype.draw=function(){this.renderer.draw.call(this)},a.jqplot.GenericCanvas=function(){a.jqplot.ElemContainer.call(this),this._ctx},a.jqplot.GenericCanvas.prototype=new a.jqplot.ElemContainer,a.jqplot.GenericCanvas.prototype.constructor=a.jqplot.GenericCanvas,a.jqplot.GenericCanvas.prototype.createElement=function(b,c,d,e){this._offsets=b;var f="jqplot";c!=F&&(f=c);var g;return g=e.canvasManager.getCanvas(),null!=d&&(this._plotDimensions=d),g.width=this._plotDimensions.width-this._offsets.left-this._offsets.right,g.height=this._plotDimensions.height-this._offsets.top-this._offsets.bottom,this._elem=a(g),this._elem.css({position:"absolute",left:this._offsets.left,top:this._offsets.top}),this._elem.addClass(f),g=e.canvasManager.initCanvas(g),g=null,this._elem},a.jqplot.GenericCanvas.prototype.setContext=function(){return this._ctx=this._elem.get(0).getContext("2d"),this._ctx;
},a.jqplot.GenericCanvas.prototype.resetCanvas=function(){this._elem&&(a.jqplot.use_excanvas&&window.G_vmlCanvasManager.uninitElement!==F&&window.G_vmlCanvasManager.uninitElement(this._elem.get(0)),this._elem.emptyForce()),this._ctx=null},a.jqplot.HooksManager=function(){this.hooks=[],this.args=[]},a.jqplot.HooksManager.prototype.addOnce=function(a,b){b=b||[];for(var c=!1,d=0,e=this.hooks.length;e>d;d++)this.hooks[d]==a&&(c=!0);c||(this.hooks.push(a),this.args.push(b))},a.jqplot.HooksManager.prototype.add=function(a,b){b=b||[],this.hooks.push(a),this.args.push(b)},a.jqplot.EventListenerManager=function(){this.hooks=[]},a.jqplot.EventListenerManager.prototype.addOnce=function(a,b){for(var c,d,e=!1,d=0,f=this.hooks.length;f>d;d++)c=this.hooks[d],c[0]==a&&c[1]==b&&(e=!0);e||this.hooks.push([a,b])},a.jqplot.EventListenerManager.prototype.add=function(a,b){this.hooks.push([a,b])};var G=["yMidAxis","xaxis","yaxis","x2axis","y2axis","y3axis","y4axis","y5axis","y6axis","y7axis","y8axis","y9axis"];a.jqplot.computeHighlightColors=function(b){var c;if(a.isArray(b)){c=[];for(var d=0;d<b.length;d++){for(var e=a.jqplot.getColorComponents(b[d]),f=[e[0],e[1],e[2]],g=f[0]+f[1]+f[2],h=0;3>h;h++)f[h]=g>660?.85*f[h]:.73*f[h]+90,f[h]=parseInt(f[h],10),f[h]>255?255:f[h];f[3]=.3+.35*e[3],c.push("rgba("+f[0]+","+f[1]+","+f[2]+","+f[3]+")")}}else{for(var e=a.jqplot.getColorComponents(b),f=[e[0],e[1],e[2]],g=f[0]+f[1]+f[2],h=0;3>h;h++)f[h]=g>660?.85*f[h]:.73*f[h]+90,f[h]=parseInt(f[h],10),f[h]>255?255:f[h];f[3]=.3+.35*e[3],c="rgba("+f[0]+","+f[1]+","+f[2]+","+f[3]+")"}return c},a.jqplot.ColorGenerator=function(b){b=b||a.jqplot.config.defaultColors;var c=0;this.next=function(){return c<b.length?b[c++]:(c=0,b[c++])},this.previous=function(){return c>0?b[c--]:(c=b.length-1,b[c])},this.get=function(a){var c=a-b.length*Math.floor(a/b.length);return b[c]},this.setColors=function(a){b=a},this.reset=function(){c=0},this.getIndex=function(){return c},this.setIndex=function(a){c=a}},a.jqplot.hex2rgb=function(a,b){a=a.replace("#",""),3==a.length&&(a=a.charAt(0)+a.charAt(0)+a.charAt(1)+a.charAt(1)+a.charAt(2)+a.charAt(2));var c;return c="rgba("+parseInt(a.slice(0,2),16)+", "+parseInt(a.slice(2,4),16)+", "+parseInt(a.slice(4,6),16),b&&(c+=", "+b),c+=")"},a.jqplot.rgb2hex=function(a){for(var b=/rgba?\( *([0-9]{1,3}\.?[0-9]*%?) *, *([0-9]{1,3}\.?[0-9]*%?) *, *([0-9]{1,3}\.?[0-9]*%?) *(?:, *[0-9.]*)?\)/,c=a.match(b),d="#",e=1;4>e;e++){var f;-1!=c[e].search(/%/)?(f=parseInt(255*c[e]/100,10).toString(16),1==f.length&&(f="0"+f)):(f=parseInt(c[e],10).toString(16),1==f.length&&(f="0"+f)),d+=f}return d},a.jqplot.normalize2rgb=function(b,c){if(-1!=b.search(/^ *rgba?\(/))return b;if(-1!=b.search(/^ *#?[0-9a-fA-F]?[0-9a-fA-F]/))return a.jqplot.hex2rgb(b,c);throw new Error("Invalid color spec")},a.jqplot.getColorComponents=function(b){b=a.jqplot.colorKeywordMap[b]||b;for(var c=a.jqplot.normalize2rgb(b),d=/rgba?\( *([0-9]{1,3}\.?[0-9]*%?) *, *([0-9]{1,3}\.?[0-9]*%?) *, *([0-9]{1,3}\.?[0-9]*%?) *,? *([0-9.]* *)?\)/,e=c.match(d),f=[],g=1;4>g;g++)-1!=e[g].search(/%/)?f[g-1]=parseInt(255*e[g]/100,10):f[g-1]=parseInt(e[g],10);return f[3]=parseFloat(e[4])?parseFloat(e[4]):1,f},a.jqplot.colorKeywordMap={aliceblue:"rgb(240, 248, 255)",antiquewhite:"rgb(250, 235, 215)",aqua:"rgb( 0, 255, 255)",aquamarine:"rgb(127, 255, 212)",azure:"rgb(240, 255, 255)",beige:"rgb(245, 245, 220)",bisque:"rgb(255, 228, 196)",black:"rgb( 0, 0, 0)",blanchedalmond:"rgb(255, 235, 205)",blue:"rgb( 0, 0, 255)",blueviolet:"rgb(138, 43, 226)",brown:"rgb(165, 42, 42)",burlywood:"rgb(222, 184, 135)",cadetblue:"rgb( 95, 158, 160)",chartreuse:"rgb(127, 255, 0)",chocolate:"rgb(210, 105, 30)",coral:"rgb(255, 127, 80)",cornflowerblue:"rgb(100, 149, 237)",cornsilk:"rgb(255, 248, 220)",crimson:"rgb(220, 20, 60)",cyan:"rgb( 0, 255, 255)",darkblue:"rgb( 0, 0, 139)",darkcyan:"rgb( 0, 139, 139)",darkgoldenrod:"rgb(184, 134, 11)",darkgray:"rgb(169, 169, 169)",darkgreen:"rgb( 0, 100, 0)",darkgrey:"rgb(169, 169, 169)",darkkhaki:"rgb(189, 183, 107)",darkmagenta:"rgb(139, 0, 139)",darkolivegreen:"rgb( 85, 107, 47)",darkorange:"rgb(255, 140, 0)",darkorchid:"rgb(153, 50, 204)",darkred:"rgb(139, 0, 0)",darksalmon:"rgb(233, 150, 122)",darkseagreen:"rgb(143, 188, 143)",darkslateblue:"rgb( 72, 61, 139)",darkslategray:"rgb( 47, 79, 79)",darkslategrey:"rgb( 47, 79, 79)",darkturquoise:"rgb( 0, 206, 209)",darkviolet:"rgb(148, 0, 211)",deeppink:"rgb(255, 20, 147)",deepskyblue:"rgb( 0, 191, 255)",dimgray:"rgb(105, 105, 105)",dimgrey:"rgb(105, 105, 105)",dodgerblue:"rgb( 30, 144, 255)",firebrick:"rgb(178, 34, 34)",floralwhite:"rgb(255, 250, 240)",forestgreen:"rgb( 34, 139, 34)",fuchsia:"rgb(255, 0, 255)",gainsboro:"rgb(220, 220, 220)",ghostwhite:"rgb(248, 248, 255)",gold:"rgb(255, 215, 0)",goldenrod:"rgb(218, 165, 32)",gray:"rgb(128, 128, 128)",grey:"rgb(128, 128, 128)",green:"rgb( 0, 128, 0)",greenyellow:"rgb(173, 255, 47)",honeydew:"rgb(240, 255, 240)",hotpink:"rgb(255, 105, 180)",indianred:"rgb(205, 92, 92)",indigo:"rgb( 75, 0, 130)",ivory:"rgb(255, 255, 240)",khaki:"rgb(240, 230, 140)",lavender:"rgb(230, 230, 250)",lavenderblush:"rgb(255, 240, 245)",lawngreen:"rgb(124, 252, 0)",lemonchiffon:"rgb(255, 250, 205)",lightblue:"rgb(173, 216, 230)",lightcoral:"rgb(240, 128, 128)",lightcyan:"rgb(224, 255, 255)",lightgoldenrodyellow:"rgb(250, 250, 210)",lightgray:"rgb(211, 211, 211)",lightgreen:"rgb(144, 238, 144)",lightgrey:"rgb(211, 211, 211)",lightpink:"rgb(255, 182, 193)",lightsalmon:"rgb(255, 160, 122)",lightseagreen:"rgb( 32, 178, 170)",lightskyblue:"rgb(135, 206, 250)",lightslategray:"rgb(119, 136, 153)",lightslategrey:"rgb(119, 136, 153)",lightsteelblue:"rgb(176, 196, 222)",lightyellow:"rgb(255, 255, 224)",lime:"rgb( 0, 255, 0)",limegreen:"rgb( 50, 205, 50)",linen:"rgb(250, 240, 230)",magenta:"rgb(255, 0, 255)",maroon:"rgb(128, 0, 0)",mediumaquamarine:"rgb(102, 205, 170)",mediumblue:"rgb( 0, 0, 205)",mediumorchid:"rgb(186, 85, 211)",mediumpurple:"rgb(147, 112, 219)",mediumseagreen:"rgb( 60, 179, 113)",mediumslateblue:"rgb(123, 104, 238)",mediumspringgreen:"rgb( 0, 250, 154)",mediumturquoise:"rgb( 72, 209, 204)",mediumvioletred:"rgb(199, 21, 133)",midnightblue:"rgb( 25, 25, 112)",mintcream:"rgb(245, 255, 250)",mistyrose:"rgb(255, 228, 225)",moccasin:"rgb(255, 228, 181)",navajowhite:"rgb(255, 222, 173)",navy:"rgb( 0, 0, 128)",oldlace:"rgb(253, 245, 230)",olive:"rgb(128, 128, 0)",olivedrab:"rgb(107, 142, 35)",orange:"rgb(255, 165, 0)",orangered:"rgb(255, 69, 0)",orchid:"rgb(218, 112, 214)",palegoldenrod:"rgb(238, 232, 170)",palegreen:"rgb(152, 251, 152)",paleturquoise:"rgb(175, 238, 238)",palevioletred:"rgb(219, 112, 147)",papayawhip:"rgb(255, 239, 213)",peachpuff:"rgb(255, 218, 185)",peru:"rgb(205, 133, 63)",pink:"rgb(255, 192, 203)",plum:"rgb(221, 160, 221)",powderblue:"rgb(176, 224, 230)",purple:"rgb(128, 0, 128)",red:"rgb(255, 0, 0)",rosybrown:"rgb(188, 143, 143)",royalblue:"rgb( 65, 105, 225)",saddlebrown:"rgb(139, 69, 19)",salmon:"rgb(250, 128, 114)",sandybrown:"rgb(244, 164, 96)",seagreen:"rgb( 46, 139, 87)",seashell:"rgb(255, 245, 238)",sienna:"rgb(160, 82, 45)",silver:"rgb(192, 192, 192)",skyblue:"rgb(135, 206, 235)",slateblue:"rgb(106, 90, 205)",slategray:"rgb(112, 128, 144)",slategrey:"rgb(112, 128, 144)",snow:"rgb(255, 250, 250)",springgreen:"rgb( 0, 255, 127)",steelblue:"rgb( 70, 130, 180)",tan:"rgb(210, 180, 140)",teal:"rgb( 0, 128, 128)",thistle:"rgb(216, 191, 216)",tomato:"rgb(255, 99, 71)",turquoise:"rgb( 64, 224, 208)",violet:"rgb(238, 130, 238)",wheat:"rgb(245, 222, 179)",white:"rgb(255, 255, 255)",whitesmoke:"rgb(245, 245, 245)",yellow:"rgb(255, 255, 0)",yellowgreen:"rgb(154, 205, 50)"},a.jqplot.AxisLabelRenderer=function(b){a.jqplot.ElemContainer.call(this),this.axis,this.show=!0,this.label="",this.fontFamily=null,this.fontSize=null,this.textColor=null,this._elem,this.escapeHTML=!1,a.extend(!0,this,b)},a.jqplot.AxisLabelRenderer.prototype=new a.jqplot.ElemContainer,a.jqplot.AxisLabelRenderer.prototype.constructor=a.jqplot.AxisLabelRenderer,a.jqplot.AxisLabelRenderer.prototype.init=function(b){a.extend(!0,this,b)},a.jqplot.AxisLabelRenderer.prototype.draw=function(b,c){return this._elem&&(this._elem.emptyForce(),this._elem=null),this._elem=a('<div style="position:absolute;" class="jqplot-'+this.axis+'-label"></div>'),Number(this.label)&&this._elem.css("white-space","nowrap"),this.escapeHTML?this._elem.text(this.label):this._elem.html(this.label),this.fontFamily&&this._elem.css("font-family",this.fontFamily),this.fontSize&&this._elem.css("font-size",this.fontSize),this.textColor&&this._elem.css("color",this.textColor),this._elem},a.jqplot.AxisLabelRenderer.prototype.pack=function(){},a.jqplot.AxisTickRenderer=function(b){a.jqplot.ElemContainer.call(this),this.mark="outside",this.axis,this.showMark=!0,this.showGridline=!0,this.isMinorTick=!1,this.size=4,this.markSize=6,this.show=!0,this.showLabel=!0,this.label=null,this.value=null,this._styles={},this.formatter=a.jqplot.DefaultTickFormatter,this.prefix="",this.suffix="",this.formatString="",this.fontFamily,this.fontSize,this.textColor,this.escapeHTML=!1,this._elem,this._breakTick=!1,a.extend(!0,this,b)},a.jqplot.AxisTickRenderer.prototype.init=function(b){a.extend(!0,this,b)},a.jqplot.AxisTickRenderer.prototype=new a.jqplot.ElemContainer,a.jqplot.AxisTickRenderer.prototype.constructor=a.jqplot.AxisTickRenderer,a.jqplot.AxisTickRenderer.prototype.setTick=function(a,b,c){return this.value=a,this.axis=b,c&&(this.isMinorTick=!0),this},a.jqplot.AxisTickRenderer.prototype.draw=function(){null===this.label&&(this.label=this.prefix+this.formatter(this.formatString,this.value)+this.suffix);var b={position:"absolute"};Number(this.label)&&(b.whitSpace="nowrap"),this._elem&&(this._elem.emptyForce(),this._elem=null),this._elem=a(document.createElement("div")),this._elem.addClass("jqplot-"+this.axis+"-tick"),this.escapeHTML?this._elem.text(this.label):this._elem.html(this.label),this._elem.css(b);for(var c in this._styles)this._elem.css(c,this._styles[c]);return this.fontFamily&&this._elem.css("font-family",this.fontFamily),this.fontSize&&this._elem.css("font-size",this.fontSize),this.textColor&&this._elem.css("color",this.textColor),this._breakTick&&this._elem.addClass("jqplot-breakTick"),this._elem},a.jqplot.DefaultTickFormatter=function(b,c){return"number"==typeof c?(b||(b=a.jqplot.config.defaultTickFormatString),a.jqplot.sprintf(b,c)):String(c)},a.jqplot.PercentTickFormatter=function(b,c){return"number"==typeof c?(c=100*c,b||(b=a.jqplot.config.defaultTickFormatString),a.jqplot.sprintf(b,c)):String(c)},a.jqplot.AxisTickRenderer.prototype.pack=function(){},a.jqplot.CanvasGridRenderer=function(){this.shadowRenderer=new a.jqplot.ShadowRenderer},a.jqplot.CanvasGridRenderer.prototype.init=function(b){this._ctx,a.extend(!0,this,b);var c={lineJoin:"miter",lineCap:"round",fill:!1,isarc:!1,angle:this.shadowAngle,offset:this.shadowOffset,alpha:this.shadowAlpha,depth:this.shadowDepth,lineWidth:this.shadowWidth,closePath:!1,strokeStyle:this.shadowColor};this.renderer.shadowRenderer.init(c)},a.jqplot.CanvasGridRenderer.prototype.createElement=function(b){var c;this._elem&&(a.jqplot.use_excanvas&&window.G_vmlCanvasManager.uninitElement!==F&&(c=this._elem.get(0),window.G_vmlCanvasManager.uninitElement(c),c=null),this._elem.emptyForce(),this._elem=null),c=b.canvasManager.getCanvas();var d=this._plotDimensions.width,e=this._plotDimensions.height;return c.width=d,c.height=e,this._elem=a(c),this._elem.addClass("jqplot-grid-canvas"),this._elem.css({position:"absolute",left:0,top:0}),c=b.canvasManager.initCanvas(c),this._top=this._offsets.top,this._bottom=e-this._offsets.bottom,this._left=this._offsets.left,this._right=d-this._offsets.right,this._width=this._right-this._left,this._height=this._bottom-this._top,c=null,this._elem},a.jqplot.CanvasGridRenderer.prototype.draw=function(){function b(b,d,e,f,g){c.save(),g=g||{},(null==g.lineWidth||0!=g.lineWidth)&&(a.extend(!0,c,g),c.beginPath(),c.moveTo(b,d),c.lineTo(e,f),c.stroke(),c.restore())}this._ctx=this._elem.get(0).getContext("2d");var c=this._ctx,d=this._axes;c.save(),c.clearRect(0,0,this._plotDimensions.width,this._plotDimensions.height),c.fillStyle=this.backgroundColor||this.background,c.fillRect(this._left,this._top,this._width,this._height),c.save(),c.lineJoin="miter",c.lineCap="butt",c.lineWidth=this.gridLineWidth,c.strokeStyle=this.gridLineColor;for(var e,f,g,h,i=["xaxis","yaxis","x2axis","y2axis"],j=4;j>0;j--){var k=i[j-1],l=d[k],m=l._ticks,n=m.length;if(l.show){if(l.drawBaseline){var o={};switch(null!==l.baselineWidth&&(o.lineWidth=l.baselineWidth),null!==l.baselineColor&&(o.strokeStyle=l.baselineColor),k){case"xaxis":b(this._left,this._bottom,this._right,this._bottom,o);break;case"yaxis":b(this._left,this._bottom,this._left,this._top,o);break;case"x2axis":b(this._left,this._bottom,this._right,this._bottom,o);break;case"y2axis":b(this._right,this._bottom,this._right,this._top,o)}}for(var p=n;p>0;p--){var q=m[p-1];if(q.show){var r=Math.round(l.u2p(q.value))+.5;switch(k){case"xaxis":if(q.showGridline&&this.drawGridlines&&(!q.isMinorTick&&l.drawMajorGridlines||q.isMinorTick&&l.drawMinorGridlines)&&b(r,this._top,r,this._bottom),q.showMark&&q.mark&&(!q.isMinorTick&&l.drawMajorTickMarks||q.isMinorTick&&l.drawMinorTickMarks)){g=q.markSize,h=q.mark;var r=Math.round(l.u2p(q.value))+.5;switch(h){case"outside":e=this._bottom,f=this._bottom+g;break;case"inside":e=this._bottom-g,f=this._bottom;break;case"cross":e=this._bottom-g,f=this._bottom+g;break;default:e=this._bottom,f=this._bottom+g}this.shadow&&this.renderer.shadowRenderer.draw(c,[[r,e],[r,f]],{lineCap:"butt",lineWidth:this.gridLineWidth,offset:.75*this.gridLineWidth,depth:2,fill:!1,closePath:!1}),b(r,e,r,f)}break;case"yaxis":if(q.showGridline&&this.drawGridlines&&(!q.isMinorTick&&l.drawMajorGridlines||q.isMinorTick&&l.drawMinorGridlines)&&b(this._right,r,this._left,r),q.showMark&&q.mark&&(!q.isMinorTick&&l.drawMajorTickMarks||q.isMinorTick&&l.drawMinorTickMarks)){g=q.markSize,h=q.mark;var r=Math.round(l.u2p(q.value))+.5;switch(h){case"outside":e=this._left-g,f=this._left;break;case"inside":e=this._left,f=this._left+g;break;case"cross":e=this._left-g,f=this._left+g;break;default:e=this._left-g,f=this._left}this.shadow&&this.renderer.shadowRenderer.draw(c,[[e,r],[f,r]],{lineCap:"butt",lineWidth:1.5*this.gridLineWidth,offset:.75*this.gridLineWidth,fill:!1,closePath:!1}),b(e,r,f,r,{strokeStyle:l.borderColor})}break;case"x2axis":if(q.showGridline&&this.drawGridlines&&(!q.isMinorTick&&l.drawMajorGridlines||q.isMinorTick&&l.drawMinorGridlines)&&b(r,this._bottom,r,this._top),q.showMark&&q.mark&&(!q.isMinorTick&&l.drawMajorTickMarks||q.isMinorTick&&l.drawMinorTickMarks)){g=q.markSize,h=q.mark;var r=Math.round(l.u2p(q.value))+.5;switch(h){case"outside":e=this._top-g,f=this._top;break;case"inside":e=this._top,f=this._top+g;break;case"cross":e=this._top-g,f=this._top+g;break;default:e=this._top-g,f=this._top}this.shadow&&this.renderer.shadowRenderer.draw(c,[[r,e],[r,f]],{lineCap:"butt",lineWidth:this.gridLineWidth,offset:.75*this.gridLineWidth,depth:2,fill:!1,closePath:!1}),b(r,e,r,f)}break;case"y2axis":if(q.showGridline&&this.drawGridlines&&(!q.isMinorTick&&l.drawMajorGridlines||q.isMinorTick&&l.drawMinorGridlines)&&b(this._left,r,this._right,r),q.showMark&&q.mark&&(!q.isMinorTick&&l.drawMajorTickMarks||q.isMinorTick&&l.drawMinorTickMarks)){g=q.markSize,h=q.mark;var r=Math.round(l.u2p(q.value))+.5;switch(h){case"outside":e=this._right,f=this._right+g;break;case"inside":e=this._right-g,f=this._right;break;case"cross":e=this._right-g,f=this._right+g;break;default:e=this._right,f=this._right+g}this.shadow&&this.renderer.shadowRenderer.draw(c,[[e,r],[f,r]],{lineCap:"butt",lineWidth:1.5*this.gridLineWidth,offset:.75*this.gridLineWidth,fill:!1,closePath:!1}),b(e,r,f,r,{strokeStyle:l.borderColor})}}}}q=null}l=null,m=null}i=["y3axis","y4axis","y5axis","y6axis","y7axis","y8axis","y9axis","yMidAxis"];for(var j=7;j>0;j--){var l=d[i[j-1]],m=l._ticks;if(l.show){var s=m[l.numberTicks-1],t=m[0],u=l.getLeft(),v=[[u,s.getTop()+s.getHeight()/2],[u,t.getTop()+t.getHeight()/2+1]];this.shadow&&this.renderer.shadowRenderer.draw(c,v,{lineCap:"butt",fill:!1,closePath:!1}),b(v[0][0],v[0][1],v[1][0],v[1][1],{lineCap:"butt",strokeStyle:l.borderColor,lineWidth:l.borderWidth});for(var p=m.length;p>0;p--){var q=m[p-1];g=q.markSize,h=q.mark;var r=Math.round(l.u2p(q.value))+.5;if(q.showMark&&q.mark){switch(h){case"outside":e=u,f=u+g;break;case"inside":e=u-g,f=u;break;case"cross":e=u-g,f=u+g;break;default:e=u,f=u+g}v=[[e,r],[f,r]],this.shadow&&this.renderer.shadowRenderer.draw(c,v,{lineCap:"butt",lineWidth:1.5*this.gridLineWidth,offset:.75*this.gridLineWidth,fill:!1,closePath:!1}),b(e,r,f,r,{strokeStyle:l.borderColor})}q=null}t=null}l=null,m=null}if(c.restore(),this.shadow){var v=[[this._left,this._bottom],[this._right,this._bottom],[this._right,this._top]];this.renderer.shadowRenderer.draw(c,v)}0!=this.borderWidth&&this.drawBorder&&(b(this._left,this._top,this._right,this._top,{lineCap:"round",strokeStyle:d.x2axis.borderColor,lineWidth:d.x2axis.borderWidth}),b(this._right,this._top,this._right,this._bottom,{lineCap:"round",strokeStyle:d.y2axis.borderColor,lineWidth:d.y2axis.borderWidth}),b(this._right,this._bottom,this._left,this._bottom,{lineCap:"round",strokeStyle:d.xaxis.borderColor,lineWidth:d.xaxis.borderWidth}),b(this._left,this._bottom,this._left,this._top,{lineCap:"round",strokeStyle:d.yaxis.borderColor,lineWidth:d.yaxis.borderWidth})),c.restore(),c=null,d=null},a.jqplot.DivTitleRenderer=function(){},a.jqplot.DivTitleRenderer.prototype.init=function(b){a.extend(!0,this,b)},a.jqplot.DivTitleRenderer.prototype.draw=function(){this._elem&&(this._elem.emptyForce(),this._elem=null);var b=(this.renderer,document.createElement("div"));if(this._elem=a(b),this._elem.addClass("jqplot-title"),this.text){if(this.text){var c;this.color?c=this.color:this.textColor&&(c=this.textColor);var d={position:"absolute",top:"0px",left:"0px"};this._plotWidth&&(d.width=this._plotWidth+"px"),this.fontSize&&(d.fontSize=this.fontSize),"string"==typeof this.textAlign?d.textAlign=this.textAlign:d.textAlign="center",c&&(d.color=c),this.paddingBottom&&(d.paddingBottom=this.paddingBottom),this.fontFamily&&(d.fontFamily=this.fontFamily),this._elem.css(d),this.escapeHtml?this._elem.text(this.text):this._elem.html(this.text)}}else this.show=!1,this._elem.height(0),this._elem.width(0);return b=null,this._elem},a.jqplot.DivTitleRenderer.prototype.pack=function(){};var H=.1;a.jqplot.LinePattern=function(b,c){var d={dotted:[H,a.jqplot.config.dotGapLength],dashed:[a.jqplot.config.dashLength,a.jqplot.config.gapLength],solid:null};if("string"==typeof c)if("."===c[0]||"-"===c[0]){var e=c;c=[];for(var f=0,g=e.length;g>f;f++){if("."===e[f])c.push(H);else{if("-"!==e[f])continue;c.push(a.jqplot.config.dashLength)}c.push(a.jqplot.config.gapLength)}}else c=d[c];if(!c||!c.length)return b;var h=0,i=c[0],j=0,k=0,l=0,m=0,n=function(a,c){b.moveTo(a,c),j=a,k=c,l=a,m=c},o=function(a,d){var e=b.lineWidth,f=a-j,g=d-k,l=Math.sqrt(f*f+g*g);if(l>0&&e>0)for(f/=l,g/=l;;){var m=e*i;if(!(l>m)){j=a,k=d,0==(1&h)?b.lineTo(j,k):b.moveTo(j,k),i-=l/e;break}j+=m*f,k+=m*g,0==(1&h)?b.lineTo(j,k):b.moveTo(j,k),l-=m,h++,h>=c.length&&(h=0),i=c[h]}},p=function(){b.beginPath()},q=function(){o(l,m)};return{moveTo:n,lineTo:o,beginPath:p,closePath:q}},a.jqplot.LineRenderer=function(){this.shapeRenderer=new a.jqplot.ShapeRenderer,this.shadowRenderer=new a.jqplot.ShadowRenderer},a.jqplot.LineRenderer.prototype.init=function(b,c){b=b||{},this._type="line",this.renderer.animation={show:!1,direction:"left",speed:2500,_supported:!0},this.renderer.smooth=!1,this.renderer.tension=null,this.renderer.constrainSmoothing=!0,this.renderer._smoothedData=[],this.renderer._smoothedPlotData=[],this.renderer._hiBandGridData=[],this.renderer._lowBandGridData=[],this.renderer._hiBandSmoothedData=[],this.renderer._lowBandSmoothedData=[],this.renderer.bandData=[],this.renderer.bands={show:!1,hiData:[],lowData:[],color:this.color,showLines:!1,fill:!0,fillColor:null,_min:null,_max:null,interval:"3%"};var d={highlightMouseOver:b.highlightMouseOver,highlightMouseDown:b.highlightMouseDown,highlightColor:b.highlightColor};delete b.highlightMouseOver,delete b.highlightMouseDown,delete b.highlightColor,a.extend(!0,this.renderer,b),this.renderer.options=b,this.renderer.bandData.length>1&&(!b.bands||null==b.bands.show)?this.renderer.bands.show=!0:b.bands&&null==b.bands.show&&null!=b.bands.interval&&(this.renderer.bands.show=!0),this.fill&&(this.renderer.bands.show=!1),this.renderer.bands.show&&this.renderer.initBands.call(this,this.renderer.options,c),this._stack&&(this.renderer.smooth=!1);var e={lineJoin:this.lineJoin,lineCap:this.lineCap,fill:this.fill,isarc:!1,strokeStyle:this.color,fillStyle:this.fillColor,lineWidth:this.lineWidth,linePattern:this.linePattern,closePath:this.fill};this.renderer.shapeRenderer.init(e);var f=b.shadowOffset;null==f&&(f=this.lineWidth>2.5?1.25*(1+.6*(Math.atan(this.lineWidth/2.5)/.785398163-1)):1.25*Math.atan(this.lineWidth/2.5)/.785398163);var g={lineJoin:this.lineJoin,lineCap:this.lineCap,fill:this.fill,isarc:!1,angle:this.shadowAngle,offset:f,alpha:this.shadowAlpha,depth:this.shadowDepth,lineWidth:this.lineWidth,linePattern:this.linePattern,closePath:this.fill};if(this.renderer.shadowRenderer.init(g),this._areaPoints=[],this._boundingBox=[[],[]],!this.isTrendline&&this.fill||this.renderer.bands.show){if(this.highlightMouseOver=!0,this.highlightMouseDown=!1,this.highlightColor=null,d.highlightMouseDown&&null==d.highlightMouseOver&&(d.highlightMouseOver=!1),a.extend(!0,this,{highlightMouseOver:d.highlightMouseOver,highlightMouseDown:d.highlightMouseDown,highlightColor:d.highlightColor}),!this.highlightColor){var h=this.renderer.bands.show?this.renderer.bands.fillColor:this.fillColor;this.highlightColor=a.jqplot.computeHighlightColors(h)}this.highlighter&&(this.highlighter.show=!1)}!this.isTrendline&&c&&(c.plugins.lineRenderer={},c.postInitHooks.addOnce(l),c.postDrawHooks.addOnce(m),c.eventListenerHooks.addOnce("jqplotMouseMove",p),c.eventListenerHooks.addOnce("jqplotMouseDown",q),c.eventListenerHooks.addOnce("jqplotMouseUp",r),c.eventListenerHooks.addOnce("jqplotClick",s),c.eventListenerHooks.addOnce("jqplotRightClick",t))},a.jqplot.LineRenderer.prototype.initBands=function(b,c){var d=b.bandData||[],e=this.renderer.bands;e.hiData=[],e.lowData=[];var f=this.data;if(e._max=null,e._min=null,2==d.length)if(a.isArray(d[0][0])){for(var g,h=0,i=0,j=0,k=d[0].length;k>j;j++)g=d[0][j],(null!=g[1]&&g[1]>e._max||null==e._max)&&(e._max=g[1]),(null!=g[1]&&g[1]<e._min||null==e._min)&&(e._min=g[1]);for(var j=0,k=d[1].length;k>j;j++)g=d[1][j],(null!=g[1]&&g[1]>e._max||null==e._max)&&(e._max=g[1],i=1),(null!=g[1]&&g[1]<e._min||null==e._min)&&(e._min=g[1],h=1);i===h&&(e.show=!1),e.hiData=d[i],e.lowData=d[h]}else if(d[0].length===f.length&&d[1].length===f.length)for(var l=d[0][0]>d[1][0]?0:1,m=l?0:1,j=0,k=f.length;k>j;j++)e.hiData.push([f[j][0],d[l][j]]),e.lowData.push([f[j][0],d[m][j]]);else e.show=!1;else if(d.length>2&&!a.isArray(d[0][0]))for(var l=d[0][0]>d[0][1]?0:1,m=l?0:1,j=0,k=d.length;k>j;j++)e.hiData.push([f[j][0],d[j][l]]),e.lowData.push([f[j][0],d[j][m]]);else{var n=e.interval,o=null,p=null,q=null,r=null;if(a.isArray(n)?(o=n[0],p=n[1]):o=n,isNaN(o)?"%"===o.charAt(o.length-1)&&(q="multiply",o=parseFloat(o)/100+1):(o=parseFloat(o),q="add"),null!==p&&isNaN(p)?"%"===p.charAt(p.length-1)&&(r="multiply",p=parseFloat(p)/100+1):null!==p&&(p=parseFloat(p),r="add"),null!==o){if(null===p&&(p=-o,r=q,"multiply"===r&&(p+=2)),p>o){var s=o;o=p,p=s,s=q,q=r,r=s}for(var j=0,k=f.length;k>j;j++){switch(q){case"add":e.hiData.push([f[j][0],f[j][1]+o]);break;case"multiply":e.hiData.push([f[j][0],f[j][1]*o])}switch(r){case"add":e.lowData.push([f[j][0],f[j][1]+p]);break;case"multiply":e.lowData.push([f[j][0],f[j][1]*p])}}}else e.show=!1}for(var t=e.hiData,u=e.lowData,j=0,k=t.length;k>j;j++)(null!=t[j][1]&&t[j][1]>e._max||null==e._max)&&(e._max=t[j][1]);for(var j=0,k=u.length;k>j;j++)(null!=u[j][1]&&u[j][1]<e._min||null==e._min)&&(e._min=u[j][1]);if(null===e.fillColor){var v=a.jqplot.getColorComponents(e.color);v[3]=.5*v[3],e.fillColor="rgba("+v[0]+", "+v[1]+", "+v[2]+", "+v[3]+")"}},a.jqplot.LineRenderer.prototype.setGridData=function(a){var b=this._xaxis.series_u2p,c=this._yaxis.series_u2p,d=this._plotData,e=this._prevPlotData;this.gridData=[],this._prevGridData=[],this.renderer._smoothedData=[],this.renderer._smoothedPlotData=[],this.renderer._hiBandGridData=[],this.renderer._lowBandGridData=[],this.renderer._hiBandSmoothedData=[],this.renderer._lowBandSmoothedData=[];for(var f=this.renderer.bands,g=!1,h=0,i=d.length;i>h;h++)null!=d[h][0]&&null!=d[h][1]?this.gridData.push([b.call(this._xaxis,d[h][0]),c.call(this._yaxis,d[h][1])]):null==d[h][0]?(g=!0,this.gridData.push([null,c.call(this._yaxis,d[h][1])])):null==d[h][1]&&(g=!0,this.gridData.push([b.call(this._xaxis,d[h][0]),null])),null!=e[h]&&null!=e[h][0]&&null!=e[h][1]?this._prevGridData.push([b.call(this._xaxis,e[h][0]),c.call(this._yaxis,e[h][1])]):null!=e[h]&&null==e[h][0]?this._prevGridData.push([null,c.call(this._yaxis,e[h][1])]):null!=e[h]&&null!=e[h][0]&&null==e[h][1]&&this._prevGridData.push([b.call(this._xaxis,e[h][0]),null]);if(g&&(this.renderer.smooth=!1,"line"===this._type&&(f.show=!1)),"line"===this._type&&f.show){for(var h=0,i=f.hiData.length;i>h;h++)this.renderer._hiBandGridData.push([b.call(this._xaxis,f.hiData[h][0]),c.call(this._yaxis,f.hiData[h][1])]);for(var h=0,i=f.lowData.length;i>h;h++)this.renderer._lowBandGridData.push([b.call(this._xaxis,f.lowData[h][0]),c.call(this._yaxis,f.lowData[h][1])])}if("line"===this._type&&this.renderer.smooth&&this.gridData.length>2){var l;this.renderer.constrainSmoothing?(l=j.call(this,this.gridData),this.renderer._smoothedData=l[0],this.renderer._smoothedPlotData=l[1],f.show&&(l=j.call(this,this.renderer._hiBandGridData),this.renderer._hiBandSmoothedData=l[0],l=j.call(this,this.renderer._lowBandGridData),this.renderer._lowBandSmoothedData=l[0]),l=null):(l=k.call(this,this.gridData),this.renderer._smoothedData=l[0],this.renderer._smoothedPlotData=l[1],f.show&&(l=k.call(this,this.renderer._hiBandGridData),this.renderer._hiBandSmoothedData=l[0],l=k.call(this,this.renderer._lowBandGridData),this.renderer._lowBandSmoothedData=l[0]),l=null)}},a.jqplot.LineRenderer.prototype.makeGridData=function(a,b){var c=this._xaxis.series_u2p,d=this._yaxis.series_u2p,e=[];this.renderer._smoothedData=[],this.renderer._smoothedPlotData=[],this.renderer._hiBandGridData=[],this.renderer._lowBandGridData=[],this.renderer._hiBandSmoothedData=[],this.renderer._lowBandSmoothedData=[];for(var f=this.renderer.bands,g=!1,h=0;h<a.length;h++)null!=a[h][0]&&null!=a[h][1]?(this.step&&h>0&&e.push([c.call(this._xaxis,a[h][0]),d.call(this._yaxis,a[h-1][1])]),e.push([c.call(this._xaxis,a[h][0]),d.call(this._yaxis,a[h][1])])):null==a[h][0]?(g=!0,e.push([null,d.call(this._yaxis,a[h][1])])):null==a[h][1]&&(g=!0,e.push([c.call(this._xaxis,a[h][0]),null]));if(g&&(this.renderer.smooth=!1,"line"===this._type&&(f.show=!1)),"line"===this._type&&f.show){for(var h=0,i=f.hiData.length;i>h;h++)this.renderer._hiBandGridData.push([c.call(this._xaxis,f.hiData[h][0]),d.call(this._yaxis,f.hiData[h][1])]);for(var h=0,i=f.lowData.length;i>h;h++)this.renderer._lowBandGridData.push([c.call(this._xaxis,f.lowData[h][0]),d.call(this._yaxis,f.lowData[h][1])])}if("line"===this._type&&this.renderer.smooth&&e.length>2){var l;this.renderer.constrainSmoothing?(l=j.call(this,e),this.renderer._smoothedData=l[0],this.renderer._smoothedPlotData=l[1],f.show&&(l=j.call(this,this.renderer._hiBandGridData),this.renderer._hiBandSmoothedData=l[0],l=j.call(this,this.renderer._lowBandGridData),this.renderer._lowBandSmoothedData=l[0]),l=null):(l=k.call(this,e),this.renderer._smoothedData=l[0],this.renderer._smoothedPlotData=l[1],f.show&&(l=k.call(this,this.renderer._hiBandGridData),this.renderer._hiBandSmoothedData=l[0],l=k.call(this,this.renderer._lowBandGridData),this.renderer._lowBandSmoothedData=l[0]),l=null)}return e},a.jqplot.LineRenderer.prototype.draw=function(b,c,d,e){var f,g,h,i,j,k=a.extend(!0,{},d),l=k.shadow!=F?k.shadow:this.shadow,m=k.showLine!=F?k.showLine:this.showLine,n=k.fill!=F?k.fill:this.fill,o=k.fillAndStroke!=F?k.fillAndStroke:this.fillAndStroke;if(b.save(),c.length){if(m)if(n){if(this.fillToZero){var p=this.negativeColor;this.useNegativeColors||(p=k.fillStyle);var q=!1,r=k.fillStyle;if(o)var s=c.slice(0);if(0!=this.index&&this._stack){for(var t=this._prevGridData,f=t.length;f>0;f--)c.push(t[f-1]);l&&this.renderer.shadowRenderer.draw(b,c,k),this._areaPoints=c,this.renderer.shapeRenderer.draw(b,c,k)}else{var u=[],v=this.renderer.smooth?this.renderer._smoothedPlotData:this._plotData;this._areaPoints=[];var w=this._yaxis.series_u2p(this.fillToValue);this._xaxis.series_u2p(this.fillToValue);if(k.closePath=!0,"y"==this.fillAxis){u.push([c[0][0],w]),this._areaPoints.push([c[0][0],w]);for(var f=0;f<c.length-1;f++)if(u.push(c[f]),this._areaPoints.push(c[f]),v[f][1]*v[f+1][1]<=0){v[f][1]<0?(q=!0,k.fillStyle=p):(q=!1,k.fillStyle=r);var x=c[f][0]+(c[f+1][0]-c[f][0])*(w-c[f][1])/(c[f+1][1]-c[f][1]);u.push([x,w]),this._areaPoints.push([x,w]),l&&this.renderer.shadowRenderer.draw(b,u,k),this.renderer.shapeRenderer.draw(b,u,k),u=[[x,w]]}v[c.length-1][1]<0?(q=!0,k.fillStyle=p):(q=!1,k.fillStyle=r),u.push(c[c.length-1]),this._areaPoints.push(c[c.length-1]),u.push([c[c.length-1][0],w]),this._areaPoints.push([c[c.length-1][0],w])}l&&this.renderer.shadowRenderer.draw(b,u,k),this.renderer.shapeRenderer.draw(b,u,k)}}else{if(o)var s=c.slice(0);if(0!=this.index&&this._stack)for(var t=this._prevGridData,f=t.length;f>0;f--)c.push(t[f-1]);else{var y=b.canvas.height;c.unshift([c[0][0],y]);var z=c.length;c.push([c[z-1][0],y])}this._areaPoints=c,l&&this.renderer.shadowRenderer.draw(b,c,k),this.renderer.shapeRenderer.draw(b,c,k)}if(o){var A=a.extend(!0,{},k,{fill:!1,closePath:!1});if(this.renderer.shapeRenderer.draw(b,s,A),this.markerRenderer.show)for(this.renderer.smooth&&(s=this.gridData),f=0;f<s.length;f++)this.markerRenderer.draw(s[f][0],s[f][1],b,k.markerOptions)}}else{if(this.renderer.bands.show){var B,C=a.extend(!0,{},k);this.renderer.bands.showLines&&(B=this.renderer.smooth?this.renderer._hiBandSmoothedData:this.renderer._hiBandGridData,this.renderer.shapeRenderer.draw(b,B,k),B=this.renderer.smooth?this.renderer._lowBandSmoothedData:this.renderer._lowBandGridData,this.renderer.shapeRenderer.draw(b,B,C)),this.renderer.bands.fill&&(B=this.renderer.smooth?this.renderer._hiBandSmoothedData.concat(this.renderer._lowBandSmoothedData.reverse()):this.renderer._hiBandGridData.concat(this.renderer._lowBandGridData.reverse()),this._areaPoints=B,C.closePath=!0,C.fill=!0,C.fillStyle=this.renderer.bands.fillColor,this.renderer.shapeRenderer.draw(b,B,C))}l&&this.renderer.shadowRenderer.draw(b,c,k),this.renderer.shapeRenderer.draw(b,c,k)}var g=i=h=j=null;for(f=0;f<this._areaPoints.length;f++){var D=this._areaPoints[f];(g>D[0]||null==g)&&(g=D[0]),(j<D[1]||null==j)&&(j=D[1]),(i<D[0]||null==i)&&(i=D[0]),(h>D[1]||null==h)&&(h=D[1])}if("line"===this.type&&this.renderer.bands.show&&(j=this._yaxis.series_u2p(this.renderer.bands._min),h=this._yaxis.series_u2p(this.renderer.bands._max)),this._boundingBox=[[g,j],[i,h]],this.markerRenderer.show&&!n)for(this.renderer.smooth&&(c=this.gridData),f=0;f<c.length;f++)null!=c[f][0]&&null!=c[f][1]&&this.markerRenderer.draw(c[f][0],c[f][1],b,k.markerOptions)}b.restore()},a.jqplot.LineRenderer.prototype.drawShadow=function(a,b,c){},a.jqplot.LinearAxisRenderer=function(){},a.jqplot.LinearAxisRenderer.prototype.init=function(b){this.breakPoints=null,this.breakTickLabel="&asymp;",this.drawBaseline=!0,this.baselineWidth=null,this.baselineColor=null,this.forceTickAt0=!1,this.forceTickAt100=!1,this.tickInset=0,this.minorTicks=0,this.alignTicks=!1,this._autoFormatString="",this._overrideFormatString=!1,this._scalefact=1,a.extend(!0,this,b),this.breakPoints&&(a.isArray(this.breakPoints)?(this.breakPoints.length<2||this.breakPoints[1]<=this.breakPoints[0])&&(this.breakPoints=null):this.breakPoints=null),
null!=this.numberTicks&&this.numberTicks<2&&(this.numberTicks=2),this.resetDataBounds()},a.jqplot.LinearAxisRenderer.prototype.draw=function(b,c){if(this.show){this.renderer.createTicks.call(this,c);if(this._elem&&(this._elem.emptyForce(),this._elem=null),this._elem=a(document.createElement("div")),this._elem.addClass("jqplot-axis jqplot-"+this.name),this._elem.css("position","absolute"),"xaxis"==this.name||"x2axis"==this.name?this._elem.width(this._plotDimensions.width):this._elem.height(this._plotDimensions.height),this.labelOptions.axis=this.name,this._label=new this.labelRenderer(this.labelOptions),this._label.show){var d=this._label.draw(b,c);d.appendTo(this._elem),d=null}for(var e,f=this._ticks,g=0;g<f.length;g++)e=f[g],e.show&&e.showLabel&&(!e.isMinorTick||this.showMinorTicks)&&this._elem.append(e.draw(b,c));e=null,f=null}return this._elem},a.jqplot.LinearAxisRenderer.prototype.reset=function(){this.min=this._options.min,this.max=this._options.max,this.tickInterval=this._options.tickInterval,this.numberTicks=this._options.numberTicks,this._autoFormatString="",this._overrideFormatString&&this.tickOptions&&this.tickOptions.formatString&&(this.tickOptions.formatString="")},a.jqplot.LinearAxisRenderer.prototype.set=function(){var b,c=0,d=0,e=0,f=null==this._label?!1:this._label.show;if(this.show){for(var g,h=this._ticks,i=0;i<h.length;i++)g=h[i],g._breakTick||!g.show||!g.showLabel||g.isMinorTick&&!this.showMinorTicks||(b="xaxis"==this.name||"x2axis"==this.name?g._elem.outerHeight(!0):g._elem.outerWidth(!0),b>c&&(c=b));g=null,h=null,f&&(d=this._label._elem.outerWidth(!0),e=this._label._elem.outerHeight(!0)),"xaxis"==this.name?(c+=e,this._elem.css({height:c+"px",left:"0px",bottom:"0px"})):"x2axis"==this.name?(c+=e,this._elem.css({height:c+"px",left:"0px",top:"0px"})):"yaxis"==this.name?(c+=d,this._elem.css({width:c+"px",left:"0px",top:"0px"}),f&&this._label.constructor==a.jqplot.AxisLabelRenderer&&this._label._elem.css("width",d+"px")):(c+=d,this._elem.css({width:c+"px",right:"0px",top:"0px"}),f&&this._label.constructor==a.jqplot.AxisLabelRenderer&&this._label._elem.css("width",d+"px"))}},a.jqplot.LinearAxisRenderer.prototype.createTicks=function(b){var c,d,e,f,g=this._ticks,h=this.ticks,i=this.name,j=this._dataBounds,k="x"===this.name.charAt(0)?this._plotDimensions.width:this._plotDimensions.height,l=this.min,m=this.max,n=this.numberTicks,o=this.tickInterval,p=30;if(this._scalefact=(Math.max(k,p+1)-p)/300,h.length){for(f=0;f<h.length;f++){var q=h[f],r=new this.tickRenderer(this.tickOptions);a.isArray(q)?(r.value=q[0],this.breakPoints?q[0]==this.breakPoints[0]?(r.label=this.breakTickLabel,r._breakTick=!0,r.showGridline=!1,r.showMark=!1):q[0]>this.breakPoints[0]&&q[0]<=this.breakPoints[1]?(r.show=!1,r.showGridline=!1,r.label=q[1]):r.label=q[1]:r.label=q[1],r.setTick(q[0],this.name),this._ticks.push(r)):a.isPlainObject(q)?(a.extend(!0,r,q),r.axis=this.name,this._ticks.push(r)):(r.value=q,this.breakPoints&&(q==this.breakPoints[0]?(r.label=this.breakTickLabel,r._breakTick=!0,r.showGridline=!1,r.showMark=!1):q>this.breakPoints[0]&&q<=this.breakPoints[1]&&(r.show=!1,r.showGridline=!1)),r.setTick(q,this.name),this._ticks.push(r))}this.numberTicks=h.length,this.min=this._ticks[0].value,this.max=this._ticks[this.numberTicks-1].value,this.tickInterval=(this.max-this.min)/(this.numberTicks-1)}else{k="xaxis"==i||"x2axis"==i?this._plotDimensions.width:this._plotDimensions.height;var s=this.numberTicks;this.alignTicks&&("x2axis"===this.name&&b.axes.xaxis.show?s=b.axes.xaxis.numberTicks:"y"===this.name.charAt(0)&&"yaxis"!==this.name&&"yMidAxis"!==this.name&&b.axes.yaxis.show&&(s=b.axes.yaxis.numberTicks)),c=null!=this.min?this.min:j.min,d=null!=this.max?this.max:j.max;var t,u,v,w=d-c;if(null!=this.tickOptions&&this.tickOptions.formatString||(this._overrideFormatString=!0),null==this.min||null==this.max&&null==this.tickInterval&&!this.autoscale){this.forceTickAt0&&(c>0&&(c=0),0>d&&(d=0)),this.forceTickAt100&&(c>100&&(c=100),100>d&&(d=100));var x=!1,y=!1;null!=this.min?x=!0:null!=this.max&&(y=!0);var z=a.jqplot.LinearTickGenerator(c,d,this._scalefact,s,x,y),A=null!=this.min?c:c+w*(this.padMin-1),B=null!=this.max?d:d-w*(this.padMax-1);(A>c||d>B)&&(A=null!=this.min?c:c-w*(this.padMin-1),B=null!=this.max?d:d+w*(this.padMax-1),z=a.jqplot.LinearTickGenerator(A,B,this._scalefact,s,x,y)),this.min=z[0],this.max=z[1],this.numberTicks=z[2],this._autoFormatString=z[3],this.tickInterval=z[4]}else{if(c==d){var C=.05;c>0&&(C=Math.max(Math.log(c)/Math.LN10,.05)),c-=C,d+=C}if(this.autoscale&&null==this.min&&null==this.max){for(var D,E,F,G=!1,H=!1,f=0;f<this._series.length;f++){var I=this._series[f],J="x"==I.fillAxis?I._xaxis.name:I._yaxis.name;if(this.name==J){for(var K=I._plotValues[I.fillAxis],L=K[0],M=K[0],N=1;N<K.length;N++)K[N]<L?L=K[N]:K[N]>M&&(M=K[N]);var O=(M-L)/M;I.renderer.constructor==a.jqplot.BarRenderer?L>=0&&(I.fillToZero||O>.1)?G=!0:(G=!1,H=I.fill&&I.fillToZero&&0>L&&M>0?!0:!1):I.fill?L>=0&&(I.fillToZero||O>.1)?G=!0:0>L&&M>0&&I.fillToZero?(G=!1,H=!0):(G=!1,H=!1):0>L&&(G=!1)}}if(G)this.numberTicks=2+Math.ceil((k-(this.tickSpacing-1))/this.tickSpacing),this.min=0,l=0,E=d/(this.numberTicks-1),v=Math.pow(10,Math.abs(Math.floor(Math.log(E)/Math.LN10))),E/v==parseInt(E/v,10)&&(E+=v),this.tickInterval=Math.ceil(E/v)*v,this.max=this.tickInterval*(this.numberTicks-1);else if(H){this.numberTicks=2+Math.ceil((k-(this.tickSpacing-1))/this.tickSpacing);var P=Math.ceil(Math.abs(c)/w*(this.numberTicks-1)),Q=this.numberTicks-1-P;E=Math.max(Math.abs(c/P),Math.abs(d/Q)),v=Math.pow(10,Math.abs(Math.floor(Math.log(E)/Math.LN10))),this.tickInterval=Math.ceil(E/v)*v,this.max=this.tickInterval*Q,this.min=-this.tickInterval*P}else null==this.numberTicks&&(this.tickInterval?this.numberTicks=3+Math.ceil(w/this.tickInterval):this.numberTicks=2+Math.ceil((k-(this.tickSpacing-1))/this.tickSpacing)),null==this.tickInterval?(E=w/(this.numberTicks-1),v=1>E?Math.pow(10,Math.abs(Math.floor(Math.log(E)/Math.LN10))):1,this.tickInterval=Math.ceil(E*v*this.pad)/v):v=1/this.tickInterval,D=this.tickInterval*(this.numberTicks-1),F=(D-w)/2,null==this.min&&(this.min=Math.floor(v*(c-F))/v),null==this.max&&(this.max=this.min+D);var R,S=a.jqplot.getSignificantFigures(this.tickInterval);if(S.digitsLeft>=S.significantDigits)R="%d";else{var v=Math.max(0,5-S.digitsLeft);v=Math.min(v,S.digitsRight),R="%."+v+"f"}this._autoFormatString=R}else{t=null!=this.min?this.min:c-w*(this.padMin-1),u=null!=this.max?this.max:d+w*(this.padMax-1),w=u-t,null==this.numberTicks&&(null!=this.tickInterval?this.numberTicks=Math.ceil((u-t)/this.tickInterval)+1:k>100?this.numberTicks=parseInt(3+(k-100)/75,10):this.numberTicks=2),null==this.tickInterval&&(this.tickInterval=w/(this.numberTicks-1)),null==this.max&&(u=t+this.tickInterval*(this.numberTicks-1)),null==this.min&&(t=u-this.tickInterval*(this.numberTicks-1));var R,S=a.jqplot.getSignificantFigures(this.tickInterval);if(S.digitsLeft>=S.significantDigits)R="%d";else{var v=Math.max(0,5-S.digitsLeft);v=Math.min(v,S.digitsRight),R="%."+v+"f"}this._autoFormatString=R,this.min=t,this.max=u}if(this.renderer.constructor==a.jqplot.LinearAxisRenderer&&""==this._autoFormatString){w=this.max-this.min;var T=new this.tickRenderer(this.tickOptions),U=T.formatString||a.jqplot.config.defaultTickFormatString,U=U.match(a.jqplot.sprintf.regex)[0],V=0;if(U){if(U.search(/[fFeEgGpP]/)>-1){var W=U.match(/\%\.(\d{0,})?[eEfFgGpP]/);V=W?parseInt(W[1],10):6}else U.search(/[di]/)>-1&&(V=0);var X=Math.pow(10,-V);if(this.tickInterval<X&&null==n&&null==o)if(this.tickInterval=X,null==m&&null==l){this.min=Math.floor(this._dataBounds.min/X)*X,this.min==this._dataBounds.min&&(this.min=this._dataBounds.min-this.tickInterval),this.max=Math.ceil(this._dataBounds.max/X)*X,this.max==this._dataBounds.max&&(this.max=this._dataBounds.max+this.tickInterval);var Y=(this.max-this.min)/this.tickInterval;Y=Y.toFixed(11),Y=Math.ceil(Y),this.numberTicks=Y+1}else if(null==m){var Y=(this._dataBounds.max-this.min)/this.tickInterval;Y=Y.toFixed(11),this.numberTicks=Math.ceil(Y)+2,this.max=this.min+this.tickInterval*(this.numberTicks-1)}else if(null==l){var Y=(this.max-this._dataBounds.min)/this.tickInterval;Y=Y.toFixed(11),this.numberTicks=Math.ceil(Y)+2,this.min=this.max-this.tickInterval*(this.numberTicks-1)}else this.numberTicks=Math.ceil((m-l)/this.tickInterval)+1,this.min=Math.floor(l*Math.pow(10,V))/Math.pow(10,V),this.max=Math.ceil(m*Math.pow(10,V))/Math.pow(10,V),this.numberTicks=Math.ceil((this.max-this.min)/this.tickInterval)+1}}}this._overrideFormatString&&""!=this._autoFormatString&&(this.tickOptions=this.tickOptions||{},this.tickOptions.formatString=this._autoFormatString);for(var r,Z,f=0;f<this.numberTicks;f++){if(e=this.min+f*this.tickInterval,r=new this.tickRenderer(this.tickOptions),r.setTick(e,this.name),this._ticks.push(r),f<this.numberTicks-1)for(var N=0;N<this.minorTicks;N++)e+=this.tickInterval/(this.minorTicks+1),Z=a.extend(!0,{},this.tickOptions,{name:this.name,value:e,label:"",isMinorTick:!0}),r=new this.tickRenderer(Z),this._ticks.push(r);r=null}}this.tickInset&&(this.min=this.min-this.tickInset*this.tickInterval,this.max=this.max+this.tickInset*this.tickInterval),g=null},a.jqplot.LinearAxisRenderer.prototype.resetTickValues=function(b){if(a.isArray(b)&&b.length==this._ticks.length){for(var c,d=0;d<b.length;d++)c=this._ticks[d],c.value=b[d],c.label=c.formatter(c.formatString,b[d]),c.label=c.prefix+c.label,c._elem.html(c.label);c=null,this.min=a.jqplot.arrayMin(b),this.max=a.jqplot.arrayMax(b),this.pack()}},a.jqplot.LinearAxisRenderer.prototype.pack=function(b,c){b=b||{},c=c||this._offsets;var d=this._ticks,e=this.max,f=this.min,g=c.max,h=c.min,i=null==this._label?!1:this._label.show;for(var j in b)this._elem.css(j,b[j]);this._offsets=c;var k=g-h,l=e-f;if(this.breakPoints?(l=l-this.breakPoints[1]+this.breakPoints[0],this.p2u=function(a){return(a-h)*l/k+f},this.u2p=function(a){return a>this.breakPoints[0]&&a<this.breakPoints[1]&&(a=this.breakPoints[0]),a<=this.breakPoints[0]?(a-f)*k/l+h:(a-this.breakPoints[1]+this.breakPoints[0]-f)*k/l+h},"x"==this.name.charAt(0)?(this.series_u2p=function(a){return a>this.breakPoints[0]&&a<this.breakPoints[1]&&(a=this.breakPoints[0]),a<=this.breakPoints[0]?(a-f)*k/l:(a-this.breakPoints[1]+this.breakPoints[0]-f)*k/l},this.series_p2u=function(a){return a*l/k+f}):(this.series_u2p=function(a){return a>this.breakPoints[0]&&a<this.breakPoints[1]&&(a=this.breakPoints[0]),a>=this.breakPoints[1]?(a-e)*k/l:(a+this.breakPoints[1]-this.breakPoints[0]-e)*k/l},this.series_p2u=function(a){return a*l/k+e})):(this.p2u=function(a){return(a-h)*l/k+f},this.u2p=function(a){return(a-f)*k/l+h},"xaxis"==this.name||"x2axis"==this.name?(this.series_u2p=function(a){return(a-f)*k/l},this.series_p2u=function(a){return a*l/k+f}):(this.series_u2p=function(a){return(a-e)*k/l},this.series_p2u=function(a){return a*l/k+e})),this.show)if("xaxis"==this.name||"x2axis"==this.name){for(var m=0;m<d.length;m++){var n=d[m];if(n.show&&n.showLabel){var o;if(n.constructor==a.jqplot.CanvasAxisTickRenderer&&n.angle){var p="xaxis"==this.name?1:-1;switch(n.labelPosition){case"auto":o=p*n.angle<0?-n.getWidth()+n._textRenderer.height*Math.sin(-n._textRenderer.angle)/2:-n._textRenderer.height*Math.sin(n._textRenderer.angle)/2;break;case"end":o=-n.getWidth()+n._textRenderer.height*Math.sin(-n._textRenderer.angle)/2;break;case"start":o=-n._textRenderer.height*Math.sin(n._textRenderer.angle)/2;break;case"middle":o=-n.getWidth()/2+n._textRenderer.height*Math.sin(-n._textRenderer.angle)/2;break;default:o=-n.getWidth()/2+n._textRenderer.height*Math.sin(-n._textRenderer.angle)/2}}else o=-n.getWidth()/2;var q=this.u2p(n.value)+o+"px";n._elem.css("left",q),n.pack()}}if(i){var r=this._label._elem.outerWidth(!0);this._label._elem.css("left",h+k/2-r/2+"px"),"xaxis"==this.name?this._label._elem.css("bottom","0px"):this._label._elem.css("top","0px"),this._label.pack()}}else{for(var m=0;m<d.length;m++){var n=d[m];if(n.show&&n.showLabel){var o;if(n.constructor==a.jqplot.CanvasAxisTickRenderer&&n.angle){var p="yaxis"==this.name?1:-1;switch(n.labelPosition){case"auto":case"end":o=p*n.angle<0?-n._textRenderer.height*Math.cos(-n._textRenderer.angle)/2:-n.getHeight()+n._textRenderer.height*Math.cos(n._textRenderer.angle)/2;break;case"start":o=n.angle>0?-n._textRenderer.height*Math.cos(-n._textRenderer.angle)/2:-n.getHeight()+n._textRenderer.height*Math.cos(n._textRenderer.angle)/2;break;case"middle":o=-n.getHeight()/2;break;default:o=-n.getHeight()/2}}else o=-n.getHeight()/2;var q=this.u2p(n.value)+o+"px";n._elem.css("top",q),n.pack()}}if(i){var s=this._label._elem.outerHeight(!0);this._label._elem.css("top",g-k/2-s/2+"px"),"yaxis"==this.name?this._label._elem.css("left","0px"):this._label._elem.css("right","0px"),this._label.pack()}}d=null};a.jqplot.LinearTickGenerator=function(b,c,d,e,f,g){if(f=null===f?!1:f,g=null===g||f?!1:g,b===c&&(c=c?0:1),d=d||1,b>c){var h=c;c=b,b=h}var i=[],j=x(c-b,d),k=a.jqplot.getSignificantFigures;if(null==e)if(f||g){if(f){i[0]=b,i[2]=Math.ceil((c-b)/j+1),i[1]=b+(i[2]-1)*j;var l=k(b).digitsRight,m=k(j).digitsRight;m>l?i[3]=u(j):i[3]="%."+l+"f",i[4]=j}else if(g){i[1]=c,i[2]=Math.ceil((c-b)/j+1),i[0]=c-(i[2]-1)*j;var n=k(c).digitsRight,m=k(j).digitsRight;m>n?i[3]=u(j):i[3]="%."+n+"f",i[4]=j}}else i[0]=Math.floor(b/j)*j,i[1]=Math.ceil(c/j)*j,i[2]=Math.round((i[1]-i[0])/j+1),i[3]=u(j),i[4]=j;else{var o=[];if(o[0]=Math.floor(b/j)*j,o[1]=Math.ceil(c/j)*j,o[2]=Math.round((o[1]-o[0])/j+1),o[3]=u(j),o[4]=j,o[2]===e)i=o;else{var p=w(o[1]-o[0],e);i[0]=o[0],i[2]=e,i[4]=p,i[3]=u(p),i[1]=i[0]+(i[2]-1)*i[4]}}return i},a.jqplot.LinearTickGenerator.bestLinearInterval=x,a.jqplot.LinearTickGenerator.bestInterval=w,a.jqplot.LinearTickGenerator.bestLinearComponents=y,a.jqplot.LinearTickGenerator.bestConstrainedInterval=v,a.jqplot.MarkerRenderer=function(b){this.show=!0,this.style="filledCircle",this.lineWidth=2,this.size=9,this.color="#666666",this.shadow=!0,this.shadowAngle=45,this.shadowOffset=1,this.shadowDepth=3,this.shadowAlpha="0.07",this.shadowRenderer=new a.jqplot.ShadowRenderer,this.shapeRenderer=new a.jqplot.ShapeRenderer,a.extend(!0,this,b)},a.jqplot.MarkerRenderer.prototype.init=function(b){a.extend(!0,this,b);var c={angle:this.shadowAngle,offset:this.shadowOffset,alpha:this.shadowAlpha,lineWidth:this.lineWidth,depth:this.shadowDepth,closePath:!0};-1!=this.style.indexOf("filled")&&(c.fill=!0),-1!=this.style.indexOf("ircle")&&(c.isarc=!0,c.closePath=!1),this.shadowRenderer.init(c);var d={fill:!1,isarc:!1,strokeStyle:this.color,fillStyle:this.color,lineWidth:this.lineWidth,closePath:!0};-1!=this.style.indexOf("filled")&&(d.fill=!0),-1!=this.style.indexOf("ircle")&&(d.isarc=!0,d.closePath=!1),this.shapeRenderer.init(d)},a.jqplot.MarkerRenderer.prototype.drawDiamond=function(a,b,c,d,e){var f=1.2,g=this.size/2/f,h=this.size/2*f,i=[[a-g,b],[a,b+h],[a+g,b],[a,b-h]];this.shadow&&this.shadowRenderer.draw(c,i),this.shapeRenderer.draw(c,i,e)},a.jqplot.MarkerRenderer.prototype.drawPlus=function(b,c,d,e,f){var g=1,h=this.size/2*g,i=this.size/2*g,j=[[b,c-i],[b,c+i]],k=[[b+h,c],[b-h,c]],l=a.extend(!0,{},this.options,{closePath:!1});this.shadow&&(this.shadowRenderer.draw(d,j,{closePath:!1}),this.shadowRenderer.draw(d,k,{closePath:!1})),this.shapeRenderer.draw(d,j,l),this.shapeRenderer.draw(d,k,l)},a.jqplot.MarkerRenderer.prototype.drawX=function(b,c,d,e,f){var g=1,h=this.size/2*g,i=this.size/2*g,j=a.extend(!0,{},this.options,{closePath:!1}),k=[[b-h,c-i],[b+h,c+i]],l=[[b-h,c+i],[b+h,c-i]];this.shadow&&(this.shadowRenderer.draw(d,k,{closePath:!1}),this.shadowRenderer.draw(d,l,{closePath:!1})),this.shapeRenderer.draw(d,k,j),this.shapeRenderer.draw(d,l,j)},a.jqplot.MarkerRenderer.prototype.drawDash=function(a,b,c,d,e){var f=1,g=this.size/2*f,h=(this.size/2*f,[[a-g,b],[a+g,b]]);this.shadow&&this.shadowRenderer.draw(c,h),this.shapeRenderer.draw(c,h,e)},a.jqplot.MarkerRenderer.prototype.drawLine=function(a,b,c,d,e){var f=[a,b];this.shadow&&this.shadowRenderer.draw(c,f),this.shapeRenderer.draw(c,f,e)},a.jqplot.MarkerRenderer.prototype.drawSquare=function(a,b,c,d,e){var f=1,g=this.size/2/f,h=this.size/2*f,i=[[a-g,b-h],[a-g,b+h],[a+g,b+h],[a+g,b-h]];this.shadow&&this.shadowRenderer.draw(c,i),this.shapeRenderer.draw(c,i,e)},a.jqplot.MarkerRenderer.prototype.drawCircle=function(a,b,c,d,e){var f=this.size/2,g=2*Math.PI,h=[a,b,f,0,g,!0];this.shadow&&this.shadowRenderer.draw(c,h),this.shapeRenderer.draw(c,h,e)},a.jqplot.MarkerRenderer.prototype.draw=function(a,b,c,d){if(d=d||{},null==d.show||0!=d.show)switch(d.color&&!d.fillStyle&&(d.fillStyle=d.color),d.color&&!d.strokeStyle&&(d.strokeStyle=d.color),this.style){case"diamond":this.drawDiamond(a,b,c,!1,d);break;case"filledDiamond":this.drawDiamond(a,b,c,!0,d);break;case"circle":this.drawCircle(a,b,c,!1,d);break;case"filledCircle":this.drawCircle(a,b,c,!0,d);break;case"square":this.drawSquare(a,b,c,!1,d);break;case"filledSquare":this.drawSquare(a,b,c,!0,d);break;case"x":this.drawX(a,b,c,!0,d);break;case"plus":this.drawPlus(a,b,c,!0,d);break;case"dash":this.drawDash(a,b,c,!0,d);break;case"line":this.drawLine(a,b,c,!1,d);break;default:this.drawDiamond(a,b,c,!1,d)}},a.jqplot.ShadowRenderer=function(b){this.angle=45,this.offset=1,this.alpha=.07,this.lineWidth=1.5,this.lineJoin="miter",this.lineCap="round",this.closePath=!1,this.fill=!1,this.depth=3,this.strokeStyle="rgba(0,0,0,0.1)",this.isarc=!1,a.extend(!0,this,b)},a.jqplot.ShadowRenderer.prototype.init=function(b){a.extend(!0,this,b)},a.jqplot.ShadowRenderer.prototype.draw=function(b,c,d){b.save();var e=null!=d?d:{},f=null!=e.fill?e.fill:this.fill,g=null!=e.fillRect?e.fillRect:this.fillRect,h=null!=e.closePath?e.closePath:this.closePath,i=null!=e.offset?e.offset:this.offset,j=null!=e.alpha?e.alpha:this.alpha,k=null!=e.depth?e.depth:this.depth,l=null!=e.isarc?e.isarc:this.isarc,m=null!=e.linePattern?e.linePattern:this.linePattern;b.lineWidth=null!=e.lineWidth?e.lineWidth:this.lineWidth,b.lineJoin=null!=e.lineJoin?e.lineJoin:this.lineJoin,b.lineCap=null!=e.lineCap?e.lineCap:this.lineCap,b.strokeStyle=e.strokeStyle||this.strokeStyle||"rgba(0,0,0,"+j+")",b.fillStyle=e.fillStyle||this.fillStyle||"rgba(0,0,0,"+j+")";for(var n=0;k>n;n++){var o=a.jqplot.LinePattern(b,m);if(b.translate(Math.cos(this.angle*Math.PI/180)*i,Math.sin(this.angle*Math.PI/180)*i),o.beginPath(),l)b.arc(c[0],c[1],c[2],c[3],c[4],!0);else if(g)g&&b.fillRect(c[0],c[1],c[2],c[3]);else if(c&&c.length)for(var p=!0,q=0;q<c.length;q++)null!=c[q][0]&&null!=c[q][1]?p?(o.moveTo(c[q][0],c[q][1]),p=!1):o.lineTo(c[q][0],c[q][1]):p=!0;h&&o.closePath(),f?b.fill():b.stroke()}b.restore()},a.jqplot.ShapeRenderer=function(b){this.lineWidth=1.5,this.linePattern="solid",this.lineJoin="miter",this.lineCap="round",this.closePath=!1,this.fill=!1,this.isarc=!1,this.fillRect=!1,this.strokeRect=!1,this.clearRect=!1,this.strokeStyle="#999999",this.fillStyle="#999999",a.extend(!0,this,b)},a.jqplot.ShapeRenderer.prototype.init=function(b){a.extend(!0,this,b)},a.jqplot.ShapeRenderer.prototype.draw=function(b,c,d){b.save();var e=null!=d?d:{},f=null!=e.fill?e.fill:this.fill,g=null!=e.closePath?e.closePath:this.closePath,h=null!=e.fillRect?e.fillRect:this.fillRect,i=null!=e.strokeRect?e.strokeRect:this.strokeRect,j=null!=e.clearRect?e.clearRect:this.clearRect,k=null!=e.isarc?e.isarc:this.isarc,l=null!=e.linePattern?e.linePattern:this.linePattern,m=a.jqplot.LinePattern(b,l);if(b.lineWidth=e.lineWidth||this.lineWidth,b.lineJoin=e.lineJoin||this.lineJoin,b.lineCap=e.lineCap||this.lineCap,b.strokeStyle=e.strokeStyle||e.color||this.strokeStyle,b.fillStyle=e.fillStyle||this.fillStyle,b.beginPath(),k)return b.arc(c[0],c[1],c[2],c[3],c[4],!0),g&&b.closePath(),f?b.fill():b.stroke(),void b.restore();if(j)return b.clearRect(c[0],c[1],c[2],c[3]),void b.restore();if(h||i){if(h&&b.fillRect(c[0],c[1],c[2],c[3]),i)return b.strokeRect(c[0],c[1],c[2],c[3]),void b.restore()}else if(c&&c.length){for(var n=!0,o=0;o<c.length;o++)null!=c[o][0]&&null!=c[o][1]?n?(m.moveTo(c[o][0],c[o][1]),n=!1):m.lineTo(c[o][0],c[o][1]):n=!0;g&&m.closePath(),f?b.fill():b.stroke()}b.restore()},a.jqplot.TableLegendRenderer=function(){},a.jqplot.TableLegendRenderer.prototype.init=function(b){a.extend(!0,this,b)},a.jqplot.TableLegendRenderer.prototype.addrow=function(b,c,d,e){var f,g,h,i,j,k=d?this.rowSpacing+"px":"0px";h=document.createElement("tr"),f=a(h),f.addClass("jqplot-table-legend"),h=null,e?f.prependTo(this._elem):f.appendTo(this._elem),this.showSwatches&&(g=a(document.createElement("td")),g.addClass("jqplot-table-legend jqplot-table-legend-swatch"),g.css({textAlign:"center",paddingTop:k}),i=a(document.createElement("div")),i.addClass("jqplot-table-legend-swatch-outline"),j=a(document.createElement("div")),j.addClass("jqplot-table-legend-swatch"),j.css({backgroundColor:c,borderColor:c}),f.append(g.append(i.append(j)))),this.showLabels&&(g=a(document.createElement("td")),g.addClass("jqplot-table-legend jqplot-table-legend-label"),g.css("paddingTop",k),f.append(g),this.escapeHtml?g.text(b):g.html(b)),g=null,i=null,j=null,f=null,h=null},a.jqplot.TableLegendRenderer.prototype.draw=function(){if(this._elem&&(this._elem.emptyForce(),this._elem=null),this.show){var b=this._series,c=document.createElement("table");this._elem=a(c),this._elem.addClass("jqplot-table-legend");var d={position:"absolute"};this.background&&(d.background=this.background),this.border&&(d.border=this.border),this.fontSize&&(d.fontSize=this.fontSize),this.fontFamily&&(d.fontFamily=this.fontFamily),this.textColor&&(d.textColor=this.textColor),null!=this.marginTop&&(d.marginTop=this.marginTop),null!=this.marginBottom&&(d.marginBottom=this.marginBottom),null!=this.marginLeft&&(d.marginLeft=this.marginLeft),null!=this.marginRight&&(d.marginRight=this.marginRight);for(var e,f=!1,g=!1,h=0;h<b.length;h++)if(e=b[h],(e._stack||e.renderer.constructor==a.jqplot.BezierCurveRenderer)&&(g=!0),e.show&&e.showLabel){var i=this.labels[h]||e.label.toString();if(i){var j=e.color;g&&h<b.length-1?f=!0:g&&h==b.length-1&&(f=!1),this.renderer.addrow.call(this,i,j,f,g),f=!0}for(var k=0;k<a.jqplot.addLegendRowHooks.length;k++){var l=a.jqplot.addLegendRowHooks[k].call(this,e);l&&(this.renderer.addrow.call(this,l.label,l.color,f),f=!0)}i=null}}return this._elem},a.jqplot.TableLegendRenderer.prototype.pack=function(a){if(this.show)if("insideGrid"==this.placement)switch(this.location){case"nw":var b=a.left,c=a.top;this._elem.css("left",b),this._elem.css("top",c);break;case"n":var b=(a.left+(this._plotDimensions.width-a.right))/2-this.getWidth()/2,c=a.top;this._elem.css("left",b),this._elem.css("top",c);break;case"ne":var b=a.right,c=a.top;this._elem.css({right:b,top:c});break;case"e":var b=a.right,c=(a.top+(this._plotDimensions.height-a.bottom))/2-this.getHeight()/2;this._elem.css({right:b,top:c});break;case"se":var b=a.right,c=a.bottom;this._elem.css({right:b,bottom:c});break;case"s":var b=(a.left+(this._plotDimensions.width-a.right))/2-this.getWidth()/2,c=a.bottom;this._elem.css({left:b,bottom:c});break;case"sw":var b=a.left,c=a.bottom;this._elem.css({left:b,bottom:c});break;case"w":var b=a.left,c=(a.top+(this._plotDimensions.height-a.bottom))/2-this.getHeight()/2;this._elem.css({left:b,top:c});break;default:var b=a.right,c=a.bottom;this._elem.css({right:b,bottom:c})}else if("outside"==this.placement)switch(this.location){case"nw":var b=this._plotDimensions.width-a.left,c=a.top;this._elem.css("right",b),this._elem.css("top",c);break;case"n":var b=(a.left+(this._plotDimensions.width-a.right))/2-this.getWidth()/2,c=this._plotDimensions.height-a.top;this._elem.css("left",b),this._elem.css("bottom",c);break;case"ne":var b=this._plotDimensions.width-a.right,c=a.top;this._elem.css({left:b,top:c});break;case"e":var b=this._plotDimensions.width-a.right,c=(a.top+(this._plotDimensions.height-a.bottom))/2-this.getHeight()/2;this._elem.css({left:b,top:c});break;case"se":var b=this._plotDimensions.width-a.right,c=a.bottom;this._elem.css({left:b,bottom:c});break;case"s":var b=(a.left+(this._plotDimensions.width-a.right))/2-this.getWidth()/2,c=this._plotDimensions.height-a.bottom;this._elem.css({left:b,top:c});break;case"sw":var b=this._plotDimensions.width-a.left,c=a.bottom;this._elem.css({right:b,bottom:c});break;case"w":var b=this._plotDimensions.width-a.left,c=(a.top+(this._plotDimensions.height-a.bottom))/2-this.getHeight()/2;this._elem.css({right:b,top:c});break;default:var b=a.right,c=a.bottom;this._elem.css({right:b,bottom:c})}else switch(this.location){case"nw":this._elem.css({left:0,top:a.top});break;case"n":var b=(a.left+(this._plotDimensions.width-a.right))/2-this.getWidth()/2;this._elem.css({left:b,top:a.top});break;case"ne":this._elem.css({right:0,top:a.top});break;case"e":var c=(a.top+(this._plotDimensions.height-a.bottom))/2-this.getHeight()/2;this._elem.css({right:a.right,top:c});break;case"se":this._elem.css({right:a.right,bottom:a.bottom});break;case"s":var b=(a.left+(this._plotDimensions.width-a.right))/2-this.getWidth()/2;this._elem.css({left:b,bottom:a.bottom});break;case"sw":this._elem.css({left:a.left,bottom:a.bottom});break;case"w":var c=(a.top+(this._plotDimensions.height-a.bottom))/2-this.getHeight()/2;this._elem.css({left:a.left,top:c});break;default:this._elem.css({right:a.right,bottom:a.bottom})}},a.jqplot.ThemeEngine=function(){this.themes={},this.activeTheme=null},a.jqplot.ThemeEngine.prototype.init=function(){var b,c,d,e=new a.jqplot.Theme({_name:"Default"});for(b in e.target)"textColor"==b?e.target[b]=this.target.css("color"):e.target[b]=this.target.css(b);if(this.title.show&&this.title._elem)for(b in e.title)"textColor"==b?e.title[b]=this.title._elem.css("color"):e.title[b]=this.title._elem.css(b);for(b in e.grid)e.grid[b]=this.grid[b];if(null==e.grid.backgroundColor&&null!=this.grid.background&&(e.grid.backgroundColor=this.grid.background),this.legend.show&&this.legend._elem)for(b in e.legend)"textColor"==b?e.legend[b]=this.legend._elem.css("color"):e.legend[b]=this.legend._elem.css(b);var f;for(c=0;c<this.series.length;c++){f=this.series[c],f.renderer.constructor==a.jqplot.LineRenderer?e.series.push(new L):f.renderer.constructor==a.jqplot.BarRenderer?e.series.push(new N):f.renderer.constructor==a.jqplot.PieRenderer?e.series.push(new O):f.renderer.constructor==a.jqplot.DonutRenderer?e.series.push(new P):f.renderer.constructor==a.jqplot.FunnelRenderer?e.series.push(new Q):f.renderer.constructor==a.jqplot.MeterGaugeRenderer?e.series.push(new R):e.series.push({});for(b in e.series[c])e.series[c][b]=f[b]}var g,h;for(b in this.axes){if(h=this.axes[b],g=e.axes[b]=new I,g.borderColor=h.borderColor,g.borderWidth=h.borderWidth,h._ticks&&h._ticks[0])for(d in g.ticks)h._ticks[0].hasOwnProperty(d)?g.ticks[d]=h._ticks[0][d]:h._ticks[0]._elem&&(g.ticks[d]=h._ticks[0]._elem.css(d));if(h._label&&h._label.show)for(d in g.label)h._label[d]?g.label[d]=h._label[d]:h._label._elem&&("textColor"==d?g.label[d]=h._label._elem.css("color"):g.label[d]=h._label._elem.css(d))}this.themeEngine._add(e),this.themeEngine.activeTheme=this.themeEngine.themes[e._name]},a.jqplot.ThemeEngine.prototype.get=function(a){return a?this.themes[a]:this.activeTheme},a.jqplot.ThemeEngine.prototype.getThemeNames=function(){var a=[];for(var b in this.themes)a.push(b);return a.sort(z)},a.jqplot.ThemeEngine.prototype.getThemes=function(){var a=[],b=[];for(var c in this.themes)a.push(c);a.sort(z);for(var d=0;d<a.length;d++)b.push(this.themes[a[d]]);return b},a.jqplot.ThemeEngine.prototype.activate=function(b,c){var d=!1;if(!c&&this.activeTheme&&this.activeTheme._name&&(c=this.activeTheme._name),!this.themes.hasOwnProperty(c))throw new Error("No theme of that name");var e=this.themes[c];this.activeTheme=e;var f,g=["xaxis","x2axis","yaxis","y2axis"];for(p=0;p<g.length;p++){var h=g[p];null!=e.axesStyles.borderColor&&(b.axes[h].borderColor=e.axesStyles.borderColor),null!=e.axesStyles.borderWidth&&(b.axes[h].borderWidth=e.axesStyles.borderWidth)}for(var i in b.axes){var j=b.axes[i];if(j.show){var k=e.axes[i]||{},l=e.axesStyles,m=a.jqplot.extend(!0,{},k,l);if(f=null!=e.axesStyles.borderColor?e.axesStyles.borderColor:m.borderColor,null!=m.borderColor&&(j.borderColor=m.borderColor,d=!0),f=null!=e.axesStyles.borderWidth?e.axesStyles.borderWidth:m.borderWidth,null!=m.borderWidth&&(j.borderWidth=m.borderWidth,d=!0),j._ticks&&j._ticks[0])for(var n in m.ticks)f=m.ticks[n],null!=f&&(j.tickOptions[n]=f,j._ticks=[],d=!0);if(j._label&&j._label.show)for(var n in m.label)f=m.label[n],null!=f&&(j.labelOptions[n]=f,d=!0)}}for(var o in e.grid)null!=e.grid[o]&&(b.grid[o]=e.grid[o]);if(d||b.grid.draw(),b.legend.show)for(o in e.legend)null!=e.legend[o]&&(b.legend[o]=e.legend[o]);if(b.title.show)for(o in e.title)null!=e.title[o]&&(b.title[o]=e.title[o]);var p;for(p=0;p<e.series.length;p++){var q={};for(o in e.series[p])f=null!=e.seriesStyles[o]?e.seriesStyles[o]:e.series[p][o],null!=f&&(q[o]=f,"color"==o?(b.series[p].renderer.shapeRenderer.fillStyle=f,b.series[p].renderer.shapeRenderer.strokeStyle=f,b.series[p][o]=f):"lineWidth"==o||"linePattern"==o?(b.series[p].renderer.shapeRenderer[o]=f,b.series[p][o]=f):"markerOptions"==o?(B(b.series[p].markerOptions,f),B(b.series[p].markerRenderer,f)):b.series[p][o]=f,d=!0)}d&&(b.target.empty(),b.draw());for(o in e.target)null!=e.target[o]&&b.target.css(o,e.target[o])},a.jqplot.ThemeEngine.prototype._add=function(a,b){if(b&&(a._name=b),a._name||(a._name=Date.parse(new Date)),this.themes.hasOwnProperty(a._name))throw new Error("jqplot.ThemeEngine Error: Theme already in use");this.themes[a._name]=a},a.jqplot.ThemeEngine.prototype.remove=function(a){return"Default"==a?!1:delete this.themes[a]},a.jqplot.ThemeEngine.prototype.newTheme=function(b,c){"object"==typeof b&&(c=c||b,b=null),b=c&&c._name?c._name:b||Date.parse(new Date);var d=this.copy(this.themes.Default._name,b);return a.jqplot.extend(d,c),d},a.jqplot.clone=A,a.jqplot.merge=B,a.jqplot.extend=function(){var b,c=arguments[0]||{},d=1,e=arguments.length,f=!1;for("boolean"==typeof c&&(f=c,c=arguments[1]||{},d=2),"object"!=typeof c&&"[object Function]"===!toString.call(c)&&(c={});e>d;d++)if(null!=(b=arguments[d]))for(var g in b){var h=c[g],i=b[g];c!==i&&(f&&i&&"object"==typeof i&&!i.nodeType?c[g]=a.jqplot.extend(f,h||(null!=i.length?[]:{}),i):i!==F&&(c[g]=i))}return c},a.jqplot.ThemeEngine.prototype.rename=function(a,b){if("Default"==a||"Default"==b)throw new Error("jqplot.ThemeEngine Error: Cannot rename from/to Default");if(this.themes.hasOwnProperty(b))throw new Error("jqplot.ThemeEngine Error: New name already in use.");if(this.themes.hasOwnProperty(a)){var c=this.copy(a,b);return this.remove(a),c}throw new Error("jqplot.ThemeEngine Error: Old name or new name invalid")},a.jqplot.ThemeEngine.prototype.copy=function(b,c,d){if("Default"==c)throw new Error("jqplot.ThemeEngine Error: Cannot copy over Default theme");if(!this.themes.hasOwnProperty(b)){var e="jqplot.ThemeEngine Error: Source name invalid";throw new Error(e)}if(this.themes.hasOwnProperty(c)){var e="jqplot.ThemeEngine Error: Target name invalid";throw new Error(e)}var f=A(this.themes[b]);return f._name=c,a.jqplot.extend(!0,f,d),this._add(f),f},a.jqplot.Theme=function(b,c){"object"==typeof b&&(c=c||b,b=null),b=b||Date.parse(new Date),this._name=b,this.target={backgroundColor:null},this.legend={textColor:null,fontFamily:null,fontSize:null,border:null,background:null},this.title={textColor:null,fontFamily:null,fontSize:null,textAlign:null},this.seriesStyles={},this.series=[],this.grid={drawGridlines:null,gridLineColor:null,gridLineWidth:null,backgroundColor:null,borderColor:null,borderWidth:null,shadow:null},this.axesStyles={label:{},ticks:{}},this.axes={},"string"==typeof c?this._name=c:"object"==typeof c&&a.jqplot.extend(!0,this,c)};var I=function(){this.borderColor=null,this.borderWidth=null,this.ticks=new J,this.label=new K},J=function(){this.show=null,this.showGridline=null,this.showLabel=null,this.showMark=null,this.size=null,this.textColor=null,this.whiteSpace=null,this.fontSize=null,this.fontFamily=null},K=function(){this.textColor=null,this.whiteSpace=null,this.fontSize=null,
this.fontFamily=null,this.fontWeight=null},L=function(){this.color=null,this.lineWidth=null,this.linePattern=null,this.shadow=null,this.fillColor=null,this.showMarker=null,this.markerOptions=new M},M=function(){this.show=null,this.style=null,this.lineWidth=null,this.size=null,this.color=null,this.shadow=null},N=function(){this.color=null,this.seriesColors=null,this.lineWidth=null,this.shadow=null,this.barPadding=null,this.barMargin=null,this.barWidth=null,this.highlightColors=null},O=function(){this.seriesColors=null,this.padding=null,this.sliceMargin=null,this.fill=null,this.shadow=null,this.startAngle=null,this.lineWidth=null,this.highlightColors=null},P=function(){this.seriesColors=null,this.padding=null,this.sliceMargin=null,this.fill=null,this.shadow=null,this.startAngle=null,this.lineWidth=null,this.innerDiameter=null,this.thickness=null,this.ringMargin=null,this.highlightColors=null},Q=function(){this.color=null,this.lineWidth=null,this.shadow=null,this.padding=null,this.sectionMargin=null,this.seriesColors=null,this.highlightColors=null},R=function(){this.padding=null,this.backgroundColor=null,this.ringColor=null,this.tickColor=null,this.ringWidth=null,this.intervalColors=null,this.intervalInnerRadius=null,this.intervalOuterRadius=null,this.hubRadius=null,this.needleThickness=null,this.needlePad=null};a.fn.jqplotChildText=function(){return a(this).contents().filter(function(){return 3==this.nodeType}).text()},a.fn.jqplotGetComputedFontStyle=function(){for(var a=window.getComputedStyle?window.getComputedStyle(this[0],""):this[0].currentStyle,b=a["font-style"]?["font-style","font-weight","font-size","font-family"]:["fontStyle","fontWeight","fontSize","fontFamily"],c=[],d=0;d<b.length;++d){var e=String(a[b[d]]);e&&"normal"!=e&&c.push(e)}return c.join(" ")},a.fn.jqplotToImageCanvas=function(b){function c(b){var c=parseInt(a(b).css("line-height"),10);return isNaN(c)&&(c=1.2*parseInt(a(b).css("font-size"),10)),c}function d(b,d,e,f,g,h){for(var i=c(b),j=a(b).innerWidth(),k=(a(b).innerHeight(),e.split(/\s+/)),l=k.length,m="",n=[],o=g,p=f,q=0;l>q;q++)m+=k[q],d.measureText(m).width>j&&m.length>k[q].length&&(n.push(q),m="",q--);if(0===n.length)"center"===a(b).css("textAlign")&&(p=f+(h-d.measureText(m).width)/2-s),d.fillText(e,p,g);else{m=k.slice(0,n[0]).join(" "),"center"===a(b).css("textAlign")&&(p=f+(h-d.measureText(m).width)/2-s),d.fillText(m,p,o),o+=i;for(var q=1,r=n.length;r>q;q++)m=k.slice(n[q-1],n[q]).join(" "),"center"===a(b).css("textAlign")&&(p=f+(h-d.measureText(m).width)/2-s),d.fillText(m,p,o),o+=i;m=k.slice(n[q-1],k.length).join(" "),"center"===a(b).css("textAlign")&&(p=f+(h-d.measureText(m).width)/2-s),d.fillText(m,p,o)}}function e(b,c,f){var g=b.tagName.toLowerCase(),h=a(b).position(),i=window.getComputedStyle?window.getComputedStyle(b,""):b.currentStyle,j=c+h.left+parseInt(i.marginLeft,10)+parseInt(i.borderLeftWidth,10)+parseInt(i.paddingLeft,10),k=f+h.top+parseInt(i.marginTop,10)+parseInt(i.borderTopWidth,10)+parseInt(i.paddingTop,10),l=m.width;if("div"!=g&&"span"!=g||a(b).hasClass("jqplot-highlighter-tooltip"))if("table"===g&&a(b).hasClass("jqplot-table-legend")){w.strokeStyle=a(b).css("border-top-color"),w.fillStyle=a(b).css("background-color"),w.fillRect(j,k,a(b).innerWidth(),a(b).innerHeight()),parseInt(a(b).css("border-top-width"),10)>0&&w.strokeRect(j,k,a(b).innerWidth(),a(b).innerHeight()),a(b).find("div.jqplot-table-legend-swatch-outline").each(function(){var b=a(this);w.strokeStyle=b.css("border-top-color");var c=j+b.position().left,d=k+b.position().top;w.strokeRect(c,d,b.innerWidth(),b.innerHeight()),c+=parseInt(b.css("padding-left"),10),d+=parseInt(b.css("padding-top"),10);var e=b.innerHeight()-2*parseInt(b.css("padding-top"),10),f=b.innerWidth()-2*parseInt(b.css("padding-left"),10),g=b.children("div.jqplot-table-legend-swatch");w.fillStyle=g.css("background-color"),w.fillRect(c,d,f,e)}),a(b).find("td.jqplot-table-legend-label").each(function(){var b=a(this),c=j+b.position().left,e=k+b.position().top+parseInt(b.css("padding-top"),10);w.font=b.jqplotGetComputedFontStyle(),w.fillStyle=b.css("color"),d(b,w,b.text(),c,e,l)})}else"canvas"==g&&w.drawImage(b,j,k);else{a(b).children().each(function(){e(this,j,k)});var n=a(b).jqplotChildText();n&&(w.font=a(b).jqplotGetComputedFontStyle(),w.fillStyle=a(b).css("color"),d(b,w,n,j,k,l))}}b=b||{};var f=null==b.x_offset?0:b.x_offset,g=null==b.y_offset?0:b.y_offset,h=null==b.backgroundColor?"rgb(255,255,255)":b.backgroundColor;if(0==a(this).width()||0==a(this).height())return null;if(a.jqplot.use_excanvas)return null;for(var i,j,k,l,m=document.createElement("canvas"),n=a(this).outerHeight(!0),o=a(this).outerWidth(!0),p=a(this).offset(),q=p.left,r=p.top,s=0,t=0,u=["jqplot-table-legend","jqplot-xaxis-tick","jqplot-x2axis-tick","jqplot-yaxis-tick","jqplot-y2axis-tick","jqplot-y3axis-tick","jqplot-y4axis-tick","jqplot-y5axis-tick","jqplot-y6axis-tick","jqplot-y7axis-tick","jqplot-y8axis-tick","jqplot-y9axis-tick","jqplot-xaxis-label","jqplot-x2axis-label","jqplot-yaxis-label","jqplot-y2axis-label","jqplot-y3axis-label","jqplot-y4axis-label","jqplot-y5axis-label","jqplot-y6axis-label","jqplot-y7axis-label","jqplot-y8axis-label","jqplot-y9axis-label"],v=0;v<u.length;v++)a(this).find("."+u[v]).each(function(){i=a(this).offset().top-r,j=a(this).offset().left-q,l=j+a(this).outerWidth(!0)+s,k=i+a(this).outerHeight(!0)+t,-s>j&&(o=o-s-j,s=-j),-t>i&&(n=n-t-i,t=-i),l>o&&(o=l),k>n&&(n=k)});m.width=o+Number(f),m.height=n+Number(g);var w=m.getContext("2d");return w.save(),w.fillStyle=h,w.fillRect(0,0,m.width,m.height),w.restore(),w.translate(s,t),w.textAlign="left",w.textBaseline="top",a(this).children().each(function(){e(this,f,g)}),m},a.fn.jqplotToImageStr=function(b){var c=a(this).jqplotToImageCanvas(b);return c?c.toDataURL("image/png"):null},a.fn.jqplotToImageElem=function(b){var c=document.createElement("img"),d=a(this).jqplotToImageStr(b);return c.src=d,c},a.fn.jqplotToImageElemStr=function(b){var c="<img src="+a(this).jqplotToImageStr(b)+" />";return c},a.fn.jqplotSaveImage=function(){var b=a(this).jqplotToImageStr({});b&&(window.location.href=b.replace("image/png","image/octet-stream"))},a.fn.jqplotViewImage=function(){var b=a(this).jqplotToImageElemStr({});a(this).jqplotToImageStr({});if(b){var c=window.open("");c.document.open("image/png"),c.document.write(b),c.document.close(),c=null}};var S=function(){switch(this.syntax=S.config.syntax,this._type="jsDate",this.proxy=new Date,this.options={},this.locale=S.regional.getLocale(),this.formatString="",this.defaultCentury=S.config.defaultCentury,arguments.length){case 0:break;case 1:if("[object Object]"==D(arguments[0])&&"jsDate"!=arguments[0]._type){var a=this.options=arguments[0];this.syntax=a.syntax||this.syntax,this.defaultCentury=a.defaultCentury||this.defaultCentury,this.proxy=S.createDate(a.date)}else this.proxy=S.createDate(arguments[0]);break;default:for(var b=[],c=0;c<arguments.length;c++)b.push(arguments[c]);this.proxy=new Date,this.proxy.setFullYear.apply(this.proxy,b.slice(0,3)),b.slice(3).length&&this.proxy.setHours.apply(this.proxy,b.slice(3))}};S.config={defaultLocale:"en",syntax:"perl",defaultCentury:1900},S.prototype.add=function(a,b){var c=V[b]||V.day;return"number"==typeof c?this.proxy.setTime(this.proxy.getTime()+c*a):c.add(this,a),this},S.prototype.clone=function(){return new S(this.proxy.getTime())},S.prototype.getUtcOffset=function(){return 6e4*this.proxy.getTimezoneOffset()},S.prototype.diff=function(a,b,c){if(a=new S(a),null===a)return null;var d=V[b]||V.day;if("number"==typeof d)var e=(this.proxy.getTime()-a.proxy.getTime())/d;else var e=d.diff(this.proxy,a.proxy);return c?e:Math[e>0?"floor":"ceil"](e)},S.prototype.getAbbrDayName=function(){return S.regional[this.locale].dayNamesShort[this.proxy.getDay()]},S.prototype.getAbbrMonthName=function(){return S.regional[this.locale].monthNamesShort[this.proxy.getMonth()]},S.prototype.getAMPM=function(){return this.proxy.getHours()>=12?"PM":"AM"},S.prototype.getAmPm=function(){return this.proxy.getHours()>=12?"pm":"am"},S.prototype.getCentury=function(){return parseInt(this.proxy.getFullYear()/100,10)},S.prototype.getDate=function(){return this.proxy.getDate()},S.prototype.getDay=function(){return this.proxy.getDay()},S.prototype.getDayOfWeek=function(){var a=this.proxy.getDay();return 0===a?7:a},S.prototype.getDayOfYear=function(){var a=this.proxy,b=a-new Date(""+a.getFullYear()+"/1/1 GMT");return b+=6e4*a.getTimezoneOffset(),a=null,parseInt(b/6e4/60/24,10)+1},S.prototype.getDayName=function(){return S.regional[this.locale].dayNames[this.proxy.getDay()]},S.prototype.getFullWeekOfYear=function(){var a=this.proxy,b=this.getDayOfYear(),c=6-a.getDay(),d=parseInt((b+c)/7,10);return d},S.prototype.getFullYear=function(){return this.proxy.getFullYear()},S.prototype.getGmtOffset=function(){var a=this.proxy.getTimezoneOffset()/60,b=0>a?"+":"-";return a=Math.abs(a),b+U(Math.floor(a),2)+":"+U(a%1*60,2)},S.prototype.getHours=function(){return this.proxy.getHours()},S.prototype.getHours12=function(){var a=this.proxy.getHours();return a>12?a-12:0==a?12:a},S.prototype.getIsoWeek=function(){var a=this.proxy,b=this.getWeekOfYear(),c=new Date(""+a.getFullYear()+"/1/1").getDay(),d=b+(c>4||1>=c?0:1);return 53==d&&new Date(""+a.getFullYear()+"/12/31").getDay()<4?d=1:0===d&&(a=new S(new Date(""+(a.getFullYear()-1)+"/12/31")),d=a.getIsoWeek()),a=null,d},S.prototype.getMilliseconds=function(){return this.proxy.getMilliseconds()},S.prototype.getMinutes=function(){return this.proxy.getMinutes()},S.prototype.getMonth=function(){return this.proxy.getMonth()},S.prototype.getMonthName=function(){return S.regional[this.locale].monthNames[this.proxy.getMonth()]},S.prototype.getMonthNumber=function(){return this.proxy.getMonth()+1},S.prototype.getSeconds=function(){return this.proxy.getSeconds()},S.prototype.getShortYear=function(){return this.proxy.getYear()%100},S.prototype.getTime=function(){return this.proxy.getTime()},S.prototype.getTimezoneAbbr=function(){return this.proxy.toString().replace(/^.*\(([^)]+)\)$/,"$1")},S.prototype.getTimezoneName=function(){var a=/(?:\((.+)\)$| ([A-Z]{3}) )/.exec(this.toString());return a[1]||a[2]||"GMT"+this.getGmtOffset()},S.prototype.getTimezoneOffset=function(){return this.proxy.getTimezoneOffset()},S.prototype.getWeekOfYear=function(){var a=this.getDayOfYear(),b=7-this.getDayOfWeek(),c=parseInt((a+b)/7,10);return c},S.prototype.getUnix=function(){return Math.round(this.proxy.getTime()/1e3,0)},S.prototype.getYear=function(){return this.proxy.getYear()},S.prototype.next=function(a){return a=a||"day",this.clone().add(1,a)},S.prototype.set=function(){switch(arguments.length){case 0:this.proxy=new Date;break;case 1:if("[object Object]"==D(arguments[0])&&"jsDate"!=arguments[0]._type){var a=this.options=arguments[0];this.syntax=a.syntax||this.syntax,this.defaultCentury=a.defaultCentury||this.defaultCentury,this.proxy=S.createDate(a.date)}else this.proxy=S.createDate(arguments[0]);break;default:for(var b=[],c=0;c<arguments.length;c++)b.push(arguments[c]);this.proxy=new Date,this.proxy.setFullYear.apply(this.proxy,b.slice(0,3)),b.slice(3).length&&this.proxy.setHours.apply(this.proxy,b.slice(3))}return this},S.prototype.setDate=function(a){return this.proxy.setDate(a),this},S.prototype.setFullYear=function(){return this.proxy.setFullYear.apply(this.proxy,arguments),this},S.prototype.setHours=function(){return this.proxy.setHours.apply(this.proxy,arguments),this},S.prototype.setMilliseconds=function(a){return this.proxy.setMilliseconds(a),this},S.prototype.setMinutes=function(){return this.proxy.setMinutes.apply(this.proxy,arguments),this},S.prototype.setMonth=function(){return this.proxy.setMonth.apply(this.proxy,arguments),this},S.prototype.setSeconds=function(){return this.proxy.setSeconds.apply(this.proxy,arguments),this},S.prototype.setTime=function(a){return this.proxy.setTime(a),this},S.prototype.setYear=function(){return this.proxy.setYear.apply(this.proxy,arguments),this},S.prototype.strftime=function(a){return a=a||this.formatString||S.regional[this.locale].formatString,S.strftime(this,a,this.syntax)},S.prototype.toString=function(){return this.proxy.toString()},S.prototype.toYmdInt=function(){return 1e4*this.proxy.getFullYear()+100*this.getMonthNumber()+this.proxy.getDate()},S.regional={en:{monthNames:["January","February","March","April","May","June","July","August","September","October","November","December"],monthNamesShort:["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],dayNames:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],dayNamesShort:["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],formatString:"%Y-%m-%d %H:%M:%S"},fr:{monthNames:["Janvier","Février","Mars","Avril","Mai","Juin","Juillet","Août","Septembre","Octobre","Novembre","Décembre"],monthNamesShort:["Jan","Fév","Mar","Avr","Mai","Jun","Jul","Aoû","Sep","Oct","Nov","Déc"],dayNames:["Dimanche","Lundi","Mardi","Mercredi","Jeudi","Vendredi","Samedi"],dayNamesShort:["Dim","Lun","Mar","Mer","Jeu","Ven","Sam"],formatString:"%Y-%m-%d %H:%M:%S"},de:{monthNames:["Januar","Februar","März","April","Mai","Juni","Juli","August","September","Oktober","November","Dezember"],monthNamesShort:["Jan","Feb","Mär","Apr","Mai","Jun","Jul","Aug","Sep","Okt","Nov","Dez"],dayNames:["Sonntag","Montag","Dienstag","Mittwoch","Donnerstag","Freitag","Samstag"],dayNamesShort:["So","Mo","Di","Mi","Do","Fr","Sa"],formatString:"%Y-%m-%d %H:%M:%S"},es:{monthNames:["Enero","Febrero","Marzo","Abril","Mayo","Junio","Julio","Agosto","Septiembre","Octubre","Noviembre","Diciembre"],monthNamesShort:["Ene","Feb","Mar","Abr","May","Jun","Jul","Ago","Sep","Oct","Nov","Dic"],dayNames:["Domingo","Lunes","Martes","Mi&eacute;rcoles","Jueves","Viernes","S&aacute;bado"],dayNamesShort:["Dom","Lun","Mar","Mi&eacute;","Juv","Vie","S&aacute;b"],formatString:"%Y-%m-%d %H:%M:%S"},ru:{monthNames:["Январь","Февраль","Март","Апрель","Май","Июнь","Июль","Август","Сентябрь","Октябрь","Ноябрь","Декабрь"],monthNamesShort:["Янв","Фев","Мар","Апр","Май","Июн","Июл","Авг","Сен","Окт","Ноя","Дек"],dayNames:["воскресенье","понедельник","вторник","среда","четверг","пятница","суббота"],dayNamesShort:["вск","пнд","втр","срд","чтв","птн","сбт"],formatString:"%Y-%m-%d %H:%M:%S"},ar:{monthNames:["كانون الثاني","شباط","آذار","نيسان","آذار","حزيران","تموز","آب","أيلول","تشرين الأول","تشرين الثاني","كانون الأول"],monthNamesShort:["1","2","3","4","5","6","7","8","9","10","11","12"],dayNames:["السبت","الأحد","الاثنين","الثلاثاء","الأربعاء","الخميس","الجمعة"],dayNamesShort:["سبت","أحد","اثنين","ثلاثاء","أربعاء","خميس","جمعة"],formatString:"%Y-%m-%d %H:%M:%S"},pt:{monthNames:["Janeiro","Fevereiro","Mar&ccedil;o","Abril","Maio","Junho","Julho","Agosto","Setembro","Outubro","Novembro","Dezembro"],monthNamesShort:["Jan","Fev","Mar","Abr","Mai","Jun","Jul","Ago","Set","Out","Nov","Dez"],dayNames:["Domingo","Segunda-feira","Ter&ccedil;a-feira","Quarta-feira","Quinta-feira","Sexta-feira","S&aacute;bado"],dayNamesShort:["Dom","Seg","Ter","Qua","Qui","Sex","S&aacute;b"],formatString:"%Y-%m-%d %H:%M:%S"},"pt-BR":{monthNames:["Janeiro","Fevereiro","Mar&ccedil;o","Abril","Maio","Junho","Julho","Agosto","Setembro","Outubro","Novembro","Dezembro"],monthNamesShort:["Jan","Fev","Mar","Abr","Mai","Jun","Jul","Ago","Set","Out","Nov","Dez"],dayNames:["Domingo","Segunda-feira","Ter&ccedil;a-feira","Quarta-feira","Quinta-feira","Sexta-feira","S&aacute;bado"],dayNamesShort:["Dom","Seg","Ter","Qua","Qui","Sex","S&aacute;b"],formatString:"%Y-%m-%d %H:%M:%S"},pl:{monthNames:["Styczeń","Luty","Marzec","Kwiecień","Maj","Czerwiec","Lipiec","Sierpień","Wrzesień","Październik","Listopad","Grudzień"],monthNamesShort:["Sty","Lut","Mar","Kwi","Maj","Cze","Lip","Sie","Wrz","Paź","Lis","Gru"],dayNames:["Niedziela","Poniedziałek","Wtorek","Środa","Czwartek","Piątek","Sobota"],dayNamesShort:["Ni","Pn","Wt","Śr","Cz","Pt","Sb"],formatString:"%Y-%m-%d %H:%M:%S"},nl:{monthNames:["Januari","Februari","Maart","April","Mei","Juni","July","Augustus","September","Oktober","November","December"],monthNamesShort:["Jan","Feb","Mar","Apr","Mei","Jun","Jul","Aug","Sep","Okt","Nov","Dec"],dayNames:",".Zaterdag,dayNamesShort:["Zo","Ma","Di","Wo","Do","Vr","Za"],formatString:"%Y-%m-%d %H:%M:%S"},sv:{monthNames:["januari","februari","mars","april","maj","juni","juli","augusti","september","oktober","november","december"],monthNamesShort:["jan","feb","mar","apr","maj","jun","jul","aug","sep","okt","nov","dec"],dayNames:["söndag","måndag","tisdag","onsdag","torsdag","fredag","lördag"],dayNamesShort:["sön","mån","tis","ons","tor","fre","lör"],formatString:"%Y-%m-%d %H:%M:%S"},it:{monthNames:["Gennaio","Febbraio","Marzo","Aprile","Maggio","Giugno","Luglio","Agosto","Settembre","Ottobre","Novembre","Dicembre"],monthNamesShort:["Gen","Feb","Mar","Apr","Mag","Giu","Lug","Ago","Set","Ott","Nov","Dic"],dayNames:["Domenica","Lunedi","Martedi","Mercoledi","Giovedi","Venerdi","Sabato"],dayNamesShort:["Dom","Lun","Mar","Mer","Gio","Ven","Sab"],formatString:"%d-%m-%Y %H:%M:%S"}},S.regional["en-US"]=S.regional["en-GB"]=S.regional.en,S.regional.getLocale=function(){var a=S.config.defaultLocale;return document&&document.getElementsByTagName("html")&&document.getElementsByTagName("html")[0].lang&&(a=document.getElementsByTagName("html")[0].lang,S.regional.hasOwnProperty(a)||(a=S.config.defaultLocale)),a};var T=864e5,U=function(a,b){a=String(a);var c=b-a.length,d=String(Math.pow(10,c)).slice(1);return d.concat(a)},V={millisecond:1,second:1e3,minute:6e4,hour:36e5,day:T,week:7*T,month:{add:function(a,b){V.year.add(a,Math[b>0?"floor":"ceil"](b/12));var c=a.getMonth()+b%12;12==c?(c=0,a.setYear(a.getFullYear()+1)):-1==c&&(c=11,a.setYear(a.getFullYear()-1)),a.setMonth(c)},diff:function(a,b){var c=a.getFullYear()-b.getFullYear(),d=a.getMonth()-b.getMonth()+12*c,e=a.getDate()-b.getDate();return d+e/30}},year:{add:function(a,b){a.setYear(a.getFullYear()+Math[b>0?"floor":"ceil"](b))},diff:function(a,b){return V.month.diff(a,b)/12}}};for(var W in V)"s"!=W.substring(W.length-1)&&(V[W+"s"]=V[W]);var X=function(a,b,c){if(S.formats[c].shortcuts[b])return S.strftime(a,S.formats[c].shortcuts[b],c);var d=(S.formats[c].codes[b]||"").split("."),e=a["get"+d[0]]?a["get"+d[0]]():"";return d[1]&&(e=U(e,d[1])),e};S.strftime=function(a,b,c,d){var e="perl",f=S.regional.getLocale();c&&S.formats.hasOwnProperty(c)?e=c:c&&S.regional.hasOwnProperty(c)&&(f=c),d&&S.formats.hasOwnProperty(d)?e=d:d&&S.regional.hasOwnProperty(d)&&(f=d),("[object Object]"!=D(a)||"jsDate"!=a._type)&&(a=new S(a),a.locale=f),b||(b=a.formatString||S.regional[f].formatString);for(var g,h=b||"%Y-%m-%d",i="";h.length>0;)(g=h.match(S.formats[e].codes.matcher))?(i+=h.slice(0,g.index),i+=(g[1]||"")+X(a,g[2],e),h=h.slice(g.index+g[0].length)):(i+=h,h="");return i},S.formats={ISO:"%Y-%m-%dT%H:%M:%S.%N%G",SQL:"%Y-%m-%d %H:%M:%S"},S.formats.perl={codes:{matcher:/()%(#?(%|[a-z]))/i,Y:"FullYear",y:"ShortYear.2",m:"MonthNumber.2","#m":"MonthNumber",B:"MonthName",b:"AbbrMonthName",d:"Date.2","#d":"Date",e:"Date",A:"DayName",a:"AbbrDayName",w:"Day",H:"Hours.2","#H":"Hours",I:"Hours12.2","#I":"Hours12",p:"AMPM",M:"Minutes.2","#M":"Minutes",S:"Seconds.2","#S":"Seconds",s:"Unix",N:"Milliseconds.3","#N":"Milliseconds",O:"TimezoneOffset",Z:"TimezoneName",G:"GmtOffset"},shortcuts:{F:"%Y-%m-%d",T:"%H:%M:%S",X:"%H:%M:%S",x:"%m/%d/%y",D:"%m/%d/%y","#c":"%a %b %e %H:%M:%S %Y",v:"%e-%b-%Y",R:"%H:%M",r:"%I:%M:%S %p",t:"	",n:"\n","%":"%"}},S.formats.php={codes:{matcher:/()%((%|[a-z]))/i,a:"AbbrDayName",A:"DayName",d:"Date.2",e:"Date",j:"DayOfYear.3",u:"DayOfWeek",w:"Day",U:"FullWeekOfYear.2",V:"IsoWeek.2",W:"WeekOfYear.2",b:"AbbrMonthName",B:"MonthName",m:"MonthNumber.2",h:"AbbrMonthName",C:"Century.2",y:"ShortYear.2",Y:"FullYear",H:"Hours.2",I:"Hours12.2",l:"Hours12",p:"AMPM",P:"AmPm",M:"Minutes.2",S:"Seconds.2",s:"Unix",O:"TimezoneOffset",z:"GmtOffset",Z:"TimezoneAbbr"},shortcuts:{D:"%m/%d/%y",F:"%Y-%m-%d",T:"%H:%M:%S",X:"%H:%M:%S",x:"%m/%d/%y",R:"%H:%M",r:"%I:%M:%S %p",t:"	",n:"\n","%":"%"}},S.createDate=function(a){function b(a,b){var c,d,e,f,g=parseFloat(b[1]),h=parseFloat(b[2]),i=parseFloat(b[3]),j=S.config.defaultCentury;return g>31?(d=i,e=h,c=j+g):(d=h,e=g,c=j+i),f=e+"/"+d+"/"+c,a.replace(/^([0-9]{1,2})[-\/]([0-9]{1,2})[-\/]([0-9]{1,2})/,f)}if(null==a)return new Date;if(a instanceof Date)return a;if("number"==typeof a)return new Date(a);var c=String(a).replace(/^\s*(.+)\s*$/g,"$1");c=c.replace(/^([0-9]{1,4})-([0-9]{1,2})-([0-9]{1,4})/,"$1/$2/$3"),c=c.replace(/^(3[01]|[0-2]?\d)[-\/]([a-z]{3,})[-\/](\d{4})/i,"$1 $2 $3");var d=c.match(/^(3[01]|[0-2]?\d)[-\/]([a-z]{3,})[-\/](\d{2})\D*/i);if(d&&d.length>3){var e=parseFloat(d[3]),f=S.config.defaultCentury+e;f=String(f),c=c.replace(/^(3[01]|[0-2]?\d)[-\/]([a-z]{3,})[-\/](\d{2})\D*/i,d[1]+" "+d[2]+" "+f)}d=c.match(/^([0-9]{1,2})[-\/]([0-9]{1,2})[-\/]([0-9]{1,2})[^0-9]/),d&&d.length>3&&(c=b(c,d));var d=c.match(/^([0-9]{1,2})[-\/]([0-9]{1,2})[-\/]([0-9]{1,2})$/);d&&d.length>3&&(c=b(c,d));for(var g,h,i,j=0,k=S.matchers.length,l=c;k>j;){if(h=Date.parse(l),!isNaN(h))return new Date(h);if(g=S.matchers[j],"function"==typeof g){if(i=g.call(S,l),i instanceof Date)return i}else l=c.replace(g[0],g[1]);j++}return NaN},S.daysInMonth=function(a,b){return 2==b?29==new Date(a,1,29).getDate()?29:28:[F,31,F,31,30,31,30,31,31,30,31,30,31][b]},S.matchers=[[/(3[01]|[0-2]\d)\s*\.\s*(1[0-2]|0\d)\s*\.\s*([1-9]\d{3})/,"$2/$1/$3"],[/([1-9]\d{3})\s*-\s*(1[0-2]|0\d)\s*-\s*(3[01]|[0-2]\d)/,"$2/$3/$1"],function(a){var b=a.match(/^(?:(.+)\s+)?([012]?\d)(?:\s*\:\s*(\d\d))?(?:\s*\:\s*(\d\d(\.\d*)?))?\s*(am|pm)?\s*$/i);if(b){if(b[1]){var c=this.createDate(b[1]);if(isNaN(c))return}else{var c=new Date;c.setMilliseconds(0)}var d=parseFloat(b[2]);return b[6]&&(d="am"==b[6].toLowerCase()?12==d?0:d:12==d?12:d+12),c.setHours(d,parseInt(b[3]||0,10),parseInt(b[4]||0,10),1e3*(parseFloat(b[5]||0)||0)),c}return a},function(a){var b=a.match(/^(?:(.+))[T|\s+]([012]\d)(?:\:(\d\d))(?:\:(\d\d))(?:\.\d+)([\+\-]\d\d\:\d\d)$/i);if(b){if(b[1]){var c=this.createDate(b[1]);if(isNaN(c))return}else{var c=new Date;c.setMilliseconds(0)}var d=parseFloat(b[2]);return c.setHours(d,parseInt(b[3],10),parseInt(b[4],10),1e3*parseFloat(b[5])),c}return a},function(a){var b=a.match(/^([0-3]?\d)\s*[-\/.\s]{1}\s*([a-zA-Z]{3,9})\s*[-\/.\s]{1}\s*([0-3]?\d)$/);if(b){var c,d,e,f=new Date,g=S.config.defaultCentury,h=parseFloat(b[1]),i=parseFloat(b[3]);h>31?(d=i,c=g+h):(d=h,c=g+i);var e=C(b[2],S.regional[S.regional.getLocale()].monthNamesShort);return-1==e&&(e=C(b[2],S.regional[S.regional.getLocale()].monthNames)),f.setFullYear(c,e,d),f.setHours(0,0,0,0),f}return a}],a.jsDate=S,a.jqplot.sprintf=function(){function b(a,b,c,d){var e=a.length>=b?"":Array(1+b-a.length>>>0).join(c);return d?a+e:e+a}function c(b){for(var c=new String(b),d=10;d>0&&c!=(c=c.replace(/^(\d+)(\d{3})/,"$1"+a.jqplot.sprintf.thousandsSeparator+"$2"));d--);return c}function d(a,c,d,e,f,g){var h=e-a.length;if(h>0){var i=" ";g&&(i="&nbsp;"),a=d||!f?b(a,e,i,d):a.slice(0,c.length)+b("",h,"0",!0)+a.slice(c.length)}return a}function e(a,c,e,f,g,h,i,j){var k=a>>>0;return e=e&&k&&{2:"0b",8:"0",16:"0x"}[c]||"",a=e+b(k.toString(c),h||0,"0",!1),d(a,e,f,g,i,j)}function f(a,b,c,e,f,g){return null!=e&&(a=a.slice(0,e)),d(a,"",b,c,f,g)}var g=arguments,h=0,i=g[h++];return i.replace(a.jqplot.sprintf.regex,function(i,j,k,l,m,n,o){if("%%"==i)return"%";for(var p=!1,q="",r=!1,s=!1,t=!1,u=!1,v=0;k&&v<k.length;v++)switch(k.charAt(v)){case" ":q=" ";break;case"+":q="+";break;case"-":p=!0;break;case"0":r=!0;break;case"#":s=!0;break;case"&":t=!0;break;case"'":u=!0}if(l=l?"*"==l?+g[h++]:"*"==l.charAt(0)?+g[l.slice(1,-1)]:+l:0,0>l&&(l=-l,p=!0),!isFinite(l))throw new Error("$.jqplot.sprintf: (minimum-)width must be finite");n=n?"*"==n?+g[h++]:"*"==n.charAt(0)?+g[n.slice(1,-1)]:+n:"fFeE".indexOf(o)>-1?6:"d"==o?0:void 0;var w=j?g[j.slice(0,-1)]:g[h++];switch(o){case"s":return null==w?"":f(String(w),p,l,n,r,t);case"c":return f(String.fromCharCode(+w),p,l,n,r,t);case"b":return e(w,2,s,p,l,n,r,t);case"o":return e(w,8,s,p,l,n,r,t);case"x":return e(w,16,s,p,l,n,r,t);case"X":return e(w,16,s,p,l,n,r,t).toUpperCase();case"u":return e(w,10,s,p,l,n,r,t);case"i":var x=parseInt(+w,10);if(isNaN(x))return"";var y=0>x?"-":q,z=u?c(String(Math.abs(x))):String(Math.abs(x));return w=y+b(z,n,"0",!1),d(w,y,p,l,r,t);case"d":var x=Math.round(+w);if(isNaN(x))return"";var y=0>x?"-":q,z=u?c(String(Math.abs(x))):String(Math.abs(x));return w=y+b(z,n,"0",!1),d(w,y,p,l,r,t);case"e":case"E":case"f":case"F":case"g":case"G":var x=+w;if(isNaN(x))return"";var y=0>x?"-":q,A=["toExponential","toFixed","toPrecision"]["efg".indexOf(o.toLowerCase())],B=["toString","toUpperCase"]["eEfFgG".indexOf(o)%2],z=Math.abs(x)[A](n),C=z.toString().split(".");C[0]=u?c(C[0]):C[0],z=C.join(a.jqplot.sprintf.decimalMark),w=y+z;var D=d(w,y,p,l,r,t)[B]();return D;case"p":case"P":var x=+w;if(isNaN(x))return"";var y=0>x?"-":q,C=String(Number(Math.abs(x)).toExponential()).split(/e|E/),E=-1!=C[0].indexOf(".")?C[0].length-1:String(x).length,F=C[1]<0?-C[1]-1:0;if(Math.abs(x)<1)w=n>=E+F?y+Math.abs(x).toPrecision(E):n-1>=E?y+Math.abs(x).toExponential(E-1):y+Math.abs(x).toExponential(n-1);else{var G=n>=E?E:n;w=y+Math.abs(x).toPrecision(G)}var B=["toString","toUpperCase"]["pP".indexOf(o)%2];return d(w,y,p,l,r,t)[B]();case"n":return"";default:return i}})},a.jqplot.sprintf.thousandsSeparator=",",a.jqplot.sprintf.decimalMark=".",a.jqplot.sprintf.regex=/%%|%(\d+\$)?([-+#0&\' ]*)(\*\d+\$|\*|\d+)?(\.(\*\d+\$|\*|\d+))?([nAscboxXuidfegpEGP])/g,a.jqplot.getSignificantFigures=function(a){var b=String(Number(Math.abs(a)).toExponential()).split(/e|E/),c=-1!=b[0].indexOf(".")?b[0].length-1:b[0].length,d=b[1]<0?-b[1]-1:0,e=parseInt(b[1],10),f=e+1>0?e+1:0,g=f>=c?0:c-e-1;return{significantDigits:c,digitsLeft:f,digitsRight:g,zeros:d,exponent:e}},a.jqplot.getPrecision=function(b){return a.jqplot.getSignificantFigures(b).digitsRight};var Y=a.uiBackCompat!==!1;a.jqplot.effects={effect:{}};var Z="jqplot.storage.";a.extend(a.jqplot.effects,{version:"1.9pre",save:function(a,b){for(var c=0;c<b.length;c++)null!==b[c]&&a.data(Z+b[c],a[0].style[b[c]])},restore:function(a,b){for(var c=0;c<b.length;c++)null!==b[c]&&a.css(b[c],a.data(Z+b[c]))},setMode:function(a,b){return"toggle"===b&&(b=a.is(":hidden")?"show":"hide"),b},createWrapper:function(b){if(b.parent().is(".ui-effects-wrapper"))return b.parent();var c={width:b.outerWidth(!0),height:b.outerHeight(!0),"float":b.css("float")},d=a("<div></div>").addClass("ui-effects-wrapper").css({fontSize:"100%",background:"transparent",border:"none",margin:0,padding:0}),e={width:b.width(),height:b.height()},f=document.activeElement;return b.wrap(d),(b[0]===f||a.contains(b[0],f))&&a(f).focus(),d=b.parent(),"static"===b.css("position")?(d.css({position:"relative"}),b.css({position:"relative"})):(a.extend(c,{position:b.css("position"),zIndex:b.css("z-index")}),a.each(["top","left","bottom","right"],function(a,d){c[d]=b.css(d),isNaN(parseInt(c[d],10))&&(c[d]="auto")}),b.css({position:"relative",top:0,left:0,right:"auto",bottom:"auto"})),b.css(e),d.css(c).show()},removeWrapper:function(b){var c=document.activeElement;return b.parent().is(".ui-effects-wrapper")&&(b.parent().replaceWith(b),(b[0]===c||a.contains(b[0],c))&&a(c).focus()),b}}),a.fn.extend({jqplotEffect:function(b,c,d,e){function f(b){function c(){a.isFunction(e)&&e.call(d[0]),a.isFunction(b)&&b()}var d=a(this),e=g.complete,f=g.mode;(d.is(":hidden")?"hide"===f:"show"===f)?c():j.call(d[0],g,c)}var g=E.apply(this,arguments),h=g.mode,i=g.queue,j=a.jqplot.effects.effect[g.effect],k=!j&&Y&&a.jqplot.effects[g.effect];return a.fx.off||!j&&!k?h?this[h](g.duration,g.complete):this.each(function(){g.complete&&g.complete.call(this)}):j?i===!1?this.each(f):this.queue(i||"fx",f):k.call(this,{options:g,duration:g.duration,callback:g.complete,mode:g.mode})}});var $=/up|down|vertical/,_=/up|left|vertical|horizontal/;a.jqplot.effects.effect.blind=function(b,c){var d,e,f,g=a(this),h=["position","top","bottom","left","right","height","width"],i=a.jqplot.effects.setMode(g,b.mode||"hide"),j=b.direction||"up",k=$.test(j),l=k?"height":"width",m=k?"top":"left",n=_.test(j),o={},p="show"===i;g.parent().is(".ui-effects-wrapper")?a.jqplot.effects.save(g.parent(),h):a.jqplot.effects.save(g,h),g.show(),f=parseInt(g.css("top"),10),d=a.jqplot.effects.createWrapper(g).css({overflow:"hidden"}),e=k?d[l]()+f:d[l](),o[l]=p?String(e):"0",n||(g.css(k?"bottom":"right",0).css(k?"top":"left","").css({position:"absolute"}),o[m]=p?"0":String(e)),p&&(d.css(l,0),n||d.css(m,e)),d.animate(o,{duration:b.duration,easing:b.easing,queue:!1,complete:function(){"hide"===i&&g.hide(),a.jqplot.effects.restore(g,h),a.jqplot.effects.removeWrapper(g),c()}})}}(jQuery);
/**
 * jqPlot
 * Pure JavaScript plotting plugin using jQuery
 *
 * Version: 1.0.9
 * Revision: d96a669
 *
 * Copyright (c) 2009-2016 Chris Leonello
 * jqPlot is currently available for use in all personal or commercial projects 
 * under both the MIT (http://www.opensource.org/licenses/mit-license.php) and GPL 
 * version 2.0 (http://www.gnu.org/licenses/gpl-2.0.html) licenses. This means that you can 
 * choose the license that best suits your project and use it accordingly. 
 *
 * Although not required, the author would appreciate an email letting him 
 * know of any substantial use of jqPlot.  You can reach the author at: 
 * chris at jqplot dot com or see http://www.jqplot.com/info.php .
 *
 * If you are feeling kind and generous, consider supporting the project by
 * making a donation at: http://www.jqplot.com/donate.php .
 *
 * sprintf functions contained in jqplot.sprintf.js by Ash Searle:
 *
 *     version 2007.04.27
 *     author Ash Searle
 *     http://hexmen.com/blog/2007/03/printf-sprintf/
 *     http://hexmen.com/js/sprintf.js
 *     The author (Ash Searle) has placed this code in the public domain:
 *     "This code is unrestricted: you are free to use it however you like."
 *
 * included jsDate library by Chris Leonello:
 *
 * Copyright (c) 2010-2015 Chris Leonello
 *
 * jsDate is currently available for use in all personal or commercial projects 
 * under both the MIT and GPL version 2.0 licenses. This means that you can 
 * choose the license that best suits your project and use it accordingly.
 *
 * jsDate borrows many concepts and ideas from the Date Instance 
 * Methods by Ken Snyder along with some parts of Ken's actual code.
 * 
 * Ken's original Date Instance Methods and copyright notice:
 * 
 * Ken Snyder (ken d snyder at gmail dot com)
 * 2008-09-10
 * version 2.0.2 (http://kendsnyder.com/sandbox/date/)     
 * Creative Commons Attribution License 3.0 (http://creativecommons.org/licenses/by/3.0/)
 *
 * jqplotToImage function based on Larry Siden's export-jqplot-to-png.js.
 * Larry has generously given permission to adapt his code for inclusion
 * into jqPlot.
 *
 * Larry's original code can be found here:
 *
 * https://github.com/lsiden/export-jqplot-to-png
 * 
 * 
 */

(function($) {    
    // This code is a modified version of the canvastext.js code, copyright below:
    //
    // This code is released to the public domain by Jim Studt, 2007.
    // He may keep some sort of up to date copy at http://www.federated.com/~jim/canvastext/
    //
    $.jqplot.CanvasTextRenderer = function(options){
        this.fontStyle = 'normal';  // normal, italic, oblique [not implemented]
        this.fontVariant = 'normal';    // normal, small caps [not implemented]
        this.fontWeight = 'normal'; // normal, bold, bolder, lighter, 100 - 900
        this.fontSize = '10px'; 
        this.fontFamily = 'sans-serif';
        this.fontStretch = 1.0;
        this.fillStyle = '#666666';
        this.angle = 0;
        this.textAlign = 'start';
        this.textBaseline = 'alphabetic';
        this.text;
        this.width;
        this.height;
        this.pt2px = 1.28;

        $.extend(true, this, options);
        this.normalizedFontSize = this.normalizeFontSize(this.fontSize);
        this.setHeight();
    };
    
    $.jqplot.CanvasTextRenderer.prototype.init = function(options) {
        $.extend(true, this, options);
        this.normalizedFontSize = this.normalizeFontSize(this.fontSize);
        this.setHeight();
    };
    
    // convert css spec into point size
    // returns float
    $.jqplot.CanvasTextRenderer.prototype.normalizeFontSize = function(sz) {
        sz = String(sz);
        var n = parseFloat(sz);
        if (sz.indexOf('px') > -1) {
            return n/this.pt2px;
        }
        else if (sz.indexOf('pt') > -1) {
            return n;
        }
        else if (sz.indexOf('em') > -1) {
            return n*12;
        }
        else if (sz.indexOf('%') > -1) {
            return n*12/100;
        }
        // default to pixels;
        else {
            return n/this.pt2px;
        }
    };
    
    
    $.jqplot.CanvasTextRenderer.prototype.fontWeight2Float = function(w) {
        // w = normal | bold | bolder | lighter | 100 | 200 | 300 | 400 | 500 | 600 | 700 | 800 | 900
        // return values adjusted for Hershey font.
        if (Number(w)) {
            return w/400;
        }
        else {
            switch (w) {
                case 'normal':
                    return 1;
                    break;
                case 'bold':
                    return 1.75;
                    break;
                case 'bolder':
                    return 2.25;
                    break;
                case 'lighter':
                    return 0.75;
                    break;
                default:
                    return 1;
                    break;
             }   
        }
    };
    
    $.jqplot.CanvasTextRenderer.prototype.getText = function() {
        return this.text;
    };
    
    $.jqplot.CanvasTextRenderer.prototype.setText = function(t, ctx) {
        this.text = t;
        this.setWidth(ctx);
        return this;
    };
    
    $.jqplot.CanvasTextRenderer.prototype.getWidth = function(ctx) {
        return this.width;
    };
    
    $.jqplot.CanvasTextRenderer.prototype.setWidth = function(ctx, w) {
        if (!w) {
            this.width = this.measure(ctx, this.text);
        }
        else {
            this.width = w;   
        }
        return this;
    };
    
    // return height in pixels.
    $.jqplot.CanvasTextRenderer.prototype.getHeight = function(ctx) {
        return this.height;
    };
    
    // w - height in pt
    // set heigh in px
    $.jqplot.CanvasTextRenderer.prototype.setHeight = function(w) {
        if (!w) {
            //height = this.fontSize /0.75;
            this.height = this.normalizedFontSize * this.pt2px;
        }
        else {
            this.height = w;   
        }
        return this;
    };

    $.jqplot.CanvasTextRenderer.prototype.letter = function (ch)
    {
        return this.letters[ch];
    };

    $.jqplot.CanvasTextRenderer.prototype.ascent = function()
    {
        return this.normalizedFontSize;
    };

    $.jqplot.CanvasTextRenderer.prototype.descent = function()
    {
        return 7.0*this.normalizedFontSize/25.0;
    };

    $.jqplot.CanvasTextRenderer.prototype.measure = function(ctx, str)
    {
        var total = 0;
        var len = str.length;
 
        for (var i = 0; i < len; i++) {
            var c = this.letter(str.charAt(i));
            if (c) {
                total += c.width * this.normalizedFontSize / 25.0 * this.fontStretch;
            }
        }
        return total;
    };

    $.jqplot.CanvasTextRenderer.prototype.draw = function(ctx,str)
    {
        var x = 0;
        // leave room at bottom for descenders.
        var y = this.height*0.72;
         var total = 0;
         var len = str.length;
         var mag = this.normalizedFontSize / 25.0;

         ctx.save();
         var tx, ty;
         
         // 1st quadrant
         if ((-Math.PI/2 <= this.angle && this.angle <= 0) || (Math.PI*3/2 <= this.angle && this.angle <= Math.PI*2)) {
             tx = 0;
             ty = -Math.sin(this.angle) * this.width;
         }
         // 4th quadrant
         else if ((0 < this.angle && this.angle <= Math.PI/2) || (-Math.PI*2 <= this.angle && this.angle <= -Math.PI*3/2)) {
             tx = Math.sin(this.angle) * this.height;
             ty = 0;
         }
         // 2nd quadrant
         else if ((-Math.PI < this.angle && this.angle < -Math.PI/2) || (Math.PI <= this.angle && this.angle <= Math.PI*3/2)) {
             tx = -Math.cos(this.angle) * this.width;
             ty = -Math.sin(this.angle) * this.width - Math.cos(this.angle) * this.height;
         }
         // 3rd quadrant
         else if ((-Math.PI*3/2 < this.angle && this.angle < Math.PI) || (Math.PI/2 < this.angle && this.angle < Math.PI)) {
             tx = Math.sin(this.angle) * this.height - Math.cos(this.angle)*this.width;
             ty = -Math.cos(this.angle) * this.height;
         }
         
         ctx.strokeStyle = this.fillStyle;
         ctx.fillStyle = this.fillStyle;
         ctx.translate(tx, ty);
         ctx.rotate(this.angle);
         ctx.lineCap = "round";
         // multiplier was 2.0
         var fact = (this.normalizedFontSize > 30) ? 2.0 : 2 + (30 - this.normalizedFontSize)/20;
         ctx.lineWidth = fact * mag * this.fontWeight2Float(this.fontWeight);
         
         for ( var i = 0; i < len; i++) {
            var c = this.letter( str.charAt(i));
            if ( !c) {
                continue;
            }

            ctx.beginPath();

            var penUp = 1;
            var needStroke = 0;
            for ( var j = 0; j < c.points.length; j++) {
              var a = c.points[j];
              if ( a[0] == -1 && a[1] == -1) {
                  penUp = 1;
                  continue;
              }
              if ( penUp) {
                  ctx.moveTo( x + a[0]*mag*this.fontStretch, y - a[1]*mag);
                  penUp = false;
              } else {
                  ctx.lineTo( x + a[0]*mag*this.fontStretch, y - a[1]*mag);
              }
            }
            ctx.stroke();
            x += c.width*mag*this.fontStretch;
         }
         ctx.restore();
         return total;
    };

    $.jqplot.CanvasTextRenderer.prototype.letters = {
         ' ': { width: 16, points: [] },
         '!': { width: 10, points: [[5,21],[5,7],[-1,-1],[5,2],[4,1],[5,0],[6,1],[5,2]] },
         '"': { width: 16, points: [[4,21],[4,14],[-1,-1],[12,21],[12,14]] },
         '#': { width: 21, points: [[11,25],[4,-7],[-1,-1],[17,25],[10,-7],[-1,-1],[4,12],[18,12],[-1,-1],[3,6],[17,6]] },
         '$': { width: 20, points: [[8,25],[8,-4],[-1,-1],[12,25],[12,-4],[-1,-1],[17,18],[15,20],[12,21],[8,21],[5,20],[3,18],[3,16],[4,14],[5,13],[7,12],[13,10],[15,9],[16,8],[17,6],[17,3],[15,1],[12,0],[8,0],[5,1],[3,3]] },
         '%': { width: 24, points: [[21,21],[3,0],[-1,-1],[8,21],[10,19],[10,17],[9,15],[7,14],[5,14],[3,16],[3,18],[4,20],[6,21],[8,21],[10,20],[13,19],[16,19],[19,20],[21,21],[-1,-1],[17,7],[15,6],[14,4],[14,2],[16,0],[18,0],[20,1],[21,3],[21,5],[19,7],[17,7]] },
         '&': { width: 26, points: [[23,12],[23,13],[22,14],[21,14],[20,13],[19,11],[17,6],[15,3],[13,1],[11,0],[7,0],[5,1],[4,2],[3,4],[3,6],[4,8],[5,9],[12,13],[13,14],[14,16],[14,18],[13,20],[11,21],[9,20],[8,18],[8,16],[9,13],[11,10],[16,3],[18,1],[20,0],[22,0],[23,1],[23,2]] },
         '\'': { width: 10, points: [[5,19],[4,20],[5,21],[6,20],[6,18],[5,16],[4,15]] },
         '(': { width: 14, points: [[11,25],[9,23],[7,20],[5,16],[4,11],[4,7],[5,2],[7,-2],[9,-5],[11,-7]] },
         ')': { width: 14, points: [[3,25],[5,23],[7,20],[9,16],[10,11],[10,7],[9,2],[7,-2],[5,-5],[3,-7]] },
         '*': { width: 16, points: [[8,21],[8,9],[-1,-1],[3,18],[13,12],[-1,-1],[13,18],[3,12]] },
         '+': { width: 26, points: [[13,18],[13,0],[-1,-1],[4,9],[22,9]] },
         ',': { width: 10, points: [[6,1],[5,0],[4,1],[5,2],[6,1],[6,-1],[5,-3],[4,-4]] },
         '-': { width: 18, points: [[6,9],[12,9]] },
         '.': { width: 10, points: [[5,2],[4,1],[5,0],[6,1],[5,2]] },
         '/': { width: 22, points: [[20,25],[2,-7]] },
         '0': { width: 20, points: [[9,21],[6,20],[4,17],[3,12],[3,9],[4,4],[6,1],[9,0],[11,0],[14,1],[16,4],[17,9],[17,12],[16,17],[14,20],[11,21],[9,21]] },
         '1': { width: 20, points: [[6,17],[8,18],[11,21],[11,0]] },
         '2': { width: 20, points: [[4,16],[4,17],[5,19],[6,20],[8,21],[12,21],[14,20],[15,19],[16,17],[16,15],[15,13],[13,10],[3,0],[17,0]] },
         '3': { width: 20, points: [[5,21],[16,21],[10,13],[13,13],[15,12],[16,11],[17,8],[17,6],[16,3],[14,1],[11,0],[8,0],[5,1],[4,2],[3,4]] },
         '4': { width: 20, points: [[13,21],[3,7],[18,7],[-1,-1],[13,21],[13,0]] },
         '5': { width: 20, points: [[15,21],[5,21],[4,12],[5,13],[8,14],[11,14],[14,13],[16,11],[17,8],[17,6],[16,3],[14,1],[11,0],[8,0],[5,1],[4,2],[3,4]] },
         '6': { width: 20, points: [[16,18],[15,20],[12,21],[10,21],[7,20],[5,17],[4,12],[4,7],[5,3],[7,1],[10,0],[11,0],[14,1],[16,3],[17,6],[17,7],[16,10],[14,12],[11,13],[10,13],[7,12],[5,10],[4,7]] },
         '7': { width: 20, points: [[17,21],[7,0],[-1,-1],[3,21],[17,21]] },
         '8': { width: 20, points: [[8,21],[5,20],[4,18],[4,16],[5,14],[7,13],[11,12],[14,11],[16,9],[17,7],[17,4],[16,2],[15,1],[12,0],[8,0],[5,1],[4,2],[3,4],[3,7],[4,9],[6,11],[9,12],[13,13],[15,14],[16,16],[16,18],[15,20],[12,21],[8,21]] },
         '9': { width: 20, points: [[16,14],[15,11],[13,9],[10,8],[9,8],[6,9],[4,11],[3,14],[3,15],[4,18],[6,20],[9,21],[10,21],[13,20],[15,18],[16,14],[16,9],[15,4],[13,1],[10,0],[8,0],[5,1],[4,3]] },
         ':': { width: 10, points: [[5,14],[4,13],[5,12],[6,13],[5,14],[-1,-1],[5,2],[4,1],[5,0],[6,1],[5,2]] },
         ';': { width: 10, points: [[5,14],[4,13],[5,12],[6,13],[5,14],[-1,-1],[6,1],[5,0],[4,1],[5,2],[6,1],[6,-1],[5,-3],[4,-4]] },
         '<': { width: 24, points: [[20,18],[4,9],[20,0]] },
         '=': { width: 26, points: [[4,12],[22,12],[-1,-1],[4,6],[22,6]] },
         '>': { width: 24, points: [[4,18],[20,9],[4,0]] },
         '?': { width: 18, points: [[3,16],[3,17],[4,19],[5,20],[7,21],[11,21],[13,20],[14,19],[15,17],[15,15],[14,13],[13,12],[9,10],[9,7],[-1,-1],[9,2],[8,1],[9,0],[10,1],[9,2]] },
         '@': { width: 27, points: [[18,13],[17,15],[15,16],[12,16],[10,15],[9,14],[8,11],[8,8],[9,6],[11,5],[14,5],[16,6],[17,8],[-1,-1],[12,16],[10,14],[9,11],[9,8],[10,6],[11,5],[-1,-1],[18,16],[17,8],[17,6],[19,5],[21,5],[23,7],[24,10],[24,12],[23,15],[22,17],[20,19],[18,20],[15,21],[12,21],[9,20],[7,19],[5,17],[4,15],[3,12],[3,9],[4,6],[5,4],[7,2],[9,1],[12,0],[15,0],[18,1],[20,2],[21,3],[-1,-1],[19,16],[18,8],[18,6],[19,5]] },
         'A': { width: 18, points: [[9,21],[1,0],[-1,-1],[9,21],[17,0],[-1,-1],[4,7],[14,7]] },
         'B': { width: 21, points: [[4,21],[4,0],[-1,-1],[4,21],[13,21],[16,20],[17,19],[18,17],[18,15],[17,13],[16,12],[13,11],[-1,-1],[4,11],[13,11],[16,10],[17,9],[18,7],[18,4],[17,2],[16,1],[13,0],[4,0]] },
         'C': { width: 21, points: [[18,16],[17,18],[15,20],[13,21],[9,21],[7,20],[5,18],[4,16],[3,13],[3,8],[4,5],[5,3],[7,1],[9,0],[13,0],[15,1],[17,3],[18,5]] },
         'D': { width: 21, points: [[4,21],[4,0],[-1,-1],[4,21],[11,21],[14,20],[16,18],[17,16],[18,13],[18,8],[17,5],[16,3],[14,1],[11,0],[4,0]] },
         'E': { width: 19, points: [[4,21],[4,0],[-1,-1],[4,21],[17,21],[-1,-1],[4,11],[12,11],[-1,-1],[4,0],[17,0]] },
         'F': { width: 18, points: [[4,21],[4,0],[-1,-1],[4,21],[17,21],[-1,-1],[4,11],[12,11]] },
         'G': { width: 21, points: [[18,16],[17,18],[15,20],[13,21],[9,21],[7,20],[5,18],[4,16],[3,13],[3,8],[4,5],[5,3],[7,1],[9,0],[13,0],[15,1],[17,3],[18,5],[18,8],[-1,-1],[13,8],[18,8]] },
         'H': { width: 22, points: [[4,21],[4,0],[-1,-1],[18,21],[18,0],[-1,-1],[4,11],[18,11]] },
         'I': { width: 8, points: [[4,21],[4,0]] },
         'J': { width: 16, points: [[12,21],[12,5],[11,2],[10,1],[8,0],[6,0],[4,1],[3,2],[2,5],[2,7]] },
         'K': { width: 21, points: [[4,21],[4,0],[-1,-1],[18,21],[4,7],[-1,-1],[9,12],[18,0]] },
         'L': { width: 17, points: [[4,21],[4,0],[-1,-1],[4,0],[16,0]] },
         'M': { width: 24, points: [[4,21],[4,0],[-1,-1],[4,21],[12,0],[-1,-1],[20,21],[12,0],[-1,-1],[20,21],[20,0]] },
         'N': { width: 22, points: [[4,21],[4,0],[-1,-1],[4,21],[18,0],[-1,-1],[18,21],[18,0]] },
         'O': { width: 22, points: [[9,21],[7,20],[5,18],[4,16],[3,13],[3,8],[4,5],[5,3],[7,1],[9,0],[13,0],[15,1],[17,3],[18,5],[19,8],[19,13],[18,16],[17,18],[15,20],[13,21],[9,21]] },
         'P': { width: 21, points: [[4,21],[4,0],[-1,-1],[4,21],[13,21],[16,20],[17,19],[18,17],[18,14],[17,12],[16,11],[13,10],[4,10]] },
         'Q': { width: 22, points: [[9,21],[7,20],[5,18],[4,16],[3,13],[3,8],[4,5],[5,3],[7,1],[9,0],[13,0],[15,1],[17,3],[18,5],[19,8],[19,13],[18,16],[17,18],[15,20],[13,21],[9,21],[-1,-1],[12,4],[18,-2]] },
         'R': { width: 21, points: [[4,21],[4,0],[-1,-1],[4,21],[13,21],[16,20],[17,19],[18,17],[18,15],[17,13],[16,12],[13,11],[4,11],[-1,-1],[11,11],[18,0]] },
         'S': { width: 20, points: [[17,18],[15,20],[12,21],[8,21],[5,20],[3,18],[3,16],[4,14],[5,13],[7,12],[13,10],[15,9],[16,8],[17,6],[17,3],[15,1],[12,0],[8,0],[5,1],[3,3]] },
         'T': { width: 16, points: [[8,21],[8,0],[-1,-1],[1,21],[15,21]] },
         'U': { width: 22, points: [[4,21],[4,6],[5,3],[7,1],[10,0],[12,0],[15,1],[17,3],[18,6],[18,21]] },
         'V': { width: 18, points: [[1,21],[9,0],[-1,-1],[17,21],[9,0]] },
         'W': { width: 24, points: [[2,21],[7,0],[-1,-1],[12,21],[7,0],[-1,-1],[12,21],[17,0],[-1,-1],[22,21],[17,0]] },
         'X': { width: 20, points: [[3,21],[17,0],[-1,-1],[17,21],[3,0]] },
         'Y': { width: 18, points: [[1,21],[9,11],[9,0],[-1,-1],[17,21],[9,11]] },
         'Z': { width: 20, points: [[17,21],[3,0],[-1,-1],[3,21],[17,21],[-1,-1],[3,0],[17,0]] },
         '[': { width: 14, points: [[4,25],[4,-7],[-1,-1],[5,25],[5,-7],[-1,-1],[4,25],[11,25],[-1,-1],[4,-7],[11,-7]] },
         '\\': { width: 14, points: [[0,21],[14,-3]] },
         ']': { width: 14, points: [[9,25],[9,-7],[-1,-1],[10,25],[10,-7],[-1,-1],[3,25],[10,25],[-1,-1],[3,-7],[10,-7]] },
         '^': { width: 16, points: [[6,15],[8,18],[10,15],[-1,-1],[3,12],[8,17],[13,12],[-1,-1],[8,17],[8,0]] },
         '_': { width: 16, points: [[0,-2],[16,-2]] },
         '`': { width: 10, points: [[6,21],[5,20],[4,18],[4,16],[5,15],[6,16],[5,17]] },
         'a': { width: 19, points: [[15,14],[15,0],[-1,-1],[15,11],[13,13],[11,14],[8,14],[6,13],[4,11],[3,8],[3,6],[4,3],[6,1],[8,0],[11,0],[13,1],[15,3]] },
         'b': { width: 19, points: [[4,21],[4,0],[-1,-1],[4,11],[6,13],[8,14],[11,14],[13,13],[15,11],[16,8],[16,6],[15,3],[13,1],[11,0],[8,0],[6,1],[4,3]] },
         'c': { width: 18, points: [[15,11],[13,13],[11,14],[8,14],[6,13],[4,11],[3,8],[3,6],[4,3],[6,1],[8,0],[11,0],[13,1],[15,3]] },
         'd': { width: 19, points: [[15,21],[15,0],[-1,-1],[15,11],[13,13],[11,14],[8,14],[6,13],[4,11],[3,8],[3,6],[4,3],[6,1],[8,0],[11,0],[13,1],[15,3]] },
         'e': { width: 18, points: [[3,8],[15,8],[15,10],[14,12],[13,13],[11,14],[8,14],[6,13],[4,11],[3,8],[3,6],[4,3],[6,1],[8,0],[11,0],[13,1],[15,3]] },
         'f': { width: 12, points: [[10,21],[8,21],[6,20],[5,17],[5,0],[-1,-1],[2,14],[9,14]] },
         'g': { width: 19, points: [[15,14],[15,-2],[14,-5],[13,-6],[11,-7],[8,-7],[6,-6],[-1,-1],[15,11],[13,13],[11,14],[8,14],[6,13],[4,11],[3,8],[3,6],[4,3],[6,1],[8,0],[11,0],[13,1],[15,3]] },
         'h': { width: 19, points: [[4,21],[4,0],[-1,-1],[4,10],[7,13],[9,14],[12,14],[14,13],[15,10],[15,0]] },
         'i': { width: 8, points: [[3,21],[4,20],[5,21],[4,22],[3,21],[-1,-1],[4,14],[4,0]] },
         'j': { width: 10, points: [[5,21],[6,20],[7,21],[6,22],[5,21],[-1,-1],[6,14],[6,-3],[5,-6],[3,-7],[1,-7]] },
         'k': { width: 17, points: [[4,21],[4,0],[-1,-1],[14,14],[4,4],[-1,-1],[8,8],[15,0]] },
         'l': { width: 8, points: [[4,21],[4,0]] },
         'm': { width: 30, points: [[4,14],[4,0],[-1,-1],[4,10],[7,13],[9,14],[12,14],[14,13],[15,10],[15,0],[-1,-1],[15,10],[18,13],[20,14],[23,14],[25,13],[26,10],[26,0]] },
         'n': { width: 19, points: [[4,14],[4,0],[-1,-1],[4,10],[7,13],[9,14],[12,14],[14,13],[15,10],[15,0]] },
         'o': { width: 19, points: [[8,14],[6,13],[4,11],[3,8],[3,6],[4,3],[6,1],[8,0],[11,0],[13,1],[15,3],[16,6],[16,8],[15,11],[13,13],[11,14],[8,14]] },
         'p': { width: 19, points: [[4,14],[4,-7],[-1,-1],[4,11],[6,13],[8,14],[11,14],[13,13],[15,11],[16,8],[16,6],[15,3],[13,1],[11,0],[8,0],[6,1],[4,3]] },
         'q': { width: 19, points: [[15,14],[15,-7],[-1,-1],[15,11],[13,13],[11,14],[8,14],[6,13],[4,11],[3,8],[3,6],[4,3],[6,1],[8,0],[11,0],[13,1],[15,3]] },
         'r': { width: 13, points: [[4,14],[4,0],[-1,-1],[4,8],[5,11],[7,13],[9,14],[12,14]] },
         's': { width: 17, points: [[14,11],[13,13],[10,14],[7,14],[4,13],[3,11],[4,9],[6,8],[11,7],[13,6],[14,4],[14,3],[13,1],[10,0],[7,0],[4,1],[3,3]] },
         't': { width: 12, points: [[5,21],[5,4],[6,1],[8,0],[10,0],[-1,-1],[2,14],[9,14]] },
         'u': { width: 19, points: [[4,14],[4,4],[5,1],[7,0],[10,0],[12,1],[15,4],[-1,-1],[15,14],[15,0]] },
         'v': { width: 16, points: [[2,14],[8,0],[-1,-1],[14,14],[8,0]] },
         'w': { width: 22, points: [[3,14],[7,0],[-1,-1],[11,14],[7,0],[-1,-1],[11,14],[15,0],[-1,-1],[19,14],[15,0]] },
         'x': { width: 17, points: [[3,14],[14,0],[-1,-1],[14,14],[3,0]] },
         'y': { width: 16, points: [[2,14],[8,0],[-1,-1],[14,14],[8,0],[6,-4],[4,-6],[2,-7],[1,-7]] },
         'z': { width: 17, points: [[14,14],[3,0],[-1,-1],[3,14],[14,14],[-1,-1],[3,0],[14,0]] },
         '{': { width: 14, points: [[9,25],[7,24],[6,23],[5,21],[5,19],[6,17],[7,16],[8,14],[8,12],[6,10],[-1,-1],[7,24],[6,22],[6,20],[7,18],[8,17],[9,15],[9,13],[8,11],[4,9],[8,7],[9,5],[9,3],[8,1],[7,0],[6,-2],[6,-4],[7,-6],[-1,-1],[6,8],[8,6],[8,4],[7,2],[6,1],[5,-1],[5,-3],[6,-5],[7,-6],[9,-7]] },
         '|': { width: 8, points: [[4,25],[4,-7]] },
         '}': { width: 14, points: [[5,25],[7,24],[8,23],[9,21],[9,19],[8,17],[7,16],[6,14],[6,12],[8,10],[-1,-1],[7,24],[8,22],[8,20],[7,18],[6,17],[5,15],[5,13],[6,11],[10,9],[6,7],[5,5],[5,3],[6,1],[7,0],[8,-2],[8,-4],[7,-6],[-1,-1],[8,8],[6,6],[6,4],[7,2],[8,1],[9,-1],[9,-3],[8,-5],[7,-6],[5,-7]] },
         '~': { width: 24, points: [[3,6],[3,8],[4,11],[6,12],[8,12],[10,11],[14,8],[16,7],[18,7],[20,8],[21,10],[-1,-1],[3,8],[4,10],[6,11],[8,11],[10,10],[14,7],[16,6],[18,6],[20,7],[21,10],[21,12]] }
     };
     
    $.jqplot.CanvasFontRenderer = function(options) {
        options = options || {};
        if (!options.pt2px) {
            options.pt2px = 1.5;
        }
        $.jqplot.CanvasTextRenderer.call(this, options);
    };
    
    $.jqplot.CanvasFontRenderer.prototype = new $.jqplot.CanvasTextRenderer({});
    $.jqplot.CanvasFontRenderer.prototype.constructor = $.jqplot.CanvasFontRenderer;

    $.jqplot.CanvasFontRenderer.prototype.measure = function(ctx, str)
    {
        // var fstyle = this.fontStyle+' '+this.fontVariant+' '+this.fontWeight+' '+this.fontSize+' '+this.fontFamily;
        var fstyle = this.fontSize+' '+this.fontFamily;
        ctx.save();
        ctx.font = fstyle;
        var w = ctx.measureText(str).width;
        ctx.restore();
        return w;
    };

    $.jqplot.CanvasFontRenderer.prototype.draw = function(ctx, str)
    {
        var x = 0;
        // leave room at bottom for descenders.
        var y = this.height*0.72;
        //var y = 12;

         ctx.save();
         var tx, ty;
         
         // 1st quadrant
         if ((-Math.PI/2 <= this.angle && this.angle <= 0) || (Math.PI*3/2 <= this.angle && this.angle <= Math.PI*2)) {
             tx = 0;
             ty = -Math.sin(this.angle) * this.width;
         }
         // 4th quadrant
         else if ((0 < this.angle && this.angle <= Math.PI/2) || (-Math.PI*2 <= this.angle && this.angle <= -Math.PI*3/2)) {
             tx = Math.sin(this.angle) * this.height;
             ty = 0;
         }
         // 2nd quadrant
         else if ((-Math.PI < this.angle && this.angle < -Math.PI/2) || (Math.PI <= this.angle && this.angle <= Math.PI*3/2)) {
             tx = -Math.cos(this.angle) * this.width;
             ty = -Math.sin(this.angle) * this.width - Math.cos(this.angle) * this.height;
         }
         // 3rd quadrant
         else if ((-Math.PI*3/2 < this.angle && this.angle < Math.PI) || (Math.PI/2 < this.angle && this.angle < Math.PI)) {
             tx = Math.sin(this.angle) * this.height - Math.cos(this.angle)*this.width;
             ty = -Math.cos(this.angle) * this.height;
         }
         ctx.strokeStyle = this.fillStyle;
         ctx.fillStyle = this.fillStyle;
        // var fstyle = this.fontStyle+' '+this.fontVariant+' '+this.fontWeight+' '+this.fontSize+' '+this.fontFamily;
        var fstyle = this.fontSize+' '+this.fontFamily;
         ctx.font = fstyle;
         ctx.translate(tx, ty);
         ctx.rotate(this.angle);
         ctx.fillText(str, x, y);
         // ctx.strokeText(str, x, y);

         ctx.restore();
    };
    
})(jQuery);
/**
 * jqPlot
 * Pure JavaScript plotting plugin using jQuery
 *
 * Version: 1.0.9
 * Revision: d96a669
 *
 * Copyright (c) 2009-2016 Chris Leonello
 * jqPlot is currently available for use in all personal or commercial projects 
 * under both the MIT (http://www.opensource.org/licenses/mit-license.php) and GPL 
 * version 2.0 (http://www.gnu.org/licenses/gpl-2.0.html) licenses. This means that you can 
 * choose the license that best suits your project and use it accordingly. 
 *
 * Although not required, the author would appreciate an email letting him 
 * know of any substantial use of jqPlot.  You can reach the author at: 
 * chris at jqplot dot com or see http://www.jqplot.com/info.php .
 *
 * If you are feeling kind and generous, consider supporting the project by
 * making a donation at: http://www.jqplot.com/donate.php .
 *
 * sprintf functions contained in jqplot.sprintf.js by Ash Searle:
 *
 *     version 2007.04.27
 *     author Ash Searle
 *     http://hexmen.com/blog/2007/03/printf-sprintf/
 *     http://hexmen.com/js/sprintf.js
 *     The author (Ash Searle) has placed this code in the public domain:
 *     "This code is unrestricted: you are free to use it however you like."
 * 
 */
(function($) {
    /**
    * Class: $.jqplot.CanvasAxisLabelRenderer
    * Renderer to draw axis labels with a canvas element to support advanced
    * featrues such as rotated text.  This renderer uses a separate rendering engine
    * to draw the text on the canvas.  Two modes of rendering the text are available.
    * If the browser has native font support for canvas fonts (currently Mozila 3.5
    * and Safari 4), you can enable text rendering with the canvas fillText method.
    * You do so by setting the "enableFontSupport" option to true. 
    * 
    * Browsers lacking native font support will have the text drawn on the canvas
    * using the Hershey font metrics.  Even if the "enableFontSupport" option is true
    * non-supporting browsers will still render with the Hershey font.
    * 
    */
    $.jqplot.CanvasAxisLabelRenderer = function(options) {
        // Group: Properties
        
        // prop: angle
        // angle of text, measured clockwise from x axis.
        this.angle = 0;
        // name of the axis associated with this tick
        this.axis;
        // prop: show
        // whether or not to show the tick (mark and label).
        this.show = true;
        // prop: showLabel
        // whether or not to show the label.
        this.showLabel = true;
        // prop: label
        // label for the axis.
        this.label = '';
        // prop: fontFamily
        // CSS spec for the font-family css attribute.
        // Applies only to browsers supporting native font rendering in the
        // canvas tag.  Currently Mozilla 3.5 and Safari 4.
        this.fontFamily = '"Trebuchet MS", Arial, Helvetica, sans-serif';
        // prop: fontSize
        // CSS spec for font size.
        this.fontSize = '11pt';
        // prop: fontWeight
        // CSS spec for fontWeight:  normal, bold, bolder, lighter or a number 100 - 900
        this.fontWeight = 'normal';
        // prop: fontStretch
        // Multiplier to condense or expand font width.  
        // Applies only to browsers which don't support canvas native font rendering.
        this.fontStretch = 1.0;
        // prop: textColor
        // css spec for the color attribute.
        this.textColor = '#666666';
        // prop: enableFontSupport
        // true to turn on native canvas font support in Mozilla 3.5+ and Safari 4+.
        // If true, label will be drawn with canvas tag native support for fonts.
        // If false, label will be drawn with Hershey font metrics.
        this.enableFontSupport = true;
        // prop: pt2px
        // Point to pixel scaling factor, used for computing height of bounding box
        // around a label.  The labels text renderer has a default setting of 1.4, which 
        // should be suitable for most fonts.  Leave as null to use default.  If tops of
        // letters appear clipped, increase this.  If bounding box seems too big, decrease.
        // This is an issue only with the native font renderering capabilities of Mozilla
        // 3.5 and Safari 4 since they do not provide a method to determine the font height.
        this.pt2px = null;
        
        this._elem;
        this._ctx;
        this._plotWidth;
        this._plotHeight;
        this._plotDimensions = {height:null, width:null};
        
        $.extend(true, this, options);
        
        if (options.angle == null && this.axis != 'xaxis' && this.axis != 'x2axis') {
            this.angle = -90;
        }
        
        var ropts = {fontSize:this.fontSize, fontWeight:this.fontWeight, fontStretch:this.fontStretch, fillStyle:this.textColor, angle:this.getAngleRad(), fontFamily:this.fontFamily};
        if (this.pt2px) {
            ropts.pt2px = this.pt2px;
        }
        
        if (this.enableFontSupport) {
            if ($.jqplot.support_canvas_text()) {
                this._textRenderer = new $.jqplot.CanvasFontRenderer(ropts);
            }
            
            else {
                this._textRenderer = new $.jqplot.CanvasTextRenderer(ropts); 
            }
        }
        else {
            this._textRenderer = new $.jqplot.CanvasTextRenderer(ropts); 
        }
    };
    
    $.jqplot.CanvasAxisLabelRenderer.prototype.init = function(options) {
        $.extend(true, this, options);
        this._textRenderer.init({fontSize:this.fontSize, fontWeight:this.fontWeight, fontStretch:this.fontStretch, fillStyle:this.textColor, angle:this.getAngleRad(), fontFamily:this.fontFamily});
    };
    
    // return width along the x axis
    // will check first to see if an element exists.
    // if not, will return the computed text box width.
    $.jqplot.CanvasAxisLabelRenderer.prototype.getWidth = function(ctx) {
        if (this._elem) {
         return this._elem.outerWidth(true);
        }
        else {
            var tr = this._textRenderer;
            var l = tr.getWidth(ctx);
            var h = tr.getHeight(ctx);
            var w = Math.abs(Math.sin(tr.angle)*h) + Math.abs(Math.cos(tr.angle)*l);
            return w;
        }
    };
    
    // return height along the y axis.
    $.jqplot.CanvasAxisLabelRenderer.prototype.getHeight = function(ctx) {
        if (this._elem) {
         return this._elem.outerHeight(true);
        }
        else {
            var tr = this._textRenderer;
            var l = tr.getWidth(ctx);
            var h = tr.getHeight(ctx);
            var w = Math.abs(Math.cos(tr.angle)*h) + Math.abs(Math.sin(tr.angle)*l);
            return w;
        }
    };
    
    $.jqplot.CanvasAxisLabelRenderer.prototype.getAngleRad = function() {
        var a = this.angle * Math.PI/180;
        return a;
    };
    
    $.jqplot.CanvasAxisLabelRenderer.prototype.draw = function(ctx, plot) {
          // Memory Leaks patch
          if (this._elem) {
              if ($.jqplot.use_excanvas && window.G_vmlCanvasManager.uninitElement !== undefined) {
                  window.G_vmlCanvasManager.uninitElement(this._elem.get(0));
              }
            
              this._elem.emptyForce();
              this._elem = null;
          }

        // create a canvas here, but can't draw on it untill it is appended
        // to dom for IE compatability.
        var elem = plot.canvasManager.getCanvas();

        this._textRenderer.setText(this.label, ctx);
        var w = this.getWidth(ctx);
        var h = this.getHeight(ctx);
        elem.width = w;
        elem.height = h;
        elem.style.width = w;
        elem.style.height = h;
        
        elem = plot.canvasManager.initCanvas(elem);

        this._elem = $(elem);
        this._elem.css({ position: 'absolute'});
        this._elem.addClass('jqplot-'+this.axis+'-label');
        
        elem = null;
        return this._elem;
    };
    
    $.jqplot.CanvasAxisLabelRenderer.prototype.pack = function() {
        this._textRenderer.draw(this._elem.get(0).getContext("2d"), this.label);
    };
    
})(jQuery);
/*! jQuery UI - v1.12.1 - 2016-09-14
* http://jqueryui.com
* Includes: widget.js, position.js, data.js, disable-selection.js, effect.js, effects/effect-blind.js, effects/effect-bounce.js, effects/effect-clip.js, effects/effect-drop.js, effects/effect-explode.js, effects/effect-fade.js, effects/effect-fold.js, effects/effect-highlight.js, effects/effect-puff.js, effects/effect-pulsate.js, effects/effect-scale.js, effects/effect-shake.js, effects/effect-size.js, effects/effect-slide.js, effects/effect-transfer.js, focusable.js, form-reset-mixin.js, jquery-1-7.js, keycode.js, labels.js, scroll-parent.js, tabbable.js, unique-id.js, widgets/accordion.js, widgets/autocomplete.js, widgets/button.js, widgets/checkboxradio.js, widgets/controlgroup.js, widgets/datepicker.js, widgets/dialog.js, widgets/draggable.js, widgets/droppable.js, widgets/menu.js, widgets/mouse.js, widgets/progressbar.js, widgets/resizable.js, widgets/selectable.js, widgets/selectmenu.js, widgets/slider.js, widgets/sortable.js, widgets/spinner.js, widgets/tabs.js, widgets/tooltip.js
* Copyright jQuery Foundation and other contributors; Licensed MIT */

(function(t){"function"==typeof define&&define.amd?define(["jquery"],t):t(jQuery)})(function(t){function e(t){for(var e=t.css("visibility");"inherit"===e;)t=t.parent(),e=t.css("visibility");return"hidden"!==e}function i(t){for(var e,i;t.length&&t[0]!==document;){if(e=t.css("position"),("absolute"===e||"relative"===e||"fixed"===e)&&(i=parseInt(t.css("zIndex"),10),!isNaN(i)&&0!==i))return i;t=t.parent()}return 0}function s(){this._curInst=null,this._keyEvent=!1,this._disabledInputs=[],this._datepickerShowing=!1,this._inDialog=!1,this._mainDivId="ui-datepicker-div",this._inlineClass="ui-datepicker-inline",this._appendClass="ui-datepicker-append",this._triggerClass="ui-datepicker-trigger",this._dialogClass="ui-datepicker-dialog",this._disableClass="ui-datepicker-disabled",this._unselectableClass="ui-datepicker-unselectable",this._currentClass="ui-datepicker-current-day",this._dayOverClass="ui-datepicker-days-cell-over",this.regional=[],this.regional[""]={closeText:"Done",prevText:"Prev",nextText:"Next",currentText:"Today",monthNames:["January","February","March","April","May","June","July","August","September","October","November","December"],monthNamesShort:["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],dayNames:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],dayNamesShort:["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],dayNamesMin:["Su","Mo","Tu","We","Th","Fr","Sa"],weekHeader:"Wk",dateFormat:"mm/dd/yy",firstDay:0,isRTL:!1,showMonthAfterYear:!1,yearSuffix:""},this._defaults={showOn:"focus",showAnim:"fadeIn",showOptions:{},defaultDate:null,appendText:"",buttonText:"...",buttonImage:"",buttonImageOnly:!1,hideIfNoPrevNext:!1,navigationAsDateFormat:!1,gotoCurrent:!1,changeMonth:!1,changeYear:!1,yearRange:"c-10:c+10",showOtherMonths:!1,selectOtherMonths:!1,showWeek:!1,calculateWeek:this.iso8601Week,shortYearCutoff:"+10",minDate:null,maxDate:null,duration:"fast",beforeShowDay:null,beforeShow:null,onSelect:null,onChangeMonthYear:null,onClose:null,numberOfMonths:1,showCurrentAtPos:0,stepMonths:1,stepBigMonths:12,altField:"",altFormat:"",constrainInput:!0,showButtonPanel:!1,autoSize:!1,disabled:!1},t.extend(this._defaults,this.regional[""]),this.regional.en=t.extend(!0,{},this.regional[""]),this.regional["en-US"]=t.extend(!0,{},this.regional.en),this.dpDiv=n(t("<div id='"+this._mainDivId+"' class='ui-datepicker ui-widget ui-widget-content ui-helper-clearfix ui-corner-all'></div>"))}function n(e){var i="button, .ui-datepicker-prev, .ui-datepicker-next, .ui-datepicker-calendar td a";return e.on("mouseout",i,function(){t(this).removeClass("ui-state-hover"),-1!==this.className.indexOf("ui-datepicker-prev")&&t(this).removeClass("ui-datepicker-prev-hover"),-1!==this.className.indexOf("ui-datepicker-next")&&t(this).removeClass("ui-datepicker-next-hover")}).on("mouseover",i,o)}function o(){t.datepicker._isDisabledDatepicker(m.inline?m.dpDiv.parent()[0]:m.input[0])||(t(this).parents(".ui-datepicker-calendar").find("a").removeClass("ui-state-hover"),t(this).addClass("ui-state-hover"),-1!==this.className.indexOf("ui-datepicker-prev")&&t(this).addClass("ui-datepicker-prev-hover"),-1!==this.className.indexOf("ui-datepicker-next")&&t(this).addClass("ui-datepicker-next-hover"))}function a(e,i){t.extend(e,i);for(var s in i)null==i[s]&&(e[s]=i[s]);return e}function r(t){return function(){var e=this.element.val();t.apply(this,arguments),this._refresh(),e!==this.element.val()&&this._trigger("change")}}t.ui=t.ui||{},t.ui.version="1.12.1";var h=0,l=Array.prototype.slice;t.cleanData=function(e){return function(i){var s,n,o;for(o=0;null!=(n=i[o]);o++)try{s=t._data(n,"events"),s&&s.remove&&t(n).triggerHandler("remove")}catch(a){}e(i)}}(t.cleanData),t.widget=function(e,i,s){var n,o,a,r={},h=e.split(".")[0];e=e.split(".")[1];var l=h+"-"+e;return s||(s=i,i=t.Widget),t.isArray(s)&&(s=t.extend.apply(null,[{}].concat(s))),t.expr[":"][l.toLowerCase()]=function(e){return!!t.data(e,l)},t[h]=t[h]||{},n=t[h][e],o=t[h][e]=function(t,e){return this._createWidget?(arguments.length&&this._createWidget(t,e),void 0):new o(t,e)},t.extend(o,n,{version:s.version,_proto:t.extend({},s),_childConstructors:[]}),a=new i,a.options=t.widget.extend({},a.options),t.each(s,function(e,s){return t.isFunction(s)?(r[e]=function(){function t(){return i.prototype[e].apply(this,arguments)}function n(t){return i.prototype[e].apply(this,t)}return function(){var e,i=this._super,o=this._superApply;return this._super=t,this._superApply=n,e=s.apply(this,arguments),this._super=i,this._superApply=o,e}}(),void 0):(r[e]=s,void 0)}),o.prototype=t.widget.extend(a,{widgetEventPrefix:n?a.widgetEventPrefix||e:e},r,{constructor:o,namespace:h,widgetName:e,widgetFullName:l}),n?(t.each(n._childConstructors,function(e,i){var s=i.prototype;t.widget(s.namespace+"."+s.widgetName,o,i._proto)}),delete n._childConstructors):i._childConstructors.push(o),t.widget.bridge(e,o),o},t.widget.extend=function(e){for(var i,s,n=l.call(arguments,1),o=0,a=n.length;a>o;o++)for(i in n[o])s=n[o][i],n[o].hasOwnProperty(i)&&void 0!==s&&(e[i]=t.isPlainObject(s)?t.isPlainObject(e[i])?t.widget.extend({},e[i],s):t.widget.extend({},s):s);return e},t.widget.bridge=function(e,i){var s=i.prototype.widgetFullName||e;t.fn[e]=function(n){var o="string"==typeof n,a=l.call(arguments,1),r=this;return o?this.length||"instance"!==n?this.each(function(){var i,o=t.data(this,s);return"instance"===n?(r=o,!1):o?t.isFunction(o[n])&&"_"!==n.charAt(0)?(i=o[n].apply(o,a),i!==o&&void 0!==i?(r=i&&i.jquery?r.pushStack(i.get()):i,!1):void 0):t.error("no such method '"+n+"' for "+e+" widget instance"):t.error("cannot call methods on "+e+" prior to initialization; "+"attempted to call method '"+n+"'")}):r=void 0:(a.length&&(n=t.widget.extend.apply(null,[n].concat(a))),this.each(function(){var e=t.data(this,s);e?(e.option(n||{}),e._init&&e._init()):t.data(this,s,new i(n,this))})),r}},t.Widget=function(){},t.Widget._childConstructors=[],t.Widget.prototype={widgetName:"widget",widgetEventPrefix:"",defaultElement:"<div>",options:{classes:{},disabled:!1,create:null},_createWidget:function(e,i){i=t(i||this.defaultElement||this)[0],this.element=t(i),this.uuid=h++,this.eventNamespace="."+this.widgetName+this.uuid,this.bindings=t(),this.hoverable=t(),this.focusable=t(),this.classesElementLookup={},i!==this&&(t.data(i,this.widgetFullName,this),this._on(!0,this.element,{remove:function(t){t.target===i&&this.destroy()}}),this.document=t(i.style?i.ownerDocument:i.document||i),this.window=t(this.document[0].defaultView||this.document[0].parentWindow)),this.options=t.widget.extend({},this.options,this._getCreateOptions(),e),this._create(),this.options.disabled&&this._setOptionDisabled(this.options.disabled),this._trigger("create",null,this._getCreateEventData()),this._init()},_getCreateOptions:function(){return{}},_getCreateEventData:t.noop,_create:t.noop,_init:t.noop,destroy:function(){var e=this;this._destroy(),t.each(this.classesElementLookup,function(t,i){e._removeClass(i,t)}),this.element.off(this.eventNamespace).removeData(this.widgetFullName),this.widget().off(this.eventNamespace).removeAttr("aria-disabled"),this.bindings.off(this.eventNamespace)},_destroy:t.noop,widget:function(){return this.element},option:function(e,i){var s,n,o,a=e;if(0===arguments.length)return t.widget.extend({},this.options);if("string"==typeof e)if(a={},s=e.split("."),e=s.shift(),s.length){for(n=a[e]=t.widget.extend({},this.options[e]),o=0;s.length-1>o;o++)n[s[o]]=n[s[o]]||{},n=n[s[o]];if(e=s.pop(),1===arguments.length)return void 0===n[e]?null:n[e];n[e]=i}else{if(1===arguments.length)return void 0===this.options[e]?null:this.options[e];a[e]=i}return this._setOptions(a),this},_setOptions:function(t){var e;for(e in t)this._setOption(e,t[e]);return this},_setOption:function(t,e){return"classes"===t&&this._setOptionClasses(e),this.options[t]=e,"disabled"===t&&this._setOptionDisabled(e),this},_setOptionClasses:function(e){var i,s,n;for(i in e)n=this.classesElementLookup[i],e[i]!==this.options.classes[i]&&n&&n.length&&(s=t(n.get()),this._removeClass(n,i),s.addClass(this._classes({element:s,keys:i,classes:e,add:!0})))},_setOptionDisabled:function(t){this._toggleClass(this.widget(),this.widgetFullName+"-disabled",null,!!t),t&&(this._removeClass(this.hoverable,null,"ui-state-hover"),this._removeClass(this.focusable,null,"ui-state-focus"))},enable:function(){return this._setOptions({disabled:!1})},disable:function(){return this._setOptions({disabled:!0})},_classes:function(e){function i(i,o){var a,r;for(r=0;i.length>r;r++)a=n.classesElementLookup[i[r]]||t(),a=e.add?t(t.unique(a.get().concat(e.element.get()))):t(a.not(e.element).get()),n.classesElementLookup[i[r]]=a,s.push(i[r]),o&&e.classes[i[r]]&&s.push(e.classes[i[r]])}var s=[],n=this;return e=t.extend({element:this.element,classes:this.options.classes||{}},e),this._on(e.element,{remove:"_untrackClassesElement"}),e.keys&&i(e.keys.match(/\S+/g)||[],!0),e.extra&&i(e.extra.match(/\S+/g)||[]),s.join(" ")},_untrackClassesElement:function(e){var i=this;t.each(i.classesElementLookup,function(s,n){-1!==t.inArray(e.target,n)&&(i.classesElementLookup[s]=t(n.not(e.target).get()))})},_removeClass:function(t,e,i){return this._toggleClass(t,e,i,!1)},_addClass:function(t,e,i){return this._toggleClass(t,e,i,!0)},_toggleClass:function(t,e,i,s){s="boolean"==typeof s?s:i;var n="string"==typeof t||null===t,o={extra:n?e:i,keys:n?t:e,element:n?this.element:t,add:s};return o.element.toggleClass(this._classes(o),s),this},_on:function(e,i,s){var n,o=this;"boolean"!=typeof e&&(s=i,i=e,e=!1),s?(i=n=t(i),this.bindings=this.bindings.add(i)):(s=i,i=this.element,n=this.widget()),t.each(s,function(s,a){function r(){return e||o.options.disabled!==!0&&!t(this).hasClass("ui-state-disabled")?("string"==typeof a?o[a]:a).apply(o,arguments):void 0}"string"!=typeof a&&(r.guid=a.guid=a.guid||r.guid||t.guid++);var h=s.match(/^([\w:-]*)\s*(.*)$/),l=h[1]+o.eventNamespace,c=h[2];c?n.on(l,c,r):i.on(l,r)})},_off:function(e,i){i=(i||"").split(" ").join(this.eventNamespace+" ")+this.eventNamespace,e.off(i).off(i),this.bindings=t(this.bindings.not(e).get()),this.focusable=t(this.focusable.not(e).get()),this.hoverable=t(this.hoverable.not(e).get())},_delay:function(t,e){function i(){return("string"==typeof t?s[t]:t).apply(s,arguments)}var s=this;return setTimeout(i,e||0)},_hoverable:function(e){this.hoverable=this.hoverable.add(e),this._on(e,{mouseenter:function(e){this._addClass(t(e.currentTarget),null,"ui-state-hover")},mouseleave:function(e){this._removeClass(t(e.currentTarget),null,"ui-state-hover")}})},_focusable:function(e){this.focusable=this.focusable.add(e),this._on(e,{focusin:function(e){this._addClass(t(e.currentTarget),null,"ui-state-focus")},focusout:function(e){this._removeClass(t(e.currentTarget),null,"ui-state-focus")}})},_trigger:function(e,i,s){var n,o,a=this.options[e];if(s=s||{},i=t.Event(i),i.type=(e===this.widgetEventPrefix?e:this.widgetEventPrefix+e).toLowerCase(),i.target=this.element[0],o=i.originalEvent)for(n in o)n in i||(i[n]=o[n]);return this.element.trigger(i,s),!(t.isFunction(a)&&a.apply(this.element[0],[i].concat(s))===!1||i.isDefaultPrevented())}},t.each({show:"fadeIn",hide:"fadeOut"},function(e,i){t.Widget.prototype["_"+e]=function(s,n,o){"string"==typeof n&&(n={effect:n});var a,r=n?n===!0||"number"==typeof n?i:n.effect||i:e;n=n||{},"number"==typeof n&&(n={duration:n}),a=!t.isEmptyObject(n),n.complete=o,n.delay&&s.delay(n.delay),a&&t.effects&&t.effects.effect[r]?s[e](n):r!==e&&s[r]?s[r](n.duration,n.easing,o):s.queue(function(i){t(this)[e](),o&&o.call(s[0]),i()})}}),t.widget,function(){function e(t,e,i){return[parseFloat(t[0])*(u.test(t[0])?e/100:1),parseFloat(t[1])*(u.test(t[1])?i/100:1)]}function i(e,i){return parseInt(t.css(e,i),10)||0}function s(e){var i=e[0];return 9===i.nodeType?{width:e.width(),height:e.height(),offset:{top:0,left:0}}:t.isWindow(i)?{width:e.width(),height:e.height(),offset:{top:e.scrollTop(),left:e.scrollLeft()}}:i.preventDefault?{width:0,height:0,offset:{top:i.pageY,left:i.pageX}}:{width:e.outerWidth(),height:e.outerHeight(),offset:e.offset()}}var n,o=Math.max,a=Math.abs,r=/left|center|right/,h=/top|center|bottom/,l=/[\+\-]\d+(\.[\d]+)?%?/,c=/^\w+/,u=/%$/,d=t.fn.position;t.position={scrollbarWidth:function(){if(void 0!==n)return n;var e,i,s=t("<div style='display:block;position:absolute;width:50px;height:50px;overflow:hidden;'><div style='height:100px;width:auto;'></div></div>"),o=s.children()[0];return t("body").append(s),e=o.offsetWidth,s.css("overflow","scroll"),i=o.offsetWidth,e===i&&(i=s[0].clientWidth),s.remove(),n=e-i},getScrollInfo:function(e){var i=e.isWindow||e.isDocument?"":e.element.css("overflow-x"),s=e.isWindow||e.isDocument?"":e.element.css("overflow-y"),n="scroll"===i||"auto"===i&&e.width<e.element[0].scrollWidth,o="scroll"===s||"auto"===s&&e.height<e.element[0].scrollHeight;return{width:o?t.position.scrollbarWidth():0,height:n?t.position.scrollbarWidth():0}},getWithinInfo:function(e){var i=t(e||window),s=t.isWindow(i[0]),n=!!i[0]&&9===i[0].nodeType,o=!s&&!n;return{element:i,isWindow:s,isDocument:n,offset:o?t(e).offset():{left:0,top:0},scrollLeft:i.scrollLeft(),scrollTop:i.scrollTop(),width:i.outerWidth(),height:i.outerHeight()}}},t.fn.position=function(n){if(!n||!n.of)return d.apply(this,arguments);n=t.extend({},n);var u,p,f,g,m,_,v=t(n.of),b=t.position.getWithinInfo(n.within),y=t.position.getScrollInfo(b),w=(n.collision||"flip").split(" "),k={};return _=s(v),v[0].preventDefault&&(n.at="left top"),p=_.width,f=_.height,g=_.offset,m=t.extend({},g),t.each(["my","at"],function(){var t,e,i=(n[this]||"").split(" ");1===i.length&&(i=r.test(i[0])?i.concat(["center"]):h.test(i[0])?["center"].concat(i):["center","center"]),i[0]=r.test(i[0])?i[0]:"center",i[1]=h.test(i[1])?i[1]:"center",t=l.exec(i[0]),e=l.exec(i[1]),k[this]=[t?t[0]:0,e?e[0]:0],n[this]=[c.exec(i[0])[0],c.exec(i[1])[0]]}),1===w.length&&(w[1]=w[0]),"right"===n.at[0]?m.left+=p:"center"===n.at[0]&&(m.left+=p/2),"bottom"===n.at[1]?m.top+=f:"center"===n.at[1]&&(m.top+=f/2),u=e(k.at,p,f),m.left+=u[0],m.top+=u[1],this.each(function(){var s,r,h=t(this),l=h.outerWidth(),c=h.outerHeight(),d=i(this,"marginLeft"),_=i(this,"marginTop"),x=l+d+i(this,"marginRight")+y.width,C=c+_+i(this,"marginBottom")+y.height,D=t.extend({},m),I=e(k.my,h.outerWidth(),h.outerHeight());"right"===n.my[0]?D.left-=l:"center"===n.my[0]&&(D.left-=l/2),"bottom"===n.my[1]?D.top-=c:"center"===n.my[1]&&(D.top-=c/2),D.left+=I[0],D.top+=I[1],s={marginLeft:d,marginTop:_},t.each(["left","top"],function(e,i){t.ui.position[w[e]]&&t.ui.position[w[e]][i](D,{targetWidth:p,targetHeight:f,elemWidth:l,elemHeight:c,collisionPosition:s,collisionWidth:x,collisionHeight:C,offset:[u[0]+I[0],u[1]+I[1]],my:n.my,at:n.at,within:b,elem:h})}),n.using&&(r=function(t){var e=g.left-D.left,i=e+p-l,s=g.top-D.top,r=s+f-c,u={target:{element:v,left:g.left,top:g.top,width:p,height:f},element:{element:h,left:D.left,top:D.top,width:l,height:c},horizontal:0>i?"left":e>0?"right":"center",vertical:0>r?"top":s>0?"bottom":"middle"};l>p&&p>a(e+i)&&(u.horizontal="center"),c>f&&f>a(s+r)&&(u.vertical="middle"),u.important=o(a(e),a(i))>o(a(s),a(r))?"horizontal":"vertical",n.using.call(this,t,u)}),h.offset(t.extend(D,{using:r}))})},t.ui.position={fit:{left:function(t,e){var i,s=e.within,n=s.isWindow?s.scrollLeft:s.offset.left,a=s.width,r=t.left-e.collisionPosition.marginLeft,h=n-r,l=r+e.collisionWidth-a-n;e.collisionWidth>a?h>0&&0>=l?(i=t.left+h+e.collisionWidth-a-n,t.left+=h-i):t.left=l>0&&0>=h?n:h>l?n+a-e.collisionWidth:n:h>0?t.left+=h:l>0?t.left-=l:t.left=o(t.left-r,t.left)},top:function(t,e){var i,s=e.within,n=s.isWindow?s.scrollTop:s.offset.top,a=e.within.height,r=t.top-e.collisionPosition.marginTop,h=n-r,l=r+e.collisionHeight-a-n;e.collisionHeight>a?h>0&&0>=l?(i=t.top+h+e.collisionHeight-a-n,t.top+=h-i):t.top=l>0&&0>=h?n:h>l?n+a-e.collisionHeight:n:h>0?t.top+=h:l>0?t.top-=l:t.top=o(t.top-r,t.top)}},flip:{left:function(t,e){var i,s,n=e.within,o=n.offset.left+n.scrollLeft,r=n.width,h=n.isWindow?n.scrollLeft:n.offset.left,l=t.left-e.collisionPosition.marginLeft,c=l-h,u=l+e.collisionWidth-r-h,d="left"===e.my[0]?-e.elemWidth:"right"===e.my[0]?e.elemWidth:0,p="left"===e.at[0]?e.targetWidth:"right"===e.at[0]?-e.targetWidth:0,f=-2*e.offset[0];0>c?(i=t.left+d+p+f+e.collisionWidth-r-o,(0>i||a(c)>i)&&(t.left+=d+p+f)):u>0&&(s=t.left-e.collisionPosition.marginLeft+d+p+f-h,(s>0||u>a(s))&&(t.left+=d+p+f))},top:function(t,e){var i,s,n=e.within,o=n.offset.top+n.scrollTop,r=n.height,h=n.isWindow?n.scrollTop:n.offset.top,l=t.top-e.collisionPosition.marginTop,c=l-h,u=l+e.collisionHeight-r-h,d="top"===e.my[1],p=d?-e.elemHeight:"bottom"===e.my[1]?e.elemHeight:0,f="top"===e.at[1]?e.targetHeight:"bottom"===e.at[1]?-e.targetHeight:0,g=-2*e.offset[1];0>c?(s=t.top+p+f+g+e.collisionHeight-r-o,(0>s||a(c)>s)&&(t.top+=p+f+g)):u>0&&(i=t.top-e.collisionPosition.marginTop+p+f+g-h,(i>0||u>a(i))&&(t.top+=p+f+g))}},flipfit:{left:function(){t.ui.position.flip.left.apply(this,arguments),t.ui.position.fit.left.apply(this,arguments)},top:function(){t.ui.position.flip.top.apply(this,arguments),t.ui.position.fit.top.apply(this,arguments)}}}}(),t.ui.position,t.extend(t.expr[":"],{data:t.expr.createPseudo?t.expr.createPseudo(function(e){return function(i){return!!t.data(i,e)}}):function(e,i,s){return!!t.data(e,s[3])}}),t.fn.extend({disableSelection:function(){var t="onselectstart"in document.createElement("div")?"selectstart":"mousedown";return function(){return this.on(t+".ui-disableSelection",function(t){t.preventDefault()})}}(),enableSelection:function(){return this.off(".ui-disableSelection")}});var c="ui-effects-",u="ui-effects-style",d="ui-effects-animated",p=t;t.effects={effect:{}},function(t,e){function i(t,e,i){var s=u[e.type]||{};return null==t?i||!e.def?null:e.def:(t=s.floor?~~t:parseFloat(t),isNaN(t)?e.def:s.mod?(t+s.mod)%s.mod:0>t?0:t>s.max?s.max:t)}function s(i){var s=l(),n=s._rgba=[];return i=i.toLowerCase(),f(h,function(t,o){var a,r=o.re.exec(i),h=r&&o.parse(r),l=o.space||"rgba";return h?(a=s[l](h),s[c[l].cache]=a[c[l].cache],n=s._rgba=a._rgba,!1):e}),n.length?("0,0,0,0"===n.join()&&t.extend(n,o.transparent),s):o[i]}function n(t,e,i){return i=(i+1)%1,1>6*i?t+6*(e-t)*i:1>2*i?e:2>3*i?t+6*(e-t)*(2/3-i):t}var o,a="backgroundColor borderBottomColor borderLeftColor borderRightColor borderTopColor color columnRuleColor outlineColor textDecorationColor textEmphasisColor",r=/^([\-+])=\s*(\d+\.?\d*)/,h=[{re:/rgba?\(\s*(\d{1,3})\s*,\s*(\d{1,3})\s*,\s*(\d{1,3})\s*(?:,\s*(\d?(?:\.\d+)?)\s*)?\)/,parse:function(t){return[t[1],t[2],t[3],t[4]]}},{re:/rgba?\(\s*(\d+(?:\.\d+)?)\%\s*,\s*(\d+(?:\.\d+)?)\%\s*,\s*(\d+(?:\.\d+)?)\%\s*(?:,\s*(\d?(?:\.\d+)?)\s*)?\)/,parse:function(t){return[2.55*t[1],2.55*t[2],2.55*t[3],t[4]]}},{re:/#([a-f0-9]{2})([a-f0-9]{2})([a-f0-9]{2})/,parse:function(t){return[parseInt(t[1],16),parseInt(t[2],16),parseInt(t[3],16)]}},{re:/#([a-f0-9])([a-f0-9])([a-f0-9])/,parse:function(t){return[parseInt(t[1]+t[1],16),parseInt(t[2]+t[2],16),parseInt(t[3]+t[3],16)]}},{re:/hsla?\(\s*(\d+(?:\.\d+)?)\s*,\s*(\d+(?:\.\d+)?)\%\s*,\s*(\d+(?:\.\d+)?)\%\s*(?:,\s*(\d?(?:\.\d+)?)\s*)?\)/,space:"hsla",parse:function(t){return[t[1],t[2]/100,t[3]/100,t[4]]}}],l=t.Color=function(e,i,s,n){return new t.Color.fn.parse(e,i,s,n)},c={rgba:{props:{red:{idx:0,type:"byte"},green:{idx:1,type:"byte"},blue:{idx:2,type:"byte"}}},hsla:{props:{hue:{idx:0,type:"degrees"},saturation:{idx:1,type:"percent"},lightness:{idx:2,type:"percent"}}}},u={"byte":{floor:!0,max:255},percent:{max:1},degrees:{mod:360,floor:!0}},d=l.support={},p=t("<p>")[0],f=t.each;p.style.cssText="background-color:rgba(1,1,1,.5)",d.rgba=p.style.backgroundColor.indexOf("rgba")>-1,f(c,function(t,e){e.cache="_"+t,e.props.alpha={idx:3,type:"percent",def:1}}),l.fn=t.extend(l.prototype,{parse:function(n,a,r,h){if(n===e)return this._rgba=[null,null,null,null],this;(n.jquery||n.nodeType)&&(n=t(n).css(a),a=e);var u=this,d=t.type(n),p=this._rgba=[];return a!==e&&(n=[n,a,r,h],d="array"),"string"===d?this.parse(s(n)||o._default):"array"===d?(f(c.rgba.props,function(t,e){p[e.idx]=i(n[e.idx],e)}),this):"object"===d?(n instanceof l?f(c,function(t,e){n[e.cache]&&(u[e.cache]=n[e.cache].slice())}):f(c,function(e,s){var o=s.cache;f(s.props,function(t,e){if(!u[o]&&s.to){if("alpha"===t||null==n[t])return;u[o]=s.to(u._rgba)}u[o][e.idx]=i(n[t],e,!0)}),u[o]&&0>t.inArray(null,u[o].slice(0,3))&&(u[o][3]=1,s.from&&(u._rgba=s.from(u[o])))}),this):e},is:function(t){var i=l(t),s=!0,n=this;return f(c,function(t,o){var a,r=i[o.cache];return r&&(a=n[o.cache]||o.to&&o.to(n._rgba)||[],f(o.props,function(t,i){return null!=r[i.idx]?s=r[i.idx]===a[i.idx]:e})),s}),s},_space:function(){var t=[],e=this;return f(c,function(i,s){e[s.cache]&&t.push(i)}),t.pop()},transition:function(t,e){var s=l(t),n=s._space(),o=c[n],a=0===this.alpha()?l("transparent"):this,r=a[o.cache]||o.to(a._rgba),h=r.slice();return s=s[o.cache],f(o.props,function(t,n){var o=n.idx,a=r[o],l=s[o],c=u[n.type]||{};null!==l&&(null===a?h[o]=l:(c.mod&&(l-a>c.mod/2?a+=c.mod:a-l>c.mod/2&&(a-=c.mod)),h[o]=i((l-a)*e+a,n)))}),this[n](h)},blend:function(e){if(1===this._rgba[3])return this;var i=this._rgba.slice(),s=i.pop(),n=l(e)._rgba;return l(t.map(i,function(t,e){return(1-s)*n[e]+s*t}))},toRgbaString:function(){var e="rgba(",i=t.map(this._rgba,function(t,e){return null==t?e>2?1:0:t});return 1===i[3]&&(i.pop(),e="rgb("),e+i.join()+")"},toHslaString:function(){var e="hsla(",i=t.map(this.hsla(),function(t,e){return null==t&&(t=e>2?1:0),e&&3>e&&(t=Math.round(100*t)+"%"),t});return 1===i[3]&&(i.pop(),e="hsl("),e+i.join()+")"},toHexString:function(e){var i=this._rgba.slice(),s=i.pop();return e&&i.push(~~(255*s)),"#"+t.map(i,function(t){return t=(t||0).toString(16),1===t.length?"0"+t:t}).join("")},toString:function(){return 0===this._rgba[3]?"transparent":this.toRgbaString()}}),l.fn.parse.prototype=l.fn,c.hsla.to=function(t){if(null==t[0]||null==t[1]||null==t[2])return[null,null,null,t[3]];var e,i,s=t[0]/255,n=t[1]/255,o=t[2]/255,a=t[3],r=Math.max(s,n,o),h=Math.min(s,n,o),l=r-h,c=r+h,u=.5*c;return e=h===r?0:s===r?60*(n-o)/l+360:n===r?60*(o-s)/l+120:60*(s-n)/l+240,i=0===l?0:.5>=u?l/c:l/(2-c),[Math.round(e)%360,i,u,null==a?1:a]},c.hsla.from=function(t){if(null==t[0]||null==t[1]||null==t[2])return[null,null,null,t[3]];var e=t[0]/360,i=t[1],s=t[2],o=t[3],a=.5>=s?s*(1+i):s+i-s*i,r=2*s-a;return[Math.round(255*n(r,a,e+1/3)),Math.round(255*n(r,a,e)),Math.round(255*n(r,a,e-1/3)),o]},f(c,function(s,n){var o=n.props,a=n.cache,h=n.to,c=n.from;l.fn[s]=function(s){if(h&&!this[a]&&(this[a]=h(this._rgba)),s===e)return this[a].slice();var n,r=t.type(s),u="array"===r||"object"===r?s:arguments,d=this[a].slice();return f(o,function(t,e){var s=u["object"===r?t:e.idx];null==s&&(s=d[e.idx]),d[e.idx]=i(s,e)}),c?(n=l(c(d)),n[a]=d,n):l(d)},f(o,function(e,i){l.fn[e]||(l.fn[e]=function(n){var o,a=t.type(n),h="alpha"===e?this._hsla?"hsla":"rgba":s,l=this[h](),c=l[i.idx];return"undefined"===a?c:("function"===a&&(n=n.call(this,c),a=t.type(n)),null==n&&i.empty?this:("string"===a&&(o=r.exec(n),o&&(n=c+parseFloat(o[2])*("+"===o[1]?1:-1))),l[i.idx]=n,this[h](l)))})})}),l.hook=function(e){var i=e.split(" ");f(i,function(e,i){t.cssHooks[i]={set:function(e,n){var o,a,r="";if("transparent"!==n&&("string"!==t.type(n)||(o=s(n)))){if(n=l(o||n),!d.rgba&&1!==n._rgba[3]){for(a="backgroundColor"===i?e.parentNode:e;(""===r||"transparent"===r)&&a&&a.style;)try{r=t.css(a,"backgroundColor"),a=a.parentNode}catch(h){}n=n.blend(r&&"transparent"!==r?r:"_default")}n=n.toRgbaString()}try{e.style[i]=n}catch(h){}}},t.fx.step[i]=function(e){e.colorInit||(e.start=l(e.elem,i),e.end=l(e.end),e.colorInit=!0),t.cssHooks[i].set(e.elem,e.start.transition(e.end,e.pos))}})},l.hook(a),t.cssHooks.borderColor={expand:function(t){var e={};return f(["Top","Right","Bottom","Left"],function(i,s){e["border"+s+"Color"]=t}),e}},o=t.Color.names={aqua:"#00ffff",black:"#000000",blue:"#0000ff",fuchsia:"#ff00ff",gray:"#808080",green:"#008000",lime:"#00ff00",maroon:"#800000",navy:"#000080",olive:"#808000",purple:"#800080",red:"#ff0000",silver:"#c0c0c0",teal:"#008080",white:"#ffffff",yellow:"#ffff00",transparent:[null,null,null,0],_default:"#ffffff"}}(p),function(){function e(e){var i,s,n=e.ownerDocument.defaultView?e.ownerDocument.defaultView.getComputedStyle(e,null):e.currentStyle,o={};if(n&&n.length&&n[0]&&n[n[0]])for(s=n.length;s--;)i=n[s],"string"==typeof n[i]&&(o[t.camelCase(i)]=n[i]);else for(i in n)"string"==typeof n[i]&&(o[i]=n[i]);return o}function i(e,i){var s,o,a={};for(s in i)o=i[s],e[s]!==o&&(n[s]||(t.fx.step[s]||!isNaN(parseFloat(o)))&&(a[s]=o));return a}var s=["add","remove","toggle"],n={border:1,borderBottom:1,borderColor:1,borderLeft:1,borderRight:1,borderTop:1,borderWidth:1,margin:1,padding:1};t.each(["borderLeftStyle","borderRightStyle","borderBottomStyle","borderTopStyle"],function(e,i){t.fx.step[i]=function(t){("none"!==t.end&&!t.setAttr||1===t.pos&&!t.setAttr)&&(p.style(t.elem,i,t.end),t.setAttr=!0)}}),t.fn.addBack||(t.fn.addBack=function(t){return this.add(null==t?this.prevObject:this.prevObject.filter(t))}),t.effects.animateClass=function(n,o,a,r){var h=t.speed(o,a,r);return this.queue(function(){var o,a=t(this),r=a.attr("class")||"",l=h.children?a.find("*").addBack():a;l=l.map(function(){var i=t(this);return{el:i,start:e(this)}}),o=function(){t.each(s,function(t,e){n[e]&&a[e+"Class"](n[e])})},o(),l=l.map(function(){return this.end=e(this.el[0]),this.diff=i(this.start,this.end),this}),a.attr("class",r),l=l.map(function(){var e=this,i=t.Deferred(),s=t.extend({},h,{queue:!1,complete:function(){i.resolve(e)}});return this.el.animate(this.diff,s),i.promise()}),t.when.apply(t,l.get()).done(function(){o(),t.each(arguments,function(){var e=this.el;t.each(this.diff,function(t){e.css(t,"")})}),h.complete.call(a[0])})})},t.fn.extend({addClass:function(e){return function(i,s,n,o){return s?t.effects.animateClass.call(this,{add:i},s,n,o):e.apply(this,arguments)}}(t.fn.addClass),removeClass:function(e){return function(i,s,n,o){return arguments.length>1?t.effects.animateClass.call(this,{remove:i},s,n,o):e.apply(this,arguments)}}(t.fn.removeClass),toggleClass:function(e){return function(i,s,n,o,a){return"boolean"==typeof s||void 0===s?n?t.effects.animateClass.call(this,s?{add:i}:{remove:i},n,o,a):e.apply(this,arguments):t.effects.animateClass.call(this,{toggle:i},s,n,o)}}(t.fn.toggleClass),switchClass:function(e,i,s,n,o){return t.effects.animateClass.call(this,{add:i,remove:e},s,n,o)}})}(),function(){function e(e,i,s,n){return t.isPlainObject(e)&&(i=e,e=e.effect),e={effect:e},null==i&&(i={}),t.isFunction(i)&&(n=i,s=null,i={}),("number"==typeof i||t.fx.speeds[i])&&(n=s,s=i,i={}),t.isFunction(s)&&(n=s,s=null),i&&t.extend(e,i),s=s||i.duration,e.duration=t.fx.off?0:"number"==typeof s?s:s in t.fx.speeds?t.fx.speeds[s]:t.fx.speeds._default,e.complete=n||i.complete,e}function i(e){return!e||"number"==typeof e||t.fx.speeds[e]?!0:"string"!=typeof e||t.effects.effect[e]?t.isFunction(e)?!0:"object"!=typeof e||e.effect?!1:!0:!0}function s(t,e){var i=e.outerWidth(),s=e.outerHeight(),n=/^rect\((-?\d*\.?\d*px|-?\d+%|auto),?\s*(-?\d*\.?\d*px|-?\d+%|auto),?\s*(-?\d*\.?\d*px|-?\d+%|auto),?\s*(-?\d*\.?\d*px|-?\d+%|auto)\)$/,o=n.exec(t)||["",0,i,s,0];return{top:parseFloat(o[1])||0,right:"auto"===o[2]?i:parseFloat(o[2]),bottom:"auto"===o[3]?s:parseFloat(o[3]),left:parseFloat(o[4])||0}}t.expr&&t.expr.filters&&t.expr.filters.animated&&(t.expr.filters.animated=function(e){return function(i){return!!t(i).data(d)||e(i)}}(t.expr.filters.animated)),t.uiBackCompat!==!1&&t.extend(t.effects,{save:function(t,e){for(var i=0,s=e.length;s>i;i++)null!==e[i]&&t.data(c+e[i],t[0].style[e[i]])},restore:function(t,e){for(var i,s=0,n=e.length;n>s;s++)null!==e[s]&&(i=t.data(c+e[s]),t.css(e[s],i))},setMode:function(t,e){return"toggle"===e&&(e=t.is(":hidden")?"show":"hide"),e},createWrapper:function(e){if(e.parent().is(".ui-effects-wrapper"))return e.parent();var i={width:e.outerWidth(!0),height:e.outerHeight(!0),"float":e.css("float")},s=t("<div></div>").addClass("ui-effects-wrapper").css({fontSize:"100%",background:"transparent",border:"none",margin:0,padding:0}),n={width:e.width(),height:e.height()},o=document.activeElement;try{o.id}catch(a){o=document.body}return e.wrap(s),(e[0]===o||t.contains(e[0],o))&&t(o).trigger("focus"),s=e.parent(),"static"===e.css("position")?(s.css({position:"relative"}),e.css({position:"relative"})):(t.extend(i,{position:e.css("position"),zIndex:e.css("z-index")}),t.each(["top","left","bottom","right"],function(t,s){i[s]=e.css(s),isNaN(parseInt(i[s],10))&&(i[s]="auto")}),e.css({position:"relative",top:0,left:0,right:"auto",bottom:"auto"})),e.css(n),s.css(i).show()},removeWrapper:function(e){var i=document.activeElement;return e.parent().is(".ui-effects-wrapper")&&(e.parent().replaceWith(e),(e[0]===i||t.contains(e[0],i))&&t(i).trigger("focus")),e}}),t.extend(t.effects,{version:"1.12.1",define:function(e,i,s){return s||(s=i,i="effect"),t.effects.effect[e]=s,t.effects.effect[e].mode=i,s},scaledDimensions:function(t,e,i){if(0===e)return{height:0,width:0,outerHeight:0,outerWidth:0};var s="horizontal"!==i?(e||100)/100:1,n="vertical"!==i?(e||100)/100:1;return{height:t.height()*n,width:t.width()*s,outerHeight:t.outerHeight()*n,outerWidth:t.outerWidth()*s}},clipToBox:function(t){return{width:t.clip.right-t.clip.left,height:t.clip.bottom-t.clip.top,left:t.clip.left,top:t.clip.top}},unshift:function(t,e,i){var s=t.queue();e>1&&s.splice.apply(s,[1,0].concat(s.splice(e,i))),t.dequeue()},saveStyle:function(t){t.data(u,t[0].style.cssText)},restoreStyle:function(t){t[0].style.cssText=t.data(u)||"",t.removeData(u)},mode:function(t,e){var i=t.is(":hidden");return"toggle"===e&&(e=i?"show":"hide"),(i?"hide"===e:"show"===e)&&(e="none"),e},getBaseline:function(t,e){var i,s;switch(t[0]){case"top":i=0;break;case"middle":i=.5;break;case"bottom":i=1;break;default:i=t[0]/e.height}switch(t[1]){case"left":s=0;break;case"center":s=.5;break;case"right":s=1;break;default:s=t[1]/e.width}return{x:s,y:i}},createPlaceholder:function(e){var i,s=e.css("position"),n=e.position();return e.css({marginTop:e.css("marginTop"),marginBottom:e.css("marginBottom"),marginLeft:e.css("marginLeft"),marginRight:e.css("marginRight")}).outerWidth(e.outerWidth()).outerHeight(e.outerHeight()),/^(static|relative)/.test(s)&&(s="absolute",i=t("<"+e[0].nodeName+">").insertAfter(e).css({display:/^(inline|ruby)/.test(e.css("display"))?"inline-block":"block",visibility:"hidden",marginTop:e.css("marginTop"),marginBottom:e.css("marginBottom"),marginLeft:e.css("marginLeft"),marginRight:e.css("marginRight"),"float":e.css("float")}).outerWidth(e.outerWidth()).outerHeight(e.outerHeight()).addClass("ui-effects-placeholder"),e.data(c+"placeholder",i)),e.css({position:s,left:n.left,top:n.top}),i},removePlaceholder:function(t){var e=c+"placeholder",i=t.data(e);i&&(i.remove(),t.removeData(e))},cleanUp:function(e){t.effects.restoreStyle(e),t.effects.removePlaceholder(e)},setTransition:function(e,i,s,n){return n=n||{},t.each(i,function(t,i){var o=e.cssUnit(i);o[0]>0&&(n[i]=o[0]*s+o[1])}),n}}),t.fn.extend({effect:function(){function i(e){function i(){r.removeData(d),t.effects.cleanUp(r),"hide"===s.mode&&r.hide(),a()}function a(){t.isFunction(h)&&h.call(r[0]),t.isFunction(e)&&e()}var r=t(this);s.mode=c.shift(),t.uiBackCompat===!1||o?"none"===s.mode?(r[l](),a()):n.call(r[0],s,i):(r.is(":hidden")?"hide"===l:"show"===l)?(r[l](),a()):n.call(r[0],s,a)}var s=e.apply(this,arguments),n=t.effects.effect[s.effect],o=n.mode,a=s.queue,r=a||"fx",h=s.complete,l=s.mode,c=[],u=function(e){var i=t(this),s=t.effects.mode(i,l)||o;i.data(d,!0),c.push(s),o&&("show"===s||s===o&&"hide"===s)&&i.show(),o&&"none"===s||t.effects.saveStyle(i),t.isFunction(e)&&e()};return t.fx.off||!n?l?this[l](s.duration,h):this.each(function(){h&&h.call(this)}):a===!1?this.each(u).each(i):this.queue(r,u).queue(r,i)},show:function(t){return function(s){if(i(s))return t.apply(this,arguments);var n=e.apply(this,arguments);return n.mode="show",this.effect.call(this,n)
}}(t.fn.show),hide:function(t){return function(s){if(i(s))return t.apply(this,arguments);var n=e.apply(this,arguments);return n.mode="hide",this.effect.call(this,n)}}(t.fn.hide),toggle:function(t){return function(s){if(i(s)||"boolean"==typeof s)return t.apply(this,arguments);var n=e.apply(this,arguments);return n.mode="toggle",this.effect.call(this,n)}}(t.fn.toggle),cssUnit:function(e){var i=this.css(e),s=[];return t.each(["em","px","%","pt"],function(t,e){i.indexOf(e)>0&&(s=[parseFloat(i),e])}),s},cssClip:function(t){return t?this.css("clip","rect("+t.top+"px "+t.right+"px "+t.bottom+"px "+t.left+"px)"):s(this.css("clip"),this)},transfer:function(e,i){var s=t(this),n=t(e.to),o="fixed"===n.css("position"),a=t("body"),r=o?a.scrollTop():0,h=o?a.scrollLeft():0,l=n.offset(),c={top:l.top-r,left:l.left-h,height:n.innerHeight(),width:n.innerWidth()},u=s.offset(),d=t("<div class='ui-effects-transfer'></div>").appendTo("body").addClass(e.className).css({top:u.top-r,left:u.left-h,height:s.innerHeight(),width:s.innerWidth(),position:o?"fixed":"absolute"}).animate(c,e.duration,e.easing,function(){d.remove(),t.isFunction(i)&&i()})}}),t.fx.step.clip=function(e){e.clipInit||(e.start=t(e.elem).cssClip(),"string"==typeof e.end&&(e.end=s(e.end,e.elem)),e.clipInit=!0),t(e.elem).cssClip({top:e.pos*(e.end.top-e.start.top)+e.start.top,right:e.pos*(e.end.right-e.start.right)+e.start.right,bottom:e.pos*(e.end.bottom-e.start.bottom)+e.start.bottom,left:e.pos*(e.end.left-e.start.left)+e.start.left})}}(),function(){var e={};t.each(["Quad","Cubic","Quart","Quint","Expo"],function(t,i){e[i]=function(e){return Math.pow(e,t+2)}}),t.extend(e,{Sine:function(t){return 1-Math.cos(t*Math.PI/2)},Circ:function(t){return 1-Math.sqrt(1-t*t)},Elastic:function(t){return 0===t||1===t?t:-Math.pow(2,8*(t-1))*Math.sin((80*(t-1)-7.5)*Math.PI/15)},Back:function(t){return t*t*(3*t-2)},Bounce:function(t){for(var e,i=4;((e=Math.pow(2,--i))-1)/11>t;);return 1/Math.pow(4,3-i)-7.5625*Math.pow((3*e-2)/22-t,2)}}),t.each(e,function(e,i){t.easing["easeIn"+e]=i,t.easing["easeOut"+e]=function(t){return 1-i(1-t)},t.easing["easeInOut"+e]=function(t){return.5>t?i(2*t)/2:1-i(-2*t+2)/2}})}();var f=t.effects;t.effects.define("blind","hide",function(e,i){var s={up:["bottom","top"],vertical:["bottom","top"],down:["top","bottom"],left:["right","left"],horizontal:["right","left"],right:["left","right"]},n=t(this),o=e.direction||"up",a=n.cssClip(),r={clip:t.extend({},a)},h=t.effects.createPlaceholder(n);r.clip[s[o][0]]=r.clip[s[o][1]],"show"===e.mode&&(n.cssClip(r.clip),h&&h.css(t.effects.clipToBox(r)),r.clip=a),h&&h.animate(t.effects.clipToBox(r),e.duration,e.easing),n.animate(r,{queue:!1,duration:e.duration,easing:e.easing,complete:i})}),t.effects.define("bounce",function(e,i){var s,n,o,a=t(this),r=e.mode,h="hide"===r,l="show"===r,c=e.direction||"up",u=e.distance,d=e.times||5,p=2*d+(l||h?1:0),f=e.duration/p,g=e.easing,m="up"===c||"down"===c?"top":"left",_="up"===c||"left"===c,v=0,b=a.queue().length;for(t.effects.createPlaceholder(a),o=a.css(m),u||(u=a["top"===m?"outerHeight":"outerWidth"]()/3),l&&(n={opacity:1},n[m]=o,a.css("opacity",0).css(m,_?2*-u:2*u).animate(n,f,g)),h&&(u/=Math.pow(2,d-1)),n={},n[m]=o;d>v;v++)s={},s[m]=(_?"-=":"+=")+u,a.animate(s,f,g).animate(n,f,g),u=h?2*u:u/2;h&&(s={opacity:0},s[m]=(_?"-=":"+=")+u,a.animate(s,f,g)),a.queue(i),t.effects.unshift(a,b,p+1)}),t.effects.define("clip","hide",function(e,i){var s,n={},o=t(this),a=e.direction||"vertical",r="both"===a,h=r||"horizontal"===a,l=r||"vertical"===a;s=o.cssClip(),n.clip={top:l?(s.bottom-s.top)/2:s.top,right:h?(s.right-s.left)/2:s.right,bottom:l?(s.bottom-s.top)/2:s.bottom,left:h?(s.right-s.left)/2:s.left},t.effects.createPlaceholder(o),"show"===e.mode&&(o.cssClip(n.clip),n.clip=s),o.animate(n,{queue:!1,duration:e.duration,easing:e.easing,complete:i})}),t.effects.define("drop","hide",function(e,i){var s,n=t(this),o=e.mode,a="show"===o,r=e.direction||"left",h="up"===r||"down"===r?"top":"left",l="up"===r||"left"===r?"-=":"+=",c="+="===l?"-=":"+=",u={opacity:0};t.effects.createPlaceholder(n),s=e.distance||n["top"===h?"outerHeight":"outerWidth"](!0)/2,u[h]=l+s,a&&(n.css(u),u[h]=c+s,u.opacity=1),n.animate(u,{queue:!1,duration:e.duration,easing:e.easing,complete:i})}),t.effects.define("explode","hide",function(e,i){function s(){b.push(this),b.length===u*d&&n()}function n(){p.css({visibility:"visible"}),t(b).remove(),i()}var o,a,r,h,l,c,u=e.pieces?Math.round(Math.sqrt(e.pieces)):3,d=u,p=t(this),f=e.mode,g="show"===f,m=p.show().css("visibility","hidden").offset(),_=Math.ceil(p.outerWidth()/d),v=Math.ceil(p.outerHeight()/u),b=[];for(o=0;u>o;o++)for(h=m.top+o*v,c=o-(u-1)/2,a=0;d>a;a++)r=m.left+a*_,l=a-(d-1)/2,p.clone().appendTo("body").wrap("<div></div>").css({position:"absolute",visibility:"visible",left:-a*_,top:-o*v}).parent().addClass("ui-effects-explode").css({position:"absolute",overflow:"hidden",width:_,height:v,left:r+(g?l*_:0),top:h+(g?c*v:0),opacity:g?0:1}).animate({left:r+(g?0:l*_),top:h+(g?0:c*v),opacity:g?1:0},e.duration||500,e.easing,s)}),t.effects.define("fade","toggle",function(e,i){var s="show"===e.mode;t(this).css("opacity",s?0:1).animate({opacity:s?1:0},{queue:!1,duration:e.duration,easing:e.easing,complete:i})}),t.effects.define("fold","hide",function(e,i){var s=t(this),n=e.mode,o="show"===n,a="hide"===n,r=e.size||15,h=/([0-9]+)%/.exec(r),l=!!e.horizFirst,c=l?["right","bottom"]:["bottom","right"],u=e.duration/2,d=t.effects.createPlaceholder(s),p=s.cssClip(),f={clip:t.extend({},p)},g={clip:t.extend({},p)},m=[p[c[0]],p[c[1]]],_=s.queue().length;h&&(r=parseInt(h[1],10)/100*m[a?0:1]),f.clip[c[0]]=r,g.clip[c[0]]=r,g.clip[c[1]]=0,o&&(s.cssClip(g.clip),d&&d.css(t.effects.clipToBox(g)),g.clip=p),s.queue(function(i){d&&d.animate(t.effects.clipToBox(f),u,e.easing).animate(t.effects.clipToBox(g),u,e.easing),i()}).animate(f,u,e.easing).animate(g,u,e.easing).queue(i),t.effects.unshift(s,_,4)}),t.effects.define("highlight","show",function(e,i){var s=t(this),n={backgroundColor:s.css("backgroundColor")};"hide"===e.mode&&(n.opacity=0),t.effects.saveStyle(s),s.css({backgroundImage:"none",backgroundColor:e.color||"#ffff99"}).animate(n,{queue:!1,duration:e.duration,easing:e.easing,complete:i})}),t.effects.define("size",function(e,i){var s,n,o,a=t(this),r=["fontSize"],h=["borderTopWidth","borderBottomWidth","paddingTop","paddingBottom"],l=["borderLeftWidth","borderRightWidth","paddingLeft","paddingRight"],c=e.mode,u="effect"!==c,d=e.scale||"both",p=e.origin||["middle","center"],f=a.css("position"),g=a.position(),m=t.effects.scaledDimensions(a),_=e.from||m,v=e.to||t.effects.scaledDimensions(a,0);t.effects.createPlaceholder(a),"show"===c&&(o=_,_=v,v=o),n={from:{y:_.height/m.height,x:_.width/m.width},to:{y:v.height/m.height,x:v.width/m.width}},("box"===d||"both"===d)&&(n.from.y!==n.to.y&&(_=t.effects.setTransition(a,h,n.from.y,_),v=t.effects.setTransition(a,h,n.to.y,v)),n.from.x!==n.to.x&&(_=t.effects.setTransition(a,l,n.from.x,_),v=t.effects.setTransition(a,l,n.to.x,v))),("content"===d||"both"===d)&&n.from.y!==n.to.y&&(_=t.effects.setTransition(a,r,n.from.y,_),v=t.effects.setTransition(a,r,n.to.y,v)),p&&(s=t.effects.getBaseline(p,m),_.top=(m.outerHeight-_.outerHeight)*s.y+g.top,_.left=(m.outerWidth-_.outerWidth)*s.x+g.left,v.top=(m.outerHeight-v.outerHeight)*s.y+g.top,v.left=(m.outerWidth-v.outerWidth)*s.x+g.left),a.css(_),("content"===d||"both"===d)&&(h=h.concat(["marginTop","marginBottom"]).concat(r),l=l.concat(["marginLeft","marginRight"]),a.find("*[width]").each(function(){var i=t(this),s=t.effects.scaledDimensions(i),o={height:s.height*n.from.y,width:s.width*n.from.x,outerHeight:s.outerHeight*n.from.y,outerWidth:s.outerWidth*n.from.x},a={height:s.height*n.to.y,width:s.width*n.to.x,outerHeight:s.height*n.to.y,outerWidth:s.width*n.to.x};n.from.y!==n.to.y&&(o=t.effects.setTransition(i,h,n.from.y,o),a=t.effects.setTransition(i,h,n.to.y,a)),n.from.x!==n.to.x&&(o=t.effects.setTransition(i,l,n.from.x,o),a=t.effects.setTransition(i,l,n.to.x,a)),u&&t.effects.saveStyle(i),i.css(o),i.animate(a,e.duration,e.easing,function(){u&&t.effects.restoreStyle(i)})})),a.animate(v,{queue:!1,duration:e.duration,easing:e.easing,complete:function(){var e=a.offset();0===v.opacity&&a.css("opacity",_.opacity),u||(a.css("position","static"===f?"relative":f).offset(e),t.effects.saveStyle(a)),i()}})}),t.effects.define("scale",function(e,i){var s=t(this),n=e.mode,o=parseInt(e.percent,10)||(0===parseInt(e.percent,10)?0:"effect"!==n?0:100),a=t.extend(!0,{from:t.effects.scaledDimensions(s),to:t.effects.scaledDimensions(s,o,e.direction||"both"),origin:e.origin||["middle","center"]},e);e.fade&&(a.from.opacity=1,a.to.opacity=0),t.effects.effect.size.call(this,a,i)}),t.effects.define("puff","hide",function(e,i){var s=t.extend(!0,{},e,{fade:!0,percent:parseInt(e.percent,10)||150});t.effects.effect.scale.call(this,s,i)}),t.effects.define("pulsate","show",function(e,i){var s=t(this),n=e.mode,o="show"===n,a="hide"===n,r=o||a,h=2*(e.times||5)+(r?1:0),l=e.duration/h,c=0,u=1,d=s.queue().length;for((o||!s.is(":visible"))&&(s.css("opacity",0).show(),c=1);h>u;u++)s.animate({opacity:c},l,e.easing),c=1-c;s.animate({opacity:c},l,e.easing),s.queue(i),t.effects.unshift(s,d,h+1)}),t.effects.define("shake",function(e,i){var s=1,n=t(this),o=e.direction||"left",a=e.distance||20,r=e.times||3,h=2*r+1,l=Math.round(e.duration/h),c="up"===o||"down"===o?"top":"left",u="up"===o||"left"===o,d={},p={},f={},g=n.queue().length;for(t.effects.createPlaceholder(n),d[c]=(u?"-=":"+=")+a,p[c]=(u?"+=":"-=")+2*a,f[c]=(u?"-=":"+=")+2*a,n.animate(d,l,e.easing);r>s;s++)n.animate(p,l,e.easing).animate(f,l,e.easing);n.animate(p,l,e.easing).animate(d,l/2,e.easing).queue(i),t.effects.unshift(n,g,h+1)}),t.effects.define("slide","show",function(e,i){var s,n,o=t(this),a={up:["bottom","top"],down:["top","bottom"],left:["right","left"],right:["left","right"]},r=e.mode,h=e.direction||"left",l="up"===h||"down"===h?"top":"left",c="up"===h||"left"===h,u=e.distance||o["top"===l?"outerHeight":"outerWidth"](!0),d={};t.effects.createPlaceholder(o),s=o.cssClip(),n=o.position()[l],d[l]=(c?-1:1)*u+n,d.clip=o.cssClip(),d.clip[a[h][1]]=d.clip[a[h][0]],"show"===r&&(o.cssClip(d.clip),o.css(l,d[l]),d.clip=s,d[l]=n),o.animate(d,{queue:!1,duration:e.duration,easing:e.easing,complete:i})});var f;t.uiBackCompat!==!1&&(f=t.effects.define("transfer",function(e,i){t(this).transfer(e,i)})),t.ui.focusable=function(i,s){var n,o,a,r,h,l=i.nodeName.toLowerCase();return"area"===l?(n=i.parentNode,o=n.name,i.href&&o&&"map"===n.nodeName.toLowerCase()?(a=t("img[usemap='#"+o+"']"),a.length>0&&a.is(":visible")):!1):(/^(input|select|textarea|button|object)$/.test(l)?(r=!i.disabled,r&&(h=t(i).closest("fieldset")[0],h&&(r=!h.disabled))):r="a"===l?i.href||s:s,r&&t(i).is(":visible")&&e(t(i)))},t.extend(t.expr[":"],{focusable:function(e){return t.ui.focusable(e,null!=t.attr(e,"tabindex"))}}),t.ui.focusable,t.fn.form=function(){return"string"==typeof this[0].form?this.closest("form"):t(this[0].form)},t.ui.formResetMixin={_formResetHandler:function(){var e=t(this);setTimeout(function(){var i=e.data("ui-form-reset-instances");t.each(i,function(){this.refresh()})})},_bindFormResetHandler:function(){if(this.form=this.element.form(),this.form.length){var t=this.form.data("ui-form-reset-instances")||[];t.length||this.form.on("reset.ui-form-reset",this._formResetHandler),t.push(this),this.form.data("ui-form-reset-instances",t)}},_unbindFormResetHandler:function(){if(this.form.length){var e=this.form.data("ui-form-reset-instances");e.splice(t.inArray(this,e),1),e.length?this.form.data("ui-form-reset-instances",e):this.form.removeData("ui-form-reset-instances").off("reset.ui-form-reset")}}},"1.7"===t.fn.jquery.substring(0,3)&&(t.each(["Width","Height"],function(e,i){function s(e,i,s,o){return t.each(n,function(){i-=parseFloat(t.css(e,"padding"+this))||0,s&&(i-=parseFloat(t.css(e,"border"+this+"Width"))||0),o&&(i-=parseFloat(t.css(e,"margin"+this))||0)}),i}var n="Width"===i?["Left","Right"]:["Top","Bottom"],o=i.toLowerCase(),a={innerWidth:t.fn.innerWidth,innerHeight:t.fn.innerHeight,outerWidth:t.fn.outerWidth,outerHeight:t.fn.outerHeight};t.fn["inner"+i]=function(e){return void 0===e?a["inner"+i].call(this):this.each(function(){t(this).css(o,s(this,e)+"px")})},t.fn["outer"+i]=function(e,n){return"number"!=typeof e?a["outer"+i].call(this,e):this.each(function(){t(this).css(o,s(this,e,!0,n)+"px")})}}),t.fn.addBack=function(t){return this.add(null==t?this.prevObject:this.prevObject.filter(t))}),t.ui.keyCode={BACKSPACE:8,COMMA:188,DELETE:46,DOWN:40,END:35,ENTER:13,ESCAPE:27,HOME:36,LEFT:37,PAGE_DOWN:34,PAGE_UP:33,PERIOD:190,RIGHT:39,SPACE:32,TAB:9,UP:38},t.ui.escapeSelector=function(){var t=/([!"#$%&'()*+,.\/:;<=>?@[\]^`{|}~])/g;return function(e){return e.replace(t,"\\$1")}}(),t.fn.labels=function(){var e,i,s,n,o;return this[0].labels&&this[0].labels.length?this.pushStack(this[0].labels):(n=this.eq(0).parents("label"),s=this.attr("id"),s&&(e=this.eq(0).parents().last(),o=e.add(e.length?e.siblings():this.siblings()),i="label[for='"+t.ui.escapeSelector(s)+"']",n=n.add(o.find(i).addBack(i))),this.pushStack(n))},t.fn.scrollParent=function(e){var i=this.css("position"),s="absolute"===i,n=e?/(auto|scroll|hidden)/:/(auto|scroll)/,o=this.parents().filter(function(){var e=t(this);return s&&"static"===e.css("position")?!1:n.test(e.css("overflow")+e.css("overflow-y")+e.css("overflow-x"))}).eq(0);return"fixed"!==i&&o.length?o:t(this[0].ownerDocument||document)},t.extend(t.expr[":"],{tabbable:function(e){var i=t.attr(e,"tabindex"),s=null!=i;return(!s||i>=0)&&t.ui.focusable(e,s)}}),t.fn.extend({uniqueId:function(){var t=0;return function(){return this.each(function(){this.id||(this.id="ui-id-"+ ++t)})}}(),removeUniqueId:function(){return this.each(function(){/^ui-id-\d+$/.test(this.id)&&t(this).removeAttr("id")})}}),t.widget("ui.accordion",{version:"1.12.1",options:{active:0,animate:{},classes:{"ui-accordion-header":"ui-corner-top","ui-accordion-header-collapsed":"ui-corner-all","ui-accordion-content":"ui-corner-bottom"},collapsible:!1,event:"click",header:"> li > :first-child, > :not(li):even",heightStyle:"auto",icons:{activeHeader:"ui-icon-triangle-1-s",header:"ui-icon-triangle-1-e"},activate:null,beforeActivate:null},hideProps:{borderTopWidth:"hide",borderBottomWidth:"hide",paddingTop:"hide",paddingBottom:"hide",height:"hide"},showProps:{borderTopWidth:"show",borderBottomWidth:"show",paddingTop:"show",paddingBottom:"show",height:"show"},_create:function(){var e=this.options;this.prevShow=this.prevHide=t(),this._addClass("ui-accordion","ui-widget ui-helper-reset"),this.element.attr("role","tablist"),e.collapsible||e.active!==!1&&null!=e.active||(e.active=0),this._processPanels(),0>e.active&&(e.active+=this.headers.length),this._refresh()},_getCreateEventData:function(){return{header:this.active,panel:this.active.length?this.active.next():t()}},_createIcons:function(){var e,i,s=this.options.icons;s&&(e=t("<span>"),this._addClass(e,"ui-accordion-header-icon","ui-icon "+s.header),e.prependTo(this.headers),i=this.active.children(".ui-accordion-header-icon"),this._removeClass(i,s.header)._addClass(i,null,s.activeHeader)._addClass(this.headers,"ui-accordion-icons"))},_destroyIcons:function(){this._removeClass(this.headers,"ui-accordion-icons"),this.headers.children(".ui-accordion-header-icon").remove()},_destroy:function(){var t;this.element.removeAttr("role"),this.headers.removeAttr("role aria-expanded aria-selected aria-controls tabIndex").removeUniqueId(),this._destroyIcons(),t=this.headers.next().css("display","").removeAttr("role aria-hidden aria-labelledby").removeUniqueId(),"content"!==this.options.heightStyle&&t.css("height","")},_setOption:function(t,e){return"active"===t?(this._activate(e),void 0):("event"===t&&(this.options.event&&this._off(this.headers,this.options.event),this._setupEvents(e)),this._super(t,e),"collapsible"!==t||e||this.options.active!==!1||this._activate(0),"icons"===t&&(this._destroyIcons(),e&&this._createIcons()),void 0)},_setOptionDisabled:function(t){this._super(t),this.element.attr("aria-disabled",t),this._toggleClass(null,"ui-state-disabled",!!t),this._toggleClass(this.headers.add(this.headers.next()),null,"ui-state-disabled",!!t)},_keydown:function(e){if(!e.altKey&&!e.ctrlKey){var i=t.ui.keyCode,s=this.headers.length,n=this.headers.index(e.target),o=!1;switch(e.keyCode){case i.RIGHT:case i.DOWN:o=this.headers[(n+1)%s];break;case i.LEFT:case i.UP:o=this.headers[(n-1+s)%s];break;case i.SPACE:case i.ENTER:this._eventHandler(e);break;case i.HOME:o=this.headers[0];break;case i.END:o=this.headers[s-1]}o&&(t(e.target).attr("tabIndex",-1),t(o).attr("tabIndex",0),t(o).trigger("focus"),e.preventDefault())}},_panelKeyDown:function(e){e.keyCode===t.ui.keyCode.UP&&e.ctrlKey&&t(e.currentTarget).prev().trigger("focus")},refresh:function(){var e=this.options;this._processPanels(),e.active===!1&&e.collapsible===!0||!this.headers.length?(e.active=!1,this.active=t()):e.active===!1?this._activate(0):this.active.length&&!t.contains(this.element[0],this.active[0])?this.headers.length===this.headers.find(".ui-state-disabled").length?(e.active=!1,this.active=t()):this._activate(Math.max(0,e.active-1)):e.active=this.headers.index(this.active),this._destroyIcons(),this._refresh()},_processPanels:function(){var t=this.headers,e=this.panels;this.headers=this.element.find(this.options.header),this._addClass(this.headers,"ui-accordion-header ui-accordion-header-collapsed","ui-state-default"),this.panels=this.headers.next().filter(":not(.ui-accordion-content-active)").hide(),this._addClass(this.panels,"ui-accordion-content","ui-helper-reset ui-widget-content"),e&&(this._off(t.not(this.headers)),this._off(e.not(this.panels)))},_refresh:function(){var e,i=this.options,s=i.heightStyle,n=this.element.parent();this.active=this._findActive(i.active),this._addClass(this.active,"ui-accordion-header-active","ui-state-active")._removeClass(this.active,"ui-accordion-header-collapsed"),this._addClass(this.active.next(),"ui-accordion-content-active"),this.active.next().show(),this.headers.attr("role","tab").each(function(){var e=t(this),i=e.uniqueId().attr("id"),s=e.next(),n=s.uniqueId().attr("id");e.attr("aria-controls",n),s.attr("aria-labelledby",i)}).next().attr("role","tabpanel"),this.headers.not(this.active).attr({"aria-selected":"false","aria-expanded":"false",tabIndex:-1}).next().attr({"aria-hidden":"true"}).hide(),this.active.length?this.active.attr({"aria-selected":"true","aria-expanded":"true",tabIndex:0}).next().attr({"aria-hidden":"false"}):this.headers.eq(0).attr("tabIndex",0),this._createIcons(),this._setupEvents(i.event),"fill"===s?(e=n.height(),this.element.siblings(":visible").each(function(){var i=t(this),s=i.css("position");"absolute"!==s&&"fixed"!==s&&(e-=i.outerHeight(!0))}),this.headers.each(function(){e-=t(this).outerHeight(!0)}),this.headers.next().each(function(){t(this).height(Math.max(0,e-t(this).innerHeight()+t(this).height()))}).css("overflow","auto")):"auto"===s&&(e=0,this.headers.next().each(function(){var i=t(this).is(":visible");i||t(this).show(),e=Math.max(e,t(this).css("height","").height()),i||t(this).hide()}).height(e))},_activate:function(e){var i=this._findActive(e)[0];i!==this.active[0]&&(i=i||this.active[0],this._eventHandler({target:i,currentTarget:i,preventDefault:t.noop}))},_findActive:function(e){return"number"==typeof e?this.headers.eq(e):t()},_setupEvents:function(e){var i={keydown:"_keydown"};e&&t.each(e.split(" "),function(t,e){i[e]="_eventHandler"}),this._off(this.headers.add(this.headers.next())),this._on(this.headers,i),this._on(this.headers.next(),{keydown:"_panelKeyDown"}),this._hoverable(this.headers),this._focusable(this.headers)},_eventHandler:function(e){var i,s,n=this.options,o=this.active,a=t(e.currentTarget),r=a[0]===o[0],h=r&&n.collapsible,l=h?t():a.next(),c=o.next(),u={oldHeader:o,oldPanel:c,newHeader:h?t():a,newPanel:l};e.preventDefault(),r&&!n.collapsible||this._trigger("beforeActivate",e,u)===!1||(n.active=h?!1:this.headers.index(a),this.active=r?t():a,this._toggle(u),this._removeClass(o,"ui-accordion-header-active","ui-state-active"),n.icons&&(i=o.children(".ui-accordion-header-icon"),this._removeClass(i,null,n.icons.activeHeader)._addClass(i,null,n.icons.header)),r||(this._removeClass(a,"ui-accordion-header-collapsed")._addClass(a,"ui-accordion-header-active","ui-state-active"),n.icons&&(s=a.children(".ui-accordion-header-icon"),this._removeClass(s,null,n.icons.header)._addClass(s,null,n.icons.activeHeader)),this._addClass(a.next(),"ui-accordion-content-active")))},_toggle:function(e){var i=e.newPanel,s=this.prevShow.length?this.prevShow:e.oldPanel;this.prevShow.add(this.prevHide).stop(!0,!0),this.prevShow=i,this.prevHide=s,this.options.animate?this._animate(i,s,e):(s.hide(),i.show(),this._toggleComplete(e)),s.attr({"aria-hidden":"true"}),s.prev().attr({"aria-selected":"false","aria-expanded":"false"}),i.length&&s.length?s.prev().attr({tabIndex:-1,"aria-expanded":"false"}):i.length&&this.headers.filter(function(){return 0===parseInt(t(this).attr("tabIndex"),10)}).attr("tabIndex",-1),i.attr("aria-hidden","false").prev().attr({"aria-selected":"true","aria-expanded":"true",tabIndex:0})},_animate:function(t,e,i){var s,n,o,a=this,r=0,h=t.css("box-sizing"),l=t.length&&(!e.length||t.index()<e.index()),c=this.options.animate||{},u=l&&c.down||c,d=function(){a._toggleComplete(i)};return"number"==typeof u&&(o=u),"string"==typeof u&&(n=u),n=n||u.easing||c.easing,o=o||u.duration||c.duration,e.length?t.length?(s=t.show().outerHeight(),e.animate(this.hideProps,{duration:o,easing:n,step:function(t,e){e.now=Math.round(t)}}),t.hide().animate(this.showProps,{duration:o,easing:n,complete:d,step:function(t,i){i.now=Math.round(t),"height"!==i.prop?"content-box"===h&&(r+=i.now):"content"!==a.options.heightStyle&&(i.now=Math.round(s-e.outerHeight()-r),r=0)}}),void 0):e.animate(this.hideProps,o,n,d):t.animate(this.showProps,o,n,d)},_toggleComplete:function(t){var e=t.oldPanel,i=e.prev();this._removeClass(e,"ui-accordion-content-active"),this._removeClass(i,"ui-accordion-header-active")._addClass(i,"ui-accordion-header-collapsed"),e.length&&(e.parent()[0].className=e.parent()[0].className),this._trigger("activate",null,t)}}),t.ui.safeActiveElement=function(t){var e;try{e=t.activeElement}catch(i){e=t.body}return e||(e=t.body),e.nodeName||(e=t.body),e},t.widget("ui.menu",{version:"1.12.1",defaultElement:"<ul>",delay:300,options:{icons:{submenu:"ui-icon-caret-1-e"},items:"> *",menus:"ul",position:{my:"left top",at:"right top"},role:"menu",blur:null,focus:null,select:null},_create:function(){this.activeMenu=this.element,this.mouseHandled=!1,this.element.uniqueId().attr({role:this.options.role,tabIndex:0}),this._addClass("ui-menu","ui-widget ui-widget-content"),this._on({"mousedown .ui-menu-item":function(t){t.preventDefault()},"click .ui-menu-item":function(e){var i=t(e.target),s=t(t.ui.safeActiveElement(this.document[0]));!this.mouseHandled&&i.not(".ui-state-disabled").length&&(this.select(e),e.isPropagationStopped()||(this.mouseHandled=!0),i.has(".ui-menu").length?this.expand(e):!this.element.is(":focus")&&s.closest(".ui-menu").length&&(this.element.trigger("focus",[!0]),this.active&&1===this.active.parents(".ui-menu").length&&clearTimeout(this.timer)))},"mouseenter .ui-menu-item":function(e){if(!this.previousFilter){var i=t(e.target).closest(".ui-menu-item"),s=t(e.currentTarget);i[0]===s[0]&&(this._removeClass(s.siblings().children(".ui-state-active"),null,"ui-state-active"),this.focus(e,s))}},mouseleave:"collapseAll","mouseleave .ui-menu":"collapseAll",focus:function(t,e){var i=this.active||this.element.find(this.options.items).eq(0);e||this.focus(t,i)},blur:function(e){this._delay(function(){var i=!t.contains(this.element[0],t.ui.safeActiveElement(this.document[0]));i&&this.collapseAll(e)})},keydown:"_keydown"}),this.refresh(),this._on(this.document,{click:function(t){this._closeOnDocumentClick(t)&&this.collapseAll(t),this.mouseHandled=!1}})},_destroy:function(){var e=this.element.find(".ui-menu-item").removeAttr("role aria-disabled"),i=e.children(".ui-menu-item-wrapper").removeUniqueId().removeAttr("tabIndex role aria-haspopup");this.element.removeAttr("aria-activedescendant").find(".ui-menu").addBack().removeAttr("role aria-labelledby aria-expanded aria-hidden aria-disabled tabIndex").removeUniqueId().show(),i.children().each(function(){var e=t(this);e.data("ui-menu-submenu-caret")&&e.remove()})},_keydown:function(e){var i,s,n,o,a=!0;switch(e.keyCode){case t.ui.keyCode.PAGE_UP:this.previousPage(e);break;case t.ui.keyCode.PAGE_DOWN:this.nextPage(e);break;case t.ui.keyCode.HOME:this._move("first","first",e);break;case t.ui.keyCode.END:this._move("last","last",e);break;case t.ui.keyCode.UP:this.previous(e);break;case t.ui.keyCode.DOWN:this.next(e);break;case t.ui.keyCode.LEFT:this.collapse(e);break;case t.ui.keyCode.RIGHT:this.active&&!this.active.is(".ui-state-disabled")&&this.expand(e);break;case t.ui.keyCode.ENTER:case t.ui.keyCode.SPACE:this._activate(e);break;case t.ui.keyCode.ESCAPE:this.collapse(e);break;default:a=!1,s=this.previousFilter||"",o=!1,n=e.keyCode>=96&&105>=e.keyCode?""+(e.keyCode-96):String.fromCharCode(e.keyCode),clearTimeout(this.filterTimer),n===s?o=!0:n=s+n,i=this._filterMenuItems(n),i=o&&-1!==i.index(this.active.next())?this.active.nextAll(".ui-menu-item"):i,i.length||(n=String.fromCharCode(e.keyCode),i=this._filterMenuItems(n)),i.length?(this.focus(e,i),this.previousFilter=n,this.filterTimer=this._delay(function(){delete this.previousFilter},1e3)):delete this.previousFilter}a&&e.preventDefault()},_activate:function(t){this.active&&!this.active.is(".ui-state-disabled")&&(this.active.children("[aria-haspopup='true']").length?this.expand(t):this.select(t))},refresh:function(){var e,i,s,n,o,a=this,r=this.options.icons.submenu,h=this.element.find(this.options.menus);this._toggleClass("ui-menu-icons",null,!!this.element.find(".ui-icon").length),s=h.filter(":not(.ui-menu)").hide().attr({role:this.options.role,"aria-hidden":"true","aria-expanded":"false"}).each(function(){var e=t(this),i=e.prev(),s=t("<span>").data("ui-menu-submenu-caret",!0);a._addClass(s,"ui-menu-icon","ui-icon "+r),i.attr("aria-haspopup","true").prepend(s),e.attr("aria-labelledby",i.attr("id"))}),this._addClass(s,"ui-menu","ui-widget ui-widget-content ui-front"),e=h.add(this.element),i=e.find(this.options.items),i.not(".ui-menu-item").each(function(){var e=t(this);a._isDivider(e)&&a._addClass(e,"ui-menu-divider","ui-widget-content")}),n=i.not(".ui-menu-item, .ui-menu-divider"),o=n.children().not(".ui-menu").uniqueId().attr({tabIndex:-1,role:this._itemRole()}),this._addClass(n,"ui-menu-item")._addClass(o,"ui-menu-item-wrapper"),i.filter(".ui-state-disabled").attr("aria-disabled","true"),this.active&&!t.contains(this.element[0],this.active[0])&&this.blur()},_itemRole:function(){return{menu:"menuitem",listbox:"option"}[this.options.role]},_setOption:function(t,e){if("icons"===t){var i=this.element.find(".ui-menu-icon");this._removeClass(i,null,this.options.icons.submenu)._addClass(i,null,e.submenu)}this._super(t,e)},_setOptionDisabled:function(t){this._super(t),this.element.attr("aria-disabled",t+""),this._toggleClass(null,"ui-state-disabled",!!t)},focus:function(t,e){var i,s,n;this.blur(t,t&&"focus"===t.type),this._scrollIntoView(e),this.active=e.first(),s=this.active.children(".ui-menu-item-wrapper"),this._addClass(s,null,"ui-state-active"),this.options.role&&this.element.attr("aria-activedescendant",s.attr("id")),n=this.active.parent().closest(".ui-menu-item").children(".ui-menu-item-wrapper"),this._addClass(n,null,"ui-state-active"),t&&"keydown"===t.type?this._close():this.timer=this._delay(function(){this._close()},this.delay),i=e.children(".ui-menu"),i.length&&t&&/^mouse/.test(t.type)&&this._startOpening(i),this.activeMenu=e.parent(),this._trigger("focus",t,{item:e})},_scrollIntoView:function(e){var i,s,n,o,a,r;this._hasScroll()&&(i=parseFloat(t.css(this.activeMenu[0],"borderTopWidth"))||0,s=parseFloat(t.css(this.activeMenu[0],"paddingTop"))||0,n=e.offset().top-this.activeMenu.offset().top-i-s,o=this.activeMenu.scrollTop(),a=this.activeMenu.height(),r=e.outerHeight(),0>n?this.activeMenu.scrollTop(o+n):n+r>a&&this.activeMenu.scrollTop(o+n-a+r))},blur:function(t,e){e||clearTimeout(this.timer),this.active&&(this._removeClass(this.active.children(".ui-menu-item-wrapper"),null,"ui-state-active"),this._trigger("blur",t,{item:this.active}),this.active=null)},_startOpening:function(t){clearTimeout(this.timer),"true"===t.attr("aria-hidden")&&(this.timer=this._delay(function(){this._close(),this._open(t)},this.delay))},_open:function(e){var i=t.extend({of:this.active},this.options.position);clearTimeout(this.timer),this.element.find(".ui-menu").not(e.parents(".ui-menu")).hide().attr("aria-hidden","true"),e.show().removeAttr("aria-hidden").attr("aria-expanded","true").position(i)},collapseAll:function(e,i){clearTimeout(this.timer),this.timer=this._delay(function(){var s=i?this.element:t(e&&e.target).closest(this.element.find(".ui-menu"));s.length||(s=this.element),this._close(s),this.blur(e),this._removeClass(s.find(".ui-state-active"),null,"ui-state-active"),this.activeMenu=s},this.delay)},_close:function(t){t||(t=this.active?this.active.parent():this.element),t.find(".ui-menu").hide().attr("aria-hidden","true").attr("aria-expanded","false")},_closeOnDocumentClick:function(e){return!t(e.target).closest(".ui-menu").length},_isDivider:function(t){return!/[^\-\u2014\u2013\s]/.test(t.text())},collapse:function(t){var e=this.active&&this.active.parent().closest(".ui-menu-item",this.element);e&&e.length&&(this._close(),this.focus(t,e))},expand:function(t){var e=this.active&&this.active.children(".ui-menu ").find(this.options.items).first();e&&e.length&&(this._open(e.parent()),this._delay(function(){this.focus(t,e)}))},next:function(t){this._move("next","first",t)},previous:function(t){this._move("prev","last",t)},isFirstItem:function(){return this.active&&!this.active.prevAll(".ui-menu-item").length},isLastItem:function(){return this.active&&!this.active.nextAll(".ui-menu-item").length},_move:function(t,e,i){var s;this.active&&(s="first"===t||"last"===t?this.active["first"===t?"prevAll":"nextAll"](".ui-menu-item").eq(-1):this.active[t+"All"](".ui-menu-item").eq(0)),s&&s.length&&this.active||(s=this.activeMenu.find(this.options.items)[e]()),this.focus(i,s)},nextPage:function(e){var i,s,n;return this.active?(this.isLastItem()||(this._hasScroll()?(s=this.active.offset().top,n=this.element.height(),this.active.nextAll(".ui-menu-item").each(function(){return i=t(this),0>i.offset().top-s-n}),this.focus(e,i)):this.focus(e,this.activeMenu.find(this.options.items)[this.active?"last":"first"]())),void 0):(this.next(e),void 0)},previousPage:function(e){var i,s,n;return this.active?(this.isFirstItem()||(this._hasScroll()?(s=this.active.offset().top,n=this.element.height(),this.active.prevAll(".ui-menu-item").each(function(){return i=t(this),i.offset().top-s+n>0}),this.focus(e,i)):this.focus(e,this.activeMenu.find(this.options.items).first())),void 0):(this.next(e),void 0)},_hasScroll:function(){return this.element.outerHeight()<this.element.prop("scrollHeight")},select:function(e){this.active=this.active||t(e.target).closest(".ui-menu-item");var i={item:this.active};this.active.has(".ui-menu").length||this.collapseAll(e,!0),this._trigger("select",e,i)},_filterMenuItems:function(e){var i=e.replace(/[\-\[\]{}()*+?.,\\\^$|#\s]/g,"\\$&"),s=RegExp("^"+i,"i");return this.activeMenu.find(this.options.items).filter(".ui-menu-item").filter(function(){return s.test(t.trim(t(this).children(".ui-menu-item-wrapper").text()))})}}),t.widget("ui.autocomplete",{version:"1.12.1",defaultElement:"<input>",options:{appendTo:null,autoFocus:!1,delay:300,minLength:1,position:{my:"left top",at:"left bottom",collision:"none"},source:null,change:null,close:null,focus:null,open:null,response:null,search:null,select:null},requestIndex:0,pending:0,_create:function(){var e,i,s,n=this.element[0].nodeName.toLowerCase(),o="textarea"===n,a="input"===n;
this.isMultiLine=o||!a&&this._isContentEditable(this.element),this.valueMethod=this.element[o||a?"val":"text"],this.isNewMenu=!0,this._addClass("ui-autocomplete-input"),this.element.attr("autocomplete","off"),this._on(this.element,{keydown:function(n){if(this.element.prop("readOnly"))return e=!0,s=!0,i=!0,void 0;e=!1,s=!1,i=!1;var o=t.ui.keyCode;switch(n.keyCode){case o.PAGE_UP:e=!0,this._move("previousPage",n);break;case o.PAGE_DOWN:e=!0,this._move("nextPage",n);break;case o.UP:e=!0,this._keyEvent("previous",n);break;case o.DOWN:e=!0,this._keyEvent("next",n);break;case o.ENTER:this.menu.active&&(e=!0,n.preventDefault(),this.menu.select(n));break;case o.TAB:this.menu.active&&this.menu.select(n);break;case o.ESCAPE:this.menu.element.is(":visible")&&(this.isMultiLine||this._value(this.term),this.close(n),n.preventDefault());break;default:i=!0,this._searchTimeout(n)}},keypress:function(s){if(e)return e=!1,(!this.isMultiLine||this.menu.element.is(":visible"))&&s.preventDefault(),void 0;if(!i){var n=t.ui.keyCode;switch(s.keyCode){case n.PAGE_UP:this._move("previousPage",s);break;case n.PAGE_DOWN:this._move("nextPage",s);break;case n.UP:this._keyEvent("previous",s);break;case n.DOWN:this._keyEvent("next",s)}}},input:function(t){return s?(s=!1,t.preventDefault(),void 0):(this._searchTimeout(t),void 0)},focus:function(){this.selectedItem=null,this.previous=this._value()},blur:function(t){return this.cancelBlur?(delete this.cancelBlur,void 0):(clearTimeout(this.searching),this.close(t),this._change(t),void 0)}}),this._initSource(),this.menu=t("<ul>").appendTo(this._appendTo()).menu({role:null}).hide().menu("instance"),this._addClass(this.menu.element,"ui-autocomplete","ui-front"),this._on(this.menu.element,{mousedown:function(e){e.preventDefault(),this.cancelBlur=!0,this._delay(function(){delete this.cancelBlur,this.element[0]!==t.ui.safeActiveElement(this.document[0])&&this.element.trigger("focus")})},menufocus:function(e,i){var s,n;return this.isNewMenu&&(this.isNewMenu=!1,e.originalEvent&&/^mouse/.test(e.originalEvent.type))?(this.menu.blur(),this.document.one("mousemove",function(){t(e.target).trigger(e.originalEvent)}),void 0):(n=i.item.data("ui-autocomplete-item"),!1!==this._trigger("focus",e,{item:n})&&e.originalEvent&&/^key/.test(e.originalEvent.type)&&this._value(n.value),s=i.item.attr("aria-label")||n.value,s&&t.trim(s).length&&(this.liveRegion.children().hide(),t("<div>").text(s).appendTo(this.liveRegion)),void 0)},menuselect:function(e,i){var s=i.item.data("ui-autocomplete-item"),n=this.previous;this.element[0]!==t.ui.safeActiveElement(this.document[0])&&(this.element.trigger("focus"),this.previous=n,this._delay(function(){this.previous=n,this.selectedItem=s})),!1!==this._trigger("select",e,{item:s})&&this._value(s.value),this.term=this._value(),this.close(e),this.selectedItem=s}}),this.liveRegion=t("<div>",{role:"status","aria-live":"assertive","aria-relevant":"additions"}).appendTo(this.document[0].body),this._addClass(this.liveRegion,null,"ui-helper-hidden-accessible"),this._on(this.window,{beforeunload:function(){this.element.removeAttr("autocomplete")}})},_destroy:function(){clearTimeout(this.searching),this.element.removeAttr("autocomplete"),this.menu.element.remove(),this.liveRegion.remove()},_setOption:function(t,e){this._super(t,e),"source"===t&&this._initSource(),"appendTo"===t&&this.menu.element.appendTo(this._appendTo()),"disabled"===t&&e&&this.xhr&&this.xhr.abort()},_isEventTargetInWidget:function(e){var i=this.menu.element[0];return e.target===this.element[0]||e.target===i||t.contains(i,e.target)},_closeOnClickOutside:function(t){this._isEventTargetInWidget(t)||this.close()},_appendTo:function(){var e=this.options.appendTo;return e&&(e=e.jquery||e.nodeType?t(e):this.document.find(e).eq(0)),e&&e[0]||(e=this.element.closest(".ui-front, dialog")),e.length||(e=this.document[0].body),e},_initSource:function(){var e,i,s=this;t.isArray(this.options.source)?(e=this.options.source,this.source=function(i,s){s(t.ui.autocomplete.filter(e,i.term))}):"string"==typeof this.options.source?(i=this.options.source,this.source=function(e,n){s.xhr&&s.xhr.abort(),s.xhr=t.ajax({url:i,data:e,dataType:"json",success:function(t){n(t)},error:function(){n([])}})}):this.source=this.options.source},_searchTimeout:function(t){clearTimeout(this.searching),this.searching=this._delay(function(){var e=this.term===this._value(),i=this.menu.element.is(":visible"),s=t.altKey||t.ctrlKey||t.metaKey||t.shiftKey;(!e||e&&!i&&!s)&&(this.selectedItem=null,this.search(null,t))},this.options.delay)},search:function(t,e){return t=null!=t?t:this._value(),this.term=this._value(),t.length<this.options.minLength?this.close(e):this._trigger("search",e)!==!1?this._search(t):void 0},_search:function(t){this.pending++,this._addClass("ui-autocomplete-loading"),this.cancelSearch=!1,this.source({term:t},this._response())},_response:function(){var e=++this.requestIndex;return t.proxy(function(t){e===this.requestIndex&&this.__response(t),this.pending--,this.pending||this._removeClass("ui-autocomplete-loading")},this)},__response:function(t){t&&(t=this._normalize(t)),this._trigger("response",null,{content:t}),!this.options.disabled&&t&&t.length&&!this.cancelSearch?(this._suggest(t),this._trigger("open")):this._close()},close:function(t){this.cancelSearch=!0,this._close(t)},_close:function(t){this._off(this.document,"mousedown"),this.menu.element.is(":visible")&&(this.menu.element.hide(),this.menu.blur(),this.isNewMenu=!0,this._trigger("close",t))},_change:function(t){this.previous!==this._value()&&this._trigger("change",t,{item:this.selectedItem})},_normalize:function(e){return e.length&&e[0].label&&e[0].value?e:t.map(e,function(e){return"string"==typeof e?{label:e,value:e}:t.extend({},e,{label:e.label||e.value,value:e.value||e.label})})},_suggest:function(e){var i=this.menu.element.empty();this._renderMenu(i,e),this.isNewMenu=!0,this.menu.refresh(),i.show(),this._resizeMenu(),i.position(t.extend({of:this.element},this.options.position)),this.options.autoFocus&&this.menu.next(),this._on(this.document,{mousedown:"_closeOnClickOutside"})},_resizeMenu:function(){var t=this.menu.element;t.outerWidth(Math.max(t.width("").outerWidth()+1,this.element.outerWidth()))},_renderMenu:function(e,i){var s=this;t.each(i,function(t,i){s._renderItemData(e,i)})},_renderItemData:function(t,e){return this._renderItem(t,e).data("ui-autocomplete-item",e)},_renderItem:function(e,i){return t("<li>").append(t("<div>").text(i.label)).appendTo(e)},_move:function(t,e){return this.menu.element.is(":visible")?this.menu.isFirstItem()&&/^previous/.test(t)||this.menu.isLastItem()&&/^next/.test(t)?(this.isMultiLine||this._value(this.term),this.menu.blur(),void 0):(this.menu[t](e),void 0):(this.search(null,e),void 0)},widget:function(){return this.menu.element},_value:function(){return this.valueMethod.apply(this.element,arguments)},_keyEvent:function(t,e){(!this.isMultiLine||this.menu.element.is(":visible"))&&(this._move(t,e),e.preventDefault())},_isContentEditable:function(t){if(!t.length)return!1;var e=t.prop("contentEditable");return"inherit"===e?this._isContentEditable(t.parent()):"true"===e}}),t.extend(t.ui.autocomplete,{escapeRegex:function(t){return t.replace(/[\-\[\]{}()*+?.,\\\^$|#\s]/g,"\\$&")},filter:function(e,i){var s=RegExp(t.ui.autocomplete.escapeRegex(i),"i");return t.grep(e,function(t){return s.test(t.label||t.value||t)})}}),t.widget("ui.autocomplete",t.ui.autocomplete,{options:{messages:{noResults:"No search results.",results:function(t){return t+(t>1?" results are":" result is")+" available, use up and down arrow keys to navigate."}}},__response:function(e){var i;this._superApply(arguments),this.options.disabled||this.cancelSearch||(i=e&&e.length?this.options.messages.results(e.length):this.options.messages.noResults,this.liveRegion.children().hide(),t("<div>").text(i).appendTo(this.liveRegion))}}),t.ui.autocomplete;var g=/ui-corner-([a-z]){2,6}/g;t.widget("ui.controlgroup",{version:"1.12.1",defaultElement:"<div>",options:{direction:"horizontal",disabled:null,onlyVisible:!0,items:{button:"input[type=button], input[type=submit], input[type=reset], button, a",controlgroupLabel:".ui-controlgroup-label",checkboxradio:"input[type='checkbox'], input[type='radio']",selectmenu:"select",spinner:".ui-spinner-input"}},_create:function(){this._enhance()},_enhance:function(){this.element.attr("role","toolbar"),this.refresh()},_destroy:function(){this._callChildMethod("destroy"),this.childWidgets.removeData("ui-controlgroup-data"),this.element.removeAttr("role"),this.options.items.controlgroupLabel&&this.element.find(this.options.items.controlgroupLabel).find(".ui-controlgroup-label-contents").contents().unwrap()},_initWidgets:function(){var e=this,i=[];t.each(this.options.items,function(s,n){var o,a={};return n?"controlgroupLabel"===s?(o=e.element.find(n),o.each(function(){var e=t(this);e.children(".ui-controlgroup-label-contents").length||e.contents().wrapAll("<span class='ui-controlgroup-label-contents'></span>")}),e._addClass(o,null,"ui-widget ui-widget-content ui-state-default"),i=i.concat(o.get()),void 0):(t.fn[s]&&(a=e["_"+s+"Options"]?e["_"+s+"Options"]("middle"):{classes:{}},e.element.find(n).each(function(){var n=t(this),o=n[s]("instance"),r=t.widget.extend({},a);if("button"!==s||!n.parent(".ui-spinner").length){o||(o=n[s]()[s]("instance")),o&&(r.classes=e._resolveClassesValues(r.classes,o)),n[s](r);var h=n[s]("widget");t.data(h[0],"ui-controlgroup-data",o?o:n[s]("instance")),i.push(h[0])}})),void 0):void 0}),this.childWidgets=t(t.unique(i)),this._addClass(this.childWidgets,"ui-controlgroup-item")},_callChildMethod:function(e){this.childWidgets.each(function(){var i=t(this),s=i.data("ui-controlgroup-data");s&&s[e]&&s[e]()})},_updateCornerClass:function(t,e){var i="ui-corner-top ui-corner-bottom ui-corner-left ui-corner-right ui-corner-all",s=this._buildSimpleOptions(e,"label").classes.label;this._removeClass(t,null,i),this._addClass(t,null,s)},_buildSimpleOptions:function(t,e){var i="vertical"===this.options.direction,s={classes:{}};return s.classes[e]={middle:"",first:"ui-corner-"+(i?"top":"left"),last:"ui-corner-"+(i?"bottom":"right"),only:"ui-corner-all"}[t],s},_spinnerOptions:function(t){var e=this._buildSimpleOptions(t,"ui-spinner");return e.classes["ui-spinner-up"]="",e.classes["ui-spinner-down"]="",e},_buttonOptions:function(t){return this._buildSimpleOptions(t,"ui-button")},_checkboxradioOptions:function(t){return this._buildSimpleOptions(t,"ui-checkboxradio-label")},_selectmenuOptions:function(t){var e="vertical"===this.options.direction;return{width:e?"auto":!1,classes:{middle:{"ui-selectmenu-button-open":"","ui-selectmenu-button-closed":""},first:{"ui-selectmenu-button-open":"ui-corner-"+(e?"top":"tl"),"ui-selectmenu-button-closed":"ui-corner-"+(e?"top":"left")},last:{"ui-selectmenu-button-open":e?"":"ui-corner-tr","ui-selectmenu-button-closed":"ui-corner-"+(e?"bottom":"right")},only:{"ui-selectmenu-button-open":"ui-corner-top","ui-selectmenu-button-closed":"ui-corner-all"}}[t]}},_resolveClassesValues:function(e,i){var s={};return t.each(e,function(n){var o=i.options.classes[n]||"";o=t.trim(o.replace(g,"")),s[n]=(o+" "+e[n]).replace(/\s+/g," ")}),s},_setOption:function(t,e){return"direction"===t&&this._removeClass("ui-controlgroup-"+this.options.direction),this._super(t,e),"disabled"===t?(this._callChildMethod(e?"disable":"enable"),void 0):(this.refresh(),void 0)},refresh:function(){var e,i=this;this._addClass("ui-controlgroup ui-controlgroup-"+this.options.direction),"horizontal"===this.options.direction&&this._addClass(null,"ui-helper-clearfix"),this._initWidgets(),e=this.childWidgets,this.options.onlyVisible&&(e=e.filter(":visible")),e.length&&(t.each(["first","last"],function(t,s){var n=e[s]().data("ui-controlgroup-data");if(n&&i["_"+n.widgetName+"Options"]){var o=i["_"+n.widgetName+"Options"](1===e.length?"only":s);o.classes=i._resolveClassesValues(o.classes,n),n.element[n.widgetName](o)}else i._updateCornerClass(e[s](),s)}),this._callChildMethod("refresh"))}}),t.widget("ui.checkboxradio",[t.ui.formResetMixin,{version:"1.12.1",options:{disabled:null,label:null,icon:!0,classes:{"ui-checkboxradio-label":"ui-corner-all","ui-checkboxradio-icon":"ui-corner-all"}},_getCreateOptions:function(){var e,i,s=this,n=this._super()||{};return this._readType(),i=this.element.labels(),this.label=t(i[i.length-1]),this.label.length||t.error("No label found for checkboxradio widget"),this.originalLabel="",this.label.contents().not(this.element[0]).each(function(){s.originalLabel+=3===this.nodeType?t(this).text():this.outerHTML}),this.originalLabel&&(n.label=this.originalLabel),e=this.element[0].disabled,null!=e&&(n.disabled=e),n},_create:function(){var t=this.element[0].checked;this._bindFormResetHandler(),null==this.options.disabled&&(this.options.disabled=this.element[0].disabled),this._setOption("disabled",this.options.disabled),this._addClass("ui-checkboxradio","ui-helper-hidden-accessible"),this._addClass(this.label,"ui-checkboxradio-label","ui-button ui-widget"),"radio"===this.type&&this._addClass(this.label,"ui-checkboxradio-radio-label"),this.options.label&&this.options.label!==this.originalLabel?this._updateLabel():this.originalLabel&&(this.options.label=this.originalLabel),this._enhance(),t&&(this._addClass(this.label,"ui-checkboxradio-checked","ui-state-active"),this.icon&&this._addClass(this.icon,null,"ui-state-hover")),this._on({change:"_toggleClasses",focus:function(){this._addClass(this.label,null,"ui-state-focus ui-visual-focus")},blur:function(){this._removeClass(this.label,null,"ui-state-focus ui-visual-focus")}})},_readType:function(){var e=this.element[0].nodeName.toLowerCase();this.type=this.element[0].type,"input"===e&&/radio|checkbox/.test(this.type)||t.error("Can't create checkboxradio on element.nodeName="+e+" and element.type="+this.type)},_enhance:function(){this._updateIcon(this.element[0].checked)},widget:function(){return this.label},_getRadioGroup:function(){var e,i=this.element[0].name,s="input[name='"+t.ui.escapeSelector(i)+"']";return i?(e=this.form.length?t(this.form[0].elements).filter(s):t(s).filter(function(){return 0===t(this).form().length}),e.not(this.element)):t([])},_toggleClasses:function(){var e=this.element[0].checked;this._toggleClass(this.label,"ui-checkboxradio-checked","ui-state-active",e),this.options.icon&&"checkbox"===this.type&&this._toggleClass(this.icon,null,"ui-icon-check ui-state-checked",e)._toggleClass(this.icon,null,"ui-icon-blank",!e),"radio"===this.type&&this._getRadioGroup().each(function(){var e=t(this).checkboxradio("instance");e&&e._removeClass(e.label,"ui-checkboxradio-checked","ui-state-active")})},_destroy:function(){this._unbindFormResetHandler(),this.icon&&(this.icon.remove(),this.iconSpace.remove())},_setOption:function(t,e){return"label"!==t||e?(this._super(t,e),"disabled"===t?(this._toggleClass(this.label,null,"ui-state-disabled",e),this.element[0].disabled=e,void 0):(this.refresh(),void 0)):void 0},_updateIcon:function(e){var i="ui-icon ui-icon-background ";this.options.icon?(this.icon||(this.icon=t("<span>"),this.iconSpace=t("<span> </span>"),this._addClass(this.iconSpace,"ui-checkboxradio-icon-space")),"checkbox"===this.type?(i+=e?"ui-icon-check ui-state-checked":"ui-icon-blank",this._removeClass(this.icon,null,e?"ui-icon-blank":"ui-icon-check")):i+="ui-icon-blank",this._addClass(this.icon,"ui-checkboxradio-icon",i),e||this._removeClass(this.icon,null,"ui-icon-check ui-state-checked"),this.icon.prependTo(this.label).after(this.iconSpace)):void 0!==this.icon&&(this.icon.remove(),this.iconSpace.remove(),delete this.icon)},_updateLabel:function(){var t=this.label.contents().not(this.element[0]);this.icon&&(t=t.not(this.icon[0])),this.iconSpace&&(t=t.not(this.iconSpace[0])),t.remove(),this.label.append(this.options.label)},refresh:function(){var t=this.element[0].checked,e=this.element[0].disabled;this._updateIcon(t),this._toggleClass(this.label,"ui-checkboxradio-checked","ui-state-active",t),null!==this.options.label&&this._updateLabel(),e!==this.options.disabled&&this._setOptions({disabled:e})}}]),t.ui.checkboxradio,t.widget("ui.button",{version:"1.12.1",defaultElement:"<button>",options:{classes:{"ui-button":"ui-corner-all"},disabled:null,icon:null,iconPosition:"beginning",label:null,showLabel:!0},_getCreateOptions:function(){var t,e=this._super()||{};return this.isInput=this.element.is("input"),t=this.element[0].disabled,null!=t&&(e.disabled=t),this.originalLabel=this.isInput?this.element.val():this.element.html(),this.originalLabel&&(e.label=this.originalLabel),e},_create:function(){!this.option.showLabel&!this.options.icon&&(this.options.showLabel=!0),null==this.options.disabled&&(this.options.disabled=this.element[0].disabled||!1),this.hasTitle=!!this.element.attr("title"),this.options.label&&this.options.label!==this.originalLabel&&(this.isInput?this.element.val(this.options.label):this.element.html(this.options.label)),this._addClass("ui-button","ui-widget"),this._setOption("disabled",this.options.disabled),this._enhance(),this.element.is("a")&&this._on({keyup:function(e){e.keyCode===t.ui.keyCode.SPACE&&(e.preventDefault(),this.element[0].click?this.element[0].click():this.element.trigger("click"))}})},_enhance:function(){this.element.is("button")||this.element.attr("role","button"),this.options.icon&&(this._updateIcon("icon",this.options.icon),this._updateTooltip())},_updateTooltip:function(){this.title=this.element.attr("title"),this.options.showLabel||this.title||this.element.attr("title",this.options.label)},_updateIcon:function(e,i){var s="iconPosition"!==e,n=s?this.options.iconPosition:i,o="top"===n||"bottom"===n;this.icon?s&&this._removeClass(this.icon,null,this.options.icon):(this.icon=t("<span>"),this._addClass(this.icon,"ui-button-icon","ui-icon"),this.options.showLabel||this._addClass("ui-button-icon-only")),s&&this._addClass(this.icon,null,i),this._attachIcon(n),o?(this._addClass(this.icon,null,"ui-widget-icon-block"),this.iconSpace&&this.iconSpace.remove()):(this.iconSpace||(this.iconSpace=t("<span> </span>"),this._addClass(this.iconSpace,"ui-button-icon-space")),this._removeClass(this.icon,null,"ui-wiget-icon-block"),this._attachIconSpace(n))},_destroy:function(){this.element.removeAttr("role"),this.icon&&this.icon.remove(),this.iconSpace&&this.iconSpace.remove(),this.hasTitle||this.element.removeAttr("title")},_attachIconSpace:function(t){this.icon[/^(?:end|bottom)/.test(t)?"before":"after"](this.iconSpace)},_attachIcon:function(t){this.element[/^(?:end|bottom)/.test(t)?"append":"prepend"](this.icon)},_setOptions:function(t){var e=void 0===t.showLabel?this.options.showLabel:t.showLabel,i=void 0===t.icon?this.options.icon:t.icon;e||i||(t.showLabel=!0),this._super(t)},_setOption:function(t,e){"icon"===t&&(e?this._updateIcon(t,e):this.icon&&(this.icon.remove(),this.iconSpace&&this.iconSpace.remove())),"iconPosition"===t&&this._updateIcon(t,e),"showLabel"===t&&(this._toggleClass("ui-button-icon-only",null,!e),this._updateTooltip()),"label"===t&&(this.isInput?this.element.val(e):(this.element.html(e),this.icon&&(this._attachIcon(this.options.iconPosition),this._attachIconSpace(this.options.iconPosition)))),this._super(t,e),"disabled"===t&&(this._toggleClass(null,"ui-state-disabled",e),this.element[0].disabled=e,e&&this.element.blur())},refresh:function(){var t=this.element.is("input, button")?this.element[0].disabled:this.element.hasClass("ui-button-disabled");t!==this.options.disabled&&this._setOptions({disabled:t}),this._updateTooltip()}}),t.uiBackCompat!==!1&&(t.widget("ui.button",t.ui.button,{options:{text:!0,icons:{primary:null,secondary:null}},_create:function(){this.options.showLabel&&!this.options.text&&(this.options.showLabel=this.options.text),!this.options.showLabel&&this.options.text&&(this.options.text=this.options.showLabel),this.options.icon||!this.options.icons.primary&&!this.options.icons.secondary?this.options.icon&&(this.options.icons.primary=this.options.icon):this.options.icons.primary?this.options.icon=this.options.icons.primary:(this.options.icon=this.options.icons.secondary,this.options.iconPosition="end"),this._super()},_setOption:function(t,e){return"text"===t?(this._super("showLabel",e),void 0):("showLabel"===t&&(this.options.text=e),"icon"===t&&(this.options.icons.primary=e),"icons"===t&&(e.primary?(this._super("icon",e.primary),this._super("iconPosition","beginning")):e.secondary&&(this._super("icon",e.secondary),this._super("iconPosition","end"))),this._superApply(arguments),void 0)}}),t.fn.button=function(e){return function(){return!this.length||this.length&&"INPUT"!==this[0].tagName||this.length&&"INPUT"===this[0].tagName&&"checkbox"!==this.attr("type")&&"radio"!==this.attr("type")?e.apply(this,arguments):(t.ui.checkboxradio||t.error("Checkboxradio widget missing"),0===arguments.length?this.checkboxradio({icon:!1}):this.checkboxradio.apply(this,arguments))}}(t.fn.button),t.fn.buttonset=function(){return t.ui.controlgroup||t.error("Controlgroup widget missing"),"option"===arguments[0]&&"items"===arguments[1]&&arguments[2]?this.controlgroup.apply(this,[arguments[0],"items.button",arguments[2]]):"option"===arguments[0]&&"items"===arguments[1]?this.controlgroup.apply(this,[arguments[0],"items.button"]):("object"==typeof arguments[0]&&arguments[0].items&&(arguments[0].items={button:arguments[0].items}),this.controlgroup.apply(this,arguments))}),t.ui.button,t.extend(t.ui,{datepicker:{version:"1.12.1"}});var m;t.extend(s.prototype,{markerClassName:"hasDatepicker",maxRows:4,_widgetDatepicker:function(){return this.dpDiv},setDefaults:function(t){return a(this._defaults,t||{}),this},_attachDatepicker:function(e,i){var s,n,o;s=e.nodeName.toLowerCase(),n="div"===s||"span"===s,e.id||(this.uuid+=1,e.id="dp"+this.uuid),o=this._newInst(t(e),n),o.settings=t.extend({},i||{}),"input"===s?this._connectDatepicker(e,o):n&&this._inlineDatepicker(e,o)},_newInst:function(e,i){var s=e[0].id.replace(/([^A-Za-z0-9_\-])/g,"\\\\$1");return{id:s,input:e,selectedDay:0,selectedMonth:0,selectedYear:0,drawMonth:0,drawYear:0,inline:i,dpDiv:i?n(t("<div class='"+this._inlineClass+" ui-datepicker ui-widget ui-widget-content ui-helper-clearfix ui-corner-all'></div>")):this.dpDiv}},_connectDatepicker:function(e,i){var s=t(e);i.append=t([]),i.trigger=t([]),s.hasClass(this.markerClassName)||(this._attachments(s,i),s.addClass(this.markerClassName).on("keydown",this._doKeyDown).on("keypress",this._doKeyPress).on("keyup",this._doKeyUp),this._autoSize(i),t.data(e,"datepicker",i),i.settings.disabled&&this._disableDatepicker(e))},_attachments:function(e,i){var s,n,o,a=this._get(i,"appendText"),r=this._get(i,"isRTL");i.append&&i.append.remove(),a&&(i.append=t("<span class='"+this._appendClass+"'>"+a+"</span>"),e[r?"before":"after"](i.append)),e.off("focus",this._showDatepicker),i.trigger&&i.trigger.remove(),s=this._get(i,"showOn"),("focus"===s||"both"===s)&&e.on("focus",this._showDatepicker),("button"===s||"both"===s)&&(n=this._get(i,"buttonText"),o=this._get(i,"buttonImage"),i.trigger=t(this._get(i,"buttonImageOnly")?t("<img/>").addClass(this._triggerClass).attr({src:o,alt:n,title:n}):t("<button type='button'></button>").addClass(this._triggerClass).html(o?t("<img/>").attr({src:o,alt:n,title:n}):n)),e[r?"before":"after"](i.trigger),i.trigger.on("click",function(){return t.datepicker._datepickerShowing&&t.datepicker._lastInput===e[0]?t.datepicker._hideDatepicker():t.datepicker._datepickerShowing&&t.datepicker._lastInput!==e[0]?(t.datepicker._hideDatepicker(),t.datepicker._showDatepicker(e[0])):t.datepicker._showDatepicker(e[0]),!1}))},_autoSize:function(t){if(this._get(t,"autoSize")&&!t.inline){var e,i,s,n,o=new Date(2009,11,20),a=this._get(t,"dateFormat");a.match(/[DM]/)&&(e=function(t){for(i=0,s=0,n=0;t.length>n;n++)t[n].length>i&&(i=t[n].length,s=n);return s},o.setMonth(e(this._get(t,a.match(/MM/)?"monthNames":"monthNamesShort"))),o.setDate(e(this._get(t,a.match(/DD/)?"dayNames":"dayNamesShort"))+20-o.getDay())),t.input.attr("size",this._formatDate(t,o).length)}},_inlineDatepicker:function(e,i){var s=t(e);s.hasClass(this.markerClassName)||(s.addClass(this.markerClassName).append(i.dpDiv),t.data(e,"datepicker",i),this._setDate(i,this._getDefaultDate(i),!0),this._updateDatepicker(i),this._updateAlternate(i),i.settings.disabled&&this._disableDatepicker(e),i.dpDiv.css("display","block"))},_dialogDatepicker:function(e,i,s,n,o){var r,h,l,c,u,d=this._dialogInst;return d||(this.uuid+=1,r="dp"+this.uuid,this._dialogInput=t("<input type='text' id='"+r+"' style='position: absolute; top: -100px; width: 0px;'/>"),this._dialogInput.on("keydown",this._doKeyDown),t("body").append(this._dialogInput),d=this._dialogInst=this._newInst(this._dialogInput,!1),d.settings={},t.data(this._dialogInput[0],"datepicker",d)),a(d.settings,n||{}),i=i&&i.constructor===Date?this._formatDate(d,i):i,this._dialogInput.val(i),this._pos=o?o.length?o:[o.pageX,o.pageY]:null,this._pos||(h=document.documentElement.clientWidth,l=document.documentElement.clientHeight,c=document.documentElement.scrollLeft||document.body.scrollLeft,u=document.documentElement.scrollTop||document.body.scrollTop,this._pos=[h/2-100+c,l/2-150+u]),this._dialogInput.css("left",this._pos[0]+20+"px").css("top",this._pos[1]+"px"),d.settings.onSelect=s,this._inDialog=!0,this.dpDiv.addClass(this._dialogClass),this._showDatepicker(this._dialogInput[0]),t.blockUI&&t.blockUI(this.dpDiv),t.data(this._dialogInput[0],"datepicker",d),this},_destroyDatepicker:function(e){var i,s=t(e),n=t.data(e,"datepicker");s.hasClass(this.markerClassName)&&(i=e.nodeName.toLowerCase(),t.removeData(e,"datepicker"),"input"===i?(n.append.remove(),n.trigger.remove(),s.removeClass(this.markerClassName).off("focus",this._showDatepicker).off("keydown",this._doKeyDown).off("keypress",this._doKeyPress).off("keyup",this._doKeyUp)):("div"===i||"span"===i)&&s.removeClass(this.markerClassName).empty(),m===n&&(m=null))},_enableDatepicker:function(e){var i,s,n=t(e),o=t.data(e,"datepicker");n.hasClass(this.markerClassName)&&(i=e.nodeName.toLowerCase(),"input"===i?(e.disabled=!1,o.trigger.filter("button").each(function(){this.disabled=!1}).end().filter("img").css({opacity:"1.0",cursor:""})):("div"===i||"span"===i)&&(s=n.children("."+this._inlineClass),s.children().removeClass("ui-state-disabled"),s.find("select.ui-datepicker-month, select.ui-datepicker-year").prop("disabled",!1)),this._disabledInputs=t.map(this._disabledInputs,function(t){return t===e?null:t}))},_disableDatepicker:function(e){var i,s,n=t(e),o=t.data(e,"datepicker");n.hasClass(this.markerClassName)&&(i=e.nodeName.toLowerCase(),"input"===i?(e.disabled=!0,o.trigger.filter("button").each(function(){this.disabled=!0}).end().filter("img").css({opacity:"0.5",cursor:"default"})):("div"===i||"span"===i)&&(s=n.children("."+this._inlineClass),s.children().addClass("ui-state-disabled"),s.find("select.ui-datepicker-month, select.ui-datepicker-year").prop("disabled",!0)),this._disabledInputs=t.map(this._disabledInputs,function(t){return t===e?null:t}),this._disabledInputs[this._disabledInputs.length]=e)},_isDisabledDatepicker:function(t){if(!t)return!1;for(var e=0;this._disabledInputs.length>e;e++)if(this._disabledInputs[e]===t)return!0;return!1},_getInst:function(e){try{return t.data(e,"datepicker")}catch(i){throw"Missing instance data for this datepicker"}},_optionDatepicker:function(e,i,s){var n,o,r,h,l=this._getInst(e);return 2===arguments.length&&"string"==typeof i?"defaults"===i?t.extend({},t.datepicker._defaults):l?"all"===i?t.extend({},l.settings):this._get(l,i):null:(n=i||{},"string"==typeof i&&(n={},n[i]=s),l&&(this._curInst===l&&this._hideDatepicker(),o=this._getDateDatepicker(e,!0),r=this._getMinMaxDate(l,"min"),h=this._getMinMaxDate(l,"max"),a(l.settings,n),null!==r&&void 0!==n.dateFormat&&void 0===n.minDate&&(l.settings.minDate=this._formatDate(l,r)),null!==h&&void 0!==n.dateFormat&&void 0===n.maxDate&&(l.settings.maxDate=this._formatDate(l,h)),"disabled"in n&&(n.disabled?this._disableDatepicker(e):this._enableDatepicker(e)),this._attachments(t(e),l),this._autoSize(l),this._setDate(l,o),this._updateAlternate(l),this._updateDatepicker(l)),void 0)},_changeDatepicker:function(t,e,i){this._optionDatepicker(t,e,i)},_refreshDatepicker:function(t){var e=this._getInst(t);e&&this._updateDatepicker(e)},_setDateDatepicker:function(t,e){var i=this._getInst(t);i&&(this._setDate(i,e),this._updateDatepicker(i),this._updateAlternate(i))},_getDateDatepicker:function(t,e){var i=this._getInst(t);return i&&!i.inline&&this._setDateFromField(i,e),i?this._getDate(i):null},_doKeyDown:function(e){var i,s,n,o=t.datepicker._getInst(e.target),a=!0,r=o.dpDiv.is(".ui-datepicker-rtl");if(o._keyEvent=!0,t.datepicker._datepickerShowing)switch(e.keyCode){case 9:t.datepicker._hideDatepicker(),a=!1;break;case 13:return n=t("td."+t.datepicker._dayOverClass+":not(."+t.datepicker._currentClass+")",o.dpDiv),n[0]&&t.datepicker._selectDay(e.target,o.selectedMonth,o.selectedYear,n[0]),i=t.datepicker._get(o,"onSelect"),i?(s=t.datepicker._formatDate(o),i.apply(o.input?o.input[0]:null,[s,o])):t.datepicker._hideDatepicker(),!1;case 27:t.datepicker._hideDatepicker();break;case 33:t.datepicker._adjustDate(e.target,e.ctrlKey?-t.datepicker._get(o,"stepBigMonths"):-t.datepicker._get(o,"stepMonths"),"M");break;case 34:t.datepicker._adjustDate(e.target,e.ctrlKey?+t.datepicker._get(o,"stepBigMonths"):+t.datepicker._get(o,"stepMonths"),"M");break;case 35:(e.ctrlKey||e.metaKey)&&t.datepicker._clearDate(e.target),a=e.ctrlKey||e.metaKey;break;case 36:(e.ctrlKey||e.metaKey)&&t.datepicker._gotoToday(e.target),a=e.ctrlKey||e.metaKey;break;case 37:(e.ctrlKey||e.metaKey)&&t.datepicker._adjustDate(e.target,r?1:-1,"D"),a=e.ctrlKey||e.metaKey,e.originalEvent.altKey&&t.datepicker._adjustDate(e.target,e.ctrlKey?-t.datepicker._get(o,"stepBigMonths"):-t.datepicker._get(o,"stepMonths"),"M");break;case 38:(e.ctrlKey||e.metaKey)&&t.datepicker._adjustDate(e.target,-7,"D"),a=e.ctrlKey||e.metaKey;break;case 39:(e.ctrlKey||e.metaKey)&&t.datepicker._adjustDate(e.target,r?-1:1,"D"),a=e.ctrlKey||e.metaKey,e.originalEvent.altKey&&t.datepicker._adjustDate(e.target,e.ctrlKey?+t.datepicker._get(o,"stepBigMonths"):+t.datepicker._get(o,"stepMonths"),"M");break;case 40:(e.ctrlKey||e.metaKey)&&t.datepicker._adjustDate(e.target,7,"D"),a=e.ctrlKey||e.metaKey;break;default:a=!1}else 36===e.keyCode&&e.ctrlKey?t.datepicker._showDatepicker(this):a=!1;a&&(e.preventDefault(),e.stopPropagation())},_doKeyPress:function(e){var i,s,n=t.datepicker._getInst(e.target);return t.datepicker._get(n,"constrainInput")?(i=t.datepicker._possibleChars(t.datepicker._get(n,"dateFormat")),s=String.fromCharCode(null==e.charCode?e.keyCode:e.charCode),e.ctrlKey||e.metaKey||" ">s||!i||i.indexOf(s)>-1):void 0},_doKeyUp:function(e){var i,s=t.datepicker._getInst(e.target);if(s.input.val()!==s.lastVal)try{i=t.datepicker.parseDate(t.datepicker._get(s,"dateFormat"),s.input?s.input.val():null,t.datepicker._getFormatConfig(s)),i&&(t.datepicker._setDateFromField(s),t.datepicker._updateAlternate(s),t.datepicker._updateDatepicker(s))}catch(n){}return!0},_showDatepicker:function(e){if(e=e.target||e,"input"!==e.nodeName.toLowerCase()&&(e=t("input",e.parentNode)[0]),!t.datepicker._isDisabledDatepicker(e)&&t.datepicker._lastInput!==e){var s,n,o,r,h,l,c;s=t.datepicker._getInst(e),t.datepicker._curInst&&t.datepicker._curInst!==s&&(t.datepicker._curInst.dpDiv.stop(!0,!0),s&&t.datepicker._datepickerShowing&&t.datepicker._hideDatepicker(t.datepicker._curInst.input[0])),n=t.datepicker._get(s,"beforeShow"),o=n?n.apply(e,[e,s]):{},o!==!1&&(a(s.settings,o),s.lastVal=null,t.datepicker._lastInput=e,t.datepicker._setDateFromField(s),t.datepicker._inDialog&&(e.value=""),t.datepicker._pos||(t.datepicker._pos=t.datepicker._findPos(e),t.datepicker._pos[1]+=e.offsetHeight),r=!1,t(e).parents().each(function(){return r|="fixed"===t(this).css("position"),!r}),h={left:t.datepicker._pos[0],top:t.datepicker._pos[1]},t.datepicker._pos=null,s.dpDiv.empty(),s.dpDiv.css({position:"absolute",display:"block",top:"-1000px"}),t.datepicker._updateDatepicker(s),h=t.datepicker._checkOffset(s,h,r),s.dpDiv.css({position:t.datepicker._inDialog&&t.blockUI?"static":r?"fixed":"absolute",display:"none",left:h.left+"px",top:h.top+"px"}),s.inline||(l=t.datepicker._get(s,"showAnim"),c=t.datepicker._get(s,"duration"),s.dpDiv.css("z-index",i(t(e))+1),t.datepicker._datepickerShowing=!0,t.effects&&t.effects.effect[l]?s.dpDiv.show(l,t.datepicker._get(s,"showOptions"),c):s.dpDiv[l||"show"](l?c:null),t.datepicker._shouldFocusInput(s)&&s.input.trigger("focus"),t.datepicker._curInst=s))
}},_updateDatepicker:function(e){this.maxRows=4,m=e,e.dpDiv.empty().append(this._generateHTML(e)),this._attachHandlers(e);var i,s=this._getNumberOfMonths(e),n=s[1],a=17,r=e.dpDiv.find("."+this._dayOverClass+" a");r.length>0&&o.apply(r.get(0)),e.dpDiv.removeClass("ui-datepicker-multi-2 ui-datepicker-multi-3 ui-datepicker-multi-4").width(""),n>1&&e.dpDiv.addClass("ui-datepicker-multi-"+n).css("width",a*n+"em"),e.dpDiv[(1!==s[0]||1!==s[1]?"add":"remove")+"Class"]("ui-datepicker-multi"),e.dpDiv[(this._get(e,"isRTL")?"add":"remove")+"Class"]("ui-datepicker-rtl"),e===t.datepicker._curInst&&t.datepicker._datepickerShowing&&t.datepicker._shouldFocusInput(e)&&e.input.trigger("focus"),e.yearshtml&&(i=e.yearshtml,setTimeout(function(){i===e.yearshtml&&e.yearshtml&&e.dpDiv.find("select.ui-datepicker-year:first").replaceWith(e.yearshtml),i=e.yearshtml=null},0))},_shouldFocusInput:function(t){return t.input&&t.input.is(":visible")&&!t.input.is(":disabled")&&!t.input.is(":focus")},_checkOffset:function(e,i,s){var n=e.dpDiv.outerWidth(),o=e.dpDiv.outerHeight(),a=e.input?e.input.outerWidth():0,r=e.input?e.input.outerHeight():0,h=document.documentElement.clientWidth+(s?0:t(document).scrollLeft()),l=document.documentElement.clientHeight+(s?0:t(document).scrollTop());return i.left-=this._get(e,"isRTL")?n-a:0,i.left-=s&&i.left===e.input.offset().left?t(document).scrollLeft():0,i.top-=s&&i.top===e.input.offset().top+r?t(document).scrollTop():0,i.left-=Math.min(i.left,i.left+n>h&&h>n?Math.abs(i.left+n-h):0),i.top-=Math.min(i.top,i.top+o>l&&l>o?Math.abs(o+r):0),i},_findPos:function(e){for(var i,s=this._getInst(e),n=this._get(s,"isRTL");e&&("hidden"===e.type||1!==e.nodeType||t.expr.filters.hidden(e));)e=e[n?"previousSibling":"nextSibling"];return i=t(e).offset(),[i.left,i.top]},_hideDatepicker:function(e){var i,s,n,o,a=this._curInst;!a||e&&a!==t.data(e,"datepicker")||this._datepickerShowing&&(i=this._get(a,"showAnim"),s=this._get(a,"duration"),n=function(){t.datepicker._tidyDialog(a)},t.effects&&(t.effects.effect[i]||t.effects[i])?a.dpDiv.hide(i,t.datepicker._get(a,"showOptions"),s,n):a.dpDiv["slideDown"===i?"slideUp":"fadeIn"===i?"fadeOut":"hide"](i?s:null,n),i||n(),this._datepickerShowing=!1,o=this._get(a,"onClose"),o&&o.apply(a.input?a.input[0]:null,[a.input?a.input.val():"",a]),this._lastInput=null,this._inDialog&&(this._dialogInput.css({position:"absolute",left:"0",top:"-100px"}),t.blockUI&&(t.unblockUI(),t("body").append(this.dpDiv))),this._inDialog=!1)},_tidyDialog:function(t){t.dpDiv.removeClass(this._dialogClass).off(".ui-datepicker-calendar")},_checkExternalClick:function(e){if(t.datepicker._curInst){var i=t(e.target),s=t.datepicker._getInst(i[0]);(i[0].id!==t.datepicker._mainDivId&&0===i.parents("#"+t.datepicker._mainDivId).length&&!i.hasClass(t.datepicker.markerClassName)&&!i.closest("."+t.datepicker._triggerClass).length&&t.datepicker._datepickerShowing&&(!t.datepicker._inDialog||!t.blockUI)||i.hasClass(t.datepicker.markerClassName)&&t.datepicker._curInst!==s)&&t.datepicker._hideDatepicker()}},_adjustDate:function(e,i,s){var n=t(e),o=this._getInst(n[0]);this._isDisabledDatepicker(n[0])||(this._adjustInstDate(o,i+("M"===s?this._get(o,"showCurrentAtPos"):0),s),this._updateDatepicker(o))},_gotoToday:function(e){var i,s=t(e),n=this._getInst(s[0]);this._get(n,"gotoCurrent")&&n.currentDay?(n.selectedDay=n.currentDay,n.drawMonth=n.selectedMonth=n.currentMonth,n.drawYear=n.selectedYear=n.currentYear):(i=new Date,n.selectedDay=i.getDate(),n.drawMonth=n.selectedMonth=i.getMonth(),n.drawYear=n.selectedYear=i.getFullYear()),this._notifyChange(n),this._adjustDate(s)},_selectMonthYear:function(e,i,s){var n=t(e),o=this._getInst(n[0]);o["selected"+("M"===s?"Month":"Year")]=o["draw"+("M"===s?"Month":"Year")]=parseInt(i.options[i.selectedIndex].value,10),this._notifyChange(o),this._adjustDate(n)},_selectDay:function(e,i,s,n){var o,a=t(e);t(n).hasClass(this._unselectableClass)||this._isDisabledDatepicker(a[0])||(o=this._getInst(a[0]),o.selectedDay=o.currentDay=t("a",n).html(),o.selectedMonth=o.currentMonth=i,o.selectedYear=o.currentYear=s,this._selectDate(e,this._formatDate(o,o.currentDay,o.currentMonth,o.currentYear)))},_clearDate:function(e){var i=t(e);this._selectDate(i,"")},_selectDate:function(e,i){var s,n=t(e),o=this._getInst(n[0]);i=null!=i?i:this._formatDate(o),o.input&&o.input.val(i),this._updateAlternate(o),s=this._get(o,"onSelect"),s?s.apply(o.input?o.input[0]:null,[i,o]):o.input&&o.input.trigger("change"),o.inline?this._updateDatepicker(o):(this._hideDatepicker(),this._lastInput=o.input[0],"object"!=typeof o.input[0]&&o.input.trigger("focus"),this._lastInput=null)},_updateAlternate:function(e){var i,s,n,o=this._get(e,"altField");o&&(i=this._get(e,"altFormat")||this._get(e,"dateFormat"),s=this._getDate(e),n=this.formatDate(i,s,this._getFormatConfig(e)),t(o).val(n))},noWeekends:function(t){var e=t.getDay();return[e>0&&6>e,""]},iso8601Week:function(t){var e,i=new Date(t.getTime());return i.setDate(i.getDate()+4-(i.getDay()||7)),e=i.getTime(),i.setMonth(0),i.setDate(1),Math.floor(Math.round((e-i)/864e5)/7)+1},parseDate:function(e,i,s){if(null==e||null==i)throw"Invalid arguments";if(i="object"==typeof i?""+i:i+"",""===i)return null;var n,o,a,r,h=0,l=(s?s.shortYearCutoff:null)||this._defaults.shortYearCutoff,c="string"!=typeof l?l:(new Date).getFullYear()%100+parseInt(l,10),u=(s?s.dayNamesShort:null)||this._defaults.dayNamesShort,d=(s?s.dayNames:null)||this._defaults.dayNames,p=(s?s.monthNamesShort:null)||this._defaults.monthNamesShort,f=(s?s.monthNames:null)||this._defaults.monthNames,g=-1,m=-1,_=-1,v=-1,b=!1,y=function(t){var i=e.length>n+1&&e.charAt(n+1)===t;return i&&n++,i},w=function(t){var e=y(t),s="@"===t?14:"!"===t?20:"y"===t&&e?4:"o"===t?3:2,n="y"===t?s:1,o=RegExp("^\\d{"+n+","+s+"}"),a=i.substring(h).match(o);if(!a)throw"Missing number at position "+h;return h+=a[0].length,parseInt(a[0],10)},k=function(e,s,n){var o=-1,a=t.map(y(e)?n:s,function(t,e){return[[e,t]]}).sort(function(t,e){return-(t[1].length-e[1].length)});if(t.each(a,function(t,e){var s=e[1];return i.substr(h,s.length).toLowerCase()===s.toLowerCase()?(o=e[0],h+=s.length,!1):void 0}),-1!==o)return o+1;throw"Unknown name at position "+h},x=function(){if(i.charAt(h)!==e.charAt(n))throw"Unexpected literal at position "+h;h++};for(n=0;e.length>n;n++)if(b)"'"!==e.charAt(n)||y("'")?x():b=!1;else switch(e.charAt(n)){case"d":_=w("d");break;case"D":k("D",u,d);break;case"o":v=w("o");break;case"m":m=w("m");break;case"M":m=k("M",p,f);break;case"y":g=w("y");break;case"@":r=new Date(w("@")),g=r.getFullYear(),m=r.getMonth()+1,_=r.getDate();break;case"!":r=new Date((w("!")-this._ticksTo1970)/1e4),g=r.getFullYear(),m=r.getMonth()+1,_=r.getDate();break;case"'":y("'")?x():b=!0;break;default:x()}if(i.length>h&&(a=i.substr(h),!/^\s+/.test(a)))throw"Extra/unparsed characters found in date: "+a;if(-1===g?g=(new Date).getFullYear():100>g&&(g+=(new Date).getFullYear()-(new Date).getFullYear()%100+(c>=g?0:-100)),v>-1)for(m=1,_=v;;){if(o=this._getDaysInMonth(g,m-1),o>=_)break;m++,_-=o}if(r=this._daylightSavingAdjust(new Date(g,m-1,_)),r.getFullYear()!==g||r.getMonth()+1!==m||r.getDate()!==_)throw"Invalid date";return r},ATOM:"yy-mm-dd",COOKIE:"D, dd M yy",ISO_8601:"yy-mm-dd",RFC_822:"D, d M y",RFC_850:"DD, dd-M-y",RFC_1036:"D, d M y",RFC_1123:"D, d M yy",RFC_2822:"D, d M yy",RSS:"D, d M y",TICKS:"!",TIMESTAMP:"@",W3C:"yy-mm-dd",_ticksTo1970:1e7*60*60*24*(718685+Math.floor(492.5)-Math.floor(19.7)+Math.floor(4.925)),formatDate:function(t,e,i){if(!e)return"";var s,n=(i?i.dayNamesShort:null)||this._defaults.dayNamesShort,o=(i?i.dayNames:null)||this._defaults.dayNames,a=(i?i.monthNamesShort:null)||this._defaults.monthNamesShort,r=(i?i.monthNames:null)||this._defaults.monthNames,h=function(e){var i=t.length>s+1&&t.charAt(s+1)===e;return i&&s++,i},l=function(t,e,i){var s=""+e;if(h(t))for(;i>s.length;)s="0"+s;return s},c=function(t,e,i,s){return h(t)?s[e]:i[e]},u="",d=!1;if(e)for(s=0;t.length>s;s++)if(d)"'"!==t.charAt(s)||h("'")?u+=t.charAt(s):d=!1;else switch(t.charAt(s)){case"d":u+=l("d",e.getDate(),2);break;case"D":u+=c("D",e.getDay(),n,o);break;case"o":u+=l("o",Math.round((new Date(e.getFullYear(),e.getMonth(),e.getDate()).getTime()-new Date(e.getFullYear(),0,0).getTime())/864e5),3);break;case"m":u+=l("m",e.getMonth()+1,2);break;case"M":u+=c("M",e.getMonth(),a,r);break;case"y":u+=h("y")?e.getFullYear():(10>e.getFullYear()%100?"0":"")+e.getFullYear()%100;break;case"@":u+=e.getTime();break;case"!":u+=1e4*e.getTime()+this._ticksTo1970;break;case"'":h("'")?u+="'":d=!0;break;default:u+=t.charAt(s)}return u},_possibleChars:function(t){var e,i="",s=!1,n=function(i){var s=t.length>e+1&&t.charAt(e+1)===i;return s&&e++,s};for(e=0;t.length>e;e++)if(s)"'"!==t.charAt(e)||n("'")?i+=t.charAt(e):s=!1;else switch(t.charAt(e)){case"d":case"m":case"y":case"@":i+="0123456789";break;case"D":case"M":return null;case"'":n("'")?i+="'":s=!0;break;default:i+=t.charAt(e)}return i},_get:function(t,e){return void 0!==t.settings[e]?t.settings[e]:this._defaults[e]},_setDateFromField:function(t,e){if(t.input.val()!==t.lastVal){var i=this._get(t,"dateFormat"),s=t.lastVal=t.input?t.input.val():null,n=this._getDefaultDate(t),o=n,a=this._getFormatConfig(t);try{o=this.parseDate(i,s,a)||n}catch(r){s=e?"":s}t.selectedDay=o.getDate(),t.drawMonth=t.selectedMonth=o.getMonth(),t.drawYear=t.selectedYear=o.getFullYear(),t.currentDay=s?o.getDate():0,t.currentMonth=s?o.getMonth():0,t.currentYear=s?o.getFullYear():0,this._adjustInstDate(t)}},_getDefaultDate:function(t){return this._restrictMinMax(t,this._determineDate(t,this._get(t,"defaultDate"),new Date))},_determineDate:function(e,i,s){var n=function(t){var e=new Date;return e.setDate(e.getDate()+t),e},o=function(i){try{return t.datepicker.parseDate(t.datepicker._get(e,"dateFormat"),i,t.datepicker._getFormatConfig(e))}catch(s){}for(var n=(i.toLowerCase().match(/^c/)?t.datepicker._getDate(e):null)||new Date,o=n.getFullYear(),a=n.getMonth(),r=n.getDate(),h=/([+\-]?[0-9]+)\s*(d|D|w|W|m|M|y|Y)?/g,l=h.exec(i);l;){switch(l[2]||"d"){case"d":case"D":r+=parseInt(l[1],10);break;case"w":case"W":r+=7*parseInt(l[1],10);break;case"m":case"M":a+=parseInt(l[1],10),r=Math.min(r,t.datepicker._getDaysInMonth(o,a));break;case"y":case"Y":o+=parseInt(l[1],10),r=Math.min(r,t.datepicker._getDaysInMonth(o,a))}l=h.exec(i)}return new Date(o,a,r)},a=null==i||""===i?s:"string"==typeof i?o(i):"number"==typeof i?isNaN(i)?s:n(i):new Date(i.getTime());return a=a&&"Invalid Date"==""+a?s:a,a&&(a.setHours(0),a.setMinutes(0),a.setSeconds(0),a.setMilliseconds(0)),this._daylightSavingAdjust(a)},_daylightSavingAdjust:function(t){return t?(t.setHours(t.getHours()>12?t.getHours()+2:0),t):null},_setDate:function(t,e,i){var s=!e,n=t.selectedMonth,o=t.selectedYear,a=this._restrictMinMax(t,this._determineDate(t,e,new Date));t.selectedDay=t.currentDay=a.getDate(),t.drawMonth=t.selectedMonth=t.currentMonth=a.getMonth(),t.drawYear=t.selectedYear=t.currentYear=a.getFullYear(),n===t.selectedMonth&&o===t.selectedYear||i||this._notifyChange(t),this._adjustInstDate(t),t.input&&t.input.val(s?"":this._formatDate(t))},_getDate:function(t){var e=!t.currentYear||t.input&&""===t.input.val()?null:this._daylightSavingAdjust(new Date(t.currentYear,t.currentMonth,t.currentDay));return e},_attachHandlers:function(e){var i=this._get(e,"stepMonths"),s="#"+e.id.replace(/\\\\/g,"\\");e.dpDiv.find("[data-handler]").map(function(){var e={prev:function(){t.datepicker._adjustDate(s,-i,"M")},next:function(){t.datepicker._adjustDate(s,+i,"M")},hide:function(){t.datepicker._hideDatepicker()},today:function(){t.datepicker._gotoToday(s)},selectDay:function(){return t.datepicker._selectDay(s,+this.getAttribute("data-month"),+this.getAttribute("data-year"),this),!1},selectMonth:function(){return t.datepicker._selectMonthYear(s,this,"M"),!1},selectYear:function(){return t.datepicker._selectMonthYear(s,this,"Y"),!1}};t(this).on(this.getAttribute("data-event"),e[this.getAttribute("data-handler")])})},_generateHTML:function(t){var e,i,s,n,o,a,r,h,l,c,u,d,p,f,g,m,_,v,b,y,w,k,x,C,D,I,T,P,M,S,H,z,O,A,N,W,E,F,L,R=new Date,B=this._daylightSavingAdjust(new Date(R.getFullYear(),R.getMonth(),R.getDate())),Y=this._get(t,"isRTL"),j=this._get(t,"showButtonPanel"),q=this._get(t,"hideIfNoPrevNext"),K=this._get(t,"navigationAsDateFormat"),U=this._getNumberOfMonths(t),V=this._get(t,"showCurrentAtPos"),$=this._get(t,"stepMonths"),X=1!==U[0]||1!==U[1],G=this._daylightSavingAdjust(t.currentDay?new Date(t.currentYear,t.currentMonth,t.currentDay):new Date(9999,9,9)),Q=this._getMinMaxDate(t,"min"),J=this._getMinMaxDate(t,"max"),Z=t.drawMonth-V,te=t.drawYear;if(0>Z&&(Z+=12,te--),J)for(e=this._daylightSavingAdjust(new Date(J.getFullYear(),J.getMonth()-U[0]*U[1]+1,J.getDate())),e=Q&&Q>e?Q:e;this._daylightSavingAdjust(new Date(te,Z,1))>e;)Z--,0>Z&&(Z=11,te--);for(t.drawMonth=Z,t.drawYear=te,i=this._get(t,"prevText"),i=K?this.formatDate(i,this._daylightSavingAdjust(new Date(te,Z-$,1)),this._getFormatConfig(t)):i,s=this._canAdjustMonth(t,-1,te,Z)?"<a class='ui-datepicker-prev ui-corner-all' data-handler='prev' data-event='click' title='"+i+"'><span class='ui-icon ui-icon-circle-triangle-"+(Y?"e":"w")+"'>"+i+"</span></a>":q?"":"<a class='ui-datepicker-prev ui-corner-all ui-state-disabled' title='"+i+"'><span class='ui-icon ui-icon-circle-triangle-"+(Y?"e":"w")+"'>"+i+"</span></a>",n=this._get(t,"nextText"),n=K?this.formatDate(n,this._daylightSavingAdjust(new Date(te,Z+$,1)),this._getFormatConfig(t)):n,o=this._canAdjustMonth(t,1,te,Z)?"<a class='ui-datepicker-next ui-corner-all' data-handler='next' data-event='click' title='"+n+"'><span class='ui-icon ui-icon-circle-triangle-"+(Y?"w":"e")+"'>"+n+"</span></a>":q?"":"<a class='ui-datepicker-next ui-corner-all ui-state-disabled' title='"+n+"'><span class='ui-icon ui-icon-circle-triangle-"+(Y?"w":"e")+"'>"+n+"</span></a>",a=this._get(t,"currentText"),r=this._get(t,"gotoCurrent")&&t.currentDay?G:B,a=K?this.formatDate(a,r,this._getFormatConfig(t)):a,h=t.inline?"":"<button type='button' class='ui-datepicker-close ui-state-default ui-priority-primary ui-corner-all' data-handler='hide' data-event='click'>"+this._get(t,"closeText")+"</button>",l=j?"<div class='ui-datepicker-buttonpane ui-widget-content'>"+(Y?h:"")+(this._isInRange(t,r)?"<button type='button' class='ui-datepicker-current ui-state-default ui-priority-secondary ui-corner-all' data-handler='today' data-event='click'>"+a+"</button>":"")+(Y?"":h)+"</div>":"",c=parseInt(this._get(t,"firstDay"),10),c=isNaN(c)?0:c,u=this._get(t,"showWeek"),d=this._get(t,"dayNames"),p=this._get(t,"dayNamesMin"),f=this._get(t,"monthNames"),g=this._get(t,"monthNamesShort"),m=this._get(t,"beforeShowDay"),_=this._get(t,"showOtherMonths"),v=this._get(t,"selectOtherMonths"),b=this._getDefaultDate(t),y="",k=0;U[0]>k;k++){for(x="",this.maxRows=4,C=0;U[1]>C;C++){if(D=this._daylightSavingAdjust(new Date(te,Z,t.selectedDay)),I=" ui-corner-all",T="",X){if(T+="<div class='ui-datepicker-group",U[1]>1)switch(C){case 0:T+=" ui-datepicker-group-first",I=" ui-corner-"+(Y?"right":"left");break;case U[1]-1:T+=" ui-datepicker-group-last",I=" ui-corner-"+(Y?"left":"right");break;default:T+=" ui-datepicker-group-middle",I=""}T+="'>"}for(T+="<div class='ui-datepicker-header ui-widget-header ui-helper-clearfix"+I+"'>"+(/all|left/.test(I)&&0===k?Y?o:s:"")+(/all|right/.test(I)&&0===k?Y?s:o:"")+this._generateMonthYearHeader(t,Z,te,Q,J,k>0||C>0,f,g)+"</div><table class='ui-datepicker-calendar'><thead>"+"<tr>",P=u?"<th class='ui-datepicker-week-col'>"+this._get(t,"weekHeader")+"</th>":"",w=0;7>w;w++)M=(w+c)%7,P+="<th scope='col'"+((w+c+6)%7>=5?" class='ui-datepicker-week-end'":"")+">"+"<span title='"+d[M]+"'>"+p[M]+"</span></th>";for(T+=P+"</tr></thead><tbody>",S=this._getDaysInMonth(te,Z),te===t.selectedYear&&Z===t.selectedMonth&&(t.selectedDay=Math.min(t.selectedDay,S)),H=(this._getFirstDayOfMonth(te,Z)-c+7)%7,z=Math.ceil((H+S)/7),O=X?this.maxRows>z?this.maxRows:z:z,this.maxRows=O,A=this._daylightSavingAdjust(new Date(te,Z,1-H)),N=0;O>N;N++){for(T+="<tr>",W=u?"<td class='ui-datepicker-week-col'>"+this._get(t,"calculateWeek")(A)+"</td>":"",w=0;7>w;w++)E=m?m.apply(t.input?t.input[0]:null,[A]):[!0,""],F=A.getMonth()!==Z,L=F&&!v||!E[0]||Q&&Q>A||J&&A>J,W+="<td class='"+((w+c+6)%7>=5?" ui-datepicker-week-end":"")+(F?" ui-datepicker-other-month":"")+(A.getTime()===D.getTime()&&Z===t.selectedMonth&&t._keyEvent||b.getTime()===A.getTime()&&b.getTime()===D.getTime()?" "+this._dayOverClass:"")+(L?" "+this._unselectableClass+" ui-state-disabled":"")+(F&&!_?"":" "+E[1]+(A.getTime()===G.getTime()?" "+this._currentClass:"")+(A.getTime()===B.getTime()?" ui-datepicker-today":""))+"'"+(F&&!_||!E[2]?"":" title='"+E[2].replace(/'/g,"&#39;")+"'")+(L?"":" data-handler='selectDay' data-event='click' data-month='"+A.getMonth()+"' data-year='"+A.getFullYear()+"'")+">"+(F&&!_?"&#xa0;":L?"<span class='ui-state-default'>"+A.getDate()+"</span>":"<a class='ui-state-default"+(A.getTime()===B.getTime()?" ui-state-highlight":"")+(A.getTime()===G.getTime()?" ui-state-active":"")+(F?" ui-priority-secondary":"")+"' href='#'>"+A.getDate()+"</a>")+"</td>",A.setDate(A.getDate()+1),A=this._daylightSavingAdjust(A);T+=W+"</tr>"}Z++,Z>11&&(Z=0,te++),T+="</tbody></table>"+(X?"</div>"+(U[0]>0&&C===U[1]-1?"<div class='ui-datepicker-row-break'></div>":""):""),x+=T}y+=x}return y+=l,t._keyEvent=!1,y},_generateMonthYearHeader:function(t,e,i,s,n,o,a,r){var h,l,c,u,d,p,f,g,m=this._get(t,"changeMonth"),_=this._get(t,"changeYear"),v=this._get(t,"showMonthAfterYear"),b="<div class='ui-datepicker-title'>",y="";if(o||!m)y+="<span class='ui-datepicker-month'>"+a[e]+"</span>";else{for(h=s&&s.getFullYear()===i,l=n&&n.getFullYear()===i,y+="<select class='ui-datepicker-month' data-handler='selectMonth' data-event='change'>",c=0;12>c;c++)(!h||c>=s.getMonth())&&(!l||n.getMonth()>=c)&&(y+="<option value='"+c+"'"+(c===e?" selected='selected'":"")+">"+r[c]+"</option>");y+="</select>"}if(v||(b+=y+(!o&&m&&_?"":"&#xa0;")),!t.yearshtml)if(t.yearshtml="",o||!_)b+="<span class='ui-datepicker-year'>"+i+"</span>";else{for(u=this._get(t,"yearRange").split(":"),d=(new Date).getFullYear(),p=function(t){var e=t.match(/c[+\-].*/)?i+parseInt(t.substring(1),10):t.match(/[+\-].*/)?d+parseInt(t,10):parseInt(t,10);return isNaN(e)?d:e},f=p(u[0]),g=Math.max(f,p(u[1]||"")),f=s?Math.max(f,s.getFullYear()):f,g=n?Math.min(g,n.getFullYear()):g,t.yearshtml+="<select class='ui-datepicker-year' data-handler='selectYear' data-event='change'>";g>=f;f++)t.yearshtml+="<option value='"+f+"'"+(f===i?" selected='selected'":"")+">"+f+"</option>";t.yearshtml+="</select>",b+=t.yearshtml,t.yearshtml=null}return b+=this._get(t,"yearSuffix"),v&&(b+=(!o&&m&&_?"":"&#xa0;")+y),b+="</div>"},_adjustInstDate:function(t,e,i){var s=t.selectedYear+("Y"===i?e:0),n=t.selectedMonth+("M"===i?e:0),o=Math.min(t.selectedDay,this._getDaysInMonth(s,n))+("D"===i?e:0),a=this._restrictMinMax(t,this._daylightSavingAdjust(new Date(s,n,o)));t.selectedDay=a.getDate(),t.drawMonth=t.selectedMonth=a.getMonth(),t.drawYear=t.selectedYear=a.getFullYear(),("M"===i||"Y"===i)&&this._notifyChange(t)},_restrictMinMax:function(t,e){var i=this._getMinMaxDate(t,"min"),s=this._getMinMaxDate(t,"max"),n=i&&i>e?i:e;return s&&n>s?s:n},_notifyChange:function(t){var e=this._get(t,"onChangeMonthYear");e&&e.apply(t.input?t.input[0]:null,[t.selectedYear,t.selectedMonth+1,t])},_getNumberOfMonths:function(t){var e=this._get(t,"numberOfMonths");return null==e?[1,1]:"number"==typeof e?[1,e]:e},_getMinMaxDate:function(t,e){return this._determineDate(t,this._get(t,e+"Date"),null)},_getDaysInMonth:function(t,e){return 32-this._daylightSavingAdjust(new Date(t,e,32)).getDate()},_getFirstDayOfMonth:function(t,e){return new Date(t,e,1).getDay()},_canAdjustMonth:function(t,e,i,s){var n=this._getNumberOfMonths(t),o=this._daylightSavingAdjust(new Date(i,s+(0>e?e:n[0]*n[1]),1));return 0>e&&o.setDate(this._getDaysInMonth(o.getFullYear(),o.getMonth())),this._isInRange(t,o)},_isInRange:function(t,e){var i,s,n=this._getMinMaxDate(t,"min"),o=this._getMinMaxDate(t,"max"),a=null,r=null,h=this._get(t,"yearRange");return h&&(i=h.split(":"),s=(new Date).getFullYear(),a=parseInt(i[0],10),r=parseInt(i[1],10),i[0].match(/[+\-].*/)&&(a+=s),i[1].match(/[+\-].*/)&&(r+=s)),(!n||e.getTime()>=n.getTime())&&(!o||e.getTime()<=o.getTime())&&(!a||e.getFullYear()>=a)&&(!r||r>=e.getFullYear())},_getFormatConfig:function(t){var e=this._get(t,"shortYearCutoff");return e="string"!=typeof e?e:(new Date).getFullYear()%100+parseInt(e,10),{shortYearCutoff:e,dayNamesShort:this._get(t,"dayNamesShort"),dayNames:this._get(t,"dayNames"),monthNamesShort:this._get(t,"monthNamesShort"),monthNames:this._get(t,"monthNames")}},_formatDate:function(t,e,i,s){e||(t.currentDay=t.selectedDay,t.currentMonth=t.selectedMonth,t.currentYear=t.selectedYear);var n=e?"object"==typeof e?e:this._daylightSavingAdjust(new Date(s,i,e)):this._daylightSavingAdjust(new Date(t.currentYear,t.currentMonth,t.currentDay));return this.formatDate(this._get(t,"dateFormat"),n,this._getFormatConfig(t))}}),t.fn.datepicker=function(e){if(!this.length)return this;t.datepicker.initialized||(t(document).on("mousedown",t.datepicker._checkExternalClick),t.datepicker.initialized=!0),0===t("#"+t.datepicker._mainDivId).length&&t("body").append(t.datepicker.dpDiv);var i=Array.prototype.slice.call(arguments,1);return"string"!=typeof e||"isDisabled"!==e&&"getDate"!==e&&"widget"!==e?"option"===e&&2===arguments.length&&"string"==typeof arguments[1]?t.datepicker["_"+e+"Datepicker"].apply(t.datepicker,[this[0]].concat(i)):this.each(function(){"string"==typeof e?t.datepicker["_"+e+"Datepicker"].apply(t.datepicker,[this].concat(i)):t.datepicker._attachDatepicker(this,e)}):t.datepicker["_"+e+"Datepicker"].apply(t.datepicker,[this[0]].concat(i))},t.datepicker=new s,t.datepicker.initialized=!1,t.datepicker.uuid=(new Date).getTime(),t.datepicker.version="1.12.1",t.datepicker,t.ui.ie=!!/msie [\w.]+/.exec(navigator.userAgent.toLowerCase());var _=!1;t(document).on("mouseup",function(){_=!1}),t.widget("ui.mouse",{version:"1.12.1",options:{cancel:"input, textarea, button, select, option",distance:1,delay:0},_mouseInit:function(){var e=this;this.element.on("mousedown."+this.widgetName,function(t){return e._mouseDown(t)}).on("click."+this.widgetName,function(i){return!0===t.data(i.target,e.widgetName+".preventClickEvent")?(t.removeData(i.target,e.widgetName+".preventClickEvent"),i.stopImmediatePropagation(),!1):void 0}),this.started=!1},_mouseDestroy:function(){this.element.off("."+this.widgetName),this._mouseMoveDelegate&&this.document.off("mousemove."+this.widgetName,this._mouseMoveDelegate).off("mouseup."+this.widgetName,this._mouseUpDelegate)},_mouseDown:function(e){if(!_){this._mouseMoved=!1,this._mouseStarted&&this._mouseUp(e),this._mouseDownEvent=e;var i=this,s=1===e.which,n="string"==typeof this.options.cancel&&e.target.nodeName?t(e.target).closest(this.options.cancel).length:!1;return s&&!n&&this._mouseCapture(e)?(this.mouseDelayMet=!this.options.delay,this.mouseDelayMet||(this._mouseDelayTimer=setTimeout(function(){i.mouseDelayMet=!0},this.options.delay)),this._mouseDistanceMet(e)&&this._mouseDelayMet(e)&&(this._mouseStarted=this._mouseStart(e)!==!1,!this._mouseStarted)?(e.preventDefault(),!0):(!0===t.data(e.target,this.widgetName+".preventClickEvent")&&t.removeData(e.target,this.widgetName+".preventClickEvent"),this._mouseMoveDelegate=function(t){return i._mouseMove(t)},this._mouseUpDelegate=function(t){return i._mouseUp(t)},this.document.on("mousemove."+this.widgetName,this._mouseMoveDelegate).on("mouseup."+this.widgetName,this._mouseUpDelegate),e.preventDefault(),_=!0,!0)):!0}},_mouseMove:function(e){if(this._mouseMoved){if(t.ui.ie&&(!document.documentMode||9>document.documentMode)&&!e.button)return this._mouseUp(e);if(!e.which)if(e.originalEvent.altKey||e.originalEvent.ctrlKey||e.originalEvent.metaKey||e.originalEvent.shiftKey)this.ignoreMissingWhich=!0;else if(!this.ignoreMissingWhich)return this._mouseUp(e)}return(e.which||e.button)&&(this._mouseMoved=!0),this._mouseStarted?(this._mouseDrag(e),e.preventDefault()):(this._mouseDistanceMet(e)&&this._mouseDelayMet(e)&&(this._mouseStarted=this._mouseStart(this._mouseDownEvent,e)!==!1,this._mouseStarted?this._mouseDrag(e):this._mouseUp(e)),!this._mouseStarted)},_mouseUp:function(e){this.document.off("mousemove."+this.widgetName,this._mouseMoveDelegate).off("mouseup."+this.widgetName,this._mouseUpDelegate),this._mouseStarted&&(this._mouseStarted=!1,e.target===this._mouseDownEvent.target&&t.data(e.target,this.widgetName+".preventClickEvent",!0),this._mouseStop(e)),this._mouseDelayTimer&&(clearTimeout(this._mouseDelayTimer),delete this._mouseDelayTimer),this.ignoreMissingWhich=!1,_=!1,e.preventDefault()},_mouseDistanceMet:function(t){return Math.max(Math.abs(this._mouseDownEvent.pageX-t.pageX),Math.abs(this._mouseDownEvent.pageY-t.pageY))>=this.options.distance},_mouseDelayMet:function(){return this.mouseDelayMet},_mouseStart:function(){},_mouseDrag:function(){},_mouseStop:function(){},_mouseCapture:function(){return!0}}),t.ui.plugin={add:function(e,i,s){var n,o=t.ui[e].prototype;for(n in s)o.plugins[n]=o.plugins[n]||[],o.plugins[n].push([i,s[n]])},call:function(t,e,i,s){var n,o=t.plugins[e];if(o&&(s||t.element[0].parentNode&&11!==t.element[0].parentNode.nodeType))for(n=0;o.length>n;n++)t.options[o[n][0]]&&o[n][1].apply(t.element,i)}},t.ui.safeBlur=function(e){e&&"body"!==e.nodeName.toLowerCase()&&t(e).trigger("blur")},t.widget("ui.draggable",t.ui.mouse,{version:"1.12.1",widgetEventPrefix:"drag",options:{addClasses:!0,appendTo:"parent",axis:!1,connectToSortable:!1,containment:!1,cursor:"auto",cursorAt:!1,grid:!1,handle:!1,helper:"original",iframeFix:!1,opacity:!1,refreshPositions:!1,revert:!1,revertDuration:500,scope:"default",scroll:!0,scrollSensitivity:20,scrollSpeed:20,snap:!1,snapMode:"both",snapTolerance:20,stack:!1,zIndex:!1,drag:null,start:null,stop:null},_create:function(){"original"===this.options.helper&&this._setPositionRelative(),this.options.addClasses&&this._addClass("ui-draggable"),this._setHandleClassName(),this._mouseInit()},_setOption:function(t,e){this._super(t,e),"handle"===t&&(this._removeHandleClassName(),this._setHandleClassName())},_destroy:function(){return(this.helper||this.element).is(".ui-draggable-dragging")?(this.destroyOnClear=!0,void 0):(this._removeHandleClassName(),this._mouseDestroy(),void 0)},_mouseCapture:function(e){var i=this.options;return this.helper||i.disabled||t(e.target).closest(".ui-resizable-handle").length>0?!1:(this.handle=this._getHandle(e),this.handle?(this._blurActiveElement(e),this._blockFrames(i.iframeFix===!0?"iframe":i.iframeFix),!0):!1)},_blockFrames:function(e){this.iframeBlocks=this.document.find(e).map(function(){var e=t(this);return t("<div>").css("position","absolute").appendTo(e.parent()).outerWidth(e.outerWidth()).outerHeight(e.outerHeight()).offset(e.offset())[0]})},_unblockFrames:function(){this.iframeBlocks&&(this.iframeBlocks.remove(),delete this.iframeBlocks)},_blurActiveElement:function(e){var i=t.ui.safeActiveElement(this.document[0]),s=t(e.target);s.closest(i).length||t.ui.safeBlur(i)},_mouseStart:function(e){var i=this.options;return this.helper=this._createHelper(e),this._addClass(this.helper,"ui-draggable-dragging"),this._cacheHelperProportions(),t.ui.ddmanager&&(t.ui.ddmanager.current=this),this._cacheMargins(),this.cssPosition=this.helper.css("position"),this.scrollParent=this.helper.scrollParent(!0),this.offsetParent=this.helper.offsetParent(),this.hasFixedAncestor=this.helper.parents().filter(function(){return"fixed"===t(this).css("position")}).length>0,this.positionAbs=this.element.offset(),this._refreshOffsets(e),this.originalPosition=this.position=this._generatePosition(e,!1),this.originalPageX=e.pageX,this.originalPageY=e.pageY,i.cursorAt&&this._adjustOffsetFromHelper(i.cursorAt),this._setContainment(),this._trigger("start",e)===!1?(this._clear(),!1):(this._cacheHelperProportions(),t.ui.ddmanager&&!i.dropBehaviour&&t.ui.ddmanager.prepareOffsets(this,e),this._mouseDrag(e,!0),t.ui.ddmanager&&t.ui.ddmanager.dragStart(this,e),!0)},_refreshOffsets:function(t){this.offset={top:this.positionAbs.top-this.margins.top,left:this.positionAbs.left-this.margins.left,scroll:!1,parent:this._getParentOffset(),relative:this._getRelativeOffset()},this.offset.click={left:t.pageX-this.offset.left,top:t.pageY-this.offset.top}},_mouseDrag:function(e,i){if(this.hasFixedAncestor&&(this.offset.parent=this._getParentOffset()),this.position=this._generatePosition(e,!0),this.positionAbs=this._convertPositionTo("absolute"),!i){var s=this._uiHash();if(this._trigger("drag",e,s)===!1)return this._mouseUp(new t.Event("mouseup",e)),!1;this.position=s.position}return this.helper[0].style.left=this.position.left+"px",this.helper[0].style.top=this.position.top+"px",t.ui.ddmanager&&t.ui.ddmanager.drag(this,e),!1},_mouseStop:function(e){var i=this,s=!1;return t.ui.ddmanager&&!this.options.dropBehaviour&&(s=t.ui.ddmanager.drop(this,e)),this.dropped&&(s=this.dropped,this.dropped=!1),"invalid"===this.options.revert&&!s||"valid"===this.options.revert&&s||this.options.revert===!0||t.isFunction(this.options.revert)&&this.options.revert.call(this.element,s)?t(this.helper).animate(this.originalPosition,parseInt(this.options.revertDuration,10),function(){i._trigger("stop",e)!==!1&&i._clear()}):this._trigger("stop",e)!==!1&&this._clear(),!1},_mouseUp:function(e){return this._unblockFrames(),t.ui.ddmanager&&t.ui.ddmanager.dragStop(this,e),this.handleElement.is(e.target)&&this.element.trigger("focus"),t.ui.mouse.prototype._mouseUp.call(this,e)},cancel:function(){return this.helper.is(".ui-draggable-dragging")?this._mouseUp(new t.Event("mouseup",{target:this.element[0]})):this._clear(),this},_getHandle:function(e){return this.options.handle?!!t(e.target).closest(this.element.find(this.options.handle)).length:!0},_setHandleClassName:function(){this.handleElement=this.options.handle?this.element.find(this.options.handle):this.element,this._addClass(this.handleElement,"ui-draggable-handle")},_removeHandleClassName:function(){this._removeClass(this.handleElement,"ui-draggable-handle")},_createHelper:function(e){var i=this.options,s=t.isFunction(i.helper),n=s?t(i.helper.apply(this.element[0],[e])):"clone"===i.helper?this.element.clone().removeAttr("id"):this.element;return n.parents("body").length||n.appendTo("parent"===i.appendTo?this.element[0].parentNode:i.appendTo),s&&n[0]===this.element[0]&&this._setPositionRelative(),n[0]===this.element[0]||/(fixed|absolute)/.test(n.css("position"))||n.css("position","absolute"),n},_setPositionRelative:function(){/^(?:r|a|f)/.test(this.element.css("position"))||(this.element[0].style.position="relative")},_adjustOffsetFromHelper:function(e){"string"==typeof e&&(e=e.split(" ")),t.isArray(e)&&(e={left:+e[0],top:+e[1]||0}),"left"in e&&(this.offset.click.left=e.left+this.margins.left),"right"in e&&(this.offset.click.left=this.helperProportions.width-e.right+this.margins.left),"top"in e&&(this.offset.click.top=e.top+this.margins.top),"bottom"in e&&(this.offset.click.top=this.helperProportions.height-e.bottom+this.margins.top)},_isRootNode:function(t){return/(html|body)/i.test(t.tagName)||t===this.document[0]},_getParentOffset:function(){var e=this.offsetParent.offset(),i=this.document[0];return"absolute"===this.cssPosition&&this.scrollParent[0]!==i&&t.contains(this.scrollParent[0],this.offsetParent[0])&&(e.left+=this.scrollParent.scrollLeft(),e.top+=this.scrollParent.scrollTop()),this._isRootNode(this.offsetParent[0])&&(e={top:0,left:0}),{top:e.top+(parseInt(this.offsetParent.css("borderTopWidth"),10)||0),left:e.left+(parseInt(this.offsetParent.css("borderLeftWidth"),10)||0)}},_getRelativeOffset:function(){if("relative"!==this.cssPosition)return{top:0,left:0};var t=this.element.position(),e=this._isRootNode(this.scrollParent[0]);return{top:t.top-(parseInt(this.helper.css("top"),10)||0)+(e?0:this.scrollParent.scrollTop()),left:t.left-(parseInt(this.helper.css("left"),10)||0)+(e?0:this.scrollParent.scrollLeft())}
},_cacheMargins:function(){this.margins={left:parseInt(this.element.css("marginLeft"),10)||0,top:parseInt(this.element.css("marginTop"),10)||0,right:parseInt(this.element.css("marginRight"),10)||0,bottom:parseInt(this.element.css("marginBottom"),10)||0}},_cacheHelperProportions:function(){this.helperProportions={width:this.helper.outerWidth(),height:this.helper.outerHeight()}},_setContainment:function(){var e,i,s,n=this.options,o=this.document[0];return this.relativeContainer=null,n.containment?"window"===n.containment?(this.containment=[t(window).scrollLeft()-this.offset.relative.left-this.offset.parent.left,t(window).scrollTop()-this.offset.relative.top-this.offset.parent.top,t(window).scrollLeft()+t(window).width()-this.helperProportions.width-this.margins.left,t(window).scrollTop()+(t(window).height()||o.body.parentNode.scrollHeight)-this.helperProportions.height-this.margins.top],void 0):"document"===n.containment?(this.containment=[0,0,t(o).width()-this.helperProportions.width-this.margins.left,(t(o).height()||o.body.parentNode.scrollHeight)-this.helperProportions.height-this.margins.top],void 0):n.containment.constructor===Array?(this.containment=n.containment,void 0):("parent"===n.containment&&(n.containment=this.helper[0].parentNode),i=t(n.containment),s=i[0],s&&(e=/(scroll|auto)/.test(i.css("overflow")),this.containment=[(parseInt(i.css("borderLeftWidth"),10)||0)+(parseInt(i.css("paddingLeft"),10)||0),(parseInt(i.css("borderTopWidth"),10)||0)+(parseInt(i.css("paddingTop"),10)||0),(e?Math.max(s.scrollWidth,s.offsetWidth):s.offsetWidth)-(parseInt(i.css("borderRightWidth"),10)||0)-(parseInt(i.css("paddingRight"),10)||0)-this.helperProportions.width-this.margins.left-this.margins.right,(e?Math.max(s.scrollHeight,s.offsetHeight):s.offsetHeight)-(parseInt(i.css("borderBottomWidth"),10)||0)-(parseInt(i.css("paddingBottom"),10)||0)-this.helperProportions.height-this.margins.top-this.margins.bottom],this.relativeContainer=i),void 0):(this.containment=null,void 0)},_convertPositionTo:function(t,e){e||(e=this.position);var i="absolute"===t?1:-1,s=this._isRootNode(this.scrollParent[0]);return{top:e.top+this.offset.relative.top*i+this.offset.parent.top*i-("fixed"===this.cssPosition?-this.offset.scroll.top:s?0:this.offset.scroll.top)*i,left:e.left+this.offset.relative.left*i+this.offset.parent.left*i-("fixed"===this.cssPosition?-this.offset.scroll.left:s?0:this.offset.scroll.left)*i}},_generatePosition:function(t,e){var i,s,n,o,a=this.options,r=this._isRootNode(this.scrollParent[0]),h=t.pageX,l=t.pageY;return r&&this.offset.scroll||(this.offset.scroll={top:this.scrollParent.scrollTop(),left:this.scrollParent.scrollLeft()}),e&&(this.containment&&(this.relativeContainer?(s=this.relativeContainer.offset(),i=[this.containment[0]+s.left,this.containment[1]+s.top,this.containment[2]+s.left,this.containment[3]+s.top]):i=this.containment,t.pageX-this.offset.click.left<i[0]&&(h=i[0]+this.offset.click.left),t.pageY-this.offset.click.top<i[1]&&(l=i[1]+this.offset.click.top),t.pageX-this.offset.click.left>i[2]&&(h=i[2]+this.offset.click.left),t.pageY-this.offset.click.top>i[3]&&(l=i[3]+this.offset.click.top)),a.grid&&(n=a.grid[1]?this.originalPageY+Math.round((l-this.originalPageY)/a.grid[1])*a.grid[1]:this.originalPageY,l=i?n-this.offset.click.top>=i[1]||n-this.offset.click.top>i[3]?n:n-this.offset.click.top>=i[1]?n-a.grid[1]:n+a.grid[1]:n,o=a.grid[0]?this.originalPageX+Math.round((h-this.originalPageX)/a.grid[0])*a.grid[0]:this.originalPageX,h=i?o-this.offset.click.left>=i[0]||o-this.offset.click.left>i[2]?o:o-this.offset.click.left>=i[0]?o-a.grid[0]:o+a.grid[0]:o),"y"===a.axis&&(h=this.originalPageX),"x"===a.axis&&(l=this.originalPageY)),{top:l-this.offset.click.top-this.offset.relative.top-this.offset.parent.top+("fixed"===this.cssPosition?-this.offset.scroll.top:r?0:this.offset.scroll.top),left:h-this.offset.click.left-this.offset.relative.left-this.offset.parent.left+("fixed"===this.cssPosition?-this.offset.scroll.left:r?0:this.offset.scroll.left)}},_clear:function(){this._removeClass(this.helper,"ui-draggable-dragging"),this.helper[0]===this.element[0]||this.cancelHelperRemoval||this.helper.remove(),this.helper=null,this.cancelHelperRemoval=!1,this.destroyOnClear&&this.destroy()},_trigger:function(e,i,s){return s=s||this._uiHash(),t.ui.plugin.call(this,e,[i,s,this],!0),/^(drag|start|stop)/.test(e)&&(this.positionAbs=this._convertPositionTo("absolute"),s.offset=this.positionAbs),t.Widget.prototype._trigger.call(this,e,i,s)},plugins:{},_uiHash:function(){return{helper:this.helper,position:this.position,originalPosition:this.originalPosition,offset:this.positionAbs}}}),t.ui.plugin.add("draggable","connectToSortable",{start:function(e,i,s){var n=t.extend({},i,{item:s.element});s.sortables=[],t(s.options.connectToSortable).each(function(){var i=t(this).sortable("instance");i&&!i.options.disabled&&(s.sortables.push(i),i.refreshPositions(),i._trigger("activate",e,n))})},stop:function(e,i,s){var n=t.extend({},i,{item:s.element});s.cancelHelperRemoval=!1,t.each(s.sortables,function(){var t=this;t.isOver?(t.isOver=0,s.cancelHelperRemoval=!0,t.cancelHelperRemoval=!1,t._storedCSS={position:t.placeholder.css("position"),top:t.placeholder.css("top"),left:t.placeholder.css("left")},t._mouseStop(e),t.options.helper=t.options._helper):(t.cancelHelperRemoval=!0,t._trigger("deactivate",e,n))})},drag:function(e,i,s){t.each(s.sortables,function(){var n=!1,o=this;o.positionAbs=s.positionAbs,o.helperProportions=s.helperProportions,o.offset.click=s.offset.click,o._intersectsWith(o.containerCache)&&(n=!0,t.each(s.sortables,function(){return this.positionAbs=s.positionAbs,this.helperProportions=s.helperProportions,this.offset.click=s.offset.click,this!==o&&this._intersectsWith(this.containerCache)&&t.contains(o.element[0],this.element[0])&&(n=!1),n})),n?(o.isOver||(o.isOver=1,s._parent=i.helper.parent(),o.currentItem=i.helper.appendTo(o.element).data("ui-sortable-item",!0),o.options._helper=o.options.helper,o.options.helper=function(){return i.helper[0]},e.target=o.currentItem[0],o._mouseCapture(e,!0),o._mouseStart(e,!0,!0),o.offset.click.top=s.offset.click.top,o.offset.click.left=s.offset.click.left,o.offset.parent.left-=s.offset.parent.left-o.offset.parent.left,o.offset.parent.top-=s.offset.parent.top-o.offset.parent.top,s._trigger("toSortable",e),s.dropped=o.element,t.each(s.sortables,function(){this.refreshPositions()}),s.currentItem=s.element,o.fromOutside=s),o.currentItem&&(o._mouseDrag(e),i.position=o.position)):o.isOver&&(o.isOver=0,o.cancelHelperRemoval=!0,o.options._revert=o.options.revert,o.options.revert=!1,o._trigger("out",e,o._uiHash(o)),o._mouseStop(e,!0),o.options.revert=o.options._revert,o.options.helper=o.options._helper,o.placeholder&&o.placeholder.remove(),i.helper.appendTo(s._parent),s._refreshOffsets(e),i.position=s._generatePosition(e,!0),s._trigger("fromSortable",e),s.dropped=!1,t.each(s.sortables,function(){this.refreshPositions()}))})}}),t.ui.plugin.add("draggable","cursor",{start:function(e,i,s){var n=t("body"),o=s.options;n.css("cursor")&&(o._cursor=n.css("cursor")),n.css("cursor",o.cursor)},stop:function(e,i,s){var n=s.options;n._cursor&&t("body").css("cursor",n._cursor)}}),t.ui.plugin.add("draggable","opacity",{start:function(e,i,s){var n=t(i.helper),o=s.options;n.css("opacity")&&(o._opacity=n.css("opacity")),n.css("opacity",o.opacity)},stop:function(e,i,s){var n=s.options;n._opacity&&t(i.helper).css("opacity",n._opacity)}}),t.ui.plugin.add("draggable","scroll",{start:function(t,e,i){i.scrollParentNotHidden||(i.scrollParentNotHidden=i.helper.scrollParent(!1)),i.scrollParentNotHidden[0]!==i.document[0]&&"HTML"!==i.scrollParentNotHidden[0].tagName&&(i.overflowOffset=i.scrollParentNotHidden.offset())},drag:function(e,i,s){var n=s.options,o=!1,a=s.scrollParentNotHidden[0],r=s.document[0];a!==r&&"HTML"!==a.tagName?(n.axis&&"x"===n.axis||(s.overflowOffset.top+a.offsetHeight-e.pageY<n.scrollSensitivity?a.scrollTop=o=a.scrollTop+n.scrollSpeed:e.pageY-s.overflowOffset.top<n.scrollSensitivity&&(a.scrollTop=o=a.scrollTop-n.scrollSpeed)),n.axis&&"y"===n.axis||(s.overflowOffset.left+a.offsetWidth-e.pageX<n.scrollSensitivity?a.scrollLeft=o=a.scrollLeft+n.scrollSpeed:e.pageX-s.overflowOffset.left<n.scrollSensitivity&&(a.scrollLeft=o=a.scrollLeft-n.scrollSpeed))):(n.axis&&"x"===n.axis||(e.pageY-t(r).scrollTop()<n.scrollSensitivity?o=t(r).scrollTop(t(r).scrollTop()-n.scrollSpeed):t(window).height()-(e.pageY-t(r).scrollTop())<n.scrollSensitivity&&(o=t(r).scrollTop(t(r).scrollTop()+n.scrollSpeed))),n.axis&&"y"===n.axis||(e.pageX-t(r).scrollLeft()<n.scrollSensitivity?o=t(r).scrollLeft(t(r).scrollLeft()-n.scrollSpeed):t(window).width()-(e.pageX-t(r).scrollLeft())<n.scrollSensitivity&&(o=t(r).scrollLeft(t(r).scrollLeft()+n.scrollSpeed)))),o!==!1&&t.ui.ddmanager&&!n.dropBehaviour&&t.ui.ddmanager.prepareOffsets(s,e)}}),t.ui.plugin.add("draggable","snap",{start:function(e,i,s){var n=s.options;s.snapElements=[],t(n.snap.constructor!==String?n.snap.items||":data(ui-draggable)":n.snap).each(function(){var e=t(this),i=e.offset();this!==s.element[0]&&s.snapElements.push({item:this,width:e.outerWidth(),height:e.outerHeight(),top:i.top,left:i.left})})},drag:function(e,i,s){var n,o,a,r,h,l,c,u,d,p,f=s.options,g=f.snapTolerance,m=i.offset.left,_=m+s.helperProportions.width,v=i.offset.top,b=v+s.helperProportions.height;for(d=s.snapElements.length-1;d>=0;d--)h=s.snapElements[d].left-s.margins.left,l=h+s.snapElements[d].width,c=s.snapElements[d].top-s.margins.top,u=c+s.snapElements[d].height,h-g>_||m>l+g||c-g>b||v>u+g||!t.contains(s.snapElements[d].item.ownerDocument,s.snapElements[d].item)?(s.snapElements[d].snapping&&s.options.snap.release&&s.options.snap.release.call(s.element,e,t.extend(s._uiHash(),{snapItem:s.snapElements[d].item})),s.snapElements[d].snapping=!1):("inner"!==f.snapMode&&(n=g>=Math.abs(c-b),o=g>=Math.abs(u-v),a=g>=Math.abs(h-_),r=g>=Math.abs(l-m),n&&(i.position.top=s._convertPositionTo("relative",{top:c-s.helperProportions.height,left:0}).top),o&&(i.position.top=s._convertPositionTo("relative",{top:u,left:0}).top),a&&(i.position.left=s._convertPositionTo("relative",{top:0,left:h-s.helperProportions.width}).left),r&&(i.position.left=s._convertPositionTo("relative",{top:0,left:l}).left)),p=n||o||a||r,"outer"!==f.snapMode&&(n=g>=Math.abs(c-v),o=g>=Math.abs(u-b),a=g>=Math.abs(h-m),r=g>=Math.abs(l-_),n&&(i.position.top=s._convertPositionTo("relative",{top:c,left:0}).top),o&&(i.position.top=s._convertPositionTo("relative",{top:u-s.helperProportions.height,left:0}).top),a&&(i.position.left=s._convertPositionTo("relative",{top:0,left:h}).left),r&&(i.position.left=s._convertPositionTo("relative",{top:0,left:l-s.helperProportions.width}).left)),!s.snapElements[d].snapping&&(n||o||a||r||p)&&s.options.snap.snap&&s.options.snap.snap.call(s.element,e,t.extend(s._uiHash(),{snapItem:s.snapElements[d].item})),s.snapElements[d].snapping=n||o||a||r||p)}}),t.ui.plugin.add("draggable","stack",{start:function(e,i,s){var n,o=s.options,a=t.makeArray(t(o.stack)).sort(function(e,i){return(parseInt(t(e).css("zIndex"),10)||0)-(parseInt(t(i).css("zIndex"),10)||0)});a.length&&(n=parseInt(t(a[0]).css("zIndex"),10)||0,t(a).each(function(e){t(this).css("zIndex",n+e)}),this.css("zIndex",n+a.length))}}),t.ui.plugin.add("draggable","zIndex",{start:function(e,i,s){var n=t(i.helper),o=s.options;n.css("zIndex")&&(o._zIndex=n.css("zIndex")),n.css("zIndex",o.zIndex)},stop:function(e,i,s){var n=s.options;n._zIndex&&t(i.helper).css("zIndex",n._zIndex)}}),t.ui.draggable,t.widget("ui.resizable",t.ui.mouse,{version:"1.12.1",widgetEventPrefix:"resize",options:{alsoResize:!1,animate:!1,animateDuration:"slow",animateEasing:"swing",aspectRatio:!1,autoHide:!1,classes:{"ui-resizable-se":"ui-icon ui-icon-gripsmall-diagonal-se"},containment:!1,ghost:!1,grid:!1,handles:"e,s,se",helper:!1,maxHeight:null,maxWidth:null,minHeight:10,minWidth:10,zIndex:90,resize:null,start:null,stop:null},_num:function(t){return parseFloat(t)||0},_isNumber:function(t){return!isNaN(parseFloat(t))},_hasScroll:function(e,i){if("hidden"===t(e).css("overflow"))return!1;var s=i&&"left"===i?"scrollLeft":"scrollTop",n=!1;return e[s]>0?!0:(e[s]=1,n=e[s]>0,e[s]=0,n)},_create:function(){var e,i=this.options,s=this;this._addClass("ui-resizable"),t.extend(this,{_aspectRatio:!!i.aspectRatio,aspectRatio:i.aspectRatio,originalElement:this.element,_proportionallyResizeElements:[],_helper:i.helper||i.ghost||i.animate?i.helper||"ui-resizable-helper":null}),this.element[0].nodeName.match(/^(canvas|textarea|input|select|button|img)$/i)&&(this.element.wrap(t("<div class='ui-wrapper' style='overflow: hidden;'></div>").css({position:this.element.css("position"),width:this.element.outerWidth(),height:this.element.outerHeight(),top:this.element.css("top"),left:this.element.css("left")})),this.element=this.element.parent().data("ui-resizable",this.element.resizable("instance")),this.elementIsWrapper=!0,e={marginTop:this.originalElement.css("marginTop"),marginRight:this.originalElement.css("marginRight"),marginBottom:this.originalElement.css("marginBottom"),marginLeft:this.originalElement.css("marginLeft")},this.element.css(e),this.originalElement.css("margin",0),this.originalResizeStyle=this.originalElement.css("resize"),this.originalElement.css("resize","none"),this._proportionallyResizeElements.push(this.originalElement.css({position:"static",zoom:1,display:"block"})),this.originalElement.css(e),this._proportionallyResize()),this._setupHandles(),i.autoHide&&t(this.element).on("mouseenter",function(){i.disabled||(s._removeClass("ui-resizable-autohide"),s._handles.show())}).on("mouseleave",function(){i.disabled||s.resizing||(s._addClass("ui-resizable-autohide"),s._handles.hide())}),this._mouseInit()},_destroy:function(){this._mouseDestroy();var e,i=function(e){t(e).removeData("resizable").removeData("ui-resizable").off(".resizable").find(".ui-resizable-handle").remove()};return this.elementIsWrapper&&(i(this.element),e=this.element,this.originalElement.css({position:e.css("position"),width:e.outerWidth(),height:e.outerHeight(),top:e.css("top"),left:e.css("left")}).insertAfter(e),e.remove()),this.originalElement.css("resize",this.originalResizeStyle),i(this.originalElement),this},_setOption:function(t,e){switch(this._super(t,e),t){case"handles":this._removeHandles(),this._setupHandles();break;default:}},_setupHandles:function(){var e,i,s,n,o,a=this.options,r=this;if(this.handles=a.handles||(t(".ui-resizable-handle",this.element).length?{n:".ui-resizable-n",e:".ui-resizable-e",s:".ui-resizable-s",w:".ui-resizable-w",se:".ui-resizable-se",sw:".ui-resizable-sw",ne:".ui-resizable-ne",nw:".ui-resizable-nw"}:"e,s,se"),this._handles=t(),this.handles.constructor===String)for("all"===this.handles&&(this.handles="n,e,s,w,se,sw,ne,nw"),s=this.handles.split(","),this.handles={},i=0;s.length>i;i++)e=t.trim(s[i]),n="ui-resizable-"+e,o=t("<div>"),this._addClass(o,"ui-resizable-handle "+n),o.css({zIndex:a.zIndex}),this.handles[e]=".ui-resizable-"+e,this.element.append(o);this._renderAxis=function(e){var i,s,n,o;e=e||this.element;for(i in this.handles)this.handles[i].constructor===String?this.handles[i]=this.element.children(this.handles[i]).first().show():(this.handles[i].jquery||this.handles[i].nodeType)&&(this.handles[i]=t(this.handles[i]),this._on(this.handles[i],{mousedown:r._mouseDown})),this.elementIsWrapper&&this.originalElement[0].nodeName.match(/^(textarea|input|select|button)$/i)&&(s=t(this.handles[i],this.element),o=/sw|ne|nw|se|n|s/.test(i)?s.outerHeight():s.outerWidth(),n=["padding",/ne|nw|n/.test(i)?"Top":/se|sw|s/.test(i)?"Bottom":/^e$/.test(i)?"Right":"Left"].join(""),e.css(n,o),this._proportionallyResize()),this._handles=this._handles.add(this.handles[i])},this._renderAxis(this.element),this._handles=this._handles.add(this.element.find(".ui-resizable-handle")),this._handles.disableSelection(),this._handles.on("mouseover",function(){r.resizing||(this.className&&(o=this.className.match(/ui-resizable-(se|sw|ne|nw|n|e|s|w)/i)),r.axis=o&&o[1]?o[1]:"se")}),a.autoHide&&(this._handles.hide(),this._addClass("ui-resizable-autohide"))},_removeHandles:function(){this._handles.remove()},_mouseCapture:function(e){var i,s,n=!1;for(i in this.handles)s=t(this.handles[i])[0],(s===e.target||t.contains(s,e.target))&&(n=!0);return!this.options.disabled&&n},_mouseStart:function(e){var i,s,n,o=this.options,a=this.element;return this.resizing=!0,this._renderProxy(),i=this._num(this.helper.css("left")),s=this._num(this.helper.css("top")),o.containment&&(i+=t(o.containment).scrollLeft()||0,s+=t(o.containment).scrollTop()||0),this.offset=this.helper.offset(),this.position={left:i,top:s},this.size=this._helper?{width:this.helper.width(),height:this.helper.height()}:{width:a.width(),height:a.height()},this.originalSize=this._helper?{width:a.outerWidth(),height:a.outerHeight()}:{width:a.width(),height:a.height()},this.sizeDiff={width:a.outerWidth()-a.width(),height:a.outerHeight()-a.height()},this.originalPosition={left:i,top:s},this.originalMousePosition={left:e.pageX,top:e.pageY},this.aspectRatio="number"==typeof o.aspectRatio?o.aspectRatio:this.originalSize.width/this.originalSize.height||1,n=t(".ui-resizable-"+this.axis).css("cursor"),t("body").css("cursor","auto"===n?this.axis+"-resize":n),this._addClass("ui-resizable-resizing"),this._propagate("start",e),!0},_mouseDrag:function(e){var i,s,n=this.originalMousePosition,o=this.axis,a=e.pageX-n.left||0,r=e.pageY-n.top||0,h=this._change[o];return this._updatePrevProperties(),h?(i=h.apply(this,[e,a,r]),this._updateVirtualBoundaries(e.shiftKey),(this._aspectRatio||e.shiftKey)&&(i=this._updateRatio(i,e)),i=this._respectSize(i,e),this._updateCache(i),this._propagate("resize",e),s=this._applyChanges(),!this._helper&&this._proportionallyResizeElements.length&&this._proportionallyResize(),t.isEmptyObject(s)||(this._updatePrevProperties(),this._trigger("resize",e,this.ui()),this._applyChanges()),!1):!1},_mouseStop:function(e){this.resizing=!1;var i,s,n,o,a,r,h,l=this.options,c=this;return this._helper&&(i=this._proportionallyResizeElements,s=i.length&&/textarea/i.test(i[0].nodeName),n=s&&this._hasScroll(i[0],"left")?0:c.sizeDiff.height,o=s?0:c.sizeDiff.width,a={width:c.helper.width()-o,height:c.helper.height()-n},r=parseFloat(c.element.css("left"))+(c.position.left-c.originalPosition.left)||null,h=parseFloat(c.element.css("top"))+(c.position.top-c.originalPosition.top)||null,l.animate||this.element.css(t.extend(a,{top:h,left:r})),c.helper.height(c.size.height),c.helper.width(c.size.width),this._helper&&!l.animate&&this._proportionallyResize()),t("body").css("cursor","auto"),this._removeClass("ui-resizable-resizing"),this._propagate("stop",e),this._helper&&this.helper.remove(),!1},_updatePrevProperties:function(){this.prevPosition={top:this.position.top,left:this.position.left},this.prevSize={width:this.size.width,height:this.size.height}},_applyChanges:function(){var t={};return this.position.top!==this.prevPosition.top&&(t.top=this.position.top+"px"),this.position.left!==this.prevPosition.left&&(t.left=this.position.left+"px"),this.size.width!==this.prevSize.width&&(t.width=this.size.width+"px"),this.size.height!==this.prevSize.height&&(t.height=this.size.height+"px"),this.helper.css(t),t},_updateVirtualBoundaries:function(t){var e,i,s,n,o,a=this.options;o={minWidth:this._isNumber(a.minWidth)?a.minWidth:0,maxWidth:this._isNumber(a.maxWidth)?a.maxWidth:1/0,minHeight:this._isNumber(a.minHeight)?a.minHeight:0,maxHeight:this._isNumber(a.maxHeight)?a.maxHeight:1/0},(this._aspectRatio||t)&&(e=o.minHeight*this.aspectRatio,s=o.minWidth/this.aspectRatio,i=o.maxHeight*this.aspectRatio,n=o.maxWidth/this.aspectRatio,e>o.minWidth&&(o.minWidth=e),s>o.minHeight&&(o.minHeight=s),o.maxWidth>i&&(o.maxWidth=i),o.maxHeight>n&&(o.maxHeight=n)),this._vBoundaries=o},_updateCache:function(t){this.offset=this.helper.offset(),this._isNumber(t.left)&&(this.position.left=t.left),this._isNumber(t.top)&&(this.position.top=t.top),this._isNumber(t.height)&&(this.size.height=t.height),this._isNumber(t.width)&&(this.size.width=t.width)},_updateRatio:function(t){var e=this.position,i=this.size,s=this.axis;return this._isNumber(t.height)?t.width=t.height*this.aspectRatio:this._isNumber(t.width)&&(t.height=t.width/this.aspectRatio),"sw"===s&&(t.left=e.left+(i.width-t.width),t.top=null),"nw"===s&&(t.top=e.top+(i.height-t.height),t.left=e.left+(i.width-t.width)),t},_respectSize:function(t){var e=this._vBoundaries,i=this.axis,s=this._isNumber(t.width)&&e.maxWidth&&e.maxWidth<t.width,n=this._isNumber(t.height)&&e.maxHeight&&e.maxHeight<t.height,o=this._isNumber(t.width)&&e.minWidth&&e.minWidth>t.width,a=this._isNumber(t.height)&&e.minHeight&&e.minHeight>t.height,r=this.originalPosition.left+this.originalSize.width,h=this.originalPosition.top+this.originalSize.height,l=/sw|nw|w/.test(i),c=/nw|ne|n/.test(i);return o&&(t.width=e.minWidth),a&&(t.height=e.minHeight),s&&(t.width=e.maxWidth),n&&(t.height=e.maxHeight),o&&l&&(t.left=r-e.minWidth),s&&l&&(t.left=r-e.maxWidth),a&&c&&(t.top=h-e.minHeight),n&&c&&(t.top=h-e.maxHeight),t.width||t.height||t.left||!t.top?t.width||t.height||t.top||!t.left||(t.left=null):t.top=null,t},_getPaddingPlusBorderDimensions:function(t){for(var e=0,i=[],s=[t.css("borderTopWidth"),t.css("borderRightWidth"),t.css("borderBottomWidth"),t.css("borderLeftWidth")],n=[t.css("paddingTop"),t.css("paddingRight"),t.css("paddingBottom"),t.css("paddingLeft")];4>e;e++)i[e]=parseFloat(s[e])||0,i[e]+=parseFloat(n[e])||0;return{height:i[0]+i[2],width:i[1]+i[3]}},_proportionallyResize:function(){if(this._proportionallyResizeElements.length)for(var t,e=0,i=this.helper||this.element;this._proportionallyResizeElements.length>e;e++)t=this._proportionallyResizeElements[e],this.outerDimensions||(this.outerDimensions=this._getPaddingPlusBorderDimensions(t)),t.css({height:i.height()-this.outerDimensions.height||0,width:i.width()-this.outerDimensions.width||0})},_renderProxy:function(){var e=this.element,i=this.options;this.elementOffset=e.offset(),this._helper?(this.helper=this.helper||t("<div style='overflow:hidden;'></div>"),this._addClass(this.helper,this._helper),this.helper.css({width:this.element.outerWidth(),height:this.element.outerHeight(),position:"absolute",left:this.elementOffset.left+"px",top:this.elementOffset.top+"px",zIndex:++i.zIndex}),this.helper.appendTo("body").disableSelection()):this.helper=this.element},_change:{e:function(t,e){return{width:this.originalSize.width+e}},w:function(t,e){var i=this.originalSize,s=this.originalPosition;return{left:s.left+e,width:i.width-e}},n:function(t,e,i){var s=this.originalSize,n=this.originalPosition;return{top:n.top+i,height:s.height-i}},s:function(t,e,i){return{height:this.originalSize.height+i}},se:function(e,i,s){return t.extend(this._change.s.apply(this,arguments),this._change.e.apply(this,[e,i,s]))},sw:function(e,i,s){return t.extend(this._change.s.apply(this,arguments),this._change.w.apply(this,[e,i,s]))},ne:function(e,i,s){return t.extend(this._change.n.apply(this,arguments),this._change.e.apply(this,[e,i,s]))},nw:function(e,i,s){return t.extend(this._change.n.apply(this,arguments),this._change.w.apply(this,[e,i,s]))}},_propagate:function(e,i){t.ui.plugin.call(this,e,[i,this.ui()]),"resize"!==e&&this._trigger(e,i,this.ui())},plugins:{},ui:function(){return{originalElement:this.originalElement,element:this.element,helper:this.helper,position:this.position,size:this.size,originalSize:this.originalSize,originalPosition:this.originalPosition}}}),t.ui.plugin.add("resizable","animate",{stop:function(e){var i=t(this).resizable("instance"),s=i.options,n=i._proportionallyResizeElements,o=n.length&&/textarea/i.test(n[0].nodeName),a=o&&i._hasScroll(n[0],"left")?0:i.sizeDiff.height,r=o?0:i.sizeDiff.width,h={width:i.size.width-r,height:i.size.height-a},l=parseFloat(i.element.css("left"))+(i.position.left-i.originalPosition.left)||null,c=parseFloat(i.element.css("top"))+(i.position.top-i.originalPosition.top)||null;i.element.animate(t.extend(h,c&&l?{top:c,left:l}:{}),{duration:s.animateDuration,easing:s.animateEasing,step:function(){var s={width:parseFloat(i.element.css("width")),height:parseFloat(i.element.css("height")),top:parseFloat(i.element.css("top")),left:parseFloat(i.element.css("left"))};n&&n.length&&t(n[0]).css({width:s.width,height:s.height}),i._updateCache(s),i._propagate("resize",e)}})}}),t.ui.plugin.add("resizable","containment",{start:function(){var e,i,s,n,o,a,r,h=t(this).resizable("instance"),l=h.options,c=h.element,u=l.containment,d=u instanceof t?u.get(0):/parent/.test(u)?c.parent().get(0):u;d&&(h.containerElement=t(d),/document/.test(u)||u===document?(h.containerOffset={left:0,top:0},h.containerPosition={left:0,top:0},h.parentData={element:t(document),left:0,top:0,width:t(document).width(),height:t(document).height()||document.body.parentNode.scrollHeight}):(e=t(d),i=[],t(["Top","Right","Left","Bottom"]).each(function(t,s){i[t]=h._num(e.css("padding"+s))}),h.containerOffset=e.offset(),h.containerPosition=e.position(),h.containerSize={height:e.innerHeight()-i[3],width:e.innerWidth()-i[1]},s=h.containerOffset,n=h.containerSize.height,o=h.containerSize.width,a=h._hasScroll(d,"left")?d.scrollWidth:o,r=h._hasScroll(d)?d.scrollHeight:n,h.parentData={element:d,left:s.left,top:s.top,width:a,height:r}))},resize:function(e){var i,s,n,o,a=t(this).resizable("instance"),r=a.options,h=a.containerOffset,l=a.position,c=a._aspectRatio||e.shiftKey,u={top:0,left:0},d=a.containerElement,p=!0;d[0]!==document&&/static/.test(d.css("position"))&&(u=h),l.left<(a._helper?h.left:0)&&(a.size.width=a.size.width+(a._helper?a.position.left-h.left:a.position.left-u.left),c&&(a.size.height=a.size.width/a.aspectRatio,p=!1),a.position.left=r.helper?h.left:0),l.top<(a._helper?h.top:0)&&(a.size.height=a.size.height+(a._helper?a.position.top-h.top:a.position.top),c&&(a.size.width=a.size.height*a.aspectRatio,p=!1),a.position.top=a._helper?h.top:0),n=a.containerElement.get(0)===a.element.parent().get(0),o=/relative|absolute/.test(a.containerElement.css("position")),n&&o?(a.offset.left=a.parentData.left+a.position.left,a.offset.top=a.parentData.top+a.position.top):(a.offset.left=a.element.offset().left,a.offset.top=a.element.offset().top),i=Math.abs(a.sizeDiff.width+(a._helper?a.offset.left-u.left:a.offset.left-h.left)),s=Math.abs(a.sizeDiff.height+(a._helper?a.offset.top-u.top:a.offset.top-h.top)),i+a.size.width>=a.parentData.width&&(a.size.width=a.parentData.width-i,c&&(a.size.height=a.size.width/a.aspectRatio,p=!1)),s+a.size.height>=a.parentData.height&&(a.size.height=a.parentData.height-s,c&&(a.size.width=a.size.height*a.aspectRatio,p=!1)),p||(a.position.left=a.prevPosition.left,a.position.top=a.prevPosition.top,a.size.width=a.prevSize.width,a.size.height=a.prevSize.height)},stop:function(){var e=t(this).resizable("instance"),i=e.options,s=e.containerOffset,n=e.containerPosition,o=e.containerElement,a=t(e.helper),r=a.offset(),h=a.outerWidth()-e.sizeDiff.width,l=a.outerHeight()-e.sizeDiff.height;e._helper&&!i.animate&&/relative/.test(o.css("position"))&&t(this).css({left:r.left-n.left-s.left,width:h,height:l}),e._helper&&!i.animate&&/static/.test(o.css("position"))&&t(this).css({left:r.left-n.left-s.left,width:h,height:l})}}),t.ui.plugin.add("resizable","alsoResize",{start:function(){var e=t(this).resizable("instance"),i=e.options;t(i.alsoResize).each(function(){var e=t(this);e.data("ui-resizable-alsoresize",{width:parseFloat(e.width()),height:parseFloat(e.height()),left:parseFloat(e.css("left")),top:parseFloat(e.css("top"))})})},resize:function(e,i){var s=t(this).resizable("instance"),n=s.options,o=s.originalSize,a=s.originalPosition,r={height:s.size.height-o.height||0,width:s.size.width-o.width||0,top:s.position.top-a.top||0,left:s.position.left-a.left||0};t(n.alsoResize).each(function(){var e=t(this),s=t(this).data("ui-resizable-alsoresize"),n={},o=e.parents(i.originalElement[0]).length?["width","height"]:["width","height","top","left"];t.each(o,function(t,e){var i=(s[e]||0)+(r[e]||0);i&&i>=0&&(n[e]=i||null)}),e.css(n)})},stop:function(){t(this).removeData("ui-resizable-alsoresize")}}),t.ui.plugin.add("resizable","ghost",{start:function(){var e=t(this).resizable("instance"),i=e.size;e.ghost=e.originalElement.clone(),e.ghost.css({opacity:.25,display:"block",position:"relative",height:i.height,width:i.width,margin:0,left:0,top:0}),e._addClass(e.ghost,"ui-resizable-ghost"),t.uiBackCompat!==!1&&"string"==typeof e.options.ghost&&e.ghost.addClass(this.options.ghost),e.ghost.appendTo(e.helper)},resize:function(){var e=t(this).resizable("instance");e.ghost&&e.ghost.css({position:"relative",height:e.size.height,width:e.size.width})},stop:function(){var e=t(this).resizable("instance");e.ghost&&e.helper&&e.helper.get(0).removeChild(e.ghost.get(0))}}),t.ui.plugin.add("resizable","grid",{resize:function(){var e,i=t(this).resizable("instance"),s=i.options,n=i.size,o=i.originalSize,a=i.originalPosition,r=i.axis,h="number"==typeof s.grid?[s.grid,s.grid]:s.grid,l=h[0]||1,c=h[1]||1,u=Math.round((n.width-o.width)/l)*l,d=Math.round((n.height-o.height)/c)*c,p=o.width+u,f=o.height+d,g=s.maxWidth&&p>s.maxWidth,m=s.maxHeight&&f>s.maxHeight,_=s.minWidth&&s.minWidth>p,v=s.minHeight&&s.minHeight>f;s.grid=h,_&&(p+=l),v&&(f+=c),g&&(p-=l),m&&(f-=c),/^(se|s|e)$/.test(r)?(i.size.width=p,i.size.height=f):/^(ne)$/.test(r)?(i.size.width=p,i.size.height=f,i.position.top=a.top-d):/^(sw)$/.test(r)?(i.size.width=p,i.size.height=f,i.position.left=a.left-u):((0>=f-c||0>=p-l)&&(e=i._getPaddingPlusBorderDimensions(this)),f-c>0?(i.size.height=f,i.position.top=a.top-d):(f=c-e.height,i.size.height=f,i.position.top=a.top+o.height-f),p-l>0?(i.size.width=p,i.position.left=a.left-u):(p=l-e.width,i.size.width=p,i.position.left=a.left+o.width-p))}}),t.ui.resizable,t.widget("ui.dialog",{version:"1.12.1",options:{appendTo:"body",autoOpen:!0,buttons:[],classes:{"ui-dialog":"ui-corner-all","ui-dialog-titlebar":"ui-corner-all"},closeOnEscape:!0,closeText:"Close",draggable:!0,hide:null,height:"auto",maxHeight:null,maxWidth:null,minHeight:150,minWidth:150,modal:!1,position:{my:"center",at:"center",of:window,collision:"fit",using:function(e){var i=t(this).css(e).offset().top;0>i&&t(this).css("top",e.top-i)}},resizable:!0,show:null,title:null,width:300,beforeClose:null,close:null,drag:null,dragStart:null,dragStop:null,focus:null,open:null,resize:null,resizeStart:null,resizeStop:null},sizeRelatedOptions:{buttons:!0,height:!0,maxHeight:!0,maxWidth:!0,minHeight:!0,minWidth:!0,width:!0},resizableRelatedOptions:{maxHeight:!0,maxWidth:!0,minHeight:!0,minWidth:!0},_create:function(){this.originalCss={display:this.element[0].style.display,width:this.element[0].style.width,minHeight:this.element[0].style.minHeight,maxHeight:this.element[0].style.maxHeight,height:this.element[0].style.height},this.originalPosition={parent:this.element.parent(),index:this.element.parent().children().index(this.element)},this.originalTitle=this.element.attr("title"),null==this.options.title&&null!=this.originalTitle&&(this.options.title=this.originalTitle),this.options.disabled&&(this.options.disabled=!1),this._createWrapper(),this.element.show().removeAttr("title").appendTo(this.uiDialog),this._addClass("ui-dialog-content","ui-widget-content"),this._createTitlebar(),this._createButtonPane(),this.options.draggable&&t.fn.draggable&&this._makeDraggable(),this.options.resizable&&t.fn.resizable&&this._makeResizable(),this._isOpen=!1,this._trackFocus()},_init:function(){this.options.autoOpen&&this.open()},_appendTo:function(){var e=this.options.appendTo;return e&&(e.jquery||e.nodeType)?t(e):this.document.find(e||"body").eq(0)},_destroy:function(){var t,e=this.originalPosition;this._untrackInstance(),this._destroyOverlay(),this.element.removeUniqueId().css(this.originalCss).detach(),this.uiDialog.remove(),this.originalTitle&&this.element.attr("title",this.originalTitle),t=e.parent.children().eq(e.index),t.length&&t[0]!==this.element[0]?t.before(this.element):e.parent.append(this.element)},widget:function(){return this.uiDialog
},disable:t.noop,enable:t.noop,close:function(e){var i=this;this._isOpen&&this._trigger("beforeClose",e)!==!1&&(this._isOpen=!1,this._focusedElement=null,this._destroyOverlay(),this._untrackInstance(),this.opener.filter(":focusable").trigger("focus").length||t.ui.safeBlur(t.ui.safeActiveElement(this.document[0])),this._hide(this.uiDialog,this.options.hide,function(){i._trigger("close",e)}))},isOpen:function(){return this._isOpen},moveToTop:function(){this._moveToTop()},_moveToTop:function(e,i){var s=!1,n=this.uiDialog.siblings(".ui-front:visible").map(function(){return+t(this).css("z-index")}).get(),o=Math.max.apply(null,n);return o>=+this.uiDialog.css("z-index")&&(this.uiDialog.css("z-index",o+1),s=!0),s&&!i&&this._trigger("focus",e),s},open:function(){var e=this;return this._isOpen?(this._moveToTop()&&this._focusTabbable(),void 0):(this._isOpen=!0,this.opener=t(t.ui.safeActiveElement(this.document[0])),this._size(),this._position(),this._createOverlay(),this._moveToTop(null,!0),this.overlay&&this.overlay.css("z-index",this.uiDialog.css("z-index")-1),this._show(this.uiDialog,this.options.show,function(){e._focusTabbable(),e._trigger("focus")}),this._makeFocusTarget(),this._trigger("open"),void 0)},_focusTabbable:function(){var t=this._focusedElement;t||(t=this.element.find("[autofocus]")),t.length||(t=this.element.find(":tabbable")),t.length||(t=this.uiDialogButtonPane.find(":tabbable")),t.length||(t=this.uiDialogTitlebarClose.filter(":tabbable")),t.length||(t=this.uiDialog),t.eq(0).trigger("focus")},_keepFocus:function(e){function i(){var e=t.ui.safeActiveElement(this.document[0]),i=this.uiDialog[0]===e||t.contains(this.uiDialog[0],e);i||this._focusTabbable()}e.preventDefault(),i.call(this),this._delay(i)},_createWrapper:function(){this.uiDialog=t("<div>").hide().attr({tabIndex:-1,role:"dialog"}).appendTo(this._appendTo()),this._addClass(this.uiDialog,"ui-dialog","ui-widget ui-widget-content ui-front"),this._on(this.uiDialog,{keydown:function(e){if(this.options.closeOnEscape&&!e.isDefaultPrevented()&&e.keyCode&&e.keyCode===t.ui.keyCode.ESCAPE)return e.preventDefault(),this.close(e),void 0;if(e.keyCode===t.ui.keyCode.TAB&&!e.isDefaultPrevented()){var i=this.uiDialog.find(":tabbable"),s=i.filter(":first"),n=i.filter(":last");e.target!==n[0]&&e.target!==this.uiDialog[0]||e.shiftKey?e.target!==s[0]&&e.target!==this.uiDialog[0]||!e.shiftKey||(this._delay(function(){n.trigger("focus")}),e.preventDefault()):(this._delay(function(){s.trigger("focus")}),e.preventDefault())}},mousedown:function(t){this._moveToTop(t)&&this._focusTabbable()}}),this.element.find("[aria-describedby]").length||this.uiDialog.attr({"aria-describedby":this.element.uniqueId().attr("id")})},_createTitlebar:function(){var e;this.uiDialogTitlebar=t("<div>"),this._addClass(this.uiDialogTitlebar,"ui-dialog-titlebar","ui-widget-header ui-helper-clearfix"),this._on(this.uiDialogTitlebar,{mousedown:function(e){t(e.target).closest(".ui-dialog-titlebar-close")||this.uiDialog.trigger("focus")}}),this.uiDialogTitlebarClose=t("<button type='button'></button>").button({label:t("<a>").text(this.options.closeText).html(),icon:"ui-icon-closethick",showLabel:!1}).appendTo(this.uiDialogTitlebar),this._addClass(this.uiDialogTitlebarClose,"ui-dialog-titlebar-close"),this._on(this.uiDialogTitlebarClose,{click:function(t){t.preventDefault(),this.close(t)}}),e=t("<span>").uniqueId().prependTo(this.uiDialogTitlebar),this._addClass(e,"ui-dialog-title"),this._title(e),this.uiDialogTitlebar.prependTo(this.uiDialog),this.uiDialog.attr({"aria-labelledby":e.attr("id")})},_title:function(t){this.options.title?t.text(this.options.title):t.html("&#160;")},_createButtonPane:function(){this.uiDialogButtonPane=t("<div>"),this._addClass(this.uiDialogButtonPane,"ui-dialog-buttonpane","ui-widget-content ui-helper-clearfix"),this.uiButtonSet=t("<div>").appendTo(this.uiDialogButtonPane),this._addClass(this.uiButtonSet,"ui-dialog-buttonset"),this._createButtons()},_createButtons:function(){var e=this,i=this.options.buttons;return this.uiDialogButtonPane.remove(),this.uiButtonSet.empty(),t.isEmptyObject(i)||t.isArray(i)&&!i.length?(this._removeClass(this.uiDialog,"ui-dialog-buttons"),void 0):(t.each(i,function(i,s){var n,o;s=t.isFunction(s)?{click:s,text:i}:s,s=t.extend({type:"button"},s),n=s.click,o={icon:s.icon,iconPosition:s.iconPosition,showLabel:s.showLabel,icons:s.icons,text:s.text},delete s.click,delete s.icon,delete s.iconPosition,delete s.showLabel,delete s.icons,"boolean"==typeof s.text&&delete s.text,t("<button></button>",s).button(o).appendTo(e.uiButtonSet).on("click",function(){n.apply(e.element[0],arguments)})}),this._addClass(this.uiDialog,"ui-dialog-buttons"),this.uiDialogButtonPane.appendTo(this.uiDialog),void 0)},_makeDraggable:function(){function e(t){return{position:t.position,offset:t.offset}}var i=this,s=this.options;this.uiDialog.draggable({cancel:".ui-dialog-content, .ui-dialog-titlebar-close",handle:".ui-dialog-titlebar",containment:"document",start:function(s,n){i._addClass(t(this),"ui-dialog-dragging"),i._blockFrames(),i._trigger("dragStart",s,e(n))},drag:function(t,s){i._trigger("drag",t,e(s))},stop:function(n,o){var a=o.offset.left-i.document.scrollLeft(),r=o.offset.top-i.document.scrollTop();s.position={my:"left top",at:"left"+(a>=0?"+":"")+a+" "+"top"+(r>=0?"+":"")+r,of:i.window},i._removeClass(t(this),"ui-dialog-dragging"),i._unblockFrames(),i._trigger("dragStop",n,e(o))}})},_makeResizable:function(){function e(t){return{originalPosition:t.originalPosition,originalSize:t.originalSize,position:t.position,size:t.size}}var i=this,s=this.options,n=s.resizable,o=this.uiDialog.css("position"),a="string"==typeof n?n:"n,e,s,w,se,sw,ne,nw";this.uiDialog.resizable({cancel:".ui-dialog-content",containment:"document",alsoResize:this.element,maxWidth:s.maxWidth,maxHeight:s.maxHeight,minWidth:s.minWidth,minHeight:this._minHeight(),handles:a,start:function(s,n){i._addClass(t(this),"ui-dialog-resizing"),i._blockFrames(),i._trigger("resizeStart",s,e(n))},resize:function(t,s){i._trigger("resize",t,e(s))},stop:function(n,o){var a=i.uiDialog.offset(),r=a.left-i.document.scrollLeft(),h=a.top-i.document.scrollTop();s.height=i.uiDialog.height(),s.width=i.uiDialog.width(),s.position={my:"left top",at:"left"+(r>=0?"+":"")+r+" "+"top"+(h>=0?"+":"")+h,of:i.window},i._removeClass(t(this),"ui-dialog-resizing"),i._unblockFrames(),i._trigger("resizeStop",n,e(o))}}).css("position",o)},_trackFocus:function(){this._on(this.widget(),{focusin:function(e){this._makeFocusTarget(),this._focusedElement=t(e.target)}})},_makeFocusTarget:function(){this._untrackInstance(),this._trackingInstances().unshift(this)},_untrackInstance:function(){var e=this._trackingInstances(),i=t.inArray(this,e);-1!==i&&e.splice(i,1)},_trackingInstances:function(){var t=this.document.data("ui-dialog-instances");return t||(t=[],this.document.data("ui-dialog-instances",t)),t},_minHeight:function(){var t=this.options;return"auto"===t.height?t.minHeight:Math.min(t.minHeight,t.height)},_position:function(){var t=this.uiDialog.is(":visible");t||this.uiDialog.show(),this.uiDialog.position(this.options.position),t||this.uiDialog.hide()},_setOptions:function(e){var i=this,s=!1,n={};t.each(e,function(t,e){i._setOption(t,e),t in i.sizeRelatedOptions&&(s=!0),t in i.resizableRelatedOptions&&(n[t]=e)}),s&&(this._size(),this._position()),this.uiDialog.is(":data(ui-resizable)")&&this.uiDialog.resizable("option",n)},_setOption:function(e,i){var s,n,o=this.uiDialog;"disabled"!==e&&(this._super(e,i),"appendTo"===e&&this.uiDialog.appendTo(this._appendTo()),"buttons"===e&&this._createButtons(),"closeText"===e&&this.uiDialogTitlebarClose.button({label:t("<a>").text(""+this.options.closeText).html()}),"draggable"===e&&(s=o.is(":data(ui-draggable)"),s&&!i&&o.draggable("destroy"),!s&&i&&this._makeDraggable()),"position"===e&&this._position(),"resizable"===e&&(n=o.is(":data(ui-resizable)"),n&&!i&&o.resizable("destroy"),n&&"string"==typeof i&&o.resizable("option","handles",i),n||i===!1||this._makeResizable()),"title"===e&&this._title(this.uiDialogTitlebar.find(".ui-dialog-title")))},_size:function(){var t,e,i,s=this.options;this.element.show().css({width:"auto",minHeight:0,maxHeight:"none",height:0}),s.minWidth>s.width&&(s.width=s.minWidth),t=this.uiDialog.css({height:"auto",width:s.width}).outerHeight(),e=Math.max(0,s.minHeight-t),i="number"==typeof s.maxHeight?Math.max(0,s.maxHeight-t):"none","auto"===s.height?this.element.css({minHeight:e,maxHeight:i,height:"auto"}):this.element.height(Math.max(0,s.height-t)),this.uiDialog.is(":data(ui-resizable)")&&this.uiDialog.resizable("option","minHeight",this._minHeight())},_blockFrames:function(){this.iframeBlocks=this.document.find("iframe").map(function(){var e=t(this);return t("<div>").css({position:"absolute",width:e.outerWidth(),height:e.outerHeight()}).appendTo(e.parent()).offset(e.offset())[0]})},_unblockFrames:function(){this.iframeBlocks&&(this.iframeBlocks.remove(),delete this.iframeBlocks)},_allowInteraction:function(e){return t(e.target).closest(".ui-dialog").length?!0:!!t(e.target).closest(".ui-datepicker").length},_createOverlay:function(){if(this.options.modal){var e=!0;this._delay(function(){e=!1}),this.document.data("ui-dialog-overlays")||this._on(this.document,{focusin:function(t){e||this._allowInteraction(t)||(t.preventDefault(),this._trackingInstances()[0]._focusTabbable())}}),this.overlay=t("<div>").appendTo(this._appendTo()),this._addClass(this.overlay,null,"ui-widget-overlay ui-front"),this._on(this.overlay,{mousedown:"_keepFocus"}),this.document.data("ui-dialog-overlays",(this.document.data("ui-dialog-overlays")||0)+1)}},_destroyOverlay:function(){if(this.options.modal&&this.overlay){var t=this.document.data("ui-dialog-overlays")-1;t?this.document.data("ui-dialog-overlays",t):(this._off(this.document,"focusin"),this.document.removeData("ui-dialog-overlays")),this.overlay.remove(),this.overlay=null}}}),t.uiBackCompat!==!1&&t.widget("ui.dialog",t.ui.dialog,{options:{dialogClass:""},_createWrapper:function(){this._super(),this.uiDialog.addClass(this.options.dialogClass)},_setOption:function(t,e){"dialogClass"===t&&this.uiDialog.removeClass(this.options.dialogClass).addClass(e),this._superApply(arguments)}}),t.ui.dialog,t.widget("ui.droppable",{version:"1.12.1",widgetEventPrefix:"drop",options:{accept:"*",addClasses:!0,greedy:!1,scope:"default",tolerance:"intersect",activate:null,deactivate:null,drop:null,out:null,over:null},_create:function(){var e,i=this.options,s=i.accept;this.isover=!1,this.isout=!0,this.accept=t.isFunction(s)?s:function(t){return t.is(s)},this.proportions=function(){return arguments.length?(e=arguments[0],void 0):e?e:e={width:this.element[0].offsetWidth,height:this.element[0].offsetHeight}},this._addToManager(i.scope),i.addClasses&&this._addClass("ui-droppable")},_addToManager:function(e){t.ui.ddmanager.droppables[e]=t.ui.ddmanager.droppables[e]||[],t.ui.ddmanager.droppables[e].push(this)},_splice:function(t){for(var e=0;t.length>e;e++)t[e]===this&&t.splice(e,1)},_destroy:function(){var e=t.ui.ddmanager.droppables[this.options.scope];this._splice(e)},_setOption:function(e,i){if("accept"===e)this.accept=t.isFunction(i)?i:function(t){return t.is(i)};else if("scope"===e){var s=t.ui.ddmanager.droppables[this.options.scope];this._splice(s),this._addToManager(i)}this._super(e,i)},_activate:function(e){var i=t.ui.ddmanager.current;this._addActiveClass(),i&&this._trigger("activate",e,this.ui(i))},_deactivate:function(e){var i=t.ui.ddmanager.current;this._removeActiveClass(),i&&this._trigger("deactivate",e,this.ui(i))},_over:function(e){var i=t.ui.ddmanager.current;i&&(i.currentItem||i.element)[0]!==this.element[0]&&this.accept.call(this.element[0],i.currentItem||i.element)&&(this._addHoverClass(),this._trigger("over",e,this.ui(i)))},_out:function(e){var i=t.ui.ddmanager.current;i&&(i.currentItem||i.element)[0]!==this.element[0]&&this.accept.call(this.element[0],i.currentItem||i.element)&&(this._removeHoverClass(),this._trigger("out",e,this.ui(i)))},_drop:function(e,i){var s=i||t.ui.ddmanager.current,n=!1;return s&&(s.currentItem||s.element)[0]!==this.element[0]?(this.element.find(":data(ui-droppable)").not(".ui-draggable-dragging").each(function(){var i=t(this).droppable("instance");return i.options.greedy&&!i.options.disabled&&i.options.scope===s.options.scope&&i.accept.call(i.element[0],s.currentItem||s.element)&&v(s,t.extend(i,{offset:i.element.offset()}),i.options.tolerance,e)?(n=!0,!1):void 0}),n?!1:this.accept.call(this.element[0],s.currentItem||s.element)?(this._removeActiveClass(),this._removeHoverClass(),this._trigger("drop",e,this.ui(s)),this.element):!1):!1},ui:function(t){return{draggable:t.currentItem||t.element,helper:t.helper,position:t.position,offset:t.positionAbs}},_addHoverClass:function(){this._addClass("ui-droppable-hover")},_removeHoverClass:function(){this._removeClass("ui-droppable-hover")},_addActiveClass:function(){this._addClass("ui-droppable-active")},_removeActiveClass:function(){this._removeClass("ui-droppable-active")}});var v=t.ui.intersect=function(){function t(t,e,i){return t>=e&&e+i>t}return function(e,i,s,n){if(!i.offset)return!1;var o=(e.positionAbs||e.position.absolute).left+e.margins.left,a=(e.positionAbs||e.position.absolute).top+e.margins.top,r=o+e.helperProportions.width,h=a+e.helperProportions.height,l=i.offset.left,c=i.offset.top,u=l+i.proportions().width,d=c+i.proportions().height;switch(s){case"fit":return o>=l&&u>=r&&a>=c&&d>=h;case"intersect":return o+e.helperProportions.width/2>l&&u>r-e.helperProportions.width/2&&a+e.helperProportions.height/2>c&&d>h-e.helperProportions.height/2;case"pointer":return t(n.pageY,c,i.proportions().height)&&t(n.pageX,l,i.proportions().width);case"touch":return(a>=c&&d>=a||h>=c&&d>=h||c>a&&h>d)&&(o>=l&&u>=o||r>=l&&u>=r||l>o&&r>u);default:return!1}}}();t.ui.ddmanager={current:null,droppables:{"default":[]},prepareOffsets:function(e,i){var s,n,o=t.ui.ddmanager.droppables[e.options.scope]||[],a=i?i.type:null,r=(e.currentItem||e.element).find(":data(ui-droppable)").addBack();t:for(s=0;o.length>s;s++)if(!(o[s].options.disabled||e&&!o[s].accept.call(o[s].element[0],e.currentItem||e.element))){for(n=0;r.length>n;n++)if(r[n]===o[s].element[0]){o[s].proportions().height=0;continue t}o[s].visible="none"!==o[s].element.css("display"),o[s].visible&&("mousedown"===a&&o[s]._activate.call(o[s],i),o[s].offset=o[s].element.offset(),o[s].proportions({width:o[s].element[0].offsetWidth,height:o[s].element[0].offsetHeight}))}},drop:function(e,i){var s=!1;return t.each((t.ui.ddmanager.droppables[e.options.scope]||[]).slice(),function(){this.options&&(!this.options.disabled&&this.visible&&v(e,this,this.options.tolerance,i)&&(s=this._drop.call(this,i)||s),!this.options.disabled&&this.visible&&this.accept.call(this.element[0],e.currentItem||e.element)&&(this.isout=!0,this.isover=!1,this._deactivate.call(this,i)))}),s},dragStart:function(e,i){e.element.parentsUntil("body").on("scroll.droppable",function(){e.options.refreshPositions||t.ui.ddmanager.prepareOffsets(e,i)})},drag:function(e,i){e.options.refreshPositions&&t.ui.ddmanager.prepareOffsets(e,i),t.each(t.ui.ddmanager.droppables[e.options.scope]||[],function(){if(!this.options.disabled&&!this.greedyChild&&this.visible){var s,n,o,a=v(e,this,this.options.tolerance,i),r=!a&&this.isover?"isout":a&&!this.isover?"isover":null;r&&(this.options.greedy&&(n=this.options.scope,o=this.element.parents(":data(ui-droppable)").filter(function(){return t(this).droppable("instance").options.scope===n}),o.length&&(s=t(o[0]).droppable("instance"),s.greedyChild="isover"===r)),s&&"isover"===r&&(s.isover=!1,s.isout=!0,s._out.call(s,i)),this[r]=!0,this["isout"===r?"isover":"isout"]=!1,this["isover"===r?"_over":"_out"].call(this,i),s&&"isout"===r&&(s.isout=!1,s.isover=!0,s._over.call(s,i)))}})},dragStop:function(e,i){e.element.parentsUntil("body").off("scroll.droppable"),e.options.refreshPositions||t.ui.ddmanager.prepareOffsets(e,i)}},t.uiBackCompat!==!1&&t.widget("ui.droppable",t.ui.droppable,{options:{hoverClass:!1,activeClass:!1},_addActiveClass:function(){this._super(),this.options.activeClass&&this.element.addClass(this.options.activeClass)},_removeActiveClass:function(){this._super(),this.options.activeClass&&this.element.removeClass(this.options.activeClass)},_addHoverClass:function(){this._super(),this.options.hoverClass&&this.element.addClass(this.options.hoverClass)},_removeHoverClass:function(){this._super(),this.options.hoverClass&&this.element.removeClass(this.options.hoverClass)}}),t.ui.droppable,t.widget("ui.progressbar",{version:"1.12.1",options:{classes:{"ui-progressbar":"ui-corner-all","ui-progressbar-value":"ui-corner-left","ui-progressbar-complete":"ui-corner-right"},max:100,value:0,change:null,complete:null},min:0,_create:function(){this.oldValue=this.options.value=this._constrainedValue(),this.element.attr({role:"progressbar","aria-valuemin":this.min}),this._addClass("ui-progressbar","ui-widget ui-widget-content"),this.valueDiv=t("<div>").appendTo(this.element),this._addClass(this.valueDiv,"ui-progressbar-value","ui-widget-header"),this._refreshValue()},_destroy:function(){this.element.removeAttr("role aria-valuemin aria-valuemax aria-valuenow"),this.valueDiv.remove()},value:function(t){return void 0===t?this.options.value:(this.options.value=this._constrainedValue(t),this._refreshValue(),void 0)},_constrainedValue:function(t){return void 0===t&&(t=this.options.value),this.indeterminate=t===!1,"number"!=typeof t&&(t=0),this.indeterminate?!1:Math.min(this.options.max,Math.max(this.min,t))},_setOptions:function(t){var e=t.value;delete t.value,this._super(t),this.options.value=this._constrainedValue(e),this._refreshValue()},_setOption:function(t,e){"max"===t&&(e=Math.max(this.min,e)),this._super(t,e)},_setOptionDisabled:function(t){this._super(t),this.element.attr("aria-disabled",t),this._toggleClass(null,"ui-state-disabled",!!t)},_percentage:function(){return this.indeterminate?100:100*(this.options.value-this.min)/(this.options.max-this.min)},_refreshValue:function(){var e=this.options.value,i=this._percentage();this.valueDiv.toggle(this.indeterminate||e>this.min).width(i.toFixed(0)+"%"),this._toggleClass(this.valueDiv,"ui-progressbar-complete",null,e===this.options.max)._toggleClass("ui-progressbar-indeterminate",null,this.indeterminate),this.indeterminate?(this.element.removeAttr("aria-valuenow"),this.overlayDiv||(this.overlayDiv=t("<div>").appendTo(this.valueDiv),this._addClass(this.overlayDiv,"ui-progressbar-overlay"))):(this.element.attr({"aria-valuemax":this.options.max,"aria-valuenow":e}),this.overlayDiv&&(this.overlayDiv.remove(),this.overlayDiv=null)),this.oldValue!==e&&(this.oldValue=e,this._trigger("change")),e===this.options.max&&this._trigger("complete")}}),t.widget("ui.selectable",t.ui.mouse,{version:"1.12.1",options:{appendTo:"body",autoRefresh:!0,distance:0,filter:"*",tolerance:"touch",selected:null,selecting:null,start:null,stop:null,unselected:null,unselecting:null},_create:function(){var e=this;this._addClass("ui-selectable"),this.dragged=!1,this.refresh=function(){e.elementPos=t(e.element[0]).offset(),e.selectees=t(e.options.filter,e.element[0]),e._addClass(e.selectees,"ui-selectee"),e.selectees.each(function(){var i=t(this),s=i.offset(),n={left:s.left-e.elementPos.left,top:s.top-e.elementPos.top};t.data(this,"selectable-item",{element:this,$element:i,left:n.left,top:n.top,right:n.left+i.outerWidth(),bottom:n.top+i.outerHeight(),startselected:!1,selected:i.hasClass("ui-selected"),selecting:i.hasClass("ui-selecting"),unselecting:i.hasClass("ui-unselecting")})})},this.refresh(),this._mouseInit(),this.helper=t("<div>"),this._addClass(this.helper,"ui-selectable-helper")},_destroy:function(){this.selectees.removeData("selectable-item"),this._mouseDestroy()},_mouseStart:function(e){var i=this,s=this.options;this.opos=[e.pageX,e.pageY],this.elementPos=t(this.element[0]).offset(),this.options.disabled||(this.selectees=t(s.filter,this.element[0]),this._trigger("start",e),t(s.appendTo).append(this.helper),this.helper.css({left:e.pageX,top:e.pageY,width:0,height:0}),s.autoRefresh&&this.refresh(),this.selectees.filter(".ui-selected").each(function(){var s=t.data(this,"selectable-item");s.startselected=!0,e.metaKey||e.ctrlKey||(i._removeClass(s.$element,"ui-selected"),s.selected=!1,i._addClass(s.$element,"ui-unselecting"),s.unselecting=!0,i._trigger("unselecting",e,{unselecting:s.element}))}),t(e.target).parents().addBack().each(function(){var s,n=t.data(this,"selectable-item");return n?(s=!e.metaKey&&!e.ctrlKey||!n.$element.hasClass("ui-selected"),i._removeClass(n.$element,s?"ui-unselecting":"ui-selected")._addClass(n.$element,s?"ui-selecting":"ui-unselecting"),n.unselecting=!s,n.selecting=s,n.selected=s,s?i._trigger("selecting",e,{selecting:n.element}):i._trigger("unselecting",e,{unselecting:n.element}),!1):void 0}))},_mouseDrag:function(e){if(this.dragged=!0,!this.options.disabled){var i,s=this,n=this.options,o=this.opos[0],a=this.opos[1],r=e.pageX,h=e.pageY;return o>r&&(i=r,r=o,o=i),a>h&&(i=h,h=a,a=i),this.helper.css({left:o,top:a,width:r-o,height:h-a}),this.selectees.each(function(){var i=t.data(this,"selectable-item"),l=!1,c={};i&&i.element!==s.element[0]&&(c.left=i.left+s.elementPos.left,c.right=i.right+s.elementPos.left,c.top=i.top+s.elementPos.top,c.bottom=i.bottom+s.elementPos.top,"touch"===n.tolerance?l=!(c.left>r||o>c.right||c.top>h||a>c.bottom):"fit"===n.tolerance&&(l=c.left>o&&r>c.right&&c.top>a&&h>c.bottom),l?(i.selected&&(s._removeClass(i.$element,"ui-selected"),i.selected=!1),i.unselecting&&(s._removeClass(i.$element,"ui-unselecting"),i.unselecting=!1),i.selecting||(s._addClass(i.$element,"ui-selecting"),i.selecting=!0,s._trigger("selecting",e,{selecting:i.element}))):(i.selecting&&((e.metaKey||e.ctrlKey)&&i.startselected?(s._removeClass(i.$element,"ui-selecting"),i.selecting=!1,s._addClass(i.$element,"ui-selected"),i.selected=!0):(s._removeClass(i.$element,"ui-selecting"),i.selecting=!1,i.startselected&&(s._addClass(i.$element,"ui-unselecting"),i.unselecting=!0),s._trigger("unselecting",e,{unselecting:i.element}))),i.selected&&(e.metaKey||e.ctrlKey||i.startselected||(s._removeClass(i.$element,"ui-selected"),i.selected=!1,s._addClass(i.$element,"ui-unselecting"),i.unselecting=!0,s._trigger("unselecting",e,{unselecting:i.element})))))}),!1}},_mouseStop:function(e){var i=this;return this.dragged=!1,t(".ui-unselecting",this.element[0]).each(function(){var s=t.data(this,"selectable-item");i._removeClass(s.$element,"ui-unselecting"),s.unselecting=!1,s.startselected=!1,i._trigger("unselected",e,{unselected:s.element})}),t(".ui-selecting",this.element[0]).each(function(){var s=t.data(this,"selectable-item");i._removeClass(s.$element,"ui-selecting")._addClass(s.$element,"ui-selected"),s.selecting=!1,s.selected=!0,s.startselected=!0,i._trigger("selected",e,{selected:s.element})}),this._trigger("stop",e),this.helper.remove(),!1}}),t.widget("ui.selectmenu",[t.ui.formResetMixin,{version:"1.12.1",defaultElement:"<select>",options:{appendTo:null,classes:{"ui-selectmenu-button-open":"ui-corner-top","ui-selectmenu-button-closed":"ui-corner-all"},disabled:null,icons:{button:"ui-icon-triangle-1-s"},position:{my:"left top",at:"left bottom",collision:"none"},width:!1,change:null,close:null,focus:null,open:null,select:null},_create:function(){var e=this.element.uniqueId().attr("id");this.ids={element:e,button:e+"-button",menu:e+"-menu"},this._drawButton(),this._drawMenu(),this._bindFormResetHandler(),this._rendered=!1,this.menuItems=t()},_drawButton:function(){var e,i=this,s=this._parseOption(this.element.find("option:selected"),this.element[0].selectedIndex);this.labels=this.element.labels().attr("for",this.ids.button),this._on(this.labels,{click:function(t){this.button.focus(),t.preventDefault()}}),this.element.hide(),this.button=t("<span>",{tabindex:this.options.disabled?-1:0,id:this.ids.button,role:"combobox","aria-expanded":"false","aria-autocomplete":"list","aria-owns":this.ids.menu,"aria-haspopup":"true",title:this.element.attr("title")}).insertAfter(this.element),this._addClass(this.button,"ui-selectmenu-button ui-selectmenu-button-closed","ui-button ui-widget"),e=t("<span>").appendTo(this.button),this._addClass(e,"ui-selectmenu-icon","ui-icon "+this.options.icons.button),this.buttonItem=this._renderButtonItem(s).appendTo(this.button),this.options.width!==!1&&this._resizeButton(),this._on(this.button,this._buttonEvents),this.button.one("focusin",function(){i._rendered||i._refreshMenu()})},_drawMenu:function(){var e=this;this.menu=t("<ul>",{"aria-hidden":"true","aria-labelledby":this.ids.button,id:this.ids.menu}),this.menuWrap=t("<div>").append(this.menu),this._addClass(this.menuWrap,"ui-selectmenu-menu","ui-front"),this.menuWrap.appendTo(this._appendTo()),this.menuInstance=this.menu.menu({classes:{"ui-menu":"ui-corner-bottom"},role:"listbox",select:function(t,i){t.preventDefault(),e._setSelection(),e._select(i.item.data("ui-selectmenu-item"),t)},focus:function(t,i){var s=i.item.data("ui-selectmenu-item");null!=e.focusIndex&&s.index!==e.focusIndex&&(e._trigger("focus",t,{item:s}),e.isOpen||e._select(s,t)),e.focusIndex=s.index,e.button.attr("aria-activedescendant",e.menuItems.eq(s.index).attr("id"))}}).menu("instance"),this.menuInstance._off(this.menu,"mouseleave"),this.menuInstance._closeOnDocumentClick=function(){return!1},this.menuInstance._isDivider=function(){return!1}},refresh:function(){this._refreshMenu(),this.buttonItem.replaceWith(this.buttonItem=this._renderButtonItem(this._getSelectedItem().data("ui-selectmenu-item")||{})),null===this.options.width&&this._resizeButton()},_refreshMenu:function(){var t,e=this.element.find("option");this.menu.empty(),this._parseOptions(e),this._renderMenu(this.menu,this.items),this.menuInstance.refresh(),this.menuItems=this.menu.find("li").not(".ui-selectmenu-optgroup").find(".ui-menu-item-wrapper"),this._rendered=!0,e.length&&(t=this._getSelectedItem(),this.menuInstance.focus(null,t),this._setAria(t.data("ui-selectmenu-item")),this._setOption("disabled",this.element.prop("disabled")))},open:function(t){this.options.disabled||(this._rendered?(this._removeClass(this.menu.find(".ui-state-active"),null,"ui-state-active"),this.menuInstance.focus(null,this._getSelectedItem())):this._refreshMenu(),this.menuItems.length&&(this.isOpen=!0,this._toggleAttr(),this._resizeMenu(),this._position(),this._on(this.document,this._documentClick),this._trigger("open",t)))},_position:function(){this.menuWrap.position(t.extend({of:this.button},this.options.position))},close:function(t){this.isOpen&&(this.isOpen=!1,this._toggleAttr(),this.range=null,this._off(this.document),this._trigger("close",t))},widget:function(){return this.button},menuWidget:function(){return this.menu},_renderButtonItem:function(e){var i=t("<span>");return this._setText(i,e.label),this._addClass(i,"ui-selectmenu-text"),i},_renderMenu:function(e,i){var s=this,n="";t.each(i,function(i,o){var a;o.optgroup!==n&&(a=t("<li>",{text:o.optgroup}),s._addClass(a,"ui-selectmenu-optgroup","ui-menu-divider"+(o.element.parent("optgroup").prop("disabled")?" ui-state-disabled":"")),a.appendTo(e),n=o.optgroup),s._renderItemData(e,o)})},_renderItemData:function(t,e){return this._renderItem(t,e).data("ui-selectmenu-item",e)},_renderItem:function(e,i){var s=t("<li>"),n=t("<div>",{title:i.element.attr("title")});return i.disabled&&this._addClass(s,null,"ui-state-disabled"),this._setText(n,i.label),s.append(n).appendTo(e)},_setText:function(t,e){e?t.text(e):t.html("&#160;")},_move:function(t,e){var i,s,n=".ui-menu-item";this.isOpen?i=this.menuItems.eq(this.focusIndex).parent("li"):(i=this.menuItems.eq(this.element[0].selectedIndex).parent("li"),n+=":not(.ui-state-disabled)"),s="first"===t||"last"===t?i["first"===t?"prevAll":"nextAll"](n).eq(-1):i[t+"All"](n).eq(0),s.length&&this.menuInstance.focus(e,s)},_getSelectedItem:function(){return this.menuItems.eq(this.element[0].selectedIndex).parent("li")},_toggle:function(t){this[this.isOpen?"close":"open"](t)},_setSelection:function(){var t;this.range&&(window.getSelection?(t=window.getSelection(),t.removeAllRanges(),t.addRange(this.range)):this.range.select(),this.button.focus())},_documentClick:{mousedown:function(e){this.isOpen&&(t(e.target).closest(".ui-selectmenu-menu, #"+t.ui.escapeSelector(this.ids.button)).length||this.close(e))}},_buttonEvents:{mousedown:function(){var t;window.getSelection?(t=window.getSelection(),t.rangeCount&&(this.range=t.getRangeAt(0))):this.range=document.selection.createRange()},click:function(t){this._setSelection(),this._toggle(t)},keydown:function(e){var i=!0;switch(e.keyCode){case t.ui.keyCode.TAB:case t.ui.keyCode.ESCAPE:this.close(e),i=!1;break;case t.ui.keyCode.ENTER:this.isOpen&&this._selectFocusedItem(e);break;case t.ui.keyCode.UP:e.altKey?this._toggle(e):this._move("prev",e);break;case t.ui.keyCode.DOWN:e.altKey?this._toggle(e):this._move("next",e);break;case t.ui.keyCode.SPACE:this.isOpen?this._selectFocusedItem(e):this._toggle(e);break;case t.ui.keyCode.LEFT:this._move("prev",e);break;case t.ui.keyCode.RIGHT:this._move("next",e);break;case t.ui.keyCode.HOME:case t.ui.keyCode.PAGE_UP:this._move("first",e);break;case t.ui.keyCode.END:case t.ui.keyCode.PAGE_DOWN:this._move("last",e);break;default:this.menu.trigger(e),i=!1}i&&e.preventDefault()}},_selectFocusedItem:function(t){var e=this.menuItems.eq(this.focusIndex).parent("li");e.hasClass("ui-state-disabled")||this._select(e.data("ui-selectmenu-item"),t)},_select:function(t,e){var i=this.element[0].selectedIndex;this.element[0].selectedIndex=t.index,this.buttonItem.replaceWith(this.buttonItem=this._renderButtonItem(t)),this._setAria(t),this._trigger("select",e,{item:t}),t.index!==i&&this._trigger("change",e,{item:t}),this.close(e)},_setAria:function(t){var e=this.menuItems.eq(t.index).attr("id");this.button.attr({"aria-labelledby":e,"aria-activedescendant":e}),this.menu.attr("aria-activedescendant",e)},_setOption:function(t,e){if("icons"===t){var i=this.button.find("span.ui-icon");this._removeClass(i,null,this.options.icons.button)._addClass(i,null,e.button)}this._super(t,e),"appendTo"===t&&this.menuWrap.appendTo(this._appendTo()),"width"===t&&this._resizeButton()},_setOptionDisabled:function(t){this._super(t),this.menuInstance.option("disabled",t),this.button.attr("aria-disabled",t),this._toggleClass(this.button,null,"ui-state-disabled",t),this.element.prop("disabled",t),t?(this.button.attr("tabindex",-1),this.close()):this.button.attr("tabindex",0)},_appendTo:function(){var e=this.options.appendTo;return e&&(e=e.jquery||e.nodeType?t(e):this.document.find(e).eq(0)),e&&e[0]||(e=this.element.closest(".ui-front, dialog")),e.length||(e=this.document[0].body),e},_toggleAttr:function(){this.button.attr("aria-expanded",this.isOpen),this._removeClass(this.button,"ui-selectmenu-button-"+(this.isOpen?"closed":"open"))._addClass(this.button,"ui-selectmenu-button-"+(this.isOpen?"open":"closed"))._toggleClass(this.menuWrap,"ui-selectmenu-open",null,this.isOpen),this.menu.attr("aria-hidden",!this.isOpen)},_resizeButton:function(){var t=this.options.width;return t===!1?(this.button.css("width",""),void 0):(null===t&&(t=this.element.show().outerWidth(),this.element.hide()),this.button.outerWidth(t),void 0)},_resizeMenu:function(){this.menu.outerWidth(Math.max(this.button.outerWidth(),this.menu.width("").outerWidth()+1))},_getCreateOptions:function(){var t=this._super();return t.disabled=this.element.prop("disabled"),t},_parseOptions:function(e){var i=this,s=[];e.each(function(e,n){s.push(i._parseOption(t(n),e))}),this.items=s},_parseOption:function(t,e){var i=t.parent("optgroup");return{element:t,index:e,value:t.val(),label:t.text(),optgroup:i.attr("label")||"",disabled:i.prop("disabled")||t.prop("disabled")}},_destroy:function(){this._unbindFormResetHandler(),this.menuWrap.remove(),this.button.remove(),this.element.show(),this.element.removeUniqueId(),this.labels.attr("for",this.ids.element)}}]),t.widget("ui.slider",t.ui.mouse,{version:"1.12.1",widgetEventPrefix:"slide",options:{animate:!1,classes:{"ui-slider":"ui-corner-all","ui-slider-handle":"ui-corner-all","ui-slider-range":"ui-corner-all ui-widget-header"},distance:0,max:100,min:0,orientation:"horizontal",range:!1,step:1,value:0,values:null,change:null,slide:null,start:null,stop:null},numPages:5,_create:function(){this._keySliding=!1,this._mouseSliding=!1,this._animateOff=!0,this._handleIndex=null,this._detectOrientation(),this._mouseInit(),this._calculateNewMax(),this._addClass("ui-slider ui-slider-"+this.orientation,"ui-widget ui-widget-content"),this._refresh(),this._animateOff=!1
},_refresh:function(){this._createRange(),this._createHandles(),this._setupEvents(),this._refreshValue()},_createHandles:function(){var e,i,s=this.options,n=this.element.find(".ui-slider-handle"),o="<span tabindex='0'></span>",a=[];for(i=s.values&&s.values.length||1,n.length>i&&(n.slice(i).remove(),n=n.slice(0,i)),e=n.length;i>e;e++)a.push(o);this.handles=n.add(t(a.join("")).appendTo(this.element)),this._addClass(this.handles,"ui-slider-handle","ui-state-default"),this.handle=this.handles.eq(0),this.handles.each(function(e){t(this).data("ui-slider-handle-index",e).attr("tabIndex",0)})},_createRange:function(){var e=this.options;e.range?(e.range===!0&&(e.values?e.values.length&&2!==e.values.length?e.values=[e.values[0],e.values[0]]:t.isArray(e.values)&&(e.values=e.values.slice(0)):e.values=[this._valueMin(),this._valueMin()]),this.range&&this.range.length?(this._removeClass(this.range,"ui-slider-range-min ui-slider-range-max"),this.range.css({left:"",bottom:""})):(this.range=t("<div>").appendTo(this.element),this._addClass(this.range,"ui-slider-range")),("min"===e.range||"max"===e.range)&&this._addClass(this.range,"ui-slider-range-"+e.range)):(this.range&&this.range.remove(),this.range=null)},_setupEvents:function(){this._off(this.handles),this._on(this.handles,this._handleEvents),this._hoverable(this.handles),this._focusable(this.handles)},_destroy:function(){this.handles.remove(),this.range&&this.range.remove(),this._mouseDestroy()},_mouseCapture:function(e){var i,s,n,o,a,r,h,l,c=this,u=this.options;return u.disabled?!1:(this.elementSize={width:this.element.outerWidth(),height:this.element.outerHeight()},this.elementOffset=this.element.offset(),i={x:e.pageX,y:e.pageY},s=this._normValueFromMouse(i),n=this._valueMax()-this._valueMin()+1,this.handles.each(function(e){var i=Math.abs(s-c.values(e));(n>i||n===i&&(e===c._lastChangedValue||c.values(e)===u.min))&&(n=i,o=t(this),a=e)}),r=this._start(e,a),r===!1?!1:(this._mouseSliding=!0,this._handleIndex=a,this._addClass(o,null,"ui-state-active"),o.trigger("focus"),h=o.offset(),l=!t(e.target).parents().addBack().is(".ui-slider-handle"),this._clickOffset=l?{left:0,top:0}:{left:e.pageX-h.left-o.width()/2,top:e.pageY-h.top-o.height()/2-(parseInt(o.css("borderTopWidth"),10)||0)-(parseInt(o.css("borderBottomWidth"),10)||0)+(parseInt(o.css("marginTop"),10)||0)},this.handles.hasClass("ui-state-hover")||this._slide(e,a,s),this._animateOff=!0,!0))},_mouseStart:function(){return!0},_mouseDrag:function(t){var e={x:t.pageX,y:t.pageY},i=this._normValueFromMouse(e);return this._slide(t,this._handleIndex,i),!1},_mouseStop:function(t){return this._removeClass(this.handles,null,"ui-state-active"),this._mouseSliding=!1,this._stop(t,this._handleIndex),this._change(t,this._handleIndex),this._handleIndex=null,this._clickOffset=null,this._animateOff=!1,!1},_detectOrientation:function(){this.orientation="vertical"===this.options.orientation?"vertical":"horizontal"},_normValueFromMouse:function(t){var e,i,s,n,o;return"horizontal"===this.orientation?(e=this.elementSize.width,i=t.x-this.elementOffset.left-(this._clickOffset?this._clickOffset.left:0)):(e=this.elementSize.height,i=t.y-this.elementOffset.top-(this._clickOffset?this._clickOffset.top:0)),s=i/e,s>1&&(s=1),0>s&&(s=0),"vertical"===this.orientation&&(s=1-s),n=this._valueMax()-this._valueMin(),o=this._valueMin()+s*n,this._trimAlignValue(o)},_uiHash:function(t,e,i){var s={handle:this.handles[t],handleIndex:t,value:void 0!==e?e:this.value()};return this._hasMultipleValues()&&(s.value=void 0!==e?e:this.values(t),s.values=i||this.values()),s},_hasMultipleValues:function(){return this.options.values&&this.options.values.length},_start:function(t,e){return this._trigger("start",t,this._uiHash(e))},_slide:function(t,e,i){var s,n,o=this.value(),a=this.values();this._hasMultipleValues()&&(n=this.values(e?0:1),o=this.values(e),2===this.options.values.length&&this.options.range===!0&&(i=0===e?Math.min(n,i):Math.max(n,i)),a[e]=i),i!==o&&(s=this._trigger("slide",t,this._uiHash(e,i,a)),s!==!1&&(this._hasMultipleValues()?this.values(e,i):this.value(i)))},_stop:function(t,e){this._trigger("stop",t,this._uiHash(e))},_change:function(t,e){this._keySliding||this._mouseSliding||(this._lastChangedValue=e,this._trigger("change",t,this._uiHash(e)))},value:function(t){return arguments.length?(this.options.value=this._trimAlignValue(t),this._refreshValue(),this._change(null,0),void 0):this._value()},values:function(e,i){var s,n,o;if(arguments.length>1)return this.options.values[e]=this._trimAlignValue(i),this._refreshValue(),this._change(null,e),void 0;if(!arguments.length)return this._values();if(!t.isArray(arguments[0]))return this._hasMultipleValues()?this._values(e):this.value();for(s=this.options.values,n=arguments[0],o=0;s.length>o;o+=1)s[o]=this._trimAlignValue(n[o]),this._change(null,o);this._refreshValue()},_setOption:function(e,i){var s,n=0;switch("range"===e&&this.options.range===!0&&("min"===i?(this.options.value=this._values(0),this.options.values=null):"max"===i&&(this.options.value=this._values(this.options.values.length-1),this.options.values=null)),t.isArray(this.options.values)&&(n=this.options.values.length),this._super(e,i),e){case"orientation":this._detectOrientation(),this._removeClass("ui-slider-horizontal ui-slider-vertical")._addClass("ui-slider-"+this.orientation),this._refreshValue(),this.options.range&&this._refreshRange(i),this.handles.css("horizontal"===i?"bottom":"left","");break;case"value":this._animateOff=!0,this._refreshValue(),this._change(null,0),this._animateOff=!1;break;case"values":for(this._animateOff=!0,this._refreshValue(),s=n-1;s>=0;s--)this._change(null,s);this._animateOff=!1;break;case"step":case"min":case"max":this._animateOff=!0,this._calculateNewMax(),this._refreshValue(),this._animateOff=!1;break;case"range":this._animateOff=!0,this._refresh(),this._animateOff=!1}},_setOptionDisabled:function(t){this._super(t),this._toggleClass(null,"ui-state-disabled",!!t)},_value:function(){var t=this.options.value;return t=this._trimAlignValue(t)},_values:function(t){var e,i,s;if(arguments.length)return e=this.options.values[t],e=this._trimAlignValue(e);if(this._hasMultipleValues()){for(i=this.options.values.slice(),s=0;i.length>s;s+=1)i[s]=this._trimAlignValue(i[s]);return i}return[]},_trimAlignValue:function(t){if(this._valueMin()>=t)return this._valueMin();if(t>=this._valueMax())return this._valueMax();var e=this.options.step>0?this.options.step:1,i=(t-this._valueMin())%e,s=t-i;return 2*Math.abs(i)>=e&&(s+=i>0?e:-e),parseFloat(s.toFixed(5))},_calculateNewMax:function(){var t=this.options.max,e=this._valueMin(),i=this.options.step,s=Math.round((t-e)/i)*i;t=s+e,t>this.options.max&&(t-=i),this.max=parseFloat(t.toFixed(this._precision()))},_precision:function(){var t=this._precisionOf(this.options.step);return null!==this.options.min&&(t=Math.max(t,this._precisionOf(this.options.min))),t},_precisionOf:function(t){var e=""+t,i=e.indexOf(".");return-1===i?0:e.length-i-1},_valueMin:function(){return this.options.min},_valueMax:function(){return this.max},_refreshRange:function(t){"vertical"===t&&this.range.css({width:"",left:""}),"horizontal"===t&&this.range.css({height:"",bottom:""})},_refreshValue:function(){var e,i,s,n,o,a=this.options.range,r=this.options,h=this,l=this._animateOff?!1:r.animate,c={};this._hasMultipleValues()?this.handles.each(function(s){i=100*((h.values(s)-h._valueMin())/(h._valueMax()-h._valueMin())),c["horizontal"===h.orientation?"left":"bottom"]=i+"%",t(this).stop(1,1)[l?"animate":"css"](c,r.animate),h.options.range===!0&&("horizontal"===h.orientation?(0===s&&h.range.stop(1,1)[l?"animate":"css"]({left:i+"%"},r.animate),1===s&&h.range[l?"animate":"css"]({width:i-e+"%"},{queue:!1,duration:r.animate})):(0===s&&h.range.stop(1,1)[l?"animate":"css"]({bottom:i+"%"},r.animate),1===s&&h.range[l?"animate":"css"]({height:i-e+"%"},{queue:!1,duration:r.animate}))),e=i}):(s=this.value(),n=this._valueMin(),o=this._valueMax(),i=o!==n?100*((s-n)/(o-n)):0,c["horizontal"===this.orientation?"left":"bottom"]=i+"%",this.handle.stop(1,1)[l?"animate":"css"](c,r.animate),"min"===a&&"horizontal"===this.orientation&&this.range.stop(1,1)[l?"animate":"css"]({width:i+"%"},r.animate),"max"===a&&"horizontal"===this.orientation&&this.range.stop(1,1)[l?"animate":"css"]({width:100-i+"%"},r.animate),"min"===a&&"vertical"===this.orientation&&this.range.stop(1,1)[l?"animate":"css"]({height:i+"%"},r.animate),"max"===a&&"vertical"===this.orientation&&this.range.stop(1,1)[l?"animate":"css"]({height:100-i+"%"},r.animate))},_handleEvents:{keydown:function(e){var i,s,n,o,a=t(e.target).data("ui-slider-handle-index");switch(e.keyCode){case t.ui.keyCode.HOME:case t.ui.keyCode.END:case t.ui.keyCode.PAGE_UP:case t.ui.keyCode.PAGE_DOWN:case t.ui.keyCode.UP:case t.ui.keyCode.RIGHT:case t.ui.keyCode.DOWN:case t.ui.keyCode.LEFT:if(e.preventDefault(),!this._keySliding&&(this._keySliding=!0,this._addClass(t(e.target),null,"ui-state-active"),i=this._start(e,a),i===!1))return}switch(o=this.options.step,s=n=this._hasMultipleValues()?this.values(a):this.value(),e.keyCode){case t.ui.keyCode.HOME:n=this._valueMin();break;case t.ui.keyCode.END:n=this._valueMax();break;case t.ui.keyCode.PAGE_UP:n=this._trimAlignValue(s+(this._valueMax()-this._valueMin())/this.numPages);break;case t.ui.keyCode.PAGE_DOWN:n=this._trimAlignValue(s-(this._valueMax()-this._valueMin())/this.numPages);break;case t.ui.keyCode.UP:case t.ui.keyCode.RIGHT:if(s===this._valueMax())return;n=this._trimAlignValue(s+o);break;case t.ui.keyCode.DOWN:case t.ui.keyCode.LEFT:if(s===this._valueMin())return;n=this._trimAlignValue(s-o)}this._slide(e,a,n)},keyup:function(e){var i=t(e.target).data("ui-slider-handle-index");this._keySliding&&(this._keySliding=!1,this._stop(e,i),this._change(e,i),this._removeClass(t(e.target),null,"ui-state-active"))}}}),t.widget("ui.sortable",t.ui.mouse,{version:"1.12.1",widgetEventPrefix:"sort",ready:!1,options:{appendTo:"parent",axis:!1,connectWith:!1,containment:!1,cursor:"auto",cursorAt:!1,dropOnEmpty:!0,forcePlaceholderSize:!1,forceHelperSize:!1,grid:!1,handle:!1,helper:"original",items:"> *",opacity:!1,placeholder:!1,revert:!1,scroll:!0,scrollSensitivity:20,scrollSpeed:20,scope:"default",tolerance:"intersect",zIndex:1e3,activate:null,beforeStop:null,change:null,deactivate:null,out:null,over:null,receive:null,remove:null,sort:null,start:null,stop:null,update:null},_isOverAxis:function(t,e,i){return t>=e&&e+i>t},_isFloating:function(t){return/left|right/.test(t.css("float"))||/inline|table-cell/.test(t.css("display"))},_create:function(){this.containerCache={},this._addClass("ui-sortable"),this.refresh(),this.offset=this.element.offset(),this._mouseInit(),this._setHandleClassName(),this.ready=!0},_setOption:function(t,e){this._super(t,e),"handle"===t&&this._setHandleClassName()},_setHandleClassName:function(){var e=this;this._removeClass(this.element.find(".ui-sortable-handle"),"ui-sortable-handle"),t.each(this.items,function(){e._addClass(this.instance.options.handle?this.item.find(this.instance.options.handle):this.item,"ui-sortable-handle")})},_destroy:function(){this._mouseDestroy();for(var t=this.items.length-1;t>=0;t--)this.items[t].item.removeData(this.widgetName+"-item");return this},_mouseCapture:function(e,i){var s=null,n=!1,o=this;return this.reverting?!1:this.options.disabled||"static"===this.options.type?!1:(this._refreshItems(e),t(e.target).parents().each(function(){return t.data(this,o.widgetName+"-item")===o?(s=t(this),!1):void 0}),t.data(e.target,o.widgetName+"-item")===o&&(s=t(e.target)),s?!this.options.handle||i||(t(this.options.handle,s).find("*").addBack().each(function(){this===e.target&&(n=!0)}),n)?(this.currentItem=s,this._removeCurrentsFromItems(),!0):!1:!1)},_mouseStart:function(e,i,s){var n,o,a=this.options;if(this.currentContainer=this,this.refreshPositions(),this.helper=this._createHelper(e),this._cacheHelperProportions(),this._cacheMargins(),this.scrollParent=this.helper.scrollParent(),this.offset=this.currentItem.offset(),this.offset={top:this.offset.top-this.margins.top,left:this.offset.left-this.margins.left},t.extend(this.offset,{click:{left:e.pageX-this.offset.left,top:e.pageY-this.offset.top},parent:this._getParentOffset(),relative:this._getRelativeOffset()}),this.helper.css("position","absolute"),this.cssPosition=this.helper.css("position"),this.originalPosition=this._generatePosition(e),this.originalPageX=e.pageX,this.originalPageY=e.pageY,a.cursorAt&&this._adjustOffsetFromHelper(a.cursorAt),this.domPosition={prev:this.currentItem.prev()[0],parent:this.currentItem.parent()[0]},this.helper[0]!==this.currentItem[0]&&this.currentItem.hide(),this._createPlaceholder(),a.containment&&this._setContainment(),a.cursor&&"auto"!==a.cursor&&(o=this.document.find("body"),this.storedCursor=o.css("cursor"),o.css("cursor",a.cursor),this.storedStylesheet=t("<style>*{ cursor: "+a.cursor+" !important; }</style>").appendTo(o)),a.opacity&&(this.helper.css("opacity")&&(this._storedOpacity=this.helper.css("opacity")),this.helper.css("opacity",a.opacity)),a.zIndex&&(this.helper.css("zIndex")&&(this._storedZIndex=this.helper.css("zIndex")),this.helper.css("zIndex",a.zIndex)),this.scrollParent[0]!==this.document[0]&&"HTML"!==this.scrollParent[0].tagName&&(this.overflowOffset=this.scrollParent.offset()),this._trigger("start",e,this._uiHash()),this._preserveHelperProportions||this._cacheHelperProportions(),!s)for(n=this.containers.length-1;n>=0;n--)this.containers[n]._trigger("activate",e,this._uiHash(this));return t.ui.ddmanager&&(t.ui.ddmanager.current=this),t.ui.ddmanager&&!a.dropBehaviour&&t.ui.ddmanager.prepareOffsets(this,e),this.dragging=!0,this._addClass(this.helper,"ui-sortable-helper"),this._mouseDrag(e),!0},_mouseDrag:function(e){var i,s,n,o,a=this.options,r=!1;for(this.position=this._generatePosition(e),this.positionAbs=this._convertPositionTo("absolute"),this.lastPositionAbs||(this.lastPositionAbs=this.positionAbs),this.options.scroll&&(this.scrollParent[0]!==this.document[0]&&"HTML"!==this.scrollParent[0].tagName?(this.overflowOffset.top+this.scrollParent[0].offsetHeight-e.pageY<a.scrollSensitivity?this.scrollParent[0].scrollTop=r=this.scrollParent[0].scrollTop+a.scrollSpeed:e.pageY-this.overflowOffset.top<a.scrollSensitivity&&(this.scrollParent[0].scrollTop=r=this.scrollParent[0].scrollTop-a.scrollSpeed),this.overflowOffset.left+this.scrollParent[0].offsetWidth-e.pageX<a.scrollSensitivity?this.scrollParent[0].scrollLeft=r=this.scrollParent[0].scrollLeft+a.scrollSpeed:e.pageX-this.overflowOffset.left<a.scrollSensitivity&&(this.scrollParent[0].scrollLeft=r=this.scrollParent[0].scrollLeft-a.scrollSpeed)):(e.pageY-this.document.scrollTop()<a.scrollSensitivity?r=this.document.scrollTop(this.document.scrollTop()-a.scrollSpeed):this.window.height()-(e.pageY-this.document.scrollTop())<a.scrollSensitivity&&(r=this.document.scrollTop(this.document.scrollTop()+a.scrollSpeed)),e.pageX-this.document.scrollLeft()<a.scrollSensitivity?r=this.document.scrollLeft(this.document.scrollLeft()-a.scrollSpeed):this.window.width()-(e.pageX-this.document.scrollLeft())<a.scrollSensitivity&&(r=this.document.scrollLeft(this.document.scrollLeft()+a.scrollSpeed))),r!==!1&&t.ui.ddmanager&&!a.dropBehaviour&&t.ui.ddmanager.prepareOffsets(this,e)),this.positionAbs=this._convertPositionTo("absolute"),this.options.axis&&"y"===this.options.axis||(this.helper[0].style.left=this.position.left+"px"),this.options.axis&&"x"===this.options.axis||(this.helper[0].style.top=this.position.top+"px"),i=this.items.length-1;i>=0;i--)if(s=this.items[i],n=s.item[0],o=this._intersectsWithPointer(s),o&&s.instance===this.currentContainer&&n!==this.currentItem[0]&&this.placeholder[1===o?"next":"prev"]()[0]!==n&&!t.contains(this.placeholder[0],n)&&("semi-dynamic"===this.options.type?!t.contains(this.element[0],n):!0)){if(this.direction=1===o?"down":"up","pointer"!==this.options.tolerance&&!this._intersectsWithSides(s))break;this._rearrange(e,s),this._trigger("change",e,this._uiHash());break}return this._contactContainers(e),t.ui.ddmanager&&t.ui.ddmanager.drag(this,e),this._trigger("sort",e,this._uiHash()),this.lastPositionAbs=this.positionAbs,!1},_mouseStop:function(e,i){if(e){if(t.ui.ddmanager&&!this.options.dropBehaviour&&t.ui.ddmanager.drop(this,e),this.options.revert){var s=this,n=this.placeholder.offset(),o=this.options.axis,a={};o&&"x"!==o||(a.left=n.left-this.offset.parent.left-this.margins.left+(this.offsetParent[0]===this.document[0].body?0:this.offsetParent[0].scrollLeft)),o&&"y"!==o||(a.top=n.top-this.offset.parent.top-this.margins.top+(this.offsetParent[0]===this.document[0].body?0:this.offsetParent[0].scrollTop)),this.reverting=!0,t(this.helper).animate(a,parseInt(this.options.revert,10)||500,function(){s._clear(e)})}else this._clear(e,i);return!1}},cancel:function(){if(this.dragging){this._mouseUp(new t.Event("mouseup",{target:null})),"original"===this.options.helper?(this.currentItem.css(this._storedCSS),this._removeClass(this.currentItem,"ui-sortable-helper")):this.currentItem.show();for(var e=this.containers.length-1;e>=0;e--)this.containers[e]._trigger("deactivate",null,this._uiHash(this)),this.containers[e].containerCache.over&&(this.containers[e]._trigger("out",null,this._uiHash(this)),this.containers[e].containerCache.over=0)}return this.placeholder&&(this.placeholder[0].parentNode&&this.placeholder[0].parentNode.removeChild(this.placeholder[0]),"original"!==this.options.helper&&this.helper&&this.helper[0].parentNode&&this.helper.remove(),t.extend(this,{helper:null,dragging:!1,reverting:!1,_noFinalSort:null}),this.domPosition.prev?t(this.domPosition.prev).after(this.currentItem):t(this.domPosition.parent).prepend(this.currentItem)),this},serialize:function(e){var i=this._getItemsAsjQuery(e&&e.connected),s=[];return e=e||{},t(i).each(function(){var i=(t(e.item||this).attr(e.attribute||"id")||"").match(e.expression||/(.+)[\-=_](.+)/);i&&s.push((e.key||i[1]+"[]")+"="+(e.key&&e.expression?i[1]:i[2]))}),!s.length&&e.key&&s.push(e.key+"="),s.join("&")},toArray:function(e){var i=this._getItemsAsjQuery(e&&e.connected),s=[];return e=e||{},i.each(function(){s.push(t(e.item||this).attr(e.attribute||"id")||"")}),s},_intersectsWith:function(t){var e=this.positionAbs.left,i=e+this.helperProportions.width,s=this.positionAbs.top,n=s+this.helperProportions.height,o=t.left,a=o+t.width,r=t.top,h=r+t.height,l=this.offset.click.top,c=this.offset.click.left,u="x"===this.options.axis||s+l>r&&h>s+l,d="y"===this.options.axis||e+c>o&&a>e+c,p=u&&d;return"pointer"===this.options.tolerance||this.options.forcePointerForContainers||"pointer"!==this.options.tolerance&&this.helperProportions[this.floating?"width":"height"]>t[this.floating?"width":"height"]?p:e+this.helperProportions.width/2>o&&a>i-this.helperProportions.width/2&&s+this.helperProportions.height/2>r&&h>n-this.helperProportions.height/2},_intersectsWithPointer:function(t){var e,i,s="x"===this.options.axis||this._isOverAxis(this.positionAbs.top+this.offset.click.top,t.top,t.height),n="y"===this.options.axis||this._isOverAxis(this.positionAbs.left+this.offset.click.left,t.left,t.width),o=s&&n;return o?(e=this._getDragVerticalDirection(),i=this._getDragHorizontalDirection(),this.floating?"right"===i||"down"===e?2:1:e&&("down"===e?2:1)):!1},_intersectsWithSides:function(t){var e=this._isOverAxis(this.positionAbs.top+this.offset.click.top,t.top+t.height/2,t.height),i=this._isOverAxis(this.positionAbs.left+this.offset.click.left,t.left+t.width/2,t.width),s=this._getDragVerticalDirection(),n=this._getDragHorizontalDirection();return this.floating&&n?"right"===n&&i||"left"===n&&!i:s&&("down"===s&&e||"up"===s&&!e)},_getDragVerticalDirection:function(){var t=this.positionAbs.top-this.lastPositionAbs.top;return 0!==t&&(t>0?"down":"up")},_getDragHorizontalDirection:function(){var t=this.positionAbs.left-this.lastPositionAbs.left;return 0!==t&&(t>0?"right":"left")},refresh:function(t){return this._refreshItems(t),this._setHandleClassName(),this.refreshPositions(),this},_connectWith:function(){var t=this.options;return t.connectWith.constructor===String?[t.connectWith]:t.connectWith},_getItemsAsjQuery:function(e){function i(){r.push(this)}var s,n,o,a,r=[],h=[],l=this._connectWith();if(l&&e)for(s=l.length-1;s>=0;s--)for(o=t(l[s],this.document[0]),n=o.length-1;n>=0;n--)a=t.data(o[n],this.widgetFullName),a&&a!==this&&!a.options.disabled&&h.push([t.isFunction(a.options.items)?a.options.items.call(a.element):t(a.options.items,a.element).not(".ui-sortable-helper").not(".ui-sortable-placeholder"),a]);for(h.push([t.isFunction(this.options.items)?this.options.items.call(this.element,null,{options:this.options,item:this.currentItem}):t(this.options.items,this.element).not(".ui-sortable-helper").not(".ui-sortable-placeholder"),this]),s=h.length-1;s>=0;s--)h[s][0].each(i);return t(r)},_removeCurrentsFromItems:function(){var e=this.currentItem.find(":data("+this.widgetName+"-item)");this.items=t.grep(this.items,function(t){for(var i=0;e.length>i;i++)if(e[i]===t.item[0])return!1;return!0})},_refreshItems:function(e){this.items=[],this.containers=[this];var i,s,n,o,a,r,h,l,c=this.items,u=[[t.isFunction(this.options.items)?this.options.items.call(this.element[0],e,{item:this.currentItem}):t(this.options.items,this.element),this]],d=this._connectWith();if(d&&this.ready)for(i=d.length-1;i>=0;i--)for(n=t(d[i],this.document[0]),s=n.length-1;s>=0;s--)o=t.data(n[s],this.widgetFullName),o&&o!==this&&!o.options.disabled&&(u.push([t.isFunction(o.options.items)?o.options.items.call(o.element[0],e,{item:this.currentItem}):t(o.options.items,o.element),o]),this.containers.push(o));for(i=u.length-1;i>=0;i--)for(a=u[i][1],r=u[i][0],s=0,l=r.length;l>s;s++)h=t(r[s]),h.data(this.widgetName+"-item",a),c.push({item:h,instance:a,width:0,height:0,left:0,top:0})},refreshPositions:function(e){this.floating=this.items.length?"x"===this.options.axis||this._isFloating(this.items[0].item):!1,this.offsetParent&&this.helper&&(this.offset.parent=this._getParentOffset());var i,s,n,o;for(i=this.items.length-1;i>=0;i--)s=this.items[i],s.instance!==this.currentContainer&&this.currentContainer&&s.item[0]!==this.currentItem[0]||(n=this.options.toleranceElement?t(this.options.toleranceElement,s.item):s.item,e||(s.width=n.outerWidth(),s.height=n.outerHeight()),o=n.offset(),s.left=o.left,s.top=o.top);if(this.options.custom&&this.options.custom.refreshContainers)this.options.custom.refreshContainers.call(this);else for(i=this.containers.length-1;i>=0;i--)o=this.containers[i].element.offset(),this.containers[i].containerCache.left=o.left,this.containers[i].containerCache.top=o.top,this.containers[i].containerCache.width=this.containers[i].element.outerWidth(),this.containers[i].containerCache.height=this.containers[i].element.outerHeight();return this},_createPlaceholder:function(e){e=e||this;var i,s=e.options;s.placeholder&&s.placeholder.constructor!==String||(i=s.placeholder,s.placeholder={element:function(){var s=e.currentItem[0].nodeName.toLowerCase(),n=t("<"+s+">",e.document[0]);return e._addClass(n,"ui-sortable-placeholder",i||e.currentItem[0].className)._removeClass(n,"ui-sortable-helper"),"tbody"===s?e._createTrPlaceholder(e.currentItem.find("tr").eq(0),t("<tr>",e.document[0]).appendTo(n)):"tr"===s?e._createTrPlaceholder(e.currentItem,n):"img"===s&&n.attr("src",e.currentItem.attr("src")),i||n.css("visibility","hidden"),n},update:function(t,n){(!i||s.forcePlaceholderSize)&&(n.height()||n.height(e.currentItem.innerHeight()-parseInt(e.currentItem.css("paddingTop")||0,10)-parseInt(e.currentItem.css("paddingBottom")||0,10)),n.width()||n.width(e.currentItem.innerWidth()-parseInt(e.currentItem.css("paddingLeft")||0,10)-parseInt(e.currentItem.css("paddingRight")||0,10)))}}),e.placeholder=t(s.placeholder.element.call(e.element,e.currentItem)),e.currentItem.after(e.placeholder),s.placeholder.update(e,e.placeholder)},_createTrPlaceholder:function(e,i){var s=this;e.children().each(function(){t("<td>&#160;</td>",s.document[0]).attr("colspan",t(this).attr("colspan")||1).appendTo(i)})},_contactContainers:function(e){var i,s,n,o,a,r,h,l,c,u,d=null,p=null;for(i=this.containers.length-1;i>=0;i--)if(!t.contains(this.currentItem[0],this.containers[i].element[0]))if(this._intersectsWith(this.containers[i].containerCache)){if(d&&t.contains(this.containers[i].element[0],d.element[0]))continue;d=this.containers[i],p=i}else this.containers[i].containerCache.over&&(this.containers[i]._trigger("out",e,this._uiHash(this)),this.containers[i].containerCache.over=0);if(d)if(1===this.containers.length)this.containers[p].containerCache.over||(this.containers[p]._trigger("over",e,this._uiHash(this)),this.containers[p].containerCache.over=1);else{for(n=1e4,o=null,c=d.floating||this._isFloating(this.currentItem),a=c?"left":"top",r=c?"width":"height",u=c?"pageX":"pageY",s=this.items.length-1;s>=0;s--)t.contains(this.containers[p].element[0],this.items[s].item[0])&&this.items[s].item[0]!==this.currentItem[0]&&(h=this.items[s].item.offset()[a],l=!1,e[u]-h>this.items[s][r]/2&&(l=!0),n>Math.abs(e[u]-h)&&(n=Math.abs(e[u]-h),o=this.items[s],this.direction=l?"up":"down"));if(!o&&!this.options.dropOnEmpty)return;if(this.currentContainer===this.containers[p])return this.currentContainer.containerCache.over||(this.containers[p]._trigger("over",e,this._uiHash()),this.currentContainer.containerCache.over=1),void 0;o?this._rearrange(e,o,null,!0):this._rearrange(e,null,this.containers[p].element,!0),this._trigger("change",e,this._uiHash()),this.containers[p]._trigger("change",e,this._uiHash(this)),this.currentContainer=this.containers[p],this.options.placeholder.update(this.currentContainer,this.placeholder),this.containers[p]._trigger("over",e,this._uiHash(this)),this.containers[p].containerCache.over=1}},_createHelper:function(e){var i=this.options,s=t.isFunction(i.helper)?t(i.helper.apply(this.element[0],[e,this.currentItem])):"clone"===i.helper?this.currentItem.clone():this.currentItem;return s.parents("body").length||t("parent"!==i.appendTo?i.appendTo:this.currentItem[0].parentNode)[0].appendChild(s[0]),s[0]===this.currentItem[0]&&(this._storedCSS={width:this.currentItem[0].style.width,height:this.currentItem[0].style.height,position:this.currentItem.css("position"),top:this.currentItem.css("top"),left:this.currentItem.css("left")}),(!s[0].style.width||i.forceHelperSize)&&s.width(this.currentItem.width()),(!s[0].style.height||i.forceHelperSize)&&s.height(this.currentItem.height()),s},_adjustOffsetFromHelper:function(e){"string"==typeof e&&(e=e.split(" ")),t.isArray(e)&&(e={left:+e[0],top:+e[1]||0}),"left"in e&&(this.offset.click.left=e.left+this.margins.left),"right"in e&&(this.offset.click.left=this.helperProportions.width-e.right+this.margins.left),"top"in e&&(this.offset.click.top=e.top+this.margins.top),"bottom"in e&&(this.offset.click.top=this.helperProportions.height-e.bottom+this.margins.top)},_getParentOffset:function(){this.offsetParent=this.helper.offsetParent();var e=this.offsetParent.offset();return"absolute"===this.cssPosition&&this.scrollParent[0]!==this.document[0]&&t.contains(this.scrollParent[0],this.offsetParent[0])&&(e.left+=this.scrollParent.scrollLeft(),e.top+=this.scrollParent.scrollTop()),(this.offsetParent[0]===this.document[0].body||this.offsetParent[0].tagName&&"html"===this.offsetParent[0].tagName.toLowerCase()&&t.ui.ie)&&(e={top:0,left:0}),{top:e.top+(parseInt(this.offsetParent.css("borderTopWidth"),10)||0),left:e.left+(parseInt(this.offsetParent.css("borderLeftWidth"),10)||0)}},_getRelativeOffset:function(){if("relative"===this.cssPosition){var t=this.currentItem.position();return{top:t.top-(parseInt(this.helper.css("top"),10)||0)+this.scrollParent.scrollTop(),left:t.left-(parseInt(this.helper.css("left"),10)||0)+this.scrollParent.scrollLeft()}}return{top:0,left:0}},_cacheMargins:function(){this.margins={left:parseInt(this.currentItem.css("marginLeft"),10)||0,top:parseInt(this.currentItem.css("marginTop"),10)||0}},_cacheHelperProportions:function(){this.helperProportions={width:this.helper.outerWidth(),height:this.helper.outerHeight()}},_setContainment:function(){var e,i,s,n=this.options;"parent"===n.containment&&(n.containment=this.helper[0].parentNode),("document"===n.containment||"window"===n.containment)&&(this.containment=[0-this.offset.relative.left-this.offset.parent.left,0-this.offset.relative.top-this.offset.parent.top,"document"===n.containment?this.document.width():this.window.width()-this.helperProportions.width-this.margins.left,("document"===n.containment?this.document.height()||document.body.parentNode.scrollHeight:this.window.height()||this.document[0].body.parentNode.scrollHeight)-this.helperProportions.height-this.margins.top]),/^(document|window|parent)$/.test(n.containment)||(e=t(n.containment)[0],i=t(n.containment).offset(),s="hidden"!==t(e).css("overflow"),this.containment=[i.left+(parseInt(t(e).css("borderLeftWidth"),10)||0)+(parseInt(t(e).css("paddingLeft"),10)||0)-this.margins.left,i.top+(parseInt(t(e).css("borderTopWidth"),10)||0)+(parseInt(t(e).css("paddingTop"),10)||0)-this.margins.top,i.left+(s?Math.max(e.scrollWidth,e.offsetWidth):e.offsetWidth)-(parseInt(t(e).css("borderLeftWidth"),10)||0)-(parseInt(t(e).css("paddingRight"),10)||0)-this.helperProportions.width-this.margins.left,i.top+(s?Math.max(e.scrollHeight,e.offsetHeight):e.offsetHeight)-(parseInt(t(e).css("borderTopWidth"),10)||0)-(parseInt(t(e).css("paddingBottom"),10)||0)-this.helperProportions.height-this.margins.top])},_convertPositionTo:function(e,i){i||(i=this.position);var s="absolute"===e?1:-1,n="absolute"!==this.cssPosition||this.scrollParent[0]!==this.document[0]&&t.contains(this.scrollParent[0],this.offsetParent[0])?this.scrollParent:this.offsetParent,o=/(html|body)/i.test(n[0].tagName);return{top:i.top+this.offset.relative.top*s+this.offset.parent.top*s-("fixed"===this.cssPosition?-this.scrollParent.scrollTop():o?0:n.scrollTop())*s,left:i.left+this.offset.relative.left*s+this.offset.parent.left*s-("fixed"===this.cssPosition?-this.scrollParent.scrollLeft():o?0:n.scrollLeft())*s}},_generatePosition:function(e){var i,s,n=this.options,o=e.pageX,a=e.pageY,r="absolute"!==this.cssPosition||this.scrollParent[0]!==this.document[0]&&t.contains(this.scrollParent[0],this.offsetParent[0])?this.scrollParent:this.offsetParent,h=/(html|body)/i.test(r[0].tagName);return"relative"!==this.cssPosition||this.scrollParent[0]!==this.document[0]&&this.scrollParent[0]!==this.offsetParent[0]||(this.offset.relative=this._getRelativeOffset()),this.originalPosition&&(this.containment&&(e.pageX-this.offset.click.left<this.containment[0]&&(o=this.containment[0]+this.offset.click.left),e.pageY-this.offset.click.top<this.containment[1]&&(a=this.containment[1]+this.offset.click.top),e.pageX-this.offset.click.left>this.containment[2]&&(o=this.containment[2]+this.offset.click.left),e.pageY-this.offset.click.top>this.containment[3]&&(a=this.containment[3]+this.offset.click.top)),n.grid&&(i=this.originalPageY+Math.round((a-this.originalPageY)/n.grid[1])*n.grid[1],a=this.containment?i-this.offset.click.top>=this.containment[1]&&i-this.offset.click.top<=this.containment[3]?i:i-this.offset.click.top>=this.containment[1]?i-n.grid[1]:i+n.grid[1]:i,s=this.originalPageX+Math.round((o-this.originalPageX)/n.grid[0])*n.grid[0],o=this.containment?s-this.offset.click.left>=this.containment[0]&&s-this.offset.click.left<=this.containment[2]?s:s-this.offset.click.left>=this.containment[0]?s-n.grid[0]:s+n.grid[0]:s)),{top:a-this.offset.click.top-this.offset.relative.top-this.offset.parent.top+("fixed"===this.cssPosition?-this.scrollParent.scrollTop():h?0:r.scrollTop()),left:o-this.offset.click.left-this.offset.relative.left-this.offset.parent.left+("fixed"===this.cssPosition?-this.scrollParent.scrollLeft():h?0:r.scrollLeft())}},_rearrange:function(t,e,i,s){i?i[0].appendChild(this.placeholder[0]):e.item[0].parentNode.insertBefore(this.placeholder[0],"down"===this.direction?e.item[0]:e.item[0].nextSibling),this.counter=this.counter?++this.counter:1;var n=this.counter;
this._delay(function(){n===this.counter&&this.refreshPositions(!s)})},_clear:function(t,e){function i(t,e,i){return function(s){i._trigger(t,s,e._uiHash(e))}}this.reverting=!1;var s,n=[];if(!this._noFinalSort&&this.currentItem.parent().length&&this.placeholder.before(this.currentItem),this._noFinalSort=null,this.helper[0]===this.currentItem[0]){for(s in this._storedCSS)("auto"===this._storedCSS[s]||"static"===this._storedCSS[s])&&(this._storedCSS[s]="");this.currentItem.css(this._storedCSS),this._removeClass(this.currentItem,"ui-sortable-helper")}else this.currentItem.show();for(this.fromOutside&&!e&&n.push(function(t){this._trigger("receive",t,this._uiHash(this.fromOutside))}),!this.fromOutside&&this.domPosition.prev===this.currentItem.prev().not(".ui-sortable-helper")[0]&&this.domPosition.parent===this.currentItem.parent()[0]||e||n.push(function(t){this._trigger("update",t,this._uiHash())}),this!==this.currentContainer&&(e||(n.push(function(t){this._trigger("remove",t,this._uiHash())}),n.push(function(t){return function(e){t._trigger("receive",e,this._uiHash(this))}}.call(this,this.currentContainer)),n.push(function(t){return function(e){t._trigger("update",e,this._uiHash(this))}}.call(this,this.currentContainer)))),s=this.containers.length-1;s>=0;s--)e||n.push(i("deactivate",this,this.containers[s])),this.containers[s].containerCache.over&&(n.push(i("out",this,this.containers[s])),this.containers[s].containerCache.over=0);if(this.storedCursor&&(this.document.find("body").css("cursor",this.storedCursor),this.storedStylesheet.remove()),this._storedOpacity&&this.helper.css("opacity",this._storedOpacity),this._storedZIndex&&this.helper.css("zIndex","auto"===this._storedZIndex?"":this._storedZIndex),this.dragging=!1,e||this._trigger("beforeStop",t,this._uiHash()),this.placeholder[0].parentNode.removeChild(this.placeholder[0]),this.cancelHelperRemoval||(this.helper[0]!==this.currentItem[0]&&this.helper.remove(),this.helper=null),!e){for(s=0;n.length>s;s++)n[s].call(this,t);this._trigger("stop",t,this._uiHash())}return this.fromOutside=!1,!this.cancelHelperRemoval},_trigger:function(){t.Widget.prototype._trigger.apply(this,arguments)===!1&&this.cancel()},_uiHash:function(e){var i=e||this;return{helper:i.helper,placeholder:i.placeholder||t([]),position:i.position,originalPosition:i.originalPosition,offset:i.positionAbs,item:i.currentItem,sender:e?e.element:null}}}),t.widget("ui.spinner",{version:"1.12.1",defaultElement:"<input>",widgetEventPrefix:"spin",options:{classes:{"ui-spinner":"ui-corner-all","ui-spinner-down":"ui-corner-br","ui-spinner-up":"ui-corner-tr"},culture:null,icons:{down:"ui-icon-triangle-1-s",up:"ui-icon-triangle-1-n"},incremental:!0,max:null,min:null,numberFormat:null,page:10,step:1,change:null,spin:null,start:null,stop:null},_create:function(){this._setOption("max",this.options.max),this._setOption("min",this.options.min),this._setOption("step",this.options.step),""!==this.value()&&this._value(this.element.val(),!0),this._draw(),this._on(this._events),this._refresh(),this._on(this.window,{beforeunload:function(){this.element.removeAttr("autocomplete")}})},_getCreateOptions:function(){var e=this._super(),i=this.element;return t.each(["min","max","step"],function(t,s){var n=i.attr(s);null!=n&&n.length&&(e[s]=n)}),e},_events:{keydown:function(t){this._start(t)&&this._keydown(t)&&t.preventDefault()},keyup:"_stop",focus:function(){this.previous=this.element.val()},blur:function(t){return this.cancelBlur?(delete this.cancelBlur,void 0):(this._stop(),this._refresh(),this.previous!==this.element.val()&&this._trigger("change",t),void 0)},mousewheel:function(t,e){if(e){if(!this.spinning&&!this._start(t))return!1;this._spin((e>0?1:-1)*this.options.step,t),clearTimeout(this.mousewheelTimer),this.mousewheelTimer=this._delay(function(){this.spinning&&this._stop(t)},100),t.preventDefault()}},"mousedown .ui-spinner-button":function(e){function i(){var e=this.element[0]===t.ui.safeActiveElement(this.document[0]);e||(this.element.trigger("focus"),this.previous=s,this._delay(function(){this.previous=s}))}var s;s=this.element[0]===t.ui.safeActiveElement(this.document[0])?this.previous:this.element.val(),e.preventDefault(),i.call(this),this.cancelBlur=!0,this._delay(function(){delete this.cancelBlur,i.call(this)}),this._start(e)!==!1&&this._repeat(null,t(e.currentTarget).hasClass("ui-spinner-up")?1:-1,e)},"mouseup .ui-spinner-button":"_stop","mouseenter .ui-spinner-button":function(e){return t(e.currentTarget).hasClass("ui-state-active")?this._start(e)===!1?!1:(this._repeat(null,t(e.currentTarget).hasClass("ui-spinner-up")?1:-1,e),void 0):void 0},"mouseleave .ui-spinner-button":"_stop"},_enhance:function(){this.uiSpinner=this.element.attr("autocomplete","off").wrap("<span>").parent().append("<a></a><a></a>")},_draw:function(){this._enhance(),this._addClass(this.uiSpinner,"ui-spinner","ui-widget ui-widget-content"),this._addClass("ui-spinner-input"),this.element.attr("role","spinbutton"),this.buttons=this.uiSpinner.children("a").attr("tabIndex",-1).attr("aria-hidden",!0).button({classes:{"ui-button":""}}),this._removeClass(this.buttons,"ui-corner-all"),this._addClass(this.buttons.first(),"ui-spinner-button ui-spinner-up"),this._addClass(this.buttons.last(),"ui-spinner-button ui-spinner-down"),this.buttons.first().button({icon:this.options.icons.up,showLabel:!1}),this.buttons.last().button({icon:this.options.icons.down,showLabel:!1}),this.buttons.height()>Math.ceil(.5*this.uiSpinner.height())&&this.uiSpinner.height()>0&&this.uiSpinner.height(this.uiSpinner.height())},_keydown:function(e){var i=this.options,s=t.ui.keyCode;switch(e.keyCode){case s.UP:return this._repeat(null,1,e),!0;case s.DOWN:return this._repeat(null,-1,e),!0;case s.PAGE_UP:return this._repeat(null,i.page,e),!0;case s.PAGE_DOWN:return this._repeat(null,-i.page,e),!0}return!1},_start:function(t){return this.spinning||this._trigger("start",t)!==!1?(this.counter||(this.counter=1),this.spinning=!0,!0):!1},_repeat:function(t,e,i){t=t||500,clearTimeout(this.timer),this.timer=this._delay(function(){this._repeat(40,e,i)},t),this._spin(e*this.options.step,i)},_spin:function(t,e){var i=this.value()||0;this.counter||(this.counter=1),i=this._adjustValue(i+t*this._increment(this.counter)),this.spinning&&this._trigger("spin",e,{value:i})===!1||(this._value(i),this.counter++)},_increment:function(e){var i=this.options.incremental;return i?t.isFunction(i)?i(e):Math.floor(e*e*e/5e4-e*e/500+17*e/200+1):1},_precision:function(){var t=this._precisionOf(this.options.step);return null!==this.options.min&&(t=Math.max(t,this._precisionOf(this.options.min))),t},_precisionOf:function(t){var e=""+t,i=e.indexOf(".");return-1===i?0:e.length-i-1},_adjustValue:function(t){var e,i,s=this.options;return e=null!==s.min?s.min:0,i=t-e,i=Math.round(i/s.step)*s.step,t=e+i,t=parseFloat(t.toFixed(this._precision())),null!==s.max&&t>s.max?s.max:null!==s.min&&s.min>t?s.min:t},_stop:function(t){this.spinning&&(clearTimeout(this.timer),clearTimeout(this.mousewheelTimer),this.counter=0,this.spinning=!1,this._trigger("stop",t))},_setOption:function(t,e){var i,s,n;return"culture"===t||"numberFormat"===t?(i=this._parse(this.element.val()),this.options[t]=e,this.element.val(this._format(i)),void 0):(("max"===t||"min"===t||"step"===t)&&"string"==typeof e&&(e=this._parse(e)),"icons"===t&&(s=this.buttons.first().find(".ui-icon"),this._removeClass(s,null,this.options.icons.up),this._addClass(s,null,e.up),n=this.buttons.last().find(".ui-icon"),this._removeClass(n,null,this.options.icons.down),this._addClass(n,null,e.down)),this._super(t,e),void 0)},_setOptionDisabled:function(t){this._super(t),this._toggleClass(this.uiSpinner,null,"ui-state-disabled",!!t),this.element.prop("disabled",!!t),this.buttons.button(t?"disable":"enable")},_setOptions:r(function(t){this._super(t)}),_parse:function(t){return"string"==typeof t&&""!==t&&(t=window.Globalize&&this.options.numberFormat?Globalize.parseFloat(t,10,this.options.culture):+t),""===t||isNaN(t)?null:t},_format:function(t){return""===t?"":window.Globalize&&this.options.numberFormat?Globalize.format(t,this.options.numberFormat,this.options.culture):t},_refresh:function(){this.element.attr({"aria-valuemin":this.options.min,"aria-valuemax":this.options.max,"aria-valuenow":this._parse(this.element.val())})},isValid:function(){var t=this.value();return null===t?!1:t===this._adjustValue(t)},_value:function(t,e){var i;""!==t&&(i=this._parse(t),null!==i&&(e||(i=this._adjustValue(i)),t=this._format(i))),this.element.val(t),this._refresh()},_destroy:function(){this.element.prop("disabled",!1).removeAttr("autocomplete role aria-valuemin aria-valuemax aria-valuenow"),this.uiSpinner.replaceWith(this.element)},stepUp:r(function(t){this._stepUp(t)}),_stepUp:function(t){this._start()&&(this._spin((t||1)*this.options.step),this._stop())},stepDown:r(function(t){this._stepDown(t)}),_stepDown:function(t){this._start()&&(this._spin((t||1)*-this.options.step),this._stop())},pageUp:r(function(t){this._stepUp((t||1)*this.options.page)}),pageDown:r(function(t){this._stepDown((t||1)*this.options.page)}),value:function(t){return arguments.length?(r(this._value).call(this,t),void 0):this._parse(this.element.val())},widget:function(){return this.uiSpinner}}),t.uiBackCompat!==!1&&t.widget("ui.spinner",t.ui.spinner,{_enhance:function(){this.uiSpinner=this.element.attr("autocomplete","off").wrap(this._uiSpinnerHtml()).parent().append(this._buttonHtml())},_uiSpinnerHtml:function(){return"<span>"},_buttonHtml:function(){return"<a></a><a></a>"}}),t.ui.spinner,t.widget("ui.tabs",{version:"1.12.1",delay:300,options:{active:null,classes:{"ui-tabs":"ui-corner-all","ui-tabs-nav":"ui-corner-all","ui-tabs-panel":"ui-corner-bottom","ui-tabs-tab":"ui-corner-top"},collapsible:!1,event:"click",heightStyle:"content",hide:null,show:null,activate:null,beforeActivate:null,beforeLoad:null,load:null},_isLocal:function(){var t=/#.*$/;return function(e){var i,s;i=e.href.replace(t,""),s=location.href.replace(t,"");try{i=decodeURIComponent(i)}catch(n){}try{s=decodeURIComponent(s)}catch(n){}return e.hash.length>1&&i===s}}(),_create:function(){var e=this,i=this.options;this.running=!1,this._addClass("ui-tabs","ui-widget ui-widget-content"),this._toggleClass("ui-tabs-collapsible",null,i.collapsible),this._processTabs(),i.active=this._initialActive(),t.isArray(i.disabled)&&(i.disabled=t.unique(i.disabled.concat(t.map(this.tabs.filter(".ui-state-disabled"),function(t){return e.tabs.index(t)}))).sort()),this.active=this.options.active!==!1&&this.anchors.length?this._findActive(i.active):t(),this._refresh(),this.active.length&&this.load(i.active)},_initialActive:function(){var e=this.options.active,i=this.options.collapsible,s=location.hash.substring(1);return null===e&&(s&&this.tabs.each(function(i,n){return t(n).attr("aria-controls")===s?(e=i,!1):void 0}),null===e&&(e=this.tabs.index(this.tabs.filter(".ui-tabs-active"))),(null===e||-1===e)&&(e=this.tabs.length?0:!1)),e!==!1&&(e=this.tabs.index(this.tabs.eq(e)),-1===e&&(e=i?!1:0)),!i&&e===!1&&this.anchors.length&&(e=0),e},_getCreateEventData:function(){return{tab:this.active,panel:this.active.length?this._getPanelForTab(this.active):t()}},_tabKeydown:function(e){var i=t(t.ui.safeActiveElement(this.document[0])).closest("li"),s=this.tabs.index(i),n=!0;if(!this._handlePageNav(e)){switch(e.keyCode){case t.ui.keyCode.RIGHT:case t.ui.keyCode.DOWN:s++;break;case t.ui.keyCode.UP:case t.ui.keyCode.LEFT:n=!1,s--;break;case t.ui.keyCode.END:s=this.anchors.length-1;break;case t.ui.keyCode.HOME:s=0;break;case t.ui.keyCode.SPACE:return e.preventDefault(),clearTimeout(this.activating),this._activate(s),void 0;case t.ui.keyCode.ENTER:return e.preventDefault(),clearTimeout(this.activating),this._activate(s===this.options.active?!1:s),void 0;default:return}e.preventDefault(),clearTimeout(this.activating),s=this._focusNextTab(s,n),e.ctrlKey||e.metaKey||(i.attr("aria-selected","false"),this.tabs.eq(s).attr("aria-selected","true"),this.activating=this._delay(function(){this.option("active",s)},this.delay))}},_panelKeydown:function(e){this._handlePageNav(e)||e.ctrlKey&&e.keyCode===t.ui.keyCode.UP&&(e.preventDefault(),this.active.trigger("focus"))},_handlePageNav:function(e){return e.altKey&&e.keyCode===t.ui.keyCode.PAGE_UP?(this._activate(this._focusNextTab(this.options.active-1,!1)),!0):e.altKey&&e.keyCode===t.ui.keyCode.PAGE_DOWN?(this._activate(this._focusNextTab(this.options.active+1,!0)),!0):void 0},_findNextTab:function(e,i){function s(){return e>n&&(e=0),0>e&&(e=n),e}for(var n=this.tabs.length-1;-1!==t.inArray(s(),this.options.disabled);)e=i?e+1:e-1;return e},_focusNextTab:function(t,e){return t=this._findNextTab(t,e),this.tabs.eq(t).trigger("focus"),t},_setOption:function(t,e){return"active"===t?(this._activate(e),void 0):(this._super(t,e),"collapsible"===t&&(this._toggleClass("ui-tabs-collapsible",null,e),e||this.options.active!==!1||this._activate(0)),"event"===t&&this._setupEvents(e),"heightStyle"===t&&this._setupHeightStyle(e),void 0)},_sanitizeSelector:function(t){return t?t.replace(/[!"$%&'()*+,.\/:;<=>?@\[\]\^`{|}~]/g,"\\$&"):""},refresh:function(){var e=this.options,i=this.tablist.children(":has(a[href])");e.disabled=t.map(i.filter(".ui-state-disabled"),function(t){return i.index(t)}),this._processTabs(),e.active!==!1&&this.anchors.length?this.active.length&&!t.contains(this.tablist[0],this.active[0])?this.tabs.length===e.disabled.length?(e.active=!1,this.active=t()):this._activate(this._findNextTab(Math.max(0,e.active-1),!1)):e.active=this.tabs.index(this.active):(e.active=!1,this.active=t()),this._refresh()},_refresh:function(){this._setOptionDisabled(this.options.disabled),this._setupEvents(this.options.event),this._setupHeightStyle(this.options.heightStyle),this.tabs.not(this.active).attr({"aria-selected":"false","aria-expanded":"false",tabIndex:-1}),this.panels.not(this._getPanelForTab(this.active)).hide().attr({"aria-hidden":"true"}),this.active.length?(this.active.attr({"aria-selected":"true","aria-expanded":"true",tabIndex:0}),this._addClass(this.active,"ui-tabs-active","ui-state-active"),this._getPanelForTab(this.active).show().attr({"aria-hidden":"false"})):this.tabs.eq(0).attr("tabIndex",0)},_processTabs:function(){var e=this,i=this.tabs,s=this.anchors,n=this.panels;this.tablist=this._getList().attr("role","tablist"),this._addClass(this.tablist,"ui-tabs-nav","ui-helper-reset ui-helper-clearfix ui-widget-header"),this.tablist.on("mousedown"+this.eventNamespace,"> li",function(e){t(this).is(".ui-state-disabled")&&e.preventDefault()}).on("focus"+this.eventNamespace,".ui-tabs-anchor",function(){t(this).closest("li").is(".ui-state-disabled")&&this.blur()}),this.tabs=this.tablist.find("> li:has(a[href])").attr({role:"tab",tabIndex:-1}),this._addClass(this.tabs,"ui-tabs-tab","ui-state-default"),this.anchors=this.tabs.map(function(){return t("a",this)[0]}).attr({role:"presentation",tabIndex:-1}),this._addClass(this.anchors,"ui-tabs-anchor"),this.panels=t(),this.anchors.each(function(i,s){var n,o,a,r=t(s).uniqueId().attr("id"),h=t(s).closest("li"),l=h.attr("aria-controls");e._isLocal(s)?(n=s.hash,a=n.substring(1),o=e.element.find(e._sanitizeSelector(n))):(a=h.attr("aria-controls")||t({}).uniqueId()[0].id,n="#"+a,o=e.element.find(n),o.length||(o=e._createPanel(a),o.insertAfter(e.panels[i-1]||e.tablist)),o.attr("aria-live","polite")),o.length&&(e.panels=e.panels.add(o)),l&&h.data("ui-tabs-aria-controls",l),h.attr({"aria-controls":a,"aria-labelledby":r}),o.attr("aria-labelledby",r)}),this.panels.attr("role","tabpanel"),this._addClass(this.panels,"ui-tabs-panel","ui-widget-content"),i&&(this._off(i.not(this.tabs)),this._off(s.not(this.anchors)),this._off(n.not(this.panels)))},_getList:function(){return this.tablist||this.element.find("ol, ul").eq(0)},_createPanel:function(e){return t("<div>").attr("id",e).data("ui-tabs-destroy",!0)},_setOptionDisabled:function(e){var i,s,n;for(t.isArray(e)&&(e.length?e.length===this.anchors.length&&(e=!0):e=!1),n=0;s=this.tabs[n];n++)i=t(s),e===!0||-1!==t.inArray(n,e)?(i.attr("aria-disabled","true"),this._addClass(i,null,"ui-state-disabled")):(i.removeAttr("aria-disabled"),this._removeClass(i,null,"ui-state-disabled"));this.options.disabled=e,this._toggleClass(this.widget(),this.widgetFullName+"-disabled",null,e===!0)},_setupEvents:function(e){var i={};e&&t.each(e.split(" "),function(t,e){i[e]="_eventHandler"}),this._off(this.anchors.add(this.tabs).add(this.panels)),this._on(!0,this.anchors,{click:function(t){t.preventDefault()}}),this._on(this.anchors,i),this._on(this.tabs,{keydown:"_tabKeydown"}),this._on(this.panels,{keydown:"_panelKeydown"}),this._focusable(this.tabs),this._hoverable(this.tabs)},_setupHeightStyle:function(e){var i,s=this.element.parent();"fill"===e?(i=s.height(),i-=this.element.outerHeight()-this.element.height(),this.element.siblings(":visible").each(function(){var e=t(this),s=e.css("position");"absolute"!==s&&"fixed"!==s&&(i-=e.outerHeight(!0))}),this.element.children().not(this.panels).each(function(){i-=t(this).outerHeight(!0)}),this.panels.each(function(){t(this).height(Math.max(0,i-t(this).innerHeight()+t(this).height()))}).css("overflow","auto")):"auto"===e&&(i=0,this.panels.each(function(){i=Math.max(i,t(this).height("").height())}).height(i))},_eventHandler:function(e){var i=this.options,s=this.active,n=t(e.currentTarget),o=n.closest("li"),a=o[0]===s[0],r=a&&i.collapsible,h=r?t():this._getPanelForTab(o),l=s.length?this._getPanelForTab(s):t(),c={oldTab:s,oldPanel:l,newTab:r?t():o,newPanel:h};e.preventDefault(),o.hasClass("ui-state-disabled")||o.hasClass("ui-tabs-loading")||this.running||a&&!i.collapsible||this._trigger("beforeActivate",e,c)===!1||(i.active=r?!1:this.tabs.index(o),this.active=a?t():o,this.xhr&&this.xhr.abort(),l.length||h.length||t.error("jQuery UI Tabs: Mismatching fragment identifier."),h.length&&this.load(this.tabs.index(o),e),this._toggle(e,c))},_toggle:function(e,i){function s(){o.running=!1,o._trigger("activate",e,i)}function n(){o._addClass(i.newTab.closest("li"),"ui-tabs-active","ui-state-active"),a.length&&o.options.show?o._show(a,o.options.show,s):(a.show(),s())}var o=this,a=i.newPanel,r=i.oldPanel;this.running=!0,r.length&&this.options.hide?this._hide(r,this.options.hide,function(){o._removeClass(i.oldTab.closest("li"),"ui-tabs-active","ui-state-active"),n()}):(this._removeClass(i.oldTab.closest("li"),"ui-tabs-active","ui-state-active"),r.hide(),n()),r.attr("aria-hidden","true"),i.oldTab.attr({"aria-selected":"false","aria-expanded":"false"}),a.length&&r.length?i.oldTab.attr("tabIndex",-1):a.length&&this.tabs.filter(function(){return 0===t(this).attr("tabIndex")}).attr("tabIndex",-1),a.attr("aria-hidden","false"),i.newTab.attr({"aria-selected":"true","aria-expanded":"true",tabIndex:0})},_activate:function(e){var i,s=this._findActive(e);s[0]!==this.active[0]&&(s.length||(s=this.active),i=s.find(".ui-tabs-anchor")[0],this._eventHandler({target:i,currentTarget:i,preventDefault:t.noop}))},_findActive:function(e){return e===!1?t():this.tabs.eq(e)},_getIndex:function(e){return"string"==typeof e&&(e=this.anchors.index(this.anchors.filter("[href$='"+t.ui.escapeSelector(e)+"']"))),e},_destroy:function(){this.xhr&&this.xhr.abort(),this.tablist.removeAttr("role").off(this.eventNamespace),this.anchors.removeAttr("role tabIndex").removeUniqueId(),this.tabs.add(this.panels).each(function(){t.data(this,"ui-tabs-destroy")?t(this).remove():t(this).removeAttr("role tabIndex aria-live aria-busy aria-selected aria-labelledby aria-hidden aria-expanded")}),this.tabs.each(function(){var e=t(this),i=e.data("ui-tabs-aria-controls");i?e.attr("aria-controls",i).removeData("ui-tabs-aria-controls"):e.removeAttr("aria-controls")}),this.panels.show(),"content"!==this.options.heightStyle&&this.panels.css("height","")},enable:function(e){var i=this.options.disabled;i!==!1&&(void 0===e?i=!1:(e=this._getIndex(e),i=t.isArray(i)?t.map(i,function(t){return t!==e?t:null}):t.map(this.tabs,function(t,i){return i!==e?i:null})),this._setOptionDisabled(i))},disable:function(e){var i=this.options.disabled;if(i!==!0){if(void 0===e)i=!0;else{if(e=this._getIndex(e),-1!==t.inArray(e,i))return;i=t.isArray(i)?t.merge([e],i).sort():[e]}this._setOptionDisabled(i)}},load:function(e,i){e=this._getIndex(e);var s=this,n=this.tabs.eq(e),o=n.find(".ui-tabs-anchor"),a=this._getPanelForTab(n),r={tab:n,panel:a},h=function(t,e){"abort"===e&&s.panels.stop(!1,!0),s._removeClass(n,"ui-tabs-loading"),a.removeAttr("aria-busy"),t===s.xhr&&delete s.xhr};this._isLocal(o[0])||(this.xhr=t.ajax(this._ajaxSettings(o,i,r)),this.xhr&&"canceled"!==this.xhr.statusText&&(this._addClass(n,"ui-tabs-loading"),a.attr("aria-busy","true"),this.xhr.done(function(t,e,n){setTimeout(function(){a.html(t),s._trigger("load",i,r),h(n,e)},1)}).fail(function(t,e){setTimeout(function(){h(t,e)},1)})))},_ajaxSettings:function(e,i,s){var n=this;return{url:e.attr("href").replace(/#.*$/,""),beforeSend:function(e,o){return n._trigger("beforeLoad",i,t.extend({jqXHR:e,ajaxSettings:o},s))}}},_getPanelForTab:function(e){var i=t(e).attr("aria-controls");return this.element.find(this._sanitizeSelector("#"+i))}}),t.uiBackCompat!==!1&&t.widget("ui.tabs",t.ui.tabs,{_processTabs:function(){this._superApply(arguments),this._addClass(this.tabs,"ui-tab")}}),t.ui.tabs,t.widget("ui.tooltip",{version:"1.12.1",options:{classes:{"ui-tooltip":"ui-corner-all ui-widget-shadow"},content:function(){var e=t(this).attr("title")||"";return t("<a>").text(e).html()},hide:!0,items:"[title]:not([disabled])",position:{my:"left top+15",at:"left bottom",collision:"flipfit flip"},show:!0,track:!1,close:null,open:null},_addDescribedBy:function(e,i){var s=(e.attr("aria-describedby")||"").split(/\s+/);s.push(i),e.data("ui-tooltip-id",i).attr("aria-describedby",t.trim(s.join(" ")))},_removeDescribedBy:function(e){var i=e.data("ui-tooltip-id"),s=(e.attr("aria-describedby")||"").split(/\s+/),n=t.inArray(i,s);-1!==n&&s.splice(n,1),e.removeData("ui-tooltip-id"),s=t.trim(s.join(" ")),s?e.attr("aria-describedby",s):e.removeAttr("aria-describedby")},_create:function(){this._on({mouseover:"open",focusin:"open"}),this.tooltips={},this.parents={},this.liveRegion=t("<div>").attr({role:"log","aria-live":"assertive","aria-relevant":"additions"}).appendTo(this.document[0].body),this._addClass(this.liveRegion,null,"ui-helper-hidden-accessible"),this.disabledTitles=t([])},_setOption:function(e,i){var s=this;this._super(e,i),"content"===e&&t.each(this.tooltips,function(t,e){s._updateContent(e.element)})},_setOptionDisabled:function(t){this[t?"_disable":"_enable"]()},_disable:function(){var e=this;t.each(this.tooltips,function(i,s){var n=t.Event("blur");n.target=n.currentTarget=s.element[0],e.close(n,!0)}),this.disabledTitles=this.disabledTitles.add(this.element.find(this.options.items).addBack().filter(function(){var e=t(this);return e.is("[title]")?e.data("ui-tooltip-title",e.attr("title")).removeAttr("title"):void 0}))},_enable:function(){this.disabledTitles.each(function(){var e=t(this);e.data("ui-tooltip-title")&&e.attr("title",e.data("ui-tooltip-title"))}),this.disabledTitles=t([])},open:function(e){var i=this,s=t(e?e.target:this.element).closest(this.options.items);s.length&&!s.data("ui-tooltip-id")&&(s.attr("title")&&s.data("ui-tooltip-title",s.attr("title")),s.data("ui-tooltip-open",!0),e&&"mouseover"===e.type&&s.parents().each(function(){var e,s=t(this);s.data("ui-tooltip-open")&&(e=t.Event("blur"),e.target=e.currentTarget=this,i.close(e,!0)),s.attr("title")&&(s.uniqueId(),i.parents[this.id]={element:this,title:s.attr("title")},s.attr("title",""))}),this._registerCloseHandlers(e,s),this._updateContent(s,e))},_updateContent:function(t,e){var i,s=this.options.content,n=this,o=e?e.type:null;return"string"==typeof s||s.nodeType||s.jquery?this._open(e,t,s):(i=s.call(t[0],function(i){n._delay(function(){t.data("ui-tooltip-open")&&(e&&(e.type=o),this._open(e,t,i))})}),i&&this._open(e,t,i),void 0)},_open:function(e,i,s){function n(t){l.of=t,a.is(":hidden")||a.position(l)}var o,a,r,h,l=t.extend({},this.options.position);if(s){if(o=this._find(i))return o.tooltip.find(".ui-tooltip-content").html(s),void 0;i.is("[title]")&&(e&&"mouseover"===e.type?i.attr("title",""):i.removeAttr("title")),o=this._tooltip(i),a=o.tooltip,this._addDescribedBy(i,a.attr("id")),a.find(".ui-tooltip-content").html(s),this.liveRegion.children().hide(),h=t("<div>").html(a.find(".ui-tooltip-content").html()),h.removeAttr("name").find("[name]").removeAttr("name"),h.removeAttr("id").find("[id]").removeAttr("id"),h.appendTo(this.liveRegion),this.options.track&&e&&/^mouse/.test(e.type)?(this._on(this.document,{mousemove:n}),n(e)):a.position(t.extend({of:i},this.options.position)),a.hide(),this._show(a,this.options.show),this.options.track&&this.options.show&&this.options.show.delay&&(r=this.delayedShow=setInterval(function(){a.is(":visible")&&(n(l.of),clearInterval(r))},t.fx.interval)),this._trigger("open",e,{tooltip:a})}},_registerCloseHandlers:function(e,i){var s={keyup:function(e){if(e.keyCode===t.ui.keyCode.ESCAPE){var s=t.Event(e);s.currentTarget=i[0],this.close(s,!0)}}};i[0]!==this.element[0]&&(s.remove=function(){this._removeTooltip(this._find(i).tooltip)}),e&&"mouseover"!==e.type||(s.mouseleave="close"),e&&"focusin"!==e.type||(s.focusout="close"),this._on(!0,i,s)},close:function(e){var i,s=this,n=t(e?e.currentTarget:this.element),o=this._find(n);return o?(i=o.tooltip,o.closing||(clearInterval(this.delayedShow),n.data("ui-tooltip-title")&&!n.attr("title")&&n.attr("title",n.data("ui-tooltip-title")),this._removeDescribedBy(n),o.hiding=!0,i.stop(!0),this._hide(i,this.options.hide,function(){s._removeTooltip(t(this))}),n.removeData("ui-tooltip-open"),this._off(n,"mouseleave focusout keyup"),n[0]!==this.element[0]&&this._off(n,"remove"),this._off(this.document,"mousemove"),e&&"mouseleave"===e.type&&t.each(this.parents,function(e,i){t(i.element).attr("title",i.title),delete s.parents[e]}),o.closing=!0,this._trigger("close",e,{tooltip:i}),o.hiding||(o.closing=!1)),void 0):(n.removeData("ui-tooltip-open"),void 0)},_tooltip:function(e){var i=t("<div>").attr("role","tooltip"),s=t("<div>").appendTo(i),n=i.uniqueId().attr("id");return this._addClass(s,"ui-tooltip-content"),this._addClass(i,"ui-tooltip","ui-widget ui-widget-content"),i.appendTo(this._appendTo(e)),this.tooltips[n]={element:e,tooltip:i}},_find:function(t){var e=t.data("ui-tooltip-id");return e?this.tooltips[e]:null},_removeTooltip:function(t){t.remove(),delete this.tooltips[t.attr("id")]},_appendTo:function(t){var e=t.closest(".ui-front, dialog");return e.length||(e=this.document[0].body),e},_destroy:function(){var e=this;t.each(this.tooltips,function(i,s){var n=t.Event("blur"),o=s.element;n.target=n.currentTarget=o[0],e.close(n,!0),t("#"+i).remove(),o.data("ui-tooltip-title")&&(o.attr("title")||o.attr("title",o.data("ui-tooltip-title")),o.removeData("ui-tooltip-title"))}),this.liveRegion.remove()}}),t.uiBackCompat!==!1&&t.widget("ui.tooltip",t.ui.tooltip,{options:{tooltipClass:null},_tooltip:function(){var t=this._superApply(arguments);return this.options.tooltipClass&&t.tooltip.addClass(this.options.tooltipClass),t}}),t.ui.tooltip});
/*

Copyright 2017 Erik Gustafsson. All rights reserved.

This file may distributed and/or modified under the
terms of the Insight Maker Public License (https://InsightMaker.com/impl).

*/

function makeMenu(menu) {
	// Toggle the visiblity of the menu
	$(menu).find(".menuButton").click(function() {
		if($(menu).find(".menuContent").is(":visible")) {
			// Hide all menus
			$(".menuContent").hide();
		} else {
			// Hide all menus
			$(".menuContent").hide();
			// Show the clicked menu
			$(menu).find(".menuContent").show();
		}
	});
}
$(document).ready(function() {
	$(".eMenu").each(function() {
		makeMenu(this);
	});
});

// Hide menu when not clicking on menu button
$(window).click(function(event) {
  if (!$(event.target).hasClass('menuButton')) {
	$(".menuContent").hide();
  }
});

/*

Copyright 2017 Erik Gustafsson. All rights reserved.

This file may distributed and/or modified under the
terms of the Insight Maker Public License (https://InsightMaker.com/impl).

*/

var equationEditor;
var converterDialog;
var simulationSettings;
var macroDialog;
var equationList;
var debugDialog;
var aboutDialog;

const aboutText = `
<img src="graphics/stochsd_high.png" style="width: 128px; height: 128px"/><br/>
<b>StochSD version 170722</b><br/>
<br/>
<b>StochSD</b> (<u>Stoch</u>astic <u>S</u>ystem <u>D</u>ynamics) is an extension of System Dynamics into the field of stochastic modelling. In particular, you can make statistical analyses from multiple simulation runs.<br/>
<br/>
StochSD is an open source program based on the <a target="_blank" href="http://insightmaker.com">Insight Maker engine</a> developed by Scott Fortmann-Roe. However, the graphic package of Insight Maker is replaced to make StochSD open for use as well as modifications and extensions. The file handling system is also rewritten (although the IM file specification is preserved). Finally a number of tools for optimisation, sensitivity analysis and statistical analysis are supplemented.<br/>
<br/>
StochSD was developed by Erik Gustafsson, dept. of Signals and Systems, Uppsala University, Uppsala, Sweden.<br/>
Mail: Ekir.Gustafsson@gmail.com.
`;


function applicationReload() {
	environment.reloadingStarted = true;
	location.reload();
}

function preserveRestart() {
	History.toLocalStorage();
	localStorage.setItem("fileName",fileManager.fileName);
	localStorage.setItem("reloadPending","1");
	applicationReload();
}

function restoreAfterRestart() {	
	do_global_log("restoring");
	let reloadPending = localStorage.getItem("reloadPending");
	
	if(reloadPending == null) {
		// No reload is pending
		do_global_log("nothing pending to restore");
		return;
	}
	do_global_log("removing pending flag");
	// Else remove the pending reload
	localStorage.removeItem("reloadPending");
	
	fileManager.fileName = localStorage.getItem("fileName");
	fileManager.updateTitle();
	
	do_global_log("restore the file");
	fileManager.fileName = localStorage.getItem("fileName");
	
	// Read the history from localStorage
	History.fromLocalStorage();
}

class History {
	static init() {
		// We define this.undoIndex as pointing to the currently active undoState
		// If we are at the first step with no undo-states behind it is -1
		this.undoStates = [];
		this.undoIndex = -1;
		this.lastUndoState = "";
		
		// Tells if the last state is saved to file
		// This is used for determining if the program should ask about saving
		History.unsavedChanges = false;
		
	}
	static storeUndoState() {
		let InsightMakerDocumentWriter = new InsightMakerDocument();
		InsightMakerDocumentWriter.appendPrimitives();
		let undoState = InsightMakerDocumentWriter.getXmlString();
		
		
		// Add to undo history if it is different then previus state
		if(this.lastUndoState != undoState) {
			this.undoStates.push(undoState);
			this.undoIndex=this.undoStates.length-1;
			this.lastUndoState = undoState;
			
			this.unsavedChanges = true;
		}
	}
	
	static forceCustomUndoState(newState) {
		this.undoStates=[];
		this.undoStates.push(newState);
		this.undoIndex=0;
		this.lastUndoState = newState;
		this.unsavedChanges = false;
	}
	
	static doUndo() {
		if(this.undoIndex > 0) {
			this.undoIndex --;
			this.restoreUndoState();	
		} else {
			xAlert("No more undo");
		}
	}
	
	static doRedo() {
		if(this.undoIndex < this.undoStates.length-1) {
			this.undoIndex ++;
			this.restoreUndoState();
		} else {
			xAlert("No more redo");
		}
	}
	
	static getCurrentState() {
		return this.undoStates[this.undoIndex];
	}
	
	static debug() {
		console.error("undo index "+this.undoIndex);
		console.error("history length "+this.undoStates.length);
		console.error(this.undoStates);
	}
	
	static restoreUndoState() {
		this.lastUndoState = this.undoStates[this.undoIndex];
		loadModelFromXml(this.lastUndoState);
	}
	
	static clearUndoHistory() {
		this.undoStates = [];
		this.undoIndex = -1;
	}
	
	static toLocalStorage() {
		localStorage.setItem("undoState_length",this.undoStates.length);
		
		for(let i in this.undoStates) {
			let state=this.undoStates[i];
			localStorage.setItem("undoState_"+i,state);
		}
		
		localStorage.setItem("undoIndex",this.undoIndex);
	}
	
	static fromLocalStorage() {
		this.clearUndoHistory();
		let undoState_length = localStorage.getItem("undoState_length");
		for(let i = 0;i < undoState_length; i++) {
			let state = localStorage.getItem("undoState_"+i);
			this.undoStates.push(state);
		}
		this.undoIndex = localStorage.getItem("undoIndex");
		this.restoreUndoState();
	}
}
History.init();

function loadModelFromXml(XmlString) {
	clearModel();
	stochsd_clear_sync();
	loadXML(XmlString);
	syncAllVisuals();
}

function showPluginMenu() {
	$(".pluginMenu").show();
}

function sendToParentFrame(returnobj,target) {
	results={};
	results.target=target;
	results.returnobj=returnobj;
	parent.postMessage(JSON.stringify(results), "*");
}

function loadPlugin(pluginName) {	
	sendToParentFrame({"app_name":pluginName},"load_app");
}

function setParentTitle(newTitle) {	
	sendToParentFrame({"title":newTitle},"update_title");
}

function quitQuestion() {
	// How close event works
	// https://github.com/nwjs/nw.js/wiki/window
	saveChangedAlert(function() {
		nwjsWindow.close(true);
	});
}

function makeKeyboardCodes() {
	let keyboard={};
	for(let tkey=0;tkey<=255;tkey++) {
		keyboard[String.fromCharCode(tkey)] = tkey;
	}
	//~ alert(key["B"]);
	keyboard["delete"] = 46;
	keyboard["+"] = 187;
	keyboard["-"] = 189;
	return keyboard;
}

const keyboard = makeKeyboardCodes();

function updateWindowSize() {
	let windowWidth = $(window).width();
	let windowHeight = $(window).height();
	
	$("#coverEverythingDiv").width(windowWidth);
	$("#coverEverythingDiv").height(windowHeight);
	
	// resizing of the svgplane must be done after everything else is resized to fit with the new height of the toolbar
	// The resize of the toolbar is decided by css depending on how many lines the toolbar is so its very hard if we would calculate this size in advanced
	// Instead we wait until it is resized and then adopt to the result
	setTimeout(function() {
		var svgPosition = $("#svgplanebackground").position();
		$("#svgplanebackground").width(windowWidth-50);
		$("#svgplanebackground").height(windowHeight-svgPosition.top);
	},100);
	

}

defaultAttributeChangeHandler=function(primitive,attributeName,value) {
	let id = getID(primitive);
	let type = getType(primitive);
	let visualObject = get_object(id);
	if(visualObject) {
		visualObject.attributeChangeHandler(attributeName,value);
	}
	
	switch(attributeName) {
		case "name":
			set_name(id,value);
		break;
	}
	//~ do_global_log("tjohej "+type+" "+attributeName);
	if(type=="Numberbox" && attributeName=="Target") {
		let visualObject = get_object(id);
		// render() can only be done when the numberbox is fully loaded
		// Therefor we have to check that visualObject is not null
		if(visualObject) {
			visualObject.render();
		}
	}
}

defaultPositionChangeHandler = function(primitive) {
	let newPosition = getCenterPosition(primitive)
	let visualObject = object_array[getID(primitive)];
	if(visualObject) {
		visualObject.set_pos(newPosition);
	}
}


defaultPrimitiveCreatedHandler = function(primitive) {
	syncVisual(primitive);
}

defaultPrimitiveBeforeDestroyHandler = function(primitive) {
	stochsd_delete_primitive(getID(primitive));
}

var sdsMacros = `### Imported Macros from StochSD ###
T() <- Unitless(Time())
DT() <- Unitless(TimeStep())
TS() <- Unitless(TimeStart())
TL() <- Unitless(TimeLength())
TE() <- Unitless(TimeEnd())
PoFlow(Lambda) <- RandPoisson(Dt()*Lambda)/DT()
PulseFcn(Start, Volume, Repeat) <- Pulse(Start, Volume/DT(), 0, Repeat) 
### End of StochSD Macros ###
### Put your own macro code below ###`;

// Add the StocSD macro-script to the beggning of the Macro
function appendStochSDMacros() {
	var macros = getMacros();
	if(macros===undefined) {
		macros="";
	}
	if(macros.substring(0, sdsMacros.length) != sdsMacros) {
		macros = sdsMacros+"\n\n\n"+macros;
		setMacros(macros);
	}
}

// Replace macro with the StochSD macro-script
function setStochSDMacros() {
	var macros = sdsMacros+"\n\n\n";
	setMacros(macros);
}

let showMacros = function() {
	macroDialog.show();
};

function getLinkedPrimitives(primitive) {
	let result=[];
	let allLinks = primitives("Link");
	for(let link of allLinks) {
		if(link.target == primitive) {
			if(link.source != null) {
				result.push(link.source);
			}
		}
	}
	return result;
}

// External API support
window.addEventListener('message', callAPI, false);
function callAPI(e) {
	try {
		e.source.postMessage(eval(e.data), "*");
	} catch (err) {

	}
}

function getFunctionHelpData() {
		var helpData = [
		["Mathematical Functions", [
			["Round", "Round(##Value$$)", "Rounds a number to the nearest integer.", ["Round(3.6)", "4"]],
			["Round Up", "Ceiling(##Value$$)", "Rounds a number up to the nearest integer.", ["Ceiling(3.6)", "4"]],
			["Round Down", "Floor(##Value$$)", "Rounds a number down to the nearest integer.", ["Floor(3.6)", "3"]],
			["Cos", "Cos(##Angle$$)", "Finds the cosine of an angle.", ["Cos({180 Degrees})", "-1"]],
			["ArcCos", "ArcCos(##Value$$)", "Finds the arc-cosine of a value. The result includes units.", ["ArcCos(0)", "{90 Degrees}"]],
			["Sin", "Sin(##Angle$$)", "Finds the sine of an angle.", ["Sin({180 Degrees})", "0"]],
			["ArcSin", "ArcSin(##Value$$)", "Finds the arc-sine of a value.  The result includes units.", ["ArcSin(1)", "{90 Degrees}"]],
			["Tan", "Tan(##Angle$$)", "Finds the tangent of an angle.", ["Tan({Pi/4 Radians})", "1"]],
			["ArcTan", "ArcTan(##Value$$)", "Finds the arc-tangent of a value. The result includes units.", ["ArcTan(1)", "{45 Degrees}"]],
			["Log", "Log(##Value$$)", "Returns the base-10 logarithm of a number.", ["Log(1000)", "3"]],
			["Ln", "Ln(##Value$$)", "Returns the natural logarithm of a number.", ["Ln(e^2)", "2"]],
			["Exp", "Exp(##Value$$)", "Returns e taken to a power.", ["Exp(1)", "e"]],
			["Sum", "Sum(##Values$$)", "Returns the sum of a vector or list of numbers.", ["Sum(7, 5, 6)", "18"]],
			["Product", "Product(##Values$$)", "Returns the product of a vector or list of numbers.", ["Product(2, 4, -1)", "-8"]],
			["Maximum", "Max(##Values$$)", "Returns the largest of a vector or list of numbers.", ["Max(2, 4, -1)", "4"]],
			["Minimum", "Min(##Values$$)", "Returns the smallest of a vector or list of numbers.", ["Min(2, 4, -1, 3)", "-1"]],
			["Mean", "Mean(##Values$$)", "Returns the mean of a vector or list of numbers.", ["Mean(2, 7, 3)", "4"]],
			["Median", "Median(##Values$$)", "Returns the median of a vector or list of numbers.", ["Median(2, 7, 3)", "3"]],
			["Standard Deviation", "StdDev(##Values$$)", "Returns the standard deviation of a vector or list of numbers.", ["StdDev(1, 2, 3)", "1"]],
			["Absolute Value", "Abs(##Value$$)", "Returns the absolute value of a number.", ["Abs(-23)", "23"]],
			["Mod", "##(Value One)$$ mod ##(Value Two)$$", "Returns the remainder of the division of two numbers.", ["13 mod 5", "3"]],
			["Square Root", "Sqrt(##Value$$)", "Returns the square root of a number.", ["Sqrt(9)", "3"]],
			["Sign", "Sign(##Value$$)", "1 if the value is greater than 0, -1 if it is less than 0, and 0 if it is 0.", ["Sign(-12)", "-1"]],
			["Pi", "pi", "The value 3.14159265."],
			["e", "e", "The value 2.71828183."],
			["Logit", "Logit(##Value$$)", "Returns the logit transformation of the value. Converts values on a 0 to 1 scale to a -Infinity to Infinity scale.", ["Logit(0.5)", "0"]],
			["Expit", "Expit(##Value$$)", "Returns the expit transformation of the value. Converts values on a -Infinity to Infinity scale to a 0 to 1 scale.", ["Expit(0)", "0.5"]]
		]],
		["Time Functions", [
			["Current Time", "T()", "The current time excluding units."],
			["Time Start", "TS()", "The simulation start time excluding units."],
			["Time Step", "DT()", "The simulation time step excluding units."],
			["Time Length", "TL()", "The total length of the simulation excluding units."],
			["Time End", "TE()", "The time at which the simulation ends excluding units."]
			
			/*
			["Current Time with Units", "Time()", "The current time including units.", "IfThenElse(Time() > {10 Years}, 15, 0)"],
			["Time Start with Units", "TimeStart()", "The simulation start time including units."],
			["Time Step with Units", "TimeStep()", "The simulation time step including units."],
			["Time Length with Units", "TimeLength()", "The total length of the simulation including units."],
			["Time End with Units", "TimeEnd()", "The time at which the simulation ends including units.", ["TimeStart() + TimeLength() = TimeEnd()", "True"]]
			*/
		]],
		["Historical Functions", [
			["Delay", "Delay(##[Primitive]$$, ##Delay Length$$, ##Default Value$$)", "Returns the value of a primitive for a specified length of time ago. Default Value stands in for the primitive value in the case of negative times.", "Delay([Income], {5 Years})"],
			["Delay1", "Delay1(##[Primitive]$$, ##Delay Length$$, ##Initial Value$$)", "Returns a smoothed, first-order exponential delay of the value of a primitive. The Initial Value is optional.", "Delay1([Income], 5, 10000)"],
			["Delay3", "Delay3(##[Primitive]$$, ##Delay Length$$, ##Initial Value$$)", "Returns a smoothed, third-order exponential delay of the value of a primitive. The Initial Value is optional.", "Delay3([Income], {20 Months}, 10000)"],
			["Smooth", "Smooth(##[Primitive]$$, ##Length$$, ##Initial Value$$)", "Returns a smoothing of a primitive's past values. Results in an averaged curve fit. Length affects the weight of past values. The Initial Value is optional."],
			["PastValues", "PastValues(##[Primitive]$$, ##Period = All Time$$)", "Returns the values a primitive has taken on over the course of the simulation as a vector. The second optional argument is a time window to limit the depth of the history.", ["Sum(PastValues([Income]))", "Total past income"]],
			["Maximum", "PastMax(##[Primitive]$$, ##Period = All Time$$)", "Returns the maximum of the values a primitive has taken on over the course of the simulation. The second optional argument is a time window to limit the calculation.", ["PastMax([Income], {10 Years})", "The maximum income in the past 10 years"]],
			["Minimum", "PastMin(##[Primitive]$$, ##Period = All Time$$)", "Returns the minimum of the values a primitive has taken on over the course of the simulation. The second optional argument is a time window to limit the calculation.", ["PastMin([Income], 10)", "The minimum income in the past 10 units of time"]],
			["Median", "PastMedian(##[Primitive]$$, ##Period = All Time$$)", "Returns the median of the values a primitive has taken on over the course of the simulation. The second optional argument is a time window to limit the calculation."],
			["Mean", "PastMean(##[Primitive]$$, ##Period = All Time$$)", "Returns the mean of the values a primitive has taken on over the course of the simulation. The second optional argument is a time window to limit the calculation."],
			["Standard Deviation", "PastStdDev(##[Primitive]$$, ##Period = All Time$$)", "Returns the standard deviation of the values a primitive has taken on over the course of the simulation. The second optional argument is a time window to limit the calculation."],
			["Correlation", "PastCorrelation(##[Primitive]$$, ##[Primitive]$$, ##Period = All Time$$)", "Returns the correlation between the values that two primitives have taken on over the course of the simulation. The third optional argument is an optional time window to limit the calculation.", ["PastCorrelation([Income], [Expenditures], {10 Years})", "The correlation between income and expenditures over the past 10 years."]],
			["Fix", "Fix(##Value$$, ##Period=-1$$)", "Takes the dynamic value and forces it to be fixed over the course of the period. If period is -1, the value is held constant over the course of the whole simulation.", ["Fix(Rand(), {5 Years})", "Chooses a new random value every five years"]]
		]],
		["Random Number Functions", [
			["Poisson Flow", "PoFlow(##Lambda$$)", "Short for RandPoisson(DT()*Lambda)/DT()."],
			["Uniform Distribution", "Rand(##Minimum$$, ##Maximum$$)", "Generates a uniformly distributed random number between the minimum and maximum. The minimum and maximum are optional and default to 0 and 1 respectively.", ["Rand()", "0.7481"]],
			["Normal Distribution", "RandNormal(##Mean$$, ##Standard Deviation$$)", "Generates a normally distributed random number with a mean and a standard deviation. The mean and standard deviation are optional and default to 0 and 1 respectively.", ["RandNormal(10, 1)", "11.23"]],
			["Lognormal Distribution", "RandLognormal(##Mean$$, ##Standard Deviation$$)", "Generates a log-normally distributed random number with a mean and a standard deviation."],
			["Binary Distribution", "RandBoolean(##Probability$$)", "Returns 1 with the specified probability, otherwise 0. The probability is optional and defaults to 0.5: a coin flip.", ["RandBoolean(0.1)", "False"]],
			["Binomial Distribution", "RandBinomial(##Count$$, ##Probability$$)", "Generates a binomially distributed random number. The number of successes in Count random events each with Probability of success."],
			["Negative Binomial", "RandNegativeBinomial(##Successes$$, ##Probability$$)", "Generates a negative binomially distributed random number. The number of random events each with Probability of success required to generate the specified Successes."],
			["Poisson Distribution", "RandPoisson(##Lambda$$)", "Generates a Poisson distributed random number."],
			["Triangular Distribution", "RandTriangular(##Minimum$$, ##Maximum$$, ##Peak$$)", "Generates a triangularly distributed random number."],
			["Exponential Distribution", "RandExp(##Lambda$$)", "Generates an exponentially distributed random number with the specified rate parameter."],
			["Gamma Distribution", "RandGamma(##Alpha$$, ##Beta$$)", "Generates a Gamma distributed random number."],
			["Beta Distribution", "RandBeta(##Alpha$$, ##Beta$$)", "Generates a Beta distributed random number."],
			["Custom Distribution", "RandDist(##X$$, ##Y$$)", "Generates a random number according to a custom distribution. Takes two vectors with the x- and y-coordinates respectively of points defining the distribution. Points are interpolated linearly. The distribution does not have to be normalized such that its area is 1, but the points must be sorted from smallest to largest x locations. You may also pass a single vector containing pairs of {x, y} coordinates (e.g. { {1, 0}, {3, 4}, {4, 0} } ).", ["RandDist({0, 1, 2, 3}, {0, 5, 1, 0})", "1.2"]]
		]],
		["General Functions", [
			["Unitless", "Unitless(##Value$$)", "Returns a unitless version of its input.", "Unitless(TimeStep())"],
			["If Then Else", "IfThenElse(##Test Condition$$, ##Value if True$$, ##Value if False$$)", "Tests a condition and returns one value if the condition is true and another value if the condition is false.", ["IfThenElse(20 > 10, 7, 5)", "7"]],
			["Lookup", "Lookup(##Value$$, ##Values Vector$$, ##Results Vector$$)", "Finds the Value in the Values Vector and returns the corresponding item in the Results Vector. If the exact Value is not found in the Values Vector, linear interpolation of the nearby values will be used.", ["Lookup(6, {5, 7}, {10, 15})", "12.5"]],
			["PulseFcn", "PulseFcn(##Time$$, ##Volume$$, ##Repeat)", "Creates a pulse input at the specified time with the specified Volume. Repeat is optional and will create a pulse train with the specified time if positive..", "Pulse(0, 5, 2)"],
			["Step", "Step(##Start$$, ##Height=1$$)", "Creates an input that is initially set to 0 and after the time of Start is set to Height. Height defaults to 1.", "Step({10 Years}, 5)"],
			["Ramp", "Ramp(##Start$$, ##Finish$$, ##Height=1$$)", "Creates a ramp input which moves linearly from 0 to Height between the Start and Finish times. Before Start, the value is 0; after Finish, the value is Height. Height defaults to 1.", "Ramp({10 Year}, {20 Years}, 5)"],
			["Pause", "Pause()", "Pauses the simulation and allows sliders to be adjusted. Often used in combination with an IfThenElse function.", "IfThenElse(Years() = 20, Pause(), 0)"],
			["Stop", "Stop()", "Immediately terminates the simulation. Often used in combination with an IfThenElse function.", "IfThenElse(Rand() < 0.01, Stop(), 0)"]
		]],
		["Programming Functions", [
			["Variables", "##Variable$$ <- ##Value$$", "Assigns a value to a reusable variable.", ['x <- 10\nx^2', "100"]],
			["If-Then-Else", "If ##Condition$$ Then\n  ##Expression$$\nElse If ##Condition$$ Then\n  ##Expression$$\nElse\n  ##Expression$$\nEnd If", "Test one or more conditions and selectively execute code based on these tests."],
			["While Loop", "While ##Condition$$\n  ##Expression$$\nEnd Loop", "Repeats an action until a condition is no longer true.", ['x <- 1\nWhile x < 10\n  x <- x*2\nEnd Loop\nx', "16"]],
			["For-In Loop", "For ##Variable$$ in ##Vector$$\n  ##Expression$$\nEnd Loop", "Repeats an action for each element in a vector.", ['sum <- 0\nFor x in {1, 10, 27}\n  sum <- sum + x\nEnd Loop\nsum', "38"]],
			["Functions", "Function ##Name$$()\n  ##Expression$$\nEnd Function", "Creates a reusable function.", ['Function Square(x)\n  x^2\nEnd Function\nSquare(5)', "25"]],
			["Anonymous Functions", "##Variable$$ <- Function()\n  ##Expression$$\nEnd Function", "Creates an anonymous function.", ['square <- Function(x)\n  x^2\nEnd Function\nsquare(5)', "25"]],
			["Anonymous Functions", "Function() ##Expression$$", "Creates a single-line anonymous function.", ['{1, 2, 3}.Map(Function(value) value^2 - value)', "{0, 2, 6}"]],
			["Throwing Errors", "throw '##Message$$'", "Passes an error message up to the nearest Try-Catch block or aborts the simulation with the error message.", 'throw "Error: Index out of range."'],
			["Error Handling", "Try\n  ##Expression$$\nCatch ##ErrorString$$\n  ##Expression // Handle the error$$\nEnd Try", 'Attempts to execute some code. If an error occurs, the error is passed as a string variable to the catch block which will then be executed. The catch block will not be executed unless an error occurs.', 'Try\n  mean(x)\nCatch err\n  alert("Could not calculate the mean of the variable. Error Message: "+err)\nEnd Try']
		]],
		["Statistical Distributions", [
			["CDFNormal", "CDFNormal(##x$$, ##Mean=0$$, ##StandardDeviation=1$$)", "Returns the value of x in the CDF of the Normal Distribution.", ["CDFNormal(1.96)", "0.975"]],
			["PDFNormal", "PDFNormal(##x$$, ##Mean=0$$, ##StandardDeviation=1$$)", "Returns the value of x in the PDF of the Normal Distribution.", ["PDFNormal(1.5, 0, 1)", "0.12"]],
			["InvNormal", "InvNormal(##p$$, ##Mean=0$$, ##StandardDeviation=1$$)", "Returns the value of p in the inverse CDF of the Normal Distribution.", ["InvNormal(0.975)", "1.96"]],
			["CDFLognormal", "CDFLognormal(##x$$, ##Mean=0$$, ##StandardDeviation=1$$)", "Returns the value of x in the CDF of the Lognormal Distribution."],
			["PDFLognormal", "PDFLognormal(##x$$, ##Mean=0$$, ##StandardDeviation=1$$)", "Returns the value of x in the PDF of the Lognormal Distribution."],
			["InvLognormal", "InvLognormal(##p$$, ##Mean=0$$, ##StandardDeviation=1$$)", "Returns the value of p in the inverse CDF of the Lognormal Distribution."],
			["CDFt", "CDFt(##x$$, ##DegreesOfFreedom$$)", "Returns the value of x in the CDF of Student's t Distribution."],
			["PDFt", "PDFt(##x$$, ##DegreesOfFreedom$$)", "Returns the value of x in the PDF of Student's t Distribution."],
			["Invt", "Invt(##p$$, ##DegreesOfFreedom$$)", "Returns the value of p in the inverse CDF of Student's t Distribution."],
			["CDFF", "CDFF(##x$$, ##DegreesOfFreedom1$$, ##DegreesOfFreedom2$$)", "Returns the value of x in the CDF of the F Distribution."],
			["PDFF", "PDFF(##x$$, ##DegreesOfFreedom1$$, ##DegreesOfFreedom2$$)", "Returns the value of x in the PDF of the F Distribution."],
			["InvF", "InvF(##p$$, ##DegreesOfFreedom1$$, ##DegreesOfFreedom2$$)", "Returns the value of p in the inverse CDF of the F Distribution."],
			["CDFChiSquared", "CDFChiSquared(##x$$, ##DegreesOfFreedom$$)", "Returns the value of x in the CDF of the Chi-Squared Distribution."],
			["PDFChiSquared", "PDFChiSquared(##x$$, ##DegreesOfFreedom$$)", "Returns the value of x in the PDF of the Chi-Squared Distribution."],
			["InvChiSquared", "InvChiSquared(##p$$, ##DegreesOfFreedom$$)", "Returns the value of p in the inverse CDF of the Chi-Squared Distribution."],
			["CDFExponential", "CDFExponential(##x$$, ##Rate$$)", "Returns the value of x in the CDF of the Exponential Distribution."],
			["PDFExponential", "PDFExponential(##x$$, ##Rate$$)", "Returns the value of x in the PDF of the Exponential Distribution."],
			["InvExponential", "InvExponential(##p$$, ##Rate$$)", "Returns the value of p in the inverse CDF of the Exponential Distribution."],
			["CDFPoisson", "CDFPoisson(##x$$, ##Lambda$$)", "Returns the value of x in the CDF of the Poisson Distribution."],
			["PMFPoisson", "PMFPoisson(##x$$, ##Lambda$$)", "Returns the value of x in the PMF of the Poisson Distribution."]
		]]

	];
	helpData = helpData.sort(function(a, b){
		var categoryA = a[0];
		var categoryB = b[0];
		if(categoryA < categoryB) return -1;
		if(categoryA > categoryB) return 1;
		return 0;
	});
	return helpData;
}

// sdsLoadFunctions is and must be called from Functions.js
function sdsLoadFunctions() {
	defineFunction("T", {params:[]}, function(x) {
        return new Material(simulate.time().toNum().value);
	});
    defineFunction("DT", {params:[]}, function(x) {
        return new Material(simulate.timeStep.toNum().value);
	});
	defineFunction("TS", {params:[]}, function(x) {
        return new Material(simulate.timeStart.toNum().value);
	});
	defineFunction("TL", {params:[]}, function(x) {
        return new Material(simulate.timeLength.toNum().value);
	});
	defineFunction("TE", {params:[]}, function(x) {
        return new Material(simulate.timeEnd.toNum().value);
	});
    defineFunction("PoFlow", {params:[{name:"Rate", noUnits:true, noVector:true}]}, function(x){
        var dt=simulate.timeStep.toNum().value;
        
        return new Material(RandPoisson(dt*x[0].toNum().value)/dt);
	});

	// The code should do the same as the macro:
	// PulseFcn(Start, Volume, Repeat) <- Pulse(Start, Volume/DT(), 0, Repeat) 
	defineFunction("PulseFcn", { params:[{name: "Start Time",  vectorize: true}, {name: "Volume",  vectorize: true, defaultVal: 1}, {name: "Width",  vectorize: true, defaultVal: 0}, {name: "Repeat Period",  vectorize: true, defaultVal: 0}]}, function(x) {
		// Width can not be set in this version of pulse
		// Width was parameter x[2] in the old pulse function but here repeat is x[2] instead

		var start = x[0].toNum();
		var volume = new Material(1);
		var width = new Material(0);
		var repeat = new Material(0);
		var height = null; // Is calculated later
		
		var DT = simulate.timeStep.toNum().value;

		if (x.length > 1) {
			volume = x[1].toNum();
			if (x.length > 2) {
				repeat = x[2].toNum();
			}
		}
		if (! start.units) {
			start.units = simulate.timeUnits;
		}
		if (! width.units) {
			width.units = simulate.timeUnits;
		}
		if (! repeat.units) {
			repeat.units = simulate.timeUnits;
		}
		
		height = new Material(volume/DT);

		if (repeat.value <= 0) {
			if (eq(simulate.time(), start) || greaterThanEq(simulate.time(), start) && lessThanEq(simulate.time(), plus(start, width))) {
				return height;
			}
		} else if (greaterThanEq(simulate.time(), start)) {
			var x = minus(simulate.time(), mult(functionBank["floor"]([div(minus(simulate.time(), start), repeat)]), repeat));
			var dv = minus(simulate.time(), start);
			if (minus(functionBank["round"]([div(dv, repeat)]), div(dv, repeat)).value == 0 || (greaterThanEq(x, start) && lessThanEq(x, plus(start, width)))) {
				return height;
			}
		}
		return new Material(0, height.units);
	});
	
	
}

function getVisibleNeighborhoodIds(id) {
	let neighbors = neighborhood(findID(id));
	let visibleNeighbors = neighbors.filter((neighbor) => { return (!neighbor.linkHidden) });
	return visibleNeighbors.map((neighbor) => { return neighbor.item.getAttribute("id");});
}

function makePrimitiveName(primitiveName)  {
	return "["+primitiveName+"]";
}

function stripBrackets(primitiveName) {
	let cutFrom = primitiveName.lastIndexOf("[")+1;
	let cutTo = primitiveName.indexOf("]");
	if(cutFrom==-1) {
		cutFrom = 0;
	}
	if(cutTo==-1) {
		cutTo = primitiveName.length;
	}
	return primitiveName.slice(cutFrom,cutTo);
}

function formatFunction(functionName) {
	return functionName+"()";
}

function checkedHtmlAttribute(value) {
	if(value) {
		return ' checked="checked" ';
	} else {
		return ' ';
	}
};

class EditorControll {
	static showEditor(primitive, annotations) {
		let primitiveId = getID(primitive);
		get_object(primitiveId).double_click();
	}
}

stocsd_eformat = false;
// But where the lines can be as long as required to print the variable
function stocsd_format(number, tdecimals) {
	// tdecimals is optional and sets the number of decimals. It is rarly used (only in some tables)
	// Since the numbers automaticly goes to e-format when low enought
	
	// Used when e.g. the actuall error is reseted to null
	if(number == null) {
		return "";
	}
    
    // If we force e-format we just convert here and return
    if(stocsd_eformat) {
        return number.toExponential(2).toUpperCase();
    }
	
	// Zero is a special case,
	// since its not written as E-format by default even as its <1E-7
    if(number == 0) {
		return "0";
	}
	
	// Check if number is to small to be viewed in field
	// If so, force e-format
	
	if(Math.abs(number)<Math.pow(10,(-tdecimals))) {
        return number.toExponential(2).toUpperCase();
	}
	//Check if the number is to big to be view ed in the field
	if(Math.abs(number)>Math.pow(10,tdecimals)) {
        return number.toExponential(2).toUpperCase();
	}
	
	
	// Else format it as a regular number, and remove ending zeros
	var stringified = number.toFixed(tdecimals).toUpperCase();
	
	


	// Find the length of stringified, where the ending zeros have been removed
	var i = stringified.length;
	while(stringified.charAt(i-1)=='0') {
		i=i-1;
		// If we find a dot. Stop removing decimals
		if(stringified.charAt(i-1)=='.') {
			i=i-1;
			break;
		}
	}
	// Creates a stripped string without ending zeros
	var stripped = stringified.substring(0,i);
	return stripped;
}

function get_parent_id(id) {
	var parent_id=id.toString().split(".")[0];
	//~ do_global_log("x flowa "+parent_id);
	return parent_id;
}

function get_parent(child) {
	return get_object(get_parent_id(child.id));
}

function is_family(id1,id2) {
	var parent_id1=id1.toString().split(".")[0];
	var parent_id2=id2.toString().split(".")[0];
	if(parent_id1==parent_id2) {
		return true;
	} else {
		return false;
	}
}

// Get a list of all children for a parent
function getChildren(parentId) {
	var result={}
	for(var key in object_array) {
		if(get_parent_id(key)==parentId && key!=parentId) {
			result[key]=object_array[key];
		}
	}
	for(var key in connection_array) {
		if(get_parent_id(key)==parentId && key!=parentId) {
			result[key]=connection_array[key];
		}
	}
	return result;
}

// Return true if parent has any selected children
function hasSelectedChildren(parentId) {
	// Make sure we actually work on parent element
	parentId = get_parent_id(parentId);
	
	// Find the children
	let children = getChildren(parentId);
	for(let id in children) {
		if(children[id].is_selected()) {
			return true;
		}
	}
	return false;
}



var ghost_image='<path inkscape:connector-curvature="0"     d="m 6.8787701,-1.172115 c 0,0.94923948 0.1554403,8.1989876 -0.1943007,9.0150008 C 6.3347285,8.6644488 4.9635227,5.8111805 4.3473135,6.4329047 3.7255523,7.0546289 3.5034948,7.6319441 2.6818813,7.9816633 1.8602682,8.3258325 0.96093505,6.3884958 0.0116386,6.3884958 c -0.94929616,0 -1.8486295,1.9373367 -2.6702428,1.5931675 C -3.4802173,7.6319441 -3.6245546,7.3543882 -4.2463158,6.7326641 -4.8680773,6.1109399 -6.3614144,8.6922061 -6.7111551,7.870641 -7.0553443,7.0490771 -6.8554926,-0.22287552 -6.8554926,-1.172115 c 0,-3.7858565 3.0754975,-6.8611709 6.8671312,-6.8611709 3.7916334,0 6.8671315,3.0753144 6.8671315,6.8611709 z"     style="fill:#ffffff;stroke:#000000;stroke-width:0.7"     id="path18423" />';
// This values are not used by stochsd, as primitives cannot be resized in stochsd
// They are only used for exporting the model to Insight Maker

type_size={};
type_size["stock"]=[80,60];
type_size["variable"]=[60,60];
type_size["converter"]=[80,60];
type_size["text"]=[120,60];

type_basename={};
type_basename["stock"]="Stock";
type_basename["variable"]="Variable";
type_basename["flow"]="Flow";
type_basename["link"]="Link";
type_basename["converter"]="Converter";
type_basename["text"]="Text";

last_connection=null;

var last_click_object_clicked=false;
var last_clicked_element = null; // Points to the object we last clicked
var connection_array = {};
var object_array = {};
var mouseisdown = false;
var mousedown_x=0;
var mousedown_y=0;

var lastMouseX = 0;
var lastMouseY = 0;	

var converter_xml = '<?xml version="1.0" encoding="UTF-8" standalone="no"?><!-- Created with Inkscape (http://www.inkscape.org/) --><svg   xmlns:dc="http://purl.org/dc/elements/1.1/"   xmlns:cc="http://creativecommons.org/ns#"   xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#"   xmlns:svg="http://www.w3.org/2000/svg"   xmlns="http://www.w3.org/2000/svg"   xmlns:sodipodi="http://sodipodi.sourceforge.net/DTD/sodipodi-0.dtd"   xmlns:inkscape="http://www.inkscape.org/namespaces/inkscape"   width="100mm"   height="100mm"   viewBox="0 0 354.33071 354.33071"   id="svg3335"   version="1.1"   inkscape:version="0.91 r13725"   sodipodi:docname="converter.svg">  <defs     id="defs3337" />  <sodipodi:namedview     id="base"     pagecolor="#ffffff"     bordercolor="#666666"     borderopacity="1.0"     inkscape:pageopacity="0.0"     inkscape:pageshadow="2"     inkscape:zoom="0.35"     inkscape:cx="-215"     inkscape:cy="520"     inkscape:document-units="px"     inkscape:current-layer="layer1"     showgrid="false"     inkscape:window-width="1280"     inkscape:window-height="706"     inkscape:window-x="-8"     inkscape:window-y="-8"     inkscape:window-maximized="1" />  <metadata     id="metadata3340">    <rdf:RDF>      <cc:Work         rdf:about="">        <dc:format>image/svg+xml</dc:format>        <dc:type           rdf:resource="http://purl.org/dc/dcmitype/StillImage" />        <dc:title></dc:title>      </cc:Work>    </rdf:RDF>  </metadata>  <g     inkscape:label="Layer 1"     inkscape:groupmode="layer"     id="layer1"     transform="translate(0,-698.0315)">    <path       style="fill:#800000;fill-rule:evenodd;stroke:#000000;stroke-width:0.65248114px;stroke-LineVisualap:butt;stroke-linejoin:miter;stroke-opacity:1"       d="m 16.912678,869.54033 88.301582,-90.64114 174.8011,-3.85707 63.07256,84.85554 -84.69745,96.42677 -182.009375,1.9285 z"       id="path3343"       inkscape:connector-curvature="0" />  </g></svg>';

function default_double_click(id) {
	var primitive_type = getType(findID(id));
	if(primitive_type=="Ghost") {
		// If we click on a ghost change id to point to source
		id=findID(id).getAttribute("Source");
	}
	equationEditor.open(id,".valueField");
}



var empty_click_down = false;

function calc_distance(xdiff,ydiff) {
	return Math.sqrt((xdiff*xdiff)+(ydiff*ydiff));
}

class BaseObject {
	constructor(id,type,pos) {
		this.id=id;
		this.type=type;
		this.selected=false;
		this.name_radius=30;
		this.superClass="baseobject";
		// Warning: this.primitve can be null, since all DIM objects does not have a IM object such as anchors and flow_auxiliarys
		// We should therefor check if this.primitive is null, in case we dont know which class we are dealing with
		this.primitive = findID(this.id);
		
		this.element_array=[];
		this.selector_array=[];
		this.group=null;
		this.mountPoints=[[0,0]];
		
		this.rotatePosList=[[0,this.name_radius+8],[this.name_radius,0],[0,-this.name_radius],[-this.name_radius,0]];

	}

	get_mount_pos(closeToPoint) {
		let pos = this.get_pos();
		
		// Check if we only have one mount point
		if(this.mountPoints==1) {
			return [pos[0]+this.mountPoints[0],pos[1]+this.mountPoints[1]];
		}
		
		// Else calculate the closest one
		let closedFoundPoint=this.mountPoints[0];
		let closedFoundDistance = pointDistance(positionSum(this.mountPoints[0],pos),closeToPoint);
		for(let mp of this.mountPoints) {
			let tmpDistance = pointDistance(positionSum(mp,pos),closeToPoint);
			if(tmpDistance < closedFoundDistance) {
				closedFoundDistance=tmpDistance;
				closedFoundPoint = mp;
			}
		}
		return [pos[0]+closedFoundPoint[0],pos[1]+closedFoundPoint[1]];
	}
	
	is_selected() {
		return this.selected;
	}
	
	clean() {
			// Clean all children
			let children = getChildren(this.id);
			for(let id in children) {
				children[id].clean();
				delete object_array[id];
			}
		
			// Get the connections this object has before we clean it
			var connection_array=find_connections(this);
			
			// Do the cleaning
			for(var i in this.selector_array) {
				this.selector_array[i].remove();
			}
			for(var key in this.element_array) {
				this.element_array[key].remove();
			}
			this.group.remove();
	}
	double_click() {
		// This function has to be overriden
	}
	afterNameChange() {
		// Do nothing. this method is supposed to be overriden by subclasses
	}
	afterMove(diff_x,diff_y) {
		// Override this		
	}
	attachEvent() {
		// This happens every time a connection is connected or disconnected
		// Or when the connections starting point is connected or disconnected
		// Override this
	}
	get name_pos() {
		return this._name_pos;
	}
	
	set name_pos(value) {
		//~ alert("name pos for "+this.id+" "+getStackTrace());
		//~ do_global_log("updating name pos to "+value);
		this._name_pos=Number(value);
		if(this.primitive) {
			this.primitive.setAttribute("RotateName",value.toString());
		}
	}
	
	name_double_click() {
		//~ alert("hahaha");

		
					
		if(this.is_ghost) {
			errorPopUp("You must rename a ghost by renaming the original.");
			return;
		}
		let id=get_parent_id(this.id)
		equationEditor.open(id,".nameField");
		event.stopPropagation();
	}
	
	set_name(new_name) {
			if(this.name_element==null) {
				do_global_log("Element has no name");
				return;
			}
			this.name_element.innerHTML=makePrimitiveName(new_name);
	}
	
	attributeChangeHandler(attributeName, value) {
		// Override this
	}
}

class OnePointer extends BaseObject{
	constructor(id,type,pos,extras=false) {
		super(id,type,pos);
		this.id=id;
		this.type=type;

		this.element_array=[];
		this.selector_array=[];
		this.ghost_array=[];
		this.group=null;
		this.superClass="OnePointer";
		var element_array = this.getImage();
		if(element_array==false) {
			alert("getImage() must be overriden to add graphics to this object");
		}
		this.draggable=true; // Default value, change it afterwords if you want
		this.name_centered=false;
		this.pos=pos;
		this.element_array=element_array;
		// Set selector element
		this.selector_array = [];
		
		this.is_ghost=false; // Default value
		
		if(extras!=false) {
			do_global_log("has extras");
			if("is_ghost" in extras) {
				this.is_ghost=extras["is_ghost"];
			}
		}
		do_global_log("is ghost "+this.is_ghost);
		
		for(var key in element_array) {
			if(element_array[key].getAttribute("class")=="selector") {
				this.selector_array.push(element_array[key]);
			}
		}
		
		if(!this.is_ghost) {
			for(var key in element_array) {
				if(element_array[key].getAttribute("class")=="ghost") {
					element_array[key].setAttribute("visibility","hidden");
				}
			}
		}
		
			
		// Set name element
		this.name_element = null;
		for(var key in element_array) {
			if(element_array[key].getAttribute("class")=="name_element") {
				this.name_element = element_array[key];
				$(this.name_element).dblclick((event) => {
					this.name_double_click();
				});
			}
		}
		this.group=svg_group(this.element_array);
		this.group.setAttribute("class","testgroup");
		this.group.setAttribute("node_id",id);
		object_array[id]=this;
		this.update();

		
		for(var key in this.element_array) {
			var element = this.element_array[key];
			$(element).on("mousedown",(event) => {
				primitive_mousedown(this.id,event);
			});
		}
		$(this.group).dblclick((event) => {
			if(!$(event.target).hasClass("name_element")) {
				this.double_click(this.id);
			}
		});
		
		
		

		
		this.unselect();
		
		// Handled for when attribute changes in corresponding SimpleNode
		this.changeAttributeHandler = (attribute,value) => {
			if(attribute=="name") {
				this.set_name(value);
			}
		}
	}
	
	set_pos(pos) {
		if(pos[0]==this.pos[0] && pos[1]==this.pos[1]) {
			// If the position has not changed we should not update it
			// This turned out to be a huge optimisation
			return;
		}
		// Recreating the array is intentional to avoid copying a reference
		//~ alert(" old pos "+this.pos[0]+","+this.pos[1]+" new pos "+pos[0]+","+pos[1]);
		this.pos = [pos[0],pos[1]];
		this.updatePosition();
	}
		
	get_pos() {
		// This must be done by splitting up the array and joining it again to avoid sending a reference
		// Earlier we had a bug that was caused by get_pos was sent as reference and we got unwanted updates of the values
		return [this.pos[0], this.pos[1]];
	}
	
	select() {
		this.selected=true;
		for(var i in this.selector_array) {
			this.selector_array[i].setAttribute("visibility","visible");
		}
	}
	unselect() {
		this.selected=false;
		for(var i in this.selector_array) {
			this.selector_array[i].setAttribute("visibility","hidden");
		}
	}
	afterUpdate() {
		
	}
	update() {
		this.group.setAttribute("transform","translate("+this.pos[0]+","+this.pos[1]+")");
		this.afterUpdate();
	}
	updatePosition() {
		this.update();
		this.afterUpdatePosition();
	}
	afterUpdatePosition() {
		
	}
	getImage() {
		return false;
	}
}

class primitivec extends OnePointer {
	constructor(id,type,pos,extras) {
		super(id,type,pos,extras);
	}
	double_click() {
		default_double_click(get_parent_id(this.id));
	}
}

const anchorTypeEnum = {
	invalid:1,
	start:2,
	end:3,
	bezier1:4,
	bezier2:5
}
class AnchorPoint extends OnePointer{
	constructor(id,type,pos,anchorType) {
		super(id,type,pos);
		this.anchorType=anchorType;
	}
	isAttached() {
		let parentId = get_parent_id(this.id);
		let parent = get_object(parentId);
		switch(this.anchorType) {
			case anchorTypeEnum.start:
				if(parent.start_attach) {
					return true;
				} else {
					return false;
				}
			break;
			case anchorTypeEnum.end:
				if(parent.end_attach) {
					return true;
				} else {
					return false;
				}
			break;
			default:
				// It's not a start or end anchor so it cannot be attached
				return false;
		}
	}
	setAnchorType(anchorType) {
		this.anchorType=anchorType;
	}
	getAnchorType() {
		return this.anchorType;
	}
	setVisible(newVisible) {
		if(newVisible) {
			for(let element of this.element_array) {
				// Show all elements except for selectors
				if(element.getAttribute("class")!="selector") {
					element.setAttribute("visibility","visible");
				}
			}
		}
		else {
			// Hide elements
			for(let element of this.element_array) {
				element.setAttribute("visibility","hidden");
			}
		}
	}
	update() {
		super.update();
	}
	afterUpdatePosition() {
		let parentId = get_parent_id(this.id);
		get_object(parentId).afterAnchorUpdate(this.anchorType);
	}
	updatePosition() {
		this.update();
		this.afterUpdatePosition();
	}
	unselect() {
		this.selected=false;
		super.unselect();
	}
	getImage() {
		return [
			svg_circle(0,0,4,"black","black","element"),
			svg_circle(0,0,4,"red","red","selector")
		];	
	}
	afterMove(diff_x,diff_y) {
		// This is an attempt to make beizer points move with the anchors points but id does not work well with undo
		// commeted out until fixed
		let parentId = get_parent_id(this.id);
		let parent = get_object(parentId);
		
		if(parent.type=="link") {
			switch(this.anchorType) {
				case anchorTypeEnum.start:
				{
					let oldPos=parent.b1_anchor.get_pos();
					parent.b1_anchor.set_pos([oldPos[0]+diff_x,oldPos[1]+diff_y]);
				}
				break;
				case anchorTypeEnum.end:
				{
					let oldPos=parent.b2_anchor.get_pos();
					parent.b2_anchor.set_pos([oldPos[0]+diff_x,oldPos[1]+diff_y]);
				}
				break;			
			}
		}
	}
}

class TextVisual extends primitivec{
	constructor(id,type,pos,extras) {
		super(id,type,pos,extras);
		this.name_centered=true;
		update_name_pos(id);
		this.setSelectionSizeToText();
	}
	setSelectionSizeToText() {
		var boundingRect=this.name_element.getBoundingClientRect();
		var rect=this.selector_array[0];
		var margin=10;
		rect.setAttribute("width",boundingRect.width+margin*2);
		rect.setAttribute("height",boundingRect.height+margin*2);
		rect.setAttribute("x",-boundingRect.width/2-margin);
		rect.setAttribute("y",-boundingRect.height/2-margin);
	}
	afterNameChange() {
		this.setSelectionSizeToText();
	}
	getImage() {
		return [
			svg_text(0,0,"text","name_element",{"style": "font-size: 16px"}),
			svg_rect(-20,-15,40,30,"red","none","selector")
		];	
	}
	set_name(new_name) {
		this.name_element.innerHTML=new_name;
	}
	
	name_double_click() {
		
	}
	
	double_click() {
		let dialog = new TextBoxDialog(this.id);
		dialog.show();
	}
}

function pointDistance(point1,point2) {
	let distance = calc_distance(point1[0]-point2[0], point1[1]-point2[1]);
	return distance;
}

class StockVisual extends primitivec{
	constructor(id,type,pos,extras) {
		super(id,type,pos,extras);
		this.mountPoints=[[0,-15],[0,15],[-20,0],[20,0]];
	}
	getImage() {
		return [
		svg_rect(-20,-15,40,30,"black","white","element"),
		svg_group([svg_from_string(ghost_image)],svg_transform_string(0,0,0,1),"ghost"),
		svg_rect(-20,-15,40,30,"red","none","selector"),
		svg_text(0,39,"stock","name_element")
		];
	}
}

class NumberboxVisual extends primitivec{
	constructor(id,type,pos,extras) {
		super(id,type,pos,extras);
		this.name_centered=true;
		update_name_pos(id);
		this.setSelectionSizeToText();
		
		this.runHandler = () => {
			this.render();
		}
		RunResults.subscribeRun(this.runHandler);
	}
	setSelectionSizeToText() {
		var boundingRect=this.name_element.getBoundingClientRect();
		var elementRect=this.element_array[0];
		var selectorRect=this.selector_array[0];
		var marginX=10;
		var marginY=2;
		for(let rect of [elementRect,selectorRect]) {
			rect.setAttribute("width",boundingRect.width+marginX*2);
			rect.setAttribute("height",boundingRect.height+marginY*2);
			rect.setAttribute("x",-boundingRect.width/2-marginX);
			rect.setAttribute("y",-boundingRect.height/2-marginY);
		}
	}
	render() {
		if(this.targetPrimitive == null) {
			this.name_element.innerHTML = "-";
			this.setSelectionSizeToText();
			return;		
		}
		let valueString = "";
		let primitiveName = "";
		let lastValue = RunResults.getLastValue(this.targetPrimitive);
		let imPrimtiive = findID(this.targetPrimitive);
		if(imPrimtiive) {
			primitiveName += makePrimitiveName(getName(imPrimtiive));
		} else {
			primitiveName += "Unkown primitive";
		}
		if(lastValue) {
			valueString += stocsd_format(lastValue,3);
		} else {
			valueString += "?";
		}
		let output = `${valueString}`;
		this.name_element.innerHTML = output;
		this.setSelectionSizeToText();
	}
	get targetPrimitive() {
		return Number(this.primitive.getAttribute("Target"));
	}
	set targetPrimitive(newTargetPrimitive) {
		this.primitive.setAttribute("Target",newTargetPrimitive);
		this.render();
	}
	afterNameChange() {
		this.setSelectionSizeToText();
	}
	getImage() {
		return [
			svg_rect(-20,-15,40,30,"black","white","element"),
			svg_text(0,0,"","name_element",{"alignment-baseline": "middle", "style": "font-size: 16px"}),
			svg_rect(-20,-15,40,30,"red","none","selector")
		];	
	}
	name_double_click() {
		this.double_click();
	}
	double_click() {
		let dialog = new NumberBoxDialog(this.targetPrimitive);
		dialog.show();
	}
}

class VariableVisual extends primitivec{
	constructor(id,type,pos,extras) {
		super(id,type,pos,extras);
		this.component45 = Math.pow((Math.pow(15,2)/2),0.5);; // The x and y component of a line going out 45 degrees with the length 15
		this.mountPoints=[[0,-15],[0,15],[-15,0],[15,0],[-this.component45,-this.component45],[this.component45,-this.component45],[this.component45,this.component45],[-this.component45,this.component45]];
	}
	getImage() {
		return [
			svg_circle(0,0,15,"black","white","element"),
			svg_text(0,0,"variable","name_element"),
			svg_group([svg_from_string(ghost_image)],svg_transform_string(0,0,0,1),"ghost"),
			svg_circle(0,0,15,"red","none","selector")
		];
	}
}

class ConverterVisual extends primitivec{
	constructor(id,type,pos,extras) {
		super(id,type,pos,extras);
		this.mountPoints=[[-20,0],[20,0],[0,-15],[0,15]];
	}
	getImage() {
		return [
			svg_path("M-20 0  L-10 -15  L10 -15  L20 0  L10 15  L-10 15  Z","black","white","element"),
			svg_path("M-20 0  L-10 -15  L10 -15  L20 0  L10 15  L-10 15  Z","red","none","selector"),
			svg_group([svg_from_string(ghost_image)],svg_transform_string(0,0,0,1),"ghost"),
			svg_text(0,0,"variable","name_element"),
		];
	}
	attachEvent() {
		do_global_log("this primitive");
		do_global_log(this.primitive);
		let linkedPrimitives = getLinkedPrimitives(this.primitive);
		do_global_log(linkedPrimitives);
		if(linkedPrimitives.length > 0) {
			do_global_log("choose yes");
			this.primitive.value.setAttribute("Source", linkedPrimitives[0].id);
		} else {
			do_global_log("choose no");
			this.primitive.value.setAttribute("Source", "Time");
		}
	}
	name_double_click() {
		converterDialog.open(this.id,".nameField");
	}
	
	double_click() {
		converterDialog.open(this.id,".valueField");
	}
}

class TwoPointer extends BaseObject{
	constructor(id,type,pos) {
		super(id,type,pos);
		this.id=id;
		this.type=type;
		this.selected=false;
		this.start_anchor=null;
		this.end_anchor=null;
		this.startx=pos[0];
		this.starty=pos[1];
		this.endx=pos[0];
		this.endy=pos[1];
		this.length=0;
		this.superClass="TwoPointer";
		connection_array[this.id]=this;
		
		this.makeGraphics();
		$(this.group).on("mousedown",function(event){
			var node_id=this.getAttribute("node_id");
			primitive_mousedown(node_id,event);
		});
		last_connection=this;
		this.update();
	}
	
	create_dummy_start_anchor() {
		this.start_anchor = new AnchorPoint(this.id+".start_anchor","dummy_anchor",[this.startx,this.starty],anchorTypeEnum.start);
	}
	create_dummy_end_anchor() {
		this.end_anchor = new AnchorPoint(this.id+".end_anchor","dummy_anchor",[this.endx,this.endy],anchorTypeEnum.end);
	}
	
	get_pos() {
		return [(this.startx+this.endx)/2,(this.starty+this.endy)/2];
	}
	
	getMinX() {
		if(this.startx<this.endx) {
			return this.startx;
		} else {
			return this.endx;
		}
	}

	getMinY() {
		if(this.starty<this.endy) {
			return this.starty;
		} else {
			return this.endy;
		}
	}
	
	getWidth() {
		return Math.abs(this.startx-this.endx);
	}

	getHeight() {
		return Math.abs(this.starty-this.endy);
	}

	unselect() {
		this.selected=false;
		for(var anchor of get_anchors(this.id)) {
			anchor.setVisible(false);
		}
	}
	select() {
		this.selected=true;
		for(var anchor of get_anchors(this.id)) {
			anchor.select();
			anchor.setVisible(true);
		}
	}
	
	
	
	is_selected() {
		return this.selected;
	}
	
	update() {
		// Get start position from anchor
		if(this.start_anchor!=null) {
				if(this.start_anchor.get_pos) {
					var start_pos=this.start_anchor.get_pos();
					this.startx=start_pos[0];
					this.starty=start_pos[1];
				} else {
					do_global_log("No start position");
				}
			}
			
			// Get end position from anchor
			if(this.end_anchor!=null) {
				if(this.end_anchor.get_pos) {
					var end_pos=this.end_anchor.get_pos();
					this.endx=end_pos[0];
					this.endy=end_pos[1];
				} else {
					do_global_log("No end position");
				}
			}
			let xdiff = (this.endx-this.startx);
			let ydiff = (this.endy-this.starty);
			
			// Force minimum size on TwoPointers
			const minWidth = 10;
			const minHeight = 10;
			if(this.getWidth() < minWidth && this.getHeight() < minHeight) {
				this.endx=this.startx+minWidth;
				this.endy=this.starty+minHeight;
			}
			
			this.length = Math.sqrt(xdiff*xdiff+ydiff*ydiff);
			this.updateGraphics();
	}
	makeGraphics() {
		
	}
	updateGraphics() {
		
	}
	afterAnchorUpdate(anchorType) {
		let Primitive = findID(this.id);
		switch(anchorType) {
			case anchorTypeEnum.start:
				setSourcePosition(Primitive, this.start_anchor.get_pos());
			break;
			case anchorTypeEnum.end:
				setTargetPosition(Primitive, this.end_anchor.get_pos());
			break;
		}
	}
	finishCreate() {
		
	}
}

class BaseConnection extends TwoPointer{
	constructor(id,type,pos) {
		super(id,type,pos);
		this._start_attach = null;
		this._end_attach = null;
		this.positionUpdateHandler = () => {
			var primitive = findID(this.id);
			var sourcePoint = getSourcePosition(primitive);
			var targetPoint = getTargetPosition(primitive);
			this.start_anchor.set_pos(sourcePoint);
			this.end_anchor.set_pos(targetPoint);
			alert("Position got updated");
		}
		last_connection=this;
	}
	set start_attach(new_start_attach) {
		// Trigger the attach event on the old attachment primitives
		this.triggerAttachEvents();
		
		// Update the attachment primitive
		this._start_attach = new_start_attach;
		
		let sourcePrimitive = null;
		if(this._start_attach!=null) {
			sourcePrimitive = findID(this._start_attach.id);
		}
		setSource(this.primitive, sourcePrimitive);

		// Trigger the attach event on the new attachment primitives
		this.triggerAttachEvents();
	}
	get start_attach() {
		return this._start_attach;
	}
	set end_attach(new_end_attach) {
		do_global_log("end_attach");
		// Trigger the attach event on the old attachment primitives
		this.triggerAttachEvents();
		
		// Update the attachment primitive
		this._end_attach = new_end_attach;
		let targetPrimitive = null;
		if(this._end_attach!=null) {
			targetPrimitive = findID(this._end_attach.id);
		}
		setTarget(this.primitive, targetPrimitive);

		// Trigger the attach event on the new attachment primitives
		this.triggerAttachEvents();
	}
	get end_attach() {
		return this._end_attach;
	}
	triggerAttachEvents() {
		// We must always trigger both start and end, since a change in the start might affect the logics of the primitive attach at the end of a link or flow
		if(this._start_attach!=null) {
			this._start_attach.attachEvent();
		}
		if(this._end_attach!=null) {
			this._end_attach.attachEvent();
		}
	}
	clean() {
		this.triggerAttachEvents();
		super.clean();
	}
	update() {
		// This function is simular to TwoPointer update but it takes attachments into account
		
		// Get start position from attach
		// start_anchor is null if we are currently creating the connection
		// start_attach is null if we are not attached to anything
		
		let connectionCenter = this.get_pos();
		
		if(this.start_attach!=null && this.start_anchor!=null) {
			if(this.start_attach.get_pos) {
				let oldPos = this.start_anchor.get_pos();
				let newPos = this.start_attach.get_mount_pos(connectionCenter);
				// If start point have moved reset b1
				if(oldPos[0]!=newPos[0] || oldPos[1] != newPos[1]) {
					this.start_anchor.set_pos(newPos);
				}
			}
		}
		if(this.end_attach!=null && this.end_anchor!=null) {
			if(this.end_attach.get_pos) {
				let oldPos = this.end_anchor.get_pos();
				let newPos = this.end_attach.get_mount_pos(connectionCenter);
				// If end point have moved reset b2
				if(oldPos[0]!=newPos[0] || oldPos[1] != newPos[1]) {
					this.end_anchor.set_pos(newPos);
				}
			}
		}
		super.update();
	}
	updateGraphics() {			

	}
	linearInterpolation(progress) {
		// Find a point at the progress place along a line between start and end
		// progress is between 0 and 1
		if(this.start_attach!=null) {
			[this.startx, this.starty] = this.start_anchor.get_pos();
		}
		if(this.end_attach!=null) {
			[this.endx, this.endy] = this.end_anchor.get_pos();
		}
		let start=[this.startx,this.starty];
		let end=[this.endx,this.endy];
		let result=[start[0]*(1-progress)+end[0]*progress,start[1]*(1-progress)+end[1]*progress];
		return result;
	}
}

class FlowVisual extends BaseConnection {
	constructor(id,type,pos) {
		super(id,type,pos);
		this.mountPoints=[[-15,15],[15,15],[0,30],[0,-10]];
		this.rotatePosList=[[0,48],[25,18],[0,-30],[-25,18]];
	}
	
	updateLength() {
		// The rotation of the arrowhead is upwards until rotated
		const halfWidth=1.5;
		const headHalfWidth = 7;
		var newPath = `M0,0 ${headHalfWidth},10 ${halfWidth},10 ${halfWidth},${this.length} -${halfWidth},${this.length} -${halfWidth},10 -${headHalfWidth},10 Z`;
		this.arrowPath.setAttribute("d",newPath);
	}
	
	makeGraphics() {
		this.arrowPath=svg_from_string(`<path d="M0,0 0,0" stroke="black" fill="white"/>`);
		this.updateLength();
		this.arrowhead=svg_group([this.arrowPath]);
		svg_translate(this.arrowhead,this.endx,this.endy);

		this.name_element = svg_text(0,0,"variable","name_element");
		this.flowcore = svg_group([ 
			svg_circle(0,15,15,"black","white","element"),
			svg_path("M0,0 -10,-10 10,-10 Z","black","white","element"),
			this.name_element
		],svg_transform_string(100,100,0,1));
		
		$(this.name_element).dblclick((event) => {	
			this.name_double_click();
		});
		
		this.group=svg_group([this.arrowhead,this.flowcore]);
		this.group.setAttribute("node_id",this.id);

		$(this.group).dblclick(() => {
			this.double_click(this.id);
		});
	}
	
	updateGraphics() {
		let xdiff=this.endx-this.startx;
		let ydiff=this.endy-this.starty;
		let angle=Math.atan2(xdiff,-ydiff)*(180/Math.PI);
		svg_transform(this.arrowhead,this.endx,this.endy,angle,1);
		
		let auxiliaryPos = [(this.startx+this.endx)/2, (this.starty+this.endy)/2];
		svg_transform(get_object(this.id).flowcore,auxiliaryPos[0],auxiliaryPos[1],0,1);
		this.updateLength();
	}
	
	double_click() {
		default_double_click(this.id);
	}
}

function getStackTrace() {
	try {
		var a = {};
		a.debug();
	} catch(ex) {
		return ex.stack;
	}
}

class RectangleVisual extends TwoPointer {
	makeGraphics() {
		var dash="";
		this.element=svg_rect(this.startx,this.starty,this.endx,this.endy,"black","none","element",dash); //svg_line(this.startx,this.starty,this.endx,this.endy,"black","white","element",dash);
		this.coordRect=new CoordRect();
		this.coordRect.element=this.element;
		this.group=svg_group([this.element]);
		this.group.setAttribute("node_id",this.id);
		var element_array=[this.element];
		for(var key in element_array) {
			element_array[key].setAttribute("node_id",this.id);
		}
	}
	updateGraphics() {
		// Update rect to fit start and end position
		this.coordRect.x1=this.startx;
		this.coordRect.y1=this.starty;
		this.coordRect.x2=this.endx;
		this.coordRect.y2=this.endy;
		this.coordRect.update();
	}
}

class htmlTwoPointer extends TwoPointer {
	updateHTML(html) {
		this.htmlElement.contentDiv.innerHTML = html;
	}
	clean() {
		super.clean();
		this.htmlElement.remove();
	}
}

class TableVisual extends htmlTwoPointer {
	constructor(id,type,pos) {
		super(id,type,pos);
		this.runHandler = () => {
			this.render();
		}
		RunResults.subscribeRun(this.runHandler);
	}
	render() {
		html = "";
		html += "<table><thead><tr>";
		
		let IdsToDisplay = this.dialog.getIdsToDisplay();
		this.primitive.value.setAttribute("Primitives",IdsToDisplay.join(","));
		do_global_log(IdsToDisplay);
		let namesToDisplay = IdsToDisplay.map(findID).map(getName);
		do_global_log("names to display");
		do_global_log(JSON.stringify(namesToDisplay));
		let results = RunResults.getFilteredSelectiveIdResults(IdsToDisplay,this.dialog.getStart(),this.dialog.getEnd(),this.dialog.getStep());
		
		// Make header
		html+="<td>"+formatFunction("Time")+"</td>";
		for(let i in namesToDisplay) {
			html+="<td>"+makePrimitiveName(namesToDisplay[i])+"</td>";
		}
		// Make content
		html+="</thead><tbody>";
		for(let row_index in results) {
			html+="<tr>";
			for(let column_index in ["Time"].concat(namesToDisplay)) {
				// We must get the data in column_index+1 since column 1 is reserved for time
				html+="<td>"+stocsd_format(results[row_index][column_index],6)+"</td>";
			}
			html+="</tr>";
		}
		html+="</tbody></table>";
		this.updateHTML(html);
	}
	
	makeGraphics() {
		this.dialog = new TableDialog();
		this.dialog.subscribePool.subscribe(()=>{
			this.render();
		});
		this.element=svg_rect(this.startx,this.starty,this.endx,this.endy,"black","none","element",""); //svg_line(this.startx,this.starty,this.endx,this.endy,"black","white","element",dash);
		this.htmlElement = svg_foreignobject(this.startx,this.starty,200,200,"table not renderd yet");
		$(this.htmlElement.innerDiv).mousedown((event) => {
			// This is an alternative to having the htmlElement in the group
				primitive_mousedown(this.id,event)
				mousedown_handler(event);
				event.stopPropagation();
		});
		
		$(this.htmlElement.scrollDiv).dblclick(()=>{
			this.dialog.show();
		});
		
		this.coordRect=new CoordRect();
		this.coordRect.element=this.element;
		
		this.group=svg_group([this.element]);
		this.group.setAttribute("node_id",this.id);	
		
		var element_array=[this.element];
		var element_array=[this.htmlElement.scrollDiv
,this.element];
		for(var key in element_array) {
			element_array[key].setAttribute("node_id",this.id);
		}
	}
	updateGraphics() {
		// Update rect to fit start and end position
		this.coordRect.x1=this.startx;
		this.coordRect.y1=this.starty;
		this.coordRect.x2=this.endx;
		this.coordRect.y2=this.endy;
		this.coordRect.update();
		
		this.htmlElement.setAttribute("x",this.getMinX());
		this.htmlElement.setAttribute("y",this.getMinY());
		
		this.htmlElement.setAttribute("width",this.getWidth());
		this.htmlElement.setAttribute("height",this.getHeight());
		
		$(this.htmlElement.cutDiv).css("width",this.getWidth());
		$(this.htmlElement.cutDiv).css("height",this.getHeight());
		$(this.htmlElement.scrollDiv).css("width",this.getWidth());
		$(this.htmlElement.scrollDiv).css("height",this.getHeight());
	}
}

class htmlOverlayTwoPointer extends TwoPointer {
	constructor(id,type,pos) {		
		super(id,type,pos);
	}
	
	updateHTML(html) {
		this.targetElement.innerHTML = html;
	}
	
	makeGraphics() {
		this.targetBorder = 4;
		this.targetElement = document.createElement("div");
		this.targetElement.style.position="absolute";
		this.targetElement.style.backgroundColor="white";
		this.targetElement.style.zIndex=100;
		this.targetElement.innerHTML = "hej";
		document.getElementById("svgplanebackground").appendChild(this.targetElement);
		
		$(this.targetElement).mousedown((event) => {
			// This is an alternative to having the htmlElement in the group
				primitive_mousedown(this.id,event)
				mousedown_handler(event);
				event.stopPropagation();
		});
		
		$(this.targetElement).dblclick(()=>{
			this.double_click(this.id);
		});
		
		this.element=svg_rect(this.startx,this.starty,this.endx,this.endy,"black","white","element","");

		this.coordRect=new CoordRect();
		this.coordRect.element=this.element;
		
		this.group=svg_group([this.element]);
		this.group.setAttribute("node_id",this.id);	
		
		var element_array=[this.element];
		for(var key in element_array) {
			element_array[key].setAttribute("node_id",this.id);
		}
	}
	
	updateGraphics() {
		// Update rect to fit start and end position
		this.coordRect.x1=this.startx;
		this.coordRect.y1=this.starty;
		this.coordRect.x2=this.endx;
		this.coordRect.y2=this.endy;
		this.coordRect.update();
		
		let svgoffset=$("#svgplane").offset();
		
		
		this.targetElement.style.left=(this.getMinX()+this.targetBorder+1)+"px";
		this.targetElement.style.top=(this.getMinY()+this.targetBorder+1)+"px";
		
		this.targetElement.style.width=(this.getWidth()-(2*this.targetBorder))+"px";
		this.targetElement.style.height=(this.getHeight()-(2*this.targetBorder))+"px";
	}
	
	clean() {
		super.clean();
		this.targetElement.remove();
	}
}

class DiagramVisual extends htmlOverlayTwoPointer {
	constructor(id,type,pos) {		
		super(id,type,pos);
		this.runHandler = () => {
			this.render();
		}
		RunResults.subscribeRun(this.runHandler);
		this.plot = null;
		this.serieArray = null;
		this.namesToDisplay = [];
		
		this.dialog = new DiagramDialog();
		this.dialog.subscribePool.subscribe(()=>{
			this.render();
		});
	}
	render() {
		
		let IdsToDisplay = this.dialog.getIdsToDisplay();
		this.primitive.value.setAttribute("Primitives",IdsToDisplay.join(","));
		this.namesToDisplay = IdsToDisplay.map(findID).map(getName);
		//~ alert("names to display "+this.namesToDisplay+" IdsToDisplay "+IdsToDisplay);
		var results = RunResults.getSelectiveIdResults(IdsToDisplay);
		if(results.length==0) {
			// We can't render anything with no data
			
			return;
		}
		
		this.minValue = 0;
		this.maxValue = 0;
		
		let makeSerie = (resultColumn) => {
			let serie = [];
			for(let row of results) {
				let time = Number(row[0])
				let value = Number(row[resultColumn])
				if(value < this.minValue) {
					this.minValue = value;
				}
				if(value > this.maxValue) {
					this.maxValue = value;
				}
				serie.push([time,value]);
			}
			return serie;
		}
		

		
		// Declare series and settings for series
		this.serieSettingsArray = [];
		this.serieArray = [];
		
		// Make time series
		for(let i=1;i<=IdsToDisplay.length;i++) {
			this.serieArray.push(makeSerie(i));
		}
		do_global_log("serieArray "+JSON.stringify(this.serieArray));
		
		
		this.dialog.minValue = this.minValue;
		this.dialog.maxValue = this.maxValue;
		
		this.dialog.simulationTime = RunResults.simulationTime;
		
		// Make serie settings
		for(let i in this.namesToDisplay) {
			this.serieSettingsArray.push({label: makePrimitiveName(this.namesToDisplay[i]), showMarker:false});
		}
		
		do_global_log(JSON.stringify(this.serieSettingsArray));
		
		// We need to ad a delay and respond to events first to make this work in firefox
		setTimeout(() => {
			this.updateChart();
		 },200);
		
	}
	updateChart() {
		if(this.serieArray==null) {
			// The series are not initialized yet
			this.chartDiv.innerHTML = "No data. Run to create data!";
			return;
		}
		if(this.serieArray.length == 0) {
			// We have no series to display
			this.chartDiv.innerHTML = "At least one primitive must be selected!";
			return;
		}
		$(this.chartDiv).empty();
		  this.plot = $.jqplot(this.chartId, this.serieArray, {  
			  series: this.serieSettingsArray,
			  axes: {
				xaxis: {
				  label: formatFunction('Time'),
					labelRenderer: $.jqplot.CanvasAxisLabelRenderer,
					min: this.dialog.getXMin(),
					max: this.dialog.getXMax()
				},
				yaxis: {
					min: this.dialog.getYMin(),
					max: this.dialog.getYMax()
				}
			},
			   legend: {
				show: true,
				placement: 'outsideGrid'
			   }
			  
		  });
	}
	makeGraphics() {
		super.makeGraphics();
		
		this.chartId = this.id+"_chart";
		let html = `<div id="${this.chartId}" style="width:0px; height:0px; z-index: 100;"></div>`;
		this.updateHTML(html);
		this.chartDiv = document.getElementById(this.chartId);
	}
	updateGraphics() {
		super.updateGraphics();
		
		let width=$(this.targetElement).width()-20;
		let height=$(this.targetElement).height()-20;
		this.chartDiv.style.width=width+"px";
		this.chartDiv.style.height=height+"px";
		
		this.updateChart();
	}
	double_click() {
		this.dialog.show();
	}
}

class TextAreaVisual extends htmlOverlayTwoPointer {
	constructor(id,type,pos) {		
		super(id,type,pos);
		
		this.primitive = findID(id);
		
		this.dialog = new TextAreaDialog(findID(id));
		//~ this.dialog.subscribePool.subscribe(()=>{
			//~ this.render();
		//~ });
		this.updateTextFromName();
	}
	makeGraphics() {
		super.makeGraphics();
		this.updateTextFromName();
	}
	double_click() {
		this.dialog.show();
	}
	updateTextFromName() {
		let newText = getName(this.primitive);
		let formatedText = newText.replace(/\n/g, "<br/>");
		this.updateHTML(formatedText);
	}
	attributeChangeHandler(attributeName, value) {
		switch(attributeName) {
			case "name":
				this.updateTextFromName();
			break;
		}
	}
}

class XyPlotVisual extends DiagramVisual {
	constructor(id,type,pos) {		
		super(id,type,pos);
		this.runHandler = () => {
			this.render();
		}
		RunResults.subscribeRun(this.runHandler);
		this.plot = null;
		this.serieArray = null;
		this.namesToDisplay = [];
		
		this.minXValue = 0;
		this.maxXValue = 0;
		
		this.minYValue = 0;
		this.maxYValue = 0;
		
		this.dialog = new XyPlotDialog();
		this.dialog.subscribePool.subscribe(()=>{
			this.render();
		});
	}
	render() {		
		let IdsToDisplay = this.dialog.getIdsToDisplay();
		this.primitive.value.setAttribute("Primitives",IdsToDisplay.join(","));
		this.namesToDisplay = IdsToDisplay.map(findID).map(getName);
		//~ alert("names to display "+this.namesToDisplay+" IdsToDisplay "+IdsToDisplay);
		var results = RunResults.getSelectiveIdResults(IdsToDisplay);
		if(results.length==0) {
			// We can't render anything with no data
			
			return;
		}
		
		this.minXValue = 0;
		this.maxXValue = 0;
		
		this.minYValue = 0;
		this.maxYValue = 0;
		
		this.serieXName="X series";
		this.serieYName="Y series";
		
		if(IdsToDisplay.length != 2) {
			// We have no series to display
			this.chartDiv.innerHTML = "Exactly two primitives must be selected!";
			return;
		}
		
		let makeXYSerie = () => {
			let serie = [];
			this.serieXName = makePrimitiveName(this.namesToDisplay[0]);
			this.serieYName = makePrimitiveName(this.namesToDisplay[1]);
			
			for(let row of results) {
				let x = Number(row[1])
				let y = Number(row[2])
				if(x < this.minXValue) {
					this.minXValue = x;
				}
				if(x > this.maxXValue) {
					this.maxXValue = x;
				}
				if(y < this.minValue) {
					this.minYValue = y;
				}
				if(y > this.maxYValue) {
					this.maxYValue = y;
				}
				serie.push([x,y]);
			}
			return serie;
		}
		

		
		// Declare series and settings for series
		this.serieSettingsArray = [];
		this.serieArray = [];
		
		// Make time series
		this.serieArray.push(makeXYSerie());
		do_global_log("serieArray "+JSON.stringify(this.serieArray));
		
		
		this.dialog.minXValue = this.minXValue;
		this.dialog.maxXValue = this.maxXValue;
		
		this.dialog.minYValue = this.minYValue;
		this.dialog.maxYValue = this.maxYValue;
		
		// Make serie settings
		for(let i in this.namesToDisplay) {
			this.serieSettingsArray.push({label: this.namesToDisplay[i], showMarker:false});
		}
		
		do_global_log(JSON.stringify(this.serieSettingsArray));
		
		// We need to ad a delay and respond to events first to make this work in firefox
		setTimeout(() => {
			this.updateChart();
		 },200);
	}
	
	updateChart() {
		if(this.serieArray==null) {
			// The series are not initialized yet
			this.chartDiv.innerHTML = "No data. Run to create data!";
			return;
		}
		$(this.chartDiv).empty();
		
		this.serieSettingsArray = this.serieSettingsArray.map(function(settingsIn) {
			settingsIn.showMarker = true;
			return settingsIn;
		});
		
		  this.plot = $.jqplot(this.chartId, this.serieArray, {  
			  series: this.serieSettingsArray,
			  sortData: false,
			  axesDefaults: {
		            labelRenderer: $.jqplot.CanvasAxisLabelRenderer
				},
			  axes: {
				xaxis: {
					label: this.serieXName,
					min: this.dialog.getXMin(),
					max: this.dialog.getXMax()
				},
				yaxis: {
					label: this.serieYName,
					min: this.dialog.getYMin(),
					max: this.dialog.getYMax()
				}
			}
		  });
	}
}

class LineVisual extends TwoPointer {
	makeGraphics() {
		var dash="";
		this.element=svg_line(this.startx,this.starty,this.endx,this.endy,"black","white","element",dash);
		this.coordRect=new CoordRect();
		this.coordRect.element=this.element;
		this.group=svg_group([this.element]);
		this.group.setAttribute("node_id",this.id);
		var element_array=[this.element];
		for(var key in element_array) {
			element_array[key].setAttribute("node_id",this.id);
		}
	}
	updateGraphics() {
		this.element.setAttribute("x1",this.startx);
		this.element.setAttribute("y1",this.starty);
		this.element.setAttribute("x2",this.endx);
		this.element.setAttribute("y2",this.endy);
	}
}
class LinkVisual extends BaseConnection{
	constructor(id,type,pos) {
		super(id,type,pos);
	}
	unselect() {
		this.selected=false;
		if(hasSelectedChildren(this.id)) {
			for(var i in this.highlight_on_select) {
				this.highlight_on_select[i].setAttribute("stroke","black");
			}	
		} else {
			let children = getChildren(this.id);
			for(let id in children) {
				let object = get_object(id);
				if('setVisible' in object) {
					object.setVisible(false);
				}
			}
		}
		
		// Hide beizer lines
		for(let element of this.showOnlyOnSelect) {
			element.setAttribute("visibility","hidden");
		}
	}
	select(selectChildren=true) {		
		let children = getChildren(this.id);
		for(let id in children) {
			let object = get_object(id);
			if('setVisible' in object) {
				object.setVisible(true);
			}
		}
		for(var i in this.highlight_on_select) {
			this.highlight_on_select[i].setAttribute("stroke","red");
		}
		
		if(selectChildren) {
			// This for loop is partly redundant and should be integrated in later code
			for(var anchor of get_anchors(this.id)) {
				anchor.select();
				anchor.setVisible(true);
			}
		}
		
		// Show beizer lines
		for(let element of this.showOnlyOnSelect) {
			element.setAttribute("visibility","visible");
		}
	}
	updateClickArea() {
		this.click_area.x1=this.curve.x1;
		this.click_area.y1=this.curve.y1;
		this.click_area.x2=this.curve.x2;
		this.click_area.y2=this.curve.y2;
		this.click_area.x3=this.curve.x3;
		this.click_area.y3=this.curve.y3;
		this.click_area.x4=this.curve.x4;
		this.click_area.y4=this.curve.y4;
		this.click_area.update();
	}
	makeGraphics() {
		const headHalfWidth=2;
		this.arrowPath=svg_from_string(`<path d="M0,0 -${headHalfWidth},7 ${headHalfWidth},7 Z" stroke="black" fill="black"/>`);
		this.arrowhead=svg_group([this.arrowPath]);
		svg_translate(this.arrowhead,this.endx,this.endy);
		this.click_area = svg_curve(this.startx,this.starty,this.startx,this.starty,this.startx,this.starty,this.startx,this.starty,{"pointer-events":"all","stroke":"none","stroke-width":"10"}); 
		this.curve = svg_curve(this.startx,this.starty,this.startx,this.starty,this.startx,this.starty,this.startx,this.starty,{"stroke":"black","stroke-width":"1"});

		this.click_area.draggable = false;
		this.curve.draggable = false;
		
		this.group=svg_group([this.click_area,this.curve,this.arrowhead]);
		this.group.setAttribute("node_id",this.id);
		
		this.b1_anchor = new AnchorPoint(this.id+".b1_anchor","dummy_anchor",[this.startx,this.starty],anchorTypeEnum.bezier1);
		
		this.b2_anchor = new AnchorPoint(this.id+".b2_anchor","dummy_anchor",[this.startx,this.starty],anchorTypeEnum.bezier2);


		this.b1_line = svg_line(this.startx,this.starty,this.startx,this.starty,"black","black","","1,5");
		this.b2_line = svg_line(this.startx,this.starty,this.startx,this.starty,"black","black","","1,5");
		
		this.showOnlyOnSelect = [this.b1_line,this.b2_line];
		
		this.element_array=this.element_array.concat([this.b1_line,this.b2_line]);
	}
	resetBezierPoints() {
		this.resetBezier1();
		this.resetBezier2();
	}
	resetBezier1() {
		this.b1_anchor.set_pos(this.linearInterpolation((1/3)));
	}
	resetBezier2() {
		this.b2_anchor.set_pos(this.linearInterpolation((2/3)));
	}
	afterAnchorUpdate(anchorType) {
		super.afterAnchorUpdate(anchorType);
		
		let startpos = this.start_anchor.get_pos();
		let endpos = this.end_anchor.get_pos();
		let b1pos = this.b1_anchor.get_pos();
		let b2pos = this.b2_anchor.get_pos();
		
		switch(anchorType) {
		case anchorTypeEnum.start:
			this.curve.x1=startpos[0];
			this.curve.y1=startpos[1];
			this.curve.update();
			
			this.b1_line.setAttribute("x1",startpos[0]);
			this.b1_line.setAttribute("y1",startpos[1]);
		break;
		case anchorTypeEnum.end:
			this.curve.x4=endpos[0];
			this.curve.y4=endpos[1];
			this.curve.update();
			
			
			this.b2_line.setAttribute("x1",endpos[0]);
			this.b2_line.setAttribute("y1",endpos[1]);
		break;
		case anchorTypeEnum.bezier1:
		{
			this.curve.x2 = b1pos[0];
			this.curve.y2 = b1pos[1];
			this.curve.update();
			
			this.b1_line.setAttribute("x2",b1pos[0]);
			this.b1_line.setAttribute("y2",b1pos[1]);
			
			this.primitive.value.setAttribute("b1x",b1pos[0]);
			this.primitive.value.setAttribute("b1y",b1pos[1]);
		}
		break;
		case anchorTypeEnum.bezier2:
		{
			let b2pos = this.b2_anchor.get_pos();
			this.curve.x3 = b2pos[0];
			this.curve.y3 = b2pos[1];
			this.curve.update();
			
			this.b2_line.setAttribute("x2",b2pos[0]);
			this.b2_line.setAttribute("y2",b2pos[1]);
			
			this.primitive.value.setAttribute("b2x",b2pos[0]);
			this.primitive.value.setAttribute("b2y",b2pos[1]);
		}
		break;
		}
		this.updateClickArea();
	}
	updateGraphics() {
		// The arrow is pointed from the second bezier point to the end
		let b2pos = this.b2_anchor.get_pos();
		
		let xdiff=this.endx-b2pos[0];
		let ydiff=this.endy-b2pos[1];
		let angle=Math.atan2(xdiff,-ydiff)*(180/Math.PI);
		svg_transform(this.arrowhead,this.endx,this.endy,angle,1);
		
		// Update end position so that we get the drawing effect when link is created
		this.curve.x4=this.endx;
		this.curve.y4=this.endy;
		this.curve.update();
	}
	finishCreate() {
		this.resetBezierPoints();
		// Update the lines to fit the bezier anchors
		this.afterAnchorUpdate(anchorTypeEnum.bezier1);
		this.afterAnchorUpdate(anchorTypeEnum.bezier2);	
	}
}

class baseTool {
	static init() {
		
	}
	static mouse_down(x,y) {
	}
	static mouse_move(x,y) {
	}
	static mouse_up(x,y) {
	}
	static enter_tool() {
		
	}
	static leave_tool() {
	}
}
class RunTool extends baseTool {
	static enter_tool() {
		RunResults.runPauseSimulation();
		ToolBox.setTool("mouse");
	}
}

class StepTool extends baseTool {
	static enter_tool() {
		RunResults.stepSimulation();
		ToolBox.setTool("mouse");
	}
}

class ResetTool extends baseTool {
	static enter_tool() {
		RunResults.resetSimulation();
		ToolBox.setTool("mouse");
	}
}

class TextTool extends baseTool {
	static mouse_down(x,y) {
		unselect_all();
		// The right place to  create primitives and elements is in the tools-layers
		var primitive_name = findFreeName(type_basename["text"]);
		var size = type_size["text"];
		var new_text = createPrimitive(primitive_name, "Text", [x-size[0]/2, y-size[1]/2], size);
		ToolBox.setTool("mouse");
	}
}

class NumberboxTool extends baseTool {
	static init() {
		this.targetPrimitive=null;
		this.numberboxable_primitives=["stock","variable","converter","flow"];
	}
	static mouse_down(x,y) {
		unselect_all();
		// The right place to  create primitives and elements is in the tools-layers
		var primitive_name = findFreeName(type_basename["text"]);
		var size = type_size["text"];
		
		//~ var new_text = createPrimitive(primitive_name, "Text", [x-size[0]/2, y-size[1]/2], size);
		this.primitive = createPrimitive(name, "Numberbox", [x,y],[0,0]);
		this.primitive.setAttribute("Target",this.targetPrimitive);
		
		ToolBox.setTool("mouse");
	}
	static enter_tool() {
		var selected_ids=Object.keys(get_selected_root_objects());
		if(selected_ids.length!=1) {
			xAlert("You must first select exactly one primitive to watch");
			ToolBox.setTool("mouse");
			return;
		}
		
		var selected_object=get_object(selected_ids[0]);
		if(this.numberboxable_primitives.indexOf(selected_object.type)==-1) {
			xAlert("This primitive is not watchable");
			ToolBox.setTool("mouse");
			return;
		}
		this.targetPrimitive=selected_ids[0];
	}
}
NumberboxTool.init();

class DeleteTool extends baseTool {
	static enter_tool() {
		var selected_ids=Object.keys(get_selected_root_objects());
		if(selected_ids.length==0) {
			xAlert("You must select at least one primitive to delete");
			ToolBox.setTool("mouse");
			return;
		}
		delete_selected_objects();
		History.storeUndoState();
		ToolBox.setTool("mouse");
	}
}
DeleteTool.init();

class UndoTool extends baseTool {
	static enter_tool() {
		History.doUndo();
		ToolBox.setTool("mouse");
	}
}
UndoTool.init();

class RedoTool extends baseTool {
	static enter_tool() {
		History.doRedo();
		ToolBox.setTool("mouse");
	}
}
RedoTool.init();

class StockTool extends baseTool {
	static mouse_down(x,y) {
		unselect_all();
		// The right place to  create primitives and elements is in the tools-layers
		var primitive_name = findFreeName(type_basename["stock"]);
		var size = type_size["stock"];
		var new_stock = createPrimitive(primitive_name, "Stock", [x-size[0]/2, y-size[1]/2], size);
		ToolBox.setTool("mouse");
	}
}

class RotateNameTool extends baseTool {
	static enter_tool() {
		var object_array = get_selected_objects();
		for(var node_id in object_array) {
			rotate_name(node_id);
		}
		ToolBox.setTool("mouse");
	}
	static leave_tool() {
		History.storeUndoState();
	}
}

class GhostTool extends baseTool {
	static init() {
		this.id_to_ghost=null;
		this.ghostable_primitives=["stock","variable","converter"];
	}
	static mouse_down(x,y) {
		unselect_all();
		var source = findID(this.id_to_ghost);
		var ghost=makeGhost(source,[x,y]);
		ghost.setAttribute("RotateName","0");
		syncVisual(ghost);
		var DIM_ghost = get_object(ghost.getAttribute("id"));
		source.subscribeAttribute(DIM_ghost.changeAttributeHandler);
		ToolBox.setTool("mouse");
	}
	static enter_tool() {
		var selected_ids=get_selected_ids();
		if(selected_ids.length!=1) {
			errorPopUp("You must first select exactly one primitive to ghost");
			ToolBox.setTool("mouse");
			return;
		}
		var selected_object=get_object(selected_ids[0]);
		if(selected_object.is_ghost) {
			errorPopUp("You cannot ghost a ghost");
			ToolBox.setTool("mouse");
			return;
		}
		if(this.ghostable_primitives.indexOf(selected_object.type)==-1) {
			errorPopUp("This primitive is not ghostable");
			ToolBox.setTool("mouse");
			return;
		}
		this.id_to_ghost=selected_ids[0];
	}
}
GhostTool.init();

class ConverterTool extends baseTool {
	static mouse_down(x,y) {
		unselect_all();
		// The right place to  create primitives and elements is in the tools-layers
		var primitive_name = findFreeName(type_basename["converter"]);
		var size = type_size["converter"];
		var new_converter = createPrimitive(primitive_name, "Converter", [x-size[0]/2, y-size[1]/2], size);
		ToolBox.setTool("mouse");
	}
}

class VariableTool extends baseTool {
	static mouse_down(x,y) {
		unselect_all();
		// The right place to  create primitives and elements is in the tools-layers
		var primitive_name = findFreeName(type_basename["variable"]);
		var size = type_size["variable"];
		var new_stock = createPrimitive(primitive_name, "Variable", [x-size[0]/2, y-size[1]/2], size);
		ToolBox.setTool("mouse");
	}
}

class MouseTool extends baseTool {
	static get_single_selected_anchor() {
		// Check if we selected only 1 anchor element. Return that anchor else return null
		
		let selectedAnchors = [];
		let selectedObjects=get_selected_objects();
	
		// Get the selected anchors
		for(var i in selectedObjects) {
			if(selectedObjects[i].type=="dummy_anchor") {
				selectedAnchors.push(selectedObjects[i]);
			}
		}
		
		// If the number of selected anchors is exactly 1 return it
		if(selectedAnchors.length==1) {
			return selectedAnchors[0];
		} else {
			// More then one or no anchor selected
			return null;
		}
	}
	static mouse_down(x,y) {
		mousedown_x=x;
		mousedown_y=y;
		do_global_log("last_click_object_clicked "+last_click_object_clicked);
		if(!last_click_object_clicked) {
			empty_click();
		}
		

		
		// Check if we selected only 1 anchor element and in that case detach it;
		let selectedAnchor=this.get_single_selected_anchor();
		if(selectedAnchor) {
			let parentObject = get_parent(selectedAnchor);
			switch(selectedAnchor.getAnchorType()) {
			case anchorTypeEnum.start:
				parentObject.start_attach=null;
				break;
			case anchorTypeEnum.end:
				parentObject.end_attach=null;
				break;
			}
		}
			
			
		// Reset it for use next time
		last_click_object_clicked = false;
	}
	static mouse_move(x,y) {
		var diff_x=x-mousedown_x;
		var diff_y=y-mousedown_y;
		mousedown_x=x;
		mousedown_y=y;
		
		if(empty_click_down) {				
			rectselector.x2=mousedown_x;
			rectselector.y2=mousedown_y;
			rectselector.setVisible(true);
			rectselector.update();
			unselect_all();
			var select_array=get_objects_in_rectselect();
			for(var key in select_array) {
				let parent = get_parent(select_array[key]);
				parent.select(false); // We also select the parent but not all of its anchors
				select_array[key].select();
			}
			return;
		}
		// We only come here if some object is being dragged
		// Otherwise we will trigger empty_click_down
		var move_array=get_selected_objects();
		
		var objectMoved = false;
		for(var key in move_array) {
			if(move_array[key].draggable==undefined) {
				
				//~ console.error("Drag and drop for connections not implemented yet");
				continue;
			}
			if(move_array[key].draggable==false) {
				do_global_log("skipping because of no draggable");
				continue;
			}
			
			// We can't drug and drop attached anchors
			if(move_array[key].type=="dummy_anchor") {
				if(move_array[key].isAttached()) {
					continue;
				}
			}
			
			
			objectMoved=true;
			// This code is not very optimised. If we want to optimise it we should just find the objects that needs to be updated recursivly
			rel_move(key,diff_x,diff_y);
			
		}
		if(objectMoved) {
			update_all_objects();
		}
	}
	static mouse_up(x,y) {
		// Check if we selected only 1 anchor element and in that case detach it;
		let selectedAnchor=this.get_single_selected_anchor();
		if(selectedAnchor) {
			let parentObject = get_parent(selectedAnchor);
			attach_selected_anchor(selectedAnchor);
		}
		if(empty_click_down) {
			rectselector.setVisible(false);
			var select_array=get_objects_in_rectselect();
			for(var key in select_array) {
				select_array[key].select();
			}
			empty_click_down = false;
		}
	}
}

class TwoPointer_tool extends baseTool {
	static init() {
		this.primitive=null;
		this.current_connection=null;
		this.type="flow";
	}
	static set_type() {
		
	}
	static get_type() {
		return "none";
	}
	static create_TwoPointer_start(x,y,name) {
		// Override this and do a for example: 
		// Example: this.primitive = createConnector(name, "Flow", null,null);
		// Example: this.current_connection=new FlowVisual(this.primitive.id,this.get_type(),[x,y]);
	}
	static create_TwoPointer_end() {
		// Override this
	}
	static mouse_down(x,y) {
		unselect_all();
		var start_element=find_element_under(x,y);
		var primitive_name = findFreeName(type_basename[this.get_type()]);
		this.create_TwoPointer_start(x,y,primitive_name);
		this.primitive.subscribePosition(this.current_connection.positionUpdateHandler);
		if(start_element!=null) {
			this.current_connection.start_attach = get_parent(start_element);
		}
		this.current_connection.set_name(primitive_name);
	}
	static mouse_move(x,y) {
		if(this.current_connection==null) {
			return;
		}
		this.current_connection.endx=x;
		this.current_connection.endy=y;
		this.current_connection.update();
	}
	static mouse_up(x,y) {
		this.mouse_move(x,y);
		if(this.current_connection.end_anchor==null) {
			this.current_connection.create_dummy_end_anchor();
		}
		if(this.current_connection.start_anchor==null) {
			this.current_connection.create_dummy_start_anchor();
		}
		
		attach_selected_anchor(this.current_connection.end_anchor);
		
		this.current_connection.start_anchor.updatePosition();
		this.current_connection.end_anchor.updatePosition();
		this.current_connection.update();
		this.current_connection.finishCreate();
		this.create_TwoPointer_end();
		
		this.current_connection=null;
		last_clicked_element = null;
		ToolBox.setTool("mouse");
	}
	static leave_tool() {
		last_clicked_element = null;
	}
}
class FlowTool extends TwoPointer_tool {
	static create_TwoPointer_start(x,y,name) {
		this.primitive = createConnector(name, "Flow", null,null);
		setNonNegative(this.primitive,false);
		
		let rotateName = this.primitive.getAttribute("RotateName");
		// Force all stocks to have a RotateName
		if(!rotateName) {
			rotateName = "0";
			this.primitive.setAttribute("RotateName",rotateName);
		}		
		
		this.current_connection=new FlowVisual(this.primitive.id,this.get_type(),[x,y]);
		this.current_connection.name_pos = rotateName;
		update_name_pos(this.primitive.id);
	}
	static get_type() {
		return "flow";
	}
}
FlowTool.init();


function cleanUnconnectedLinks() {
	let allLinks = primitives("Link");
	for(let link of allLinks) {
		let ends = getEnds(link);
		if((ends[0] == null) || (ends[1] == null)) {
			removePrimitive(link);
		}
	}
}

class LinkTool extends TwoPointer_tool {
	static create_TwoPointer_start(x,y,name) {
		this.primitive = createConnector(name, "Link", null,null);
		this.current_connection=new LinkVisual(this.primitive.id,this.get_type(),[x,y]);
	}
	static create_TwoPointer_end() {
		cleanUnconnectedLinks();
	}
	static get_type() {
		return "link";
	}
}
LinkTool.init();

class RectangleTool extends TwoPointer_tool {
	static create_TwoPointer_start(x,y,name) {
		this.primitive = createConnector(name, "Rectangle", null,null);
		this.current_connection=new RectangleVisual(this.primitive.id,this.get_type(),[x,y]);
	}
	static get_type() {
		return "rectangle";
	}
}
RectangleTool.init();

class LineTool extends TwoPointer_tool {
	static create_TwoPointer_start(x,y,name) {
		this.primitive = createConnector(name, "Line", null,null);
		this.current_connection=new LineVisual(this.primitive.id,this.get_type(),[x,y]);
	}
	static get_type() {
		return "line";
	}
}
LineTool.init();

class TableTool extends TwoPointer_tool {
	static create_TwoPointer_start(x,y,name) {
		this.primitive = createConnector(name, "Table", null,null);
		this.current_connection=new TableVisual(this.primitive.id,this.get_type(),[x,y]);
	}
	static init() {
		this.initialSelectedIds=[];
		super.init();
	}
	static mouse_down(x,y) {
		this.initialSelectedIds=Object.keys(get_selected_root_objects());
		super.mouse_down(x,y)
		this.current_connection.dialog.setIdsToDisplay(this.initialSelectedIds);
		this.current_connection.render();
	}
	static get_type() {
		return "table";
	}
}
TableTool.init();

class DiagramTool extends TwoPointer_tool {
	static create_TwoPointer_start(x,y,name) {
		this.primitive = createConnector(name, "Diagram", null,null);
		this.current_connection=new DiagramVisual(this.primitive.id,this.get_type(),[x,y]);
	}
	static init() {
		this.initialSelectedIds=[];
		super.init();
	}
	static mouse_down(x,y) {
		this.initialSelectedIds=Object.keys(get_selected_root_objects());
		super.mouse_down(x,y)
		this.current_connection.dialog.setIdsToDisplay(this.initialSelectedIds);
		this.current_connection.render();
	}
	static get_type() {
		return "diagram";
	}
}
DiagramTool.init();

class TextAreaTool extends TwoPointer_tool {
	static create_TwoPointer_start(x,y,name) {
		let primitive_name = findFreeName(type_basename["text"]);
		this.primitive = createConnector(primitive_name, "TextArea", null,null);
		this.current_connection=new TextAreaVisual(this.primitive.id,this.get_type(),[x,y]);
	}
	static init() {
		this.initialSelectedIds=[];
		super.init();
	}
	static get_type() {
		return "diagram";
	}
}
DiagramTool.init();

class XyPlotTool extends TwoPointer_tool {
	static create_TwoPointer_start(x,y,name) {
		this.primitive = createConnector(name, "XyPlot", null,null);
		this.current_connection=new XyPlotVisual(this.primitive.id,this.get_type(),[x,y]);
	}
	static init() {
		this.initialSelectedIds=[];
		super.init();
	}
	static mouse_down(x,y) {
		this.initialSelectedIds=Object.keys(get_selected_root_objects());
		super.mouse_down(x,y)
		this.current_connection.dialog.setIdsToDisplay(this.initialSelectedIds);
		this.current_connection.render();
	}
	static get_type() {
		return "xyplot";
	}
}
XyPlotTool.init();

function attach_selected_anchor(selectedAnchor) {
	[x,y]=selectedAnchor.get_pos();
	let parentConnection = get_parent(selectedAnchor);
	
	var	elements_under = find_elements_under(x,y);
	var anchor_element = null;
	var attach_to = null;
	

	// Find unselected stock element
	for(var i=0;i<elements_under.length;i++) {
		if(!elements_under[i].is_selected() && ("get_mount_pos" in elements_under[i]) && elements_under[i] != parentConnection) {
			attach_to=elements_under[i]; 
		}
	}
	if(attach_to==null) {
		return false;
	}
	
	switch(selectedAnchor.getAnchorType()) {
	case anchorTypeEnum.start:
		parentConnection.start_attach = attach_to;
		break;
	case anchorTypeEnum.end:
		parentConnection.end_attach = attach_to;
		break;
	}
	
	parentConnection.update();
	return true;
}

var current_tool = MouseTool;

class CoordRect {
	constructor() {
		this.x1=0;
		this.y1=0;
		this.x2=0;
		this.y2=0;
		this.element = null; // This is set at page ready
	}
	setVisible(new_visible) {
		if(new_visible) {
			this.element.setAttribute("visibility","visible");
		}
		else {
			this.element.setAttribute("visibility","hidden");
		}
	}
	xmin() {
		return this.x1 < this.x2 ? this.x1 : this.x2;
	}
	ymin() {
		return this.y1 < this.y2 ? this.y1 : this.y2;
	}
	width() {
		return Math.abs(this.x2-this.x1);
	}
	height() {
		return Math.abs(this.y2-this.y1);
	}
	update() {
		this.element.setAttribute("x",this.xmin());
		this.element.setAttribute("y",this.ymin());
		
		this.element.setAttribute("width",this.width());
		this.element.setAttribute("height",this.height());
	}
}
rectselector = new CoordRect();

function in_selection(node_id) {
	if(
		object_array[node_id].pos[0] >= rectselector.xmin()
	&&  object_array[node_id].pos[1] >= rectselector.ymin()
	&&  object_array[node_id].pos[0] <= rectselector.xmin()+rectselector.width()
	&&  object_array[node_id].pos[1] <= rectselector.ymin()+rectselector.height()
	) {
		return true;
	} else {
		return false;
	}
}

function get_objects_in_rectselect() {
	var return_array = {};
	for(var key in object_array) {
		if(in_selection(key)) {
			return_array[key] = object_array[key];
		}
	}
	return return_array;
}

function tool_deletePrimitive(id) {
	var primitive = findID(id);
	
	removePrimitive(primitive);
	
	// Delete ghosts
	var ghostIDs=findGhostsOfID(id);
	for(var i in ghostIDs) {
		tool_deletePrimitive(ghostIDs[i]);
	}
	cleanUnconnectedLinks();
}

function get_selected_root_objects() {
	var result={};
	var all_objects = get_all_objects();
	for(var key in all_objects) {
		let parent = get_parent(all_objects[key]);
		
		// If any element is selected we add its parent
		if(all_objects[key].is_selected()) {
			result[parent.id]=parent;
		}
	}
	return result;
}

function get_root_objects() {
	var result={};
	var all_objects = get_all_objects();
	for(var key in all_objects) {
		if(key.indexOf(".")==-1) {
			result[key]=all_objects[key];
		}
	}
	return result;
}

function delete_selected_objects() {
	// Delete all objects that are selected
	var object_array=get_selected_root_objects();
	for(var key in object_array) {
			tool_deletePrimitive(key);
	}
}

function get_selected_objects() {
	var return_array = {};
	for(var key in object_array) {
		if(object_array[key].is_selected()) {
			return_array[key] = object_array[key];
		}
	}
	for(var key in connection_array) {
		if(connection_array[key].is_selected()) {
			return_array[key] = connection_array[key];
		}
	}
	return return_array;
}

function get_selected_ids() {
	return Object.keys(get_selected_objects());
}

function delete_connection(key) {
	if(!(key in connection_array)) {
		return;
	}
	var start_anchor = connection_array[key].start_anchor;
	var end_anchor = connection_array[key].end_anchor;
	var auxiliary = connection_array[key].auxiliary;
	connection_array[key].group.remove();
	delete connection_array[key];
	
	
	// Must be done last otherwise the anchors will respawn	
	delete_object(start_anchor.id);
	delete_object(end_anchor.id);
	delete_object(auxiliary.id);	
}
function delete_object(node_id) {
	var object_to_delete = object_array[node_id];
	
	// Delete all references to the object in the connections
	for(var key in connection_array) {
		if(connection_array[key].start_anchor==object_to_delete) {
			connection_array[key].create_dummy_start_anchor();
		}
		if(connection_array[key].end_anchor==object_to_delete) {
			connection_array[key].create_dummy_end_anchor();
		}
	}
	if(object_to_delete.hasOwnProperty("parent_id")) {
		delete_connection(object_to_delete.parent_id);
	}
	
	for(var i in object_to_delete.selector_array) {
		object_to_delete.selector_array[i].remove();
	}
	for(var key in object_to_delete.element_array) {
		object_to_delete.element_array[key].remove();
	}
	object_to_delete.group.remove();
	delete object_to_delete;
	delete object_array[node_id];
}
function primitive_mousedown(node_id,event,new_primitive) {
	last_clicked_element = get_object(node_id);
	
	// If we click directly on the anchors we dont want anything but them selected
	if(last_clicked_element.type=="dummy_anchor") {
		let elementId = get_parent_id(last_clicked_element.id);
		unselect_all_but(elementId);
	}
	if(last_clicked_element.is_selected()) {
		if(event.shiftKey) {
			last_clicked_element.unselect();
		}
	} else {
		if(!event.shiftKey) {
			// We don't want to unselect an eventual parent
			// As that will hide other anchors
			var parent_id=get_parent_id(node_id);
			unselect_all_but(parent_id);
		}
		last_clicked_element.select();
	}
	last_click_object_clicked=true;
}

function update_all_objects() {
	for(var key in object_array) {
		object_array[key].update();
	}
	for(var key in connection_array) {
		connection_array[key].update();
	}
}

function get_all_objects() {
	var result={}
	for(var key in object_array) {
		result[key]=object_array[key];
	}
	for(var key in connection_array) {
		result[key]=connection_array[key];
	}
	return result;
}

function get_anchors(id) {
	var result=[]
	for(var key in object_array) {
		if(key.startsWith(id+".") && object_array[key].type=="dummy_anchor") {
			result.push(object_array[key]);
		}
	}
	return result;
}


function get_object(id) {
	if(typeof object_array[id]!="undefined") {
		return object_array[id];
	}
	if(typeof connection_array[id]!="undefined") {
		return connection_array[id];
	}
	return false;
}

function set_name(id,new_name) {
	var tobject = get_object(id);
	if(!tobject)  {
		return;
	}
	tobject.set_name(new_name);
	tobject.afterNameChange();
}

function rel_move(node_id,diff_x,diff_y) {
	let primitive = findID(node_id);
	if(primitive != null) {
		// If its a real primitive (stoch, variable etc) update it in the engine
		let oldPos = getCenterPosition(primitive);
		let newPos = [oldPos[0]+diff_x,oldPos[1]+diff_y];
		setCenterPosition(primitive,newPos);
	} else {
		// If its not a real primtiive but rather an anchor point updated the position only graphically
		object_array[node_id].pos[0]+=diff_x;
		object_array[node_id].pos[1]+=diff_y;
	}
	object_array[node_id].updatePosition();
	object_array[node_id].afterMove(diff_x,diff_y);
}

function positionToModel() {
	
}

function unselect_all() {
	for(var key in object_array) {
		object_array[key].unselect();
	}
	for(var key in connection_array) {
		connection_array[key].unselect();
	}
}

function unselect_all_but(dont_unselect_id) {
	for(var key in object_array) {
		if(key!=dont_unselect_id) {
			object_array[key].unselect();
		}
	}
	for(var key in connection_array) {
		if(key!=dont_unselect_id) {
			connection_array[key].unselect();
		}
	}
}


function unselect_all_but_family(id) {
	for(var key in object_array) {
		if(!is_family(id,key)) {
			object_array[key].unselect();
		}
	}
	for(var key in connection_array) {
		if(!is_family(id,key)) {
			connection_array[key].unselect();
		}
	}
}





function empty_click() {
	empty_click_down = true;
	unselect_all();
	rectselector.x1=mousedown_x;
	rectselector.y1=mousedown_y;
	rectselector.x2=mousedown_x;
	rectselector.y2=mousedown_y;
	rectselector.update();
}

function rotate_name(node_id) {
	let object = get_object(node_id);
	if(object.name_pos<3) {
		object.name_pos++;
	} else {
		object.name_pos=0;
	}
	update_name_pos(node_id);
}

function update_name_pos(node_id) {
	var object = get_object(node_id);
	var name_element = object.name_element;
	// Some objects does not have name element
	if(name_element==null) {
		return;
	}
	// For fixed names (used only by text element)
	if(object.name_centered) {
		name_element.setAttribute("x",0); //Set path's data
		name_element.setAttribute("y",0); //Set path's data
		name_element.setAttribute("text-anchor","middle");
		return;
	}

	let visualObject = get_object(node_id);
	let pos=visualObject.rotatePosList[visualObject.name_pos];
	name_element.setAttribute("x",pos[0]); //Set path's data
	name_element.setAttribute("y",pos[1]); //Set path's data

	switch(get_object(node_id).name_pos) {
		case 0:
		// Below
				//~ name_element.setAttribute("x",0); //Set path's data
				//~ name_element.setAttribute("y",dist_down); //Set path's data
				name_element.setAttribute("text-anchor","middle");
		break;
		case 1:
		// To the right
				//~ name_element.setAttribute("x",dist_right); //Set path's data
				//~ name_element.setAttribute("y",0); //Set path's data
				name_element.setAttribute("text-anchor","start");
		break;
		case 2:
		// Above
				//~ name_element.setAttribute("x",0); //Set path's data
				//~ name_element.setAttribute("y",-dist_up); //Set path's data
				name_element.setAttribute("text-anchor","middle");
		break;
		case 3:
		// To the left
				//~ name_element.setAttribute("x",-dist_left); //Set path's data
				//~ name_element.setAttribute("y",0); //Set path's data
				name_element.setAttribute("text-anchor","end");
				//~ name_element.setAttribute("alignment-baseline","hanging");
		break;
	}
}

function mousedown_handler(event) {
	do_global_log("mousedown_handler");
	mouseisdown=true;
	var offset = $(svgplane).offset();
	var x=event.pageX-offset.left;
	var y = event.pageY-offset.top;
	do_global_log("x:"+x+" y:"+y);
	current_tool.mouse_down(x,y);
}
function mousemove_handler(event) {
	var offset = $(svgplane).offset();
	var x=event.pageX-offset.left;
	var y = event.pageY-offset.top;
	
	lastMouseX = x;
	lastMouseY = y;
	
	if(!mouseisdown) {
		return;
	}
	current_tool.mouse_move(x,y);
}
function find_elements_under(in_x,in_y) {
	var offset = $(svgplane).offset();
	var x= in_x+offset.left-window.scrollX;
	var y = in_y+offset.top-window.scrollY;
	
	var found_array=[];
	let objects = get_all_objects();
	// Having "flow" in this list causes a bug with flows that does not place properly
	//~ let attachable_object_types=["flow","stock","variable"];
	let attachable_object_types=["flow","stock","variable","converter"];
	for(key in objects) {
		if(objects[key].type == "dummy_anchor") {
			// We are only intressted in primitive-objects. not dummy_anchors
			continue;
		}
		if(attachable_object_types.indexOf(objects[key].type) == -1) {
			// We skip if the object is not attachable
			continue;
		}
		var rect=objects[key].group.getBoundingClientRect();
		do_global_log(key+" "+objects[key].type+" x:"+rect.left+"-"+rect.right+" y:"+rect.top+"-"+rect.bottom);
		if(x>=rect.left && x <= rect.right && y >= rect.top && y <= rect.bottom) {
			found_array.push(objects[key]);
		}
	}
	do_global_log("found array("+found_array.length+") "+found_array.map((x)=>x.id).join(","));
	return found_array;
}

function find_element_under(x,y) {
	elements_under=find_elements_under(x,y);
	if(elements_under.length>0) {
		do_global_log("find_element_under choose "+elements_under[0].id);
		return elements_under[0];
	} else {
		return null;
	}
}

function mouseup_handler(event) {
	if(!mouseisdown) {
		return;
	}
	// does not work to store UndoState here, because mouseup_handler happens even when we are outside the svg (click buttons etc)
	do_global_log("mouseup_handler");
	var offset = $(svgplane).offset();
	var x=event.pageX-offset.left;
	var y = event.pageY-offset.top;
	
	current_tool.mouse_up(x,y);
	mouseisdown=false;
	History.storeUndoState();
}
function stochsd_clear_sync() {
	var root_object_array=get_root_objects();
	for(var id in root_object_array) {
		if(findID(id)==null) {
			stochsd_delete_primitive(id);
		}
	}
}


class ToolBox {
	static init() {
		this.tools={
			"mouse":MouseTool,
			"delete":DeleteTool,
			"undo":UndoTool,
			"redo":RedoTool,
			"stock":StockTool,
			"converter":ConverterTool,
			"variable":VariableTool,
			"flow":FlowTool,
			"link":LinkTool,
			"rotatename":RotateNameTool,
			"ghost":GhostTool,
			//~ "text":TextTool,
			"text":TextAreaTool,
			"rectangle":RectangleTool,
			"line":LineTool,
			"table":TableTool,
			"diagram":DiagramTool,
			"xyplot":XyPlotTool,
			"numberbox":NumberboxTool,
			"run":RunTool,
			"step":StepTool,
			"reset":ResetTool
		};
	}
	static setTool(toolName) {
		if(toolName in this.tools) {
			$(".toolButton").removeClass("pressed");
			$("#btn_"+toolName).addClass("pressed");
			
			current_tool.leave_tool();
			current_tool=this.tools[toolName];
			current_tool.enter_tool();
		} else {
			errorPopUp("The tool "+toolName+" does not exist");
		}
	}
	static getTool() {
	
	}
}
ToolBox.init();

class ClipboardItem {
	constructor(id) {
		this.id=id;
		this.absolutePosition=[0,0];
		this.relativePosition=[0,0];
	}
}

class Clipboard {
	static init() {
		this.copiedItems=[];
	}
	static copyObject(clipboardItem) {
		var parent = graph.children[0].children[0];
		var vertex = simpleCloneNode2(findID(clipboardItem.id), parent);
		let relativePosition = clipboardItem.relativePosition;
		setCenterPosition(vertex,[lastMouseX+relativePosition[0],lastMouseY+relativePosition[1]]);
		var oldName = getName(vertex);
		setName(vertex,findFreeName(oldName+"_"));
		syncAllVisuals();
	}
	static copy() {
		this.copiedItems = [];
		let rawSelectedIdArray = get_selected_ids();
		
		// Create parentIdArray as we are only intressted in copying parent nodes
		let parentIdArray = [];
		for(let i in rawSelectedIdArray) {
			let parentId = get_parent_id(rawSelectedIdArray[i]);
			if(parentIdArray.indexOf(parentId)==-1) {
				parentIdArray.push(parentId);
			}
		}
		
		// Create clipboard items
		for(let i in parentIdArray) {
			let clipboardItem = new ClipboardItem(parentIdArray[i]);
			let tmp_object = get_object(parentIdArray[i]);
			
			let absolutePosition=tmp_object.get_pos();
			clipboardItem.absolutePosition=absolutePosition;
			
			this.copiedItems.push(clipboardItem);			
		}
		
		// Create position list to calculate relative positions
		let positionList=[];
		for(let i in this.copiedItems) {
			positionList.push(this.copiedItems[i].absolutePosition);
			do_global_log(JSON.stringify(positionList));
		}
		let centerPosition = centerCoordinates(positionList);
		do_global_log("Center positio"+JSON.stringify(centerPosition));
		
		
		// Calculate rel positions for objects
		for(let i in this.copiedItems) {
			do_global_log("hoj "+JSON.stringify(positionDifference(this.copiedItems[i].absolutePosition,centerPosition)));
			this.copiedItems[i].relativePosition = positionDifference(this.copiedItems[i].absolutePosition,centerPosition);
		}
	}
	static paste() {
		for(var i in this.copiedItems) {
			this.copyObject(this.copiedItems[i]);
		}
	}
}
Clipboard.init();

function showDebug() {
	$("#btn_debug").show();
}

function hashUpdate() {
	if(location.hash == "#debug") {
		showDebug();
	}
}

$(document).ready(function() {
	rectselector.element=svg_rect(-30,-30,60,60,"green","none","element");
	rectselector.setVisible(false);
	var svgplane=document.getElementById("svgplane");
	
	$(".toolButton").mousedown(function(event) {
		var toolName = $(this).attr("data-tool");
		ToolBox.setTool(toolName);
	});
	
	$(window).bind( 'hashchange', hashUpdate);
	hashUpdate();
	
	if(Settings.showDebug) {
		showDebug();
	}
	
	$(document).keydown(function(event){
		// Only works if no dialog is open
		if(jqDialog.blockingDialogOpen) {
			return;
		}
		if(event.keyCode == keyboard["delete"]) {
			DeleteTool.enter_tool();
		}
		
		if(event.ctrlKey) {
			if(event.keyCode == keyboard["1"]) {
				event.preventDefault();
				RunTool.enter_tool();
			}
			if(event.keyCode == keyboard["2"]) {
				event.preventDefault();
				StepTool.enter_tool();
			}
			if(event.keyCode == keyboard["3"]) {
				event.preventDefault();
				ResetTool.enter_tool();
			}
			if(event.keyCode == keyboard["O"]){
				event.preventDefault();
				$("#btn_load").click();
			}
			if(event.keyCode == keyboard["S"]){
				event.preventDefault();
				$("#btn_save").click();
			}
			if(event.keyCode == keyboard["P"]){
				event.preventDefault();
				$("#btn_print_model").click();
			}
			if(event.keyCode == keyboard["Z"]){
				History.doUndo();
			}
			if(event.keyCode == keyboard["Y"]){
				History.doRedo();
			}
			if(event.keyCode == keyboard["C"]){
				Clipboard.copy();
			}
			if(event.keyCode == keyboard["V"]){
				Clipboard.paste();
				History.storeUndoState();
			}
		}
		environment.keyDown(event);
	});
	
	$(svgplane).mousedown(mousedown_handler);
	// the mousemove and mouseup event needs to be attached to the html to allow swipping the mouse outside
	$("html").mousemove(mousemove_handler);
	$("html").mouseup(mouseup_handler);
	ToolBox.setTool("mouse");
	$("#btn_new").click(function() {
		saveChangedAlert(function() {
			fileManager.newModel();
		});
	});	
	$("#btn_load").click(function() {
		saveChangedAlert(function() {
			fileManager.loadModel();
		});
	});
	$("#btn_save").click(function() {
		fileManager.saveModel();
	});
	$("#btn_save_as").click(function() {
		fileManager.saveModelAs();
	});
	$("#btn_simulation_settings").click(function() {
		simulationSettings.show();
	});
	$("#btn_equation_list").click(function() {
		equationList.show();
	});
	$("#btn_print_model").click(function() {
		unselect_all();
		hideAndPrint([$("#topPanel").get(0)]);

	});
	$("#btn_macro").click(function() {
		macroDialog.show();
	});
	$("#btn_debug").click(function() {
		debugDialog.show();
	});
	$("#btn_about").click(function() {
		aboutDialog.show();
	});
	$("#btn_restart").click(function() {
		saveChangedAlert(function() {
			applicationReload();
		});
	});
	$("#btn_preserve_restart").click(function() {
		preserveRestart();
	});
	$(".btn_load_plugin").click((event) => {
		let pluginName = $(event.target).data("plugin-name");
		loadPlugin(pluginName);
	});
	if(fileManager.hasSaveAs()) {
		$("#btn_save_as").show();
	}
	macroDialog = new MacroDialog();
	equationEditor = new EquationEditor();
	converterDialog = new ConverterDialog();
	simulationSettings = new SimulationSettings();
	equationList = new EquationListDialog();
	debugDialog = new DebugDialog();
	aboutDialog = new AboutDialog();
	
	// When the program is fully loaded we create a new model
	//~ fileManager.newModel();
	
	$(window).resize(updateWindowSize);
	updateWindowSize();
	nwController.ready();
	environment.ready();
	fileManager.ready();
	restoreAfterRestart();
});
	
function find_connections(primitive) {
	return find_start_connections(primitive).concat(find_end_connections(primitive));
}

function find_start_connections(primitive) {
	var connections_array=Array(0);
	for(key in connection_array) {
		if(connection_array[key].start_anchor==primitive) {
			connections_array.push(connection_array[key]);
		}
	}
	return connections_array;
}

function find_end_connections(primitive) {
	var connections_array=Array(0);
	for(key in connection_array) {
		if(connection_array[key].end_anchor==primitive) {
			connections_array.push(connection_array[key]);
		}
	}
	return connections_array;
}
	
function stochsd_delete_primitive (id) {
	var stochsd_object = get_object(id);
	if(stochsd_object) {
		stochsd_object.clean();
	}
	
	if(object_array[id]) {
		delete object_array[id];
	} else if (connection_array[id]) {
		delete connection_array[id];
	} else {
		do_global_log("primitive with id "+id+" does not exist");
	}
}


var InsightMakerFileExtension = ".InsightMaker";


function isLocal(){
	return true; // Expose additional debugging and error messages
}

function export_txt(fileName, data) {
	// Create Blob and attach it to ObjectURL
	var blob = new Blob([data], {type: "octet/stream"}),
	url = window.URL.createObjectURL(blob);
	
	// Create download link and click it
	var a = document.createElement("a");
	a.style.display="none";
	a.href = url;
	a.download = fileName;
	document.body.appendChild(a);
	a.click();
	
	// The setTimeout is a fix to make it work in Firefox
	// Without it, the objectURL is removed before the click-event is triggered
	// And the download does not work
	setTimeout(function() {
		window.URL.revokeObjectURL(url);
		a.remove();
	},1);
};

function export_model() {
	export_txt("a.txt",blankGraphTemplate);
}
var blankGraphTemplate = `<mxGraphModel>
<root>
<mxCell id="0"/>
<mxCell id="1" parent="0"/>
<Display name="Default Display" Note="" Type="Time Series" xAxis="Time (%u)" yAxis="" yAxis2="" showMarkers="false" showLines="true" showArea="false" ThreeDimensional="false" Primitives="" Primitives2="" AutoAddPrimitives="false" ScatterplotOrder="X Primitive, Y Primitive" Image="Display" FlipHorizontal="false" FlipVertical="false" LabelPosition="Bottom" legendPosition="Automatic" id="43">
<mxCell style="display" parent="1" vertex="1" visible="0">
<mxGeometry x="10" y="10" width="64" height="64" as="geometry"/>
</mxCell>
</Display>
<Setting Note="" Version="36" TimeLength="100" TimeStart="0" TimeStep="1" TimeUnits="Years" StrictUnits="true" Units="" HiddenUIGroups="Validation,User Interface" SolutionAlgorithm="RK1" BackgroundColor="white" Throttle="-1" Macros="" SensitivityPrimitives="" SensitivityRuns="50" SensitivityBounds="50, 80, 95, 100" SensitivityShowRuns="false" article="{&quot;comments&quot;:true, &quot;facebookUID&quot;: &quot;&quot;}" StyleSheet="{}" id="2">
<mxCell parent="1" vertex="1" visible="0">
<mxGeometry x="20" y="20" width="80" height="40" as="geometry"/>
</mxCell>
</Setting>
</root>
</mxGraphModel>`;
loadXML(blankGraphTemplate);

// Take a primitive from the engine(tprimitve) and makes a visual object from it
function syncVisual(tprimitive) {
	var stochsd_object = get_object(tprimitive.id);
	if(stochsd_object!=false) {
		return false;
	}
	let nodeType = tprimitive.value.nodeName;
	switch(nodeType) {
		case "Numberbox":
		{
			var position=getCenterPosition(tprimitive);
			let visualObject = new NumberboxVisual(tprimitive.id,"numberbox",position);
			visualObject.render();
		}
		break;
		case "Table":
		case "Diagram":
		case "XyPlot":
		{
			dimClass = null;
			switch(nodeType) {
				case "Table":
					dimClass = TableVisual;
				break;
				case "Diagram":
					dimClass = DiagramVisual;
				break;
				case "XyPlot":
					dimClass = XyPlotVisual;
				break;
			}
			var source_position=getSourcePosition(tprimitive);
			var target_position=getTargetPosition(tprimitive);
			
			let connection = new dimClass(tprimitive.id,"table",[0,0]);
			connection.create_dummy_start_anchor();
			connection.create_dummy_end_anchor();			
			
			// Set UI-coordinates to coordinates in primitive
			connection.start_anchor.set_pos(source_position);
			// Set UI-coordinates to coordinates in primitive
			connection.end_anchor.set_pos(target_position);
			
			// Insert correct primtives
			let primitivesString = tprimitive.value.getAttribute("Primitives");
			let idsToDisplay = primitivesString.split(",");
			connection.dialog.setIdsToDisplay(idsToDisplay);
			
			connection.update();
			connection.render();
		}
		break;
		case "Line":
		case "Rectangle":
		{
			dimClass = null;
			switch(nodeType) {
				case "Line":
					dimClass = LineVisual;
				break;
				case "Rectangle":
					dimClass = RectangleVisual;
				break;
			}
			var source_position=getSourcePosition(tprimitive);
			var target_position=getTargetPosition(tprimitive);
			
			let connection = new dimClass(tprimitive.id,"table",[0,0]);
			connection.create_dummy_start_anchor();
			connection.create_dummy_end_anchor();			
			
			// Set UI-coordinates to coordinates in primitive
			connection.start_anchor.set_pos(source_position);
			// Set UI-coordinates to coordinates in primitive
			connection.end_anchor.set_pos(target_position);
			
			connection.update();
		}
		break;
		case "TextArea":
		{
			var source_position=getSourcePosition(tprimitive);
			var target_position=getTargetPosition(tprimitive);
			
			let connection = new TextAreaVisual(tprimitive.id,"table",[0,0]);
			connection.create_dummy_start_anchor();
			connection.create_dummy_end_anchor();			
			
			// Set UI-coordinates to coordinates in primitive
			connection.start_anchor.set_pos(source_position);
			// Set UI-coordinates to coordinates in primitive
			connection.end_anchor.set_pos(target_position);
			
			connection.update();
		}
		break;
		case "Stock":
		{
			var position=getCenterPosition(tprimitive);
			let visualObject = new StockVisual(tprimitive.id,"stock",position);
			set_name(tprimitive.id,tprimitive.getAttribute("name"));
			
			let rotateName = tprimitive.getAttribute("RotateName");
			// Force all stocks to have a RotateName
			if(!rotateName) {
				rotateName = "0";
				tprimitive.setAttribute("RotateName",rotateName);
			}
			visualObject.name_pos = rotateName;
			update_name_pos(tprimitive.id);
		}
		break;
		case "Converter":
		{
			var position=getCenterPosition(tprimitive);
			let visualObject = new ConverterVisual(tprimitive.id,"converter",position);
			set_name(tprimitive.id,tprimitive.getAttribute("name"));
			
			let rotateName = tprimitive.getAttribute("RotateName");
			// Force all stocks to have a RotateName
			if(!rotateName) {
				rotateName = "0";
				tprimitive.setAttribute("RotateName",rotateName);
			}
			visualObject.name_pos = rotateName;
			update_name_pos(tprimitive.id);
		}
		break;
		case "Text":
		{
			do_global_log("id is "+tprimitive.id);
			var position=getCenterPosition(tprimitive);
			new TextVisual(tprimitive.id,"text",position);
			set_name(tprimitive.id,tprimitive.getAttribute("name"));
		}
		break;
		case "Ghost":
		{
			var source_primitive = findID(tprimitive.getAttribute("Source"));
			var source_type=source_primitive.value.nodeName;
			//~ do_global_log("id is "+tprimitive.id);
			var position=getCenterPosition(tprimitive);
			let visualObject = null;
			switch(source_type) {
					case "Converter":
						visualObject = new ConverterVisual(tprimitive.id,"converter",position,{"is_ghost":true});
						break;
					case "Variable":
						visualObject = new VariableVisual(tprimitive.id,"variable",position,{"is_ghost":true});
						break;
					case "Stock":
						visualObject = new StockVisual(tprimitive.id,"stock",position,{"is_ghost":true});
						break;
			}
			set_name(tprimitive.id,tprimitive.getAttribute("name"));
			visualObject.name_pos = tprimitive.getAttribute("RotateName");
			update_name_pos(tprimitive.id);
		}
		break;
		case "Variable":
		{
			//~ do_global_log("VARIABLE id is "+tprimitive.id);
			var position=getCenterPosition(tprimitive);
			visualObject = new VariableVisual(tprimitive.id,"variable",position);
			set_name(tprimitive.id,tprimitive.getAttribute("name"));
			
			let rotateName = tprimitive.getAttribute("RotateName");
			// Force all stocks to have a RotateName
			if(!rotateName) {
				rotateName = "0";
				tprimitive.setAttribute("RotateName",rotateName);
			}
			visualObject.name_pos = rotateName;
			update_name_pos(tprimitive.id);
		}
		break;
		case "Flow":
		case "Link":
		{
			let connection = null;
			var source_position=getSourcePosition(tprimitive);
			var target_position=getTargetPosition(tprimitive);
			switch(nodeType) {
				case "Flow":
				{
					connection = new FlowVisual(tprimitive.id,"flow",[0,0]);
					
					let rotateName = tprimitive.getAttribute("RotateName");
					// Force all stocks to have a RotateName
					if(!rotateName) {
						rotateName = "0";
						tprimitive.setAttribute("RotateName",rotateName);
					}
					connection.name_pos = rotateName;
					update_name_pos(tprimitive.id);
				}	
				break;
				case "Link":
				{
					connection = new LinkVisual(tprimitive.id,"link",[0,0]);
				}
				break;
			}
			var source_position=getSourcePosition(tprimitive);
			var target_position=getTargetPosition(tprimitive);

			connection.create_dummy_start_anchor();
			connection.create_dummy_end_anchor();
			
			if(tprimitive.source!=null) {
				// Attach to object
				connection.start_attach = get_object(tprimitive.source.getAttribute("id"));
			} else {
				// Set UI-coordinates to coordinates in primitive
				connection.start_anchor.set_pos(source_position);
			}
			if(tprimitive.target!=null) {
				// Attach to object
				connection.end_attach = get_object(tprimitive.target.getAttribute("id"));
			} else {
				// Set UI-coordinates to coordinates in primitive
				connection.end_anchor.set_pos(target_position);
			}
			connection.update();
			switch(nodeType) {
				case "Flow":
				{
					set_name(tprimitive.id,getName(tprimitive));
				}
				break;
				case "Link":
				{
					let bezierPoints = [
						tprimitive.value.getAttribute("b1x"),
						tprimitive.value.getAttribute("b1y"),
						tprimitive.value.getAttribute("b2x"),
						tprimitive.value.getAttribute("b2y")
					];

					if(bezierPoints.indexOf(null) == -1) {
						connection.b1_anchor.set_pos([Number(bezierPoints[0]),Number(bezierPoints[1])]);
						connection.b2_anchor.set_pos([Number(bezierPoints[2]),Number(bezierPoints[3])]);
					} else {
						// bezierPoints does not exist. Create them
						connection.resetBezierPoints();
					}
					connection.curve.update();
				}
				break;
			}
		}
		break;
	}
}

// This function is important. It takes all the relevant primitives from the engine
// And make visual objects from them
// This is executed after loading a file or loading a whole new state such as after undo
function syncAllVisuals() {
	for(let type of saveblePrimitiveTypes) {
	var primitive_list=primitives(type);
		for(key in primitive_list) {
			try {
				syncVisual(primitive_list[key]);
			} catch(exception) {
				removePrimitive(primitive_list[key]);
				alert("Error while loading corrupted primitive of type "+type+". Removing corrupted primitive to avoid propagated errors.");
				//~ alert("Error while loading corrupted primitive of type "+type+". Removing corrupted primitive to avoid propagated errors. \n\nError happened at: "+exception.stack);
			}
		}
	}
	update_all_objects();
	unselect_all();
}

function findFreeName(basename) {
	var counter=0;
	var testname;
	do {
		counter++;
		testname = basename+counter.toString();
	} while(findName(testname)!=null)
	return testname;
}


syncAllVisuals();


class SubscribePool {
	constructor() {
		this.subscribers=[];
	}
	subscribe(handler) {
		this.subscribers.push(handler);
	}
	publish(message) {
		for(var i in this.subscribers) {
			this.subscribers[i](message);
		}	
	}
}

class runOverlay {
	static init() {
		$(document).ready(() => {
			$("#svgBlockOverlay").mousedown(() => {
				$("#svgBlockOverlay").css("opacity",0.5);
				yesNoAlert("Do you want to terminate the simulation now to change the model?",function(answer) {
					$("#svgBlockOverlay").css("opacity",0);
					if(answer=="yes") {
						RunResults.resetSimulation();
					}
				});
				
			});
		});
	}
	static block() {
		unselect_all();
		$("#svgBlockOverlay").show();
	}
	static unblock() {
		$("#svgBlockOverlay").hide();
	}
}
runOverlay.init();

const runStateEnum = {
	none: "none",
	running: "running",
	stopped: "stopped",
	stepping: "stepping",
	paused: "paused"
}
class RunResults {
	static init() {		
		this.runState = runStateEnum.none;
		// Is always null if simulation is not running
		// Is a data structure returned from runModel if simulation is running it
		this.simulationController = null;
		this.varnameList=[];
		this.varIdList = [];
		this.varnameList=["Time"];
		this.results=[];
		this.runSubscribers=[];
		this.updateFrequency = 100;
		this.updateCounter = 0; // Updates everytime updateCounter goes down to zero
		this.simulationTime = 0;
	}
	static createHeader() {
		// Get list of primitives that we want to observe from the model
		var primitive_array=getPrimitiveList();

		// Create list of ids
		this.varIdList = [0].concat(getID(primitive_array)).map(Number);
		
		// Create list of names
		this.varnameList = ["Time"].concat(getName(primitive_array));
		
		// Reset results
		this.results = [];
	}
	static toCsv() {
		// Under development
		let out="";
		
		//~ let namesToDisplay = IdsToDisplay.map(findID).map(getName);
		let first=true;
		out+="Time"
		for(let id of this.varIdList) {
			let primitive = findID(id);
			if(primitive) {
					out += ","+getName(primitive);
			}
		}
		out+="\n";
		
		for(let row_index in this.results) {
			//~ for(let column_index in ["Time"].concat(namesToDisplay)) {
			first = true;
			for(let column_index in this.varIdList) {
				if(first) {
					out+=stocsd_format(this.results[row_index][column_index],6);
					first = false;
				} else {
					out+=","+stocsd_format(this.results[row_index][column_index],6);
				}
			}
			out+="\n";
		}
		return out;
	}
	static storeResults(res){
		// This method is executed after the simulation is finished
		// res is the result of the simulation
		let index = this.results.length;
		while(index < res.periods){
			let time = res.times[index];
			this.simulationTime = res.times[index];
			var currentRunResults = [];
			currentRunResults.push(time);
			for(let key in this.varIdList) {
				if(key==0) {
					// On location 0 we always have time
					continue;
				}
				//~ do_global_log(JSON.stringify(res));
				let value = res.value(findID(this.varIdList[key]))[index];
				currentRunResults.push(value);
			}
			this.push(currentRunResults);
			index++;
		}
		//~ this.triggerRunFinished();
	}
	static runPauseSimulation() {
		switch(this.runState) {
			case runStateEnum.running:
				this.pauseSimulation();
			break;
			case runStateEnum.paused:
				this.resumeSimulation();
			break;
			default:
				this.runSimulation();
		}
	}
	static resumeSimulation() {
		$("#imgRunPauseTool").attr("src","graphics/pause.svg");
		this.runState = runStateEnum.running;
		// Simulation controller can only be null if the first pause event has never triggered
		// In such a case it is enought to just change this.runState, otherwise we also have to trigger the controllers resume() function.
		if(this.simulationController != null) {
			
			this.simulationController.resume();
			// We have a bug that happens some times on resume because simulationController is null
			// Find out when it happens
			//~ console.error(getStackTrace());
		}
	}
	static runSimulation(){
		this.stopSimulation();
		$("#imgRunPauseTool").attr("src","graphics/pause.svg");
		this.createHeader();
		// We can only take 100 iterations between every update to avoid the feeling of program freezing
		if(getTimeLength()*getTimeStep() >= 100) {
			// For long runs. Longer then 100
			setPauseInterval(getTimeStep()*100);
		} else {
			setPauseInterval(getTimeStep()*getTimeLength());
		}
		this.runState = runStateEnum.running;
		this.triggerRunFinished();
		runOverlay.block();
		this.simulationController = runModel({
			rate: -1,
			onPause: (res) => {
				// We always need to do this, even if we paused the simulation, otherwise we cannot unpause
				// Here is the only place we can get a handle to the simulationController
				this.simulationController = res;
				
				// If still running continue with next cycle
				if(this.runState == runStateEnum.running) {
					this.updateProgressBar()
					do_global_log("length "+this.results.length)
					if(this.simulationController==null) {
						do_global_log("simulation controller is null")
					}
					this.continueRunSimulation()
				}
			},
			onSuccess: (res) => {
				// Run finished
				// In some cases onPause was never executed and in such cases we need to do store Result directly on res
				this.storeResults(res);
				this.updateProgressBar()
				this.triggerRunFinished();
				this.stopSimulation();
			},
			onError: (res) => {
				do_global_log("onError stop simulation");
				this.stopSimulation();
			}
		});
	}
	static continueRunSimulation() {
		this.storeResults(this.simulationController);
		if(this.updateCounter==0) {
			this.triggerRunFinished();
			this.updateCounter = this.updateFrequency;
		}
		this.updateCounter -= 1;
		this.simulationController.resume();
	}
	static stepSimulation() {
		/* experiment
		if(this.runState == runStateEnum.running) {
			this.resetSimulation();
			this.simulationController = null;
			this.runState = runStateEnum.stepping;
			return;
		}
		*/
		// if stepping was already started
		if(this.simulationController!=null) {
			this.simulationController.resume();
			return;
		}
		// Else start the stepping
		this.stopSimulation();
		this.createHeader();
		//~ alert("stepping init");
		setPauseInterval(getTimeStep());
		runOverlay.block();
		runModel({
			onPause: (res) => {
				this.storeResults(res);
				this.updateProgressBar();
				this.triggerRunFinished();
				this.simulationController = res;
			},
			onSuccess: (res) => {
				runOverlay.unblock();
				this.storeResults(res);
				this.updateProgressBar();
				this.triggerRunFinished();
			},
			onError: (res) => {
				this.stopSimulation();
			}
		});
	}
	static updateProgressBar() {
		// It just happens to 98 wide so its hardcoded, the alternative of getting the width from the $().css seems to cause a bug of always expanding
		const progressBarWidth = 98;
		$("#runStatusBarOuter").width(progressBarWidth);
		$("#runStatusBar").width(progressBarWidth*this.getRunProgressFraction());
		$("#runStatusBarText").html(this.getRunProgress() + " / " + this.getRunProgressMax());
		
	}
	static pauseSimulation() {
		this.runState = runStateEnum.paused;
		$("#imgRunPauseTool").attr("src","graphics/run.svg");
	}
	static resetSimulation() {
		this.stopSimulation();
		this.createHeader();
		this.updateProgressBar();
		this.triggerRunFinished();
	}
	static stopSimulation() {
		runOverlay.unblock();
		endRunningSimulation();
		this.runState = runStateEnum.stopped;
		this.simulationController = null;
		$("#imgRunPauseTool").attr("src","graphics/run.svg");
		this.updateCounter = 0;
	}
	static subscribeRun(handler) {
		this.runSubscribers.push(handler);
	}
	static push(newRow) {
		this.results.push(newRow);
	}
	static getResults() {
		return this.results;
	}
	static getLastValue(primitiveId) {
		let lastRow = this.getLastRow();
		if(lastRow==null) {
			//~ alert("early return");
			return null;
		}	
		let varIdIndex = this.varIdList.indexOf(Number(primitiveId));
		return lastRow[varIdIndex];
	}
	static getRunProgress() {
		let lastRow = this.getLastRow();
		// If we have no last row return null
		if(lastRow==null) {
			return 0;
		}
		// else return time
		return lastRow[0];
	}
	static getRunProgressFraction() {
		return this.getRunProgress() / this.getRunProgressMax();
	}
	static getRunProgressMax() {
		return getTimeStart()+getTimeLength()
	}
	static getLastRow() {
		//~ alert(this.results.length);
		if(this.results.length!=0) {
			return this.results[this.results.length-1];
		} else {
			return null;
		}
	}
	static getSelectiveIdResults(varIdList) {
		// Make sure the varIdList stored as numbers and not strings
		varIdList = varIdList.map(Number);
		
		// Contains the indexes from this.results that we want to return
		let selectedVarIdIndexes=[0]; // The first index is always 0 for time
		for(let i in varIdList) {
			let varIdIndex = this.varIdList.indexOf(varIdList[i]);
			selectedVarIdIndexes.push(varIdIndex);
		}
		do_global_log("this.varIdList "+JSON.stringify(this.varIdList)+" varIdList "+JSON.stringify(varIdList));
		let returnResults=[];
		for(let row_index in this.results) {
			let tmpRow = [];
			for(let column_index in selectedVarIdIndexes) {
				let wantedIndex = selectedVarIdIndexes[column_index];
				if(wantedIndex!=-1) {
					tmpRow.push(this.results[row_index][wantedIndex]);
				} else {
					tmpRow.push(null);
				}
			}
			returnResults.push(tmpRow);
		}
		return returnResults;
	}
	static getFilteredSelectiveIdResults(varIdList,start,length,step) {
		let unfilteredResults = this.getSelectiveIdResults(varIdList);
		let filteredResults = [];
		let printInterval = step/getTimeStep();
		let printCounter=1;
		
		for(let row_index in unfilteredResults) {
			let time = unfilteredResults[row_index][0];
			if(time < start) {
				continue;
			}
			if(time == start) {
				printCounter = printInterval;
			}
			if(time > length) {
				// End of loop
				return filteredResults;
			}
			if(printCounter<printInterval) {
				printCounter++;
				continue;
			} else {
				printCounter=1;
			}
			filteredResults.push(unfilteredResults[row_index]);
		}
		return filteredResults;
	}
	static triggerRunFinished() {
		for(var i in this.runSubscribers) {
			this.runSubscribers[i]();
		}	
	}
}
RunResults.init();

class jqDialog {
	static init() {
		// This is a static attribute that prevents delete key etc to be relevant when a dialog is open
		jqDialog.blockingDialogOpen = false;
	}
	constructor(title=null,contentHTML=null,size=null) {
		this.dialog = null;
		
		this.contentHTML = "Empty dialog";
		this.title = "Title";
		this.size=[600,400];
		
		if(contentHTML) {
			this.contentHTML = contentHTML;
		}
		if(title) {
			this.title = title;
		}
		if(size) {
			this.size = size;
		}
		
		this.visible = false;
		// Decides if we this dialog should lock the background
		this.modal = true;
		var frm_dialog_resize = true;
		
		this.dialogDiv = document.createElement("div");
		this.dialogDiv.setAttribute("title",this.title);
		this.dialogDiv.style.display="none";

		this.dialogContent = document.createElement("div");
		this.dialogContent.innerHTML=this.contentHTML;
		
		this.dialogDiv.appendChild(this.dialogContent);	
		document.body.appendChild(this.dialogDiv);
		
		this.dialogParameters = {
			autoOpen: false,
			modal: this.modal, // Adds overlay on background
			resizable: true,
			resize: (event,ui) => {
				this.resize(event,ui);
			},
			resizeStart: (event,ui) => {
				this.resizeStart(event,ui);
			},
			resizeStop: (event, ui) => {
				this.resizeStop(event, ui);
			},
			position: {
			   my: "center",
			   at: "center",
			   of: window
			},
			beforeClose: () => {
				this.beforeClose();
			},
			close: () => {
				this.visible=false;
				jqDialog.blockingDialogOpen = false;
				this.afterClose();
			},
			width: this.size[0],
			height: this.size[1],
			open: ( event, ui ) => {
				if(this.dialogParameters.modal) {
					jqDialog.blockingDialogOpen = true;
				}
				
				let windowWidth = $(window).width();
				let windowHeight = $(window).height();
				$(event.target).css("maxWidth", (windowWidth-50)+"px");
				$(event.target).css("maxHeight", (windowHeight-50)+"px");
			}
		};
		this.dialogParameters.buttons = {
			"Cancel":() => {
				$(this.dialog).dialog('close');
			},
			"Apply":() =>
			{
				$(this.dialog).dialog('close');
				// We add a delay to make sure we closed first
				setTimeout(() => {
					this.afterOkClose();
				},200);
			}
		};
		this.dialogParameters.width = "auto";
		this.dialogParameters.height = "auto";
		this.beforeCreateDialog();
		this.dialog=$(this.dialogDiv).dialog(this.dialogParameters);
	}
	afterOkClose() {
		
	}
	getWidth() {
		return this.dialog.width();
	}
	getHeight() {
		return this.dialog.height();
	}
	resize(event, ui) {
		
	}
	resizeStart(event, ui) {
		
	}
	resizeStop(event, ui) {
		
	}
	beforeCreateDialog() {
		
	}
	beforeClose() {
		
	}
	afterClose() {
		
	}
	beforeShow() {
		
	}
	afterShow() {
		
	}
	show() {
		this.beforeShow();
		this.dialog.dialog("open");
		this.visible = true;
		this.afterShow();
	}
	setTitle(newTitle) {
		this.title = newTitle;
		this.dialog.dialog( "option", "title", this.title);		
	}
	getTitle() {
		return this.title;
	}
	setHtml(newHtml) {
		this.dialogContent.innerHTML = newHtml;
	}
	getHtml() {
		return this.dialogContent.innerHTML;
	}
}
// Needed for the static init of this class
jqDialog.init();

function getPrimitiveList() {
	let primitiveList = primitives("Stock").concat(primitives("Flow")).concat(primitives("Variable")).concat(primitives("Converter"));
	return primitiveList;
}

class XAlertDialog extends jqDialog {
	constructor(message,closeHandler=null) {
		super();
		this.setTitle("Alert");
		this.message = message;
		this.setHtml(message);
		this.closeHandler = closeHandler;
	}
	afterClose() {
		if(this.closeHandler) {
			this.closeHandler();
		}
	}
	beforeCreateDialog() {
		this.dialogParameters.buttons = {
			"Ok":() =>
			{
				$(this.dialog).dialog('close');
			}
		};
	}
}
function xAlert(message,closeHandler) {
	let dialog = new XAlertDialog(message,closeHandler);
	dialog.show();
}

class YesNoDialog extends jqDialog {
	constructor(message,closeHandler) {
		super();
		this.setTitle("");
		this.message = message;
		this.setHtml(message);
		this.closeHandler = closeHandler;
		this.answer = "no";
	}
	afterClose() {
		if(this.closeHandler) {
			this.closeHandler(this.answer);
		}
	}
	beforeCreateDialog() {
		this.dialogParameters.buttons = {
			"Yes":() =>
			{
				this.answer="yes";
				$(this.dialog).dialog('close');
			},
			"No":() =>
			{
				this.answer="no";
				$(this.dialog).dialog('close');
			}
		};
	}
}
function yesNoAlert(message,closeHandler) {
	let dialog = new YesNoDialog(message,closeHandler);
	dialog.show();
}

class YesNoCancelDialog extends jqDialog {
	constructor(message,closeHandler) {
		super();
		this.setTitle("");
		this.message = message;
		this.setHtml(message);
		this.closeHandler = closeHandler;
		this.answer = "cancel";
	}
	afterClose() {
		if(this.closeHandler) {
			this.closeHandler(this.answer);
		}
	}
	beforeCreateDialog() {
		this.dialogParameters.buttons = {
			"Yes":() =>
			{
				this.answer="yes";
				$(this.dialog).dialog('close');
			},
			"No":() =>
			{
				this.answer="no";
				$(this.dialog).dialog('close');
			},
			"Cancel":() =>
			{
				this.answer="cancel";
				$(this.dialog).dialog('close');
			}
		};
	}
}
function yesNoCancelAlert(message,closeHandler) {
	let dialog = new YesNoCancelDialog(message,closeHandler);
	dialog.show();
}

function saveChangedAlert(continueHandler) {
	// If we have no unsaved changes we just continue directly	
	if(!History.unsavedChanges) {
		continueHandler();
		return;
	}	
	// Else ask if we want to save first
	yesNoCancelAlert("You have unsaved changes. Do you want to save first?",function(answer) {
		switch(answer) {
			case "yes":
				fileManager.finishedSaveHandler = continueHandler;
				fileManager.saveModel();
			break;
			case "no":
				continueHandler();
			break;
			case "cancel":
			break;
		}
	});
}

// This is the super class dor DiagramDialog and TableDialog
class DisplayDialog extends jqDialog {
	constructor() {
		super();
		this.displayIdList = [];
		this.subscribePool = new SubscribePool();
		this.acceptedPrimitveTypes=["Stock","Flow","Variable","Converter"];
	}
	
	clearRemovedIds() {
		for(let id of this.displayIdList) {
			if(findID(id)==null) {
				this.setDisplayId(id,false);
			}
		}
	}
	
	getAcceptedPrimitiveList() {
		let results = [];
		let primitiveList = getPrimitiveList();
		for(let primitive of primitiveList) {
			if(this.acceptsId(primitive.id)) {
				results.push(primitive);
			}
		}
		return results;
	}
	
	acceptsId(id) {
		let type = getType(findID(id));
		return (this.acceptedPrimitveTypes.indexOf(type)!=-1);
	}
	
	setDisplayId(id,value) {
		let oldIdIndex = this.displayIdList.indexOf(id);
		switch(value) {
			case true:
				// Check that the id can be added
				if(!this.acceptsId(id)) {
					return;
				}
				// Check if id already in this.displayIdList
				if(oldIdIndex!=-1) {
					return;
				}
				// Add the value
				this.displayIdList.push(id.toString());

			break;
			case false:
				// Check if id is not in the list
				if(oldIdIndex==-1) {
					return;
				}				
				this.displayIdList.splice(oldIdIndex,1);
			break;
		}
	}
	
	getDisplayId(id) {
		id=id.toString();
		if(this.displayIdList.indexOf(id)==-1) {
			return false;
		} else {
			return true;
		}
	}
	
	setIdsToDisplay(idList) {
		this.displayIdList = [];
		for(let i in idList) {
			this.setDisplayId(idList[i],true);
		}
	}
	getIdsToDisplay() {
		this.clearRemovedIds();
		return this.displayIdList;
	}
	afterClose() {
		this.subscribePool.publish("window closed");
	}
	renderPrimitiveListHtml() {
		// We store the selected variables inside the dialog
		// The dialog is owned by the table to which it belongs
		let primitives = this.getAcceptedPrimitiveList();
		return `
		<table>
		<tr>
			${primitives.map(p => '<tr><td class="text">'+makePrimitiveName(getName(p))+'</td><td><input class="primitive_checkbox" type="checkbox" '+checkedHtmlAttribute(this.getDisplayId(getID(p)))+' data-name="'+getName(p)+'" data-id="'+getID(p)+'"></td></tr>').join('')}
		</tr>
		</table>`;
	}
	beforeShow() {
		this.setHtml(this.renderPrimitiveListHtml());
		$(this.dialogContent).find(".primitive_checkbox").click((event) => {
			let clickedElement = event.target;
			let idClicked=$(clickedElement).attr("data-id");
			let checked=$(clickedElement).prop("checked");
			this.setDisplayId(idClicked,checked);
			this.subscribePool.publish("primitive check changed");
		});
	}
}

class DiagramDialog extends DisplayDialog {
	constructor() {
		super();
		this.setTitle("Diagram properties");
		
		this.xMin = 0;
		this.xMax = 0;
		this.xAuto  = true;
		
		this.yMin = 0;
		this.yMax = 0;
		this.yAuto  = true;
		
		this.minValue = 0;
		this.maxValue = 0;
		
		this.simulationTime = 0;
	}
	beforeShow() {
		// We store the selected variables inside the dialog
		// The dialog is owned by the table to which it belongs
		let primitives = this.getAcceptedPrimitiveList();
		let contentHTML = this.renderPrimitiveListHtml()+`
		<br/><br/>
		<table>
			<tr>
				<th></th>
				<th>Min</th>
				<th>Max</th>
				<th>Auto</th>
			</tr>
			<tr>
				<td>X-axis</td>
				<td><input class="xMin intervalsettings" type="text" value="${this.getXMin()}"></td>
				<td><input class="xMax intervalsettings" type="text" value="${this.getXMax()}"></td>
				<td><input class="xAuto intervalsettings" type="checkbox" ${checkedHtmlAttribute(this.xAuto)}></td>
			</tr>
			<tr>
				<td>Y-axis</td>
				<td><input class="yMin intervalsettings" type="text" value="${this.getYMin()}"></td>
				<td><input class="yMax intervalsettings" type="text" value="${this.getYMax()}"></td>
				<td><input class="yAuto intervalsettings" type="checkbox" ${checkedHtmlAttribute(this.yAuto)}></td>
			</tr>
		</table>
		`;
		this.setHtml(contentHTML);
		$(this.dialogContent).find(".primitive_checkbox").click((event) => {
			let clickedElement = event.target;
			let idClicked=$(clickedElement).attr("data-id");
			let checked=$(clickedElement).prop("checked");
			this.setDisplayId(idClicked,checked);
			this.subscribePool.publish("primitive check changed");
		});
		
		
		$(this.dialogContent).find(".intervalsettings").change((event) => {
			this.updateInterval();
		});
		
		this.updateInterval();
	}
	updateInterval() {
		this.xMin=Number($(this.dialogContent).find(".xMin").val());
		this.xMax=Number($(this.dialogContent).find(".xMax").val());
		this.xAuto=$(this.dialogContent).find(".xAuto").prop("checked");
		
		$(this.dialogContent).find(".xMin").prop("disabled",this.xAuto);
		$(this.dialogContent).find(".xMax").prop("disabled",this.xAuto);
		
		$(this.dialogContent).find(".xMin").val(this.getXMin());
		$(this.dialogContent).find(".xMax").val(this.getXMax());
		
		
		this.yMin=Number($(this.dialogContent).find(".yMin").val());
		this.yMax=Number($(this.dialogContent).find(".yMax").val());
		this.yAuto=$(this.dialogContent).find(".yAuto").prop("checked");
		
		$(this.dialogContent).find(".yMin").prop("disabled",this.yAuto);
		$(this.dialogContent).find(".yMax").prop("disabled",this.yAuto);
		
		$(this.dialogContent).find(".yMin").val(this.getYMin());
		$(this.dialogContent).find(".yMax").val(this.getYMax());
	}
	getXMin() {
		if(this.xAuto) {
			return getTimeStart();
		} else {
			return this.xMin;
		}
	}
	getXMax() {
		if(this.xAuto) {
			// Uncomment if you want the diagram to grow dynamicly as more data is produced
			//~ return this.simulationTime;
			return getTimeLength()
		} else {
			return this.xMax;
		}
	}
	getYMin() {
		if(this.yAuto) {
			return this.minValue;
		} else {
			return this.yMin;
		}
	}
	getYMax() {
		if(this.yAuto) {
			return this.maxValue;
		} else {
			return this.yMax;
		}
	}
}

class XyPlotDialog extends DiagramDialog {
	constructor() {
		super();
		this.setTitle("XY-plot properties");
		
		this.xMin = 0;
		this.xMax = 0;
		this.xAuto  = true;
		
		this.yMin = 0;
		this.yMax = 0;
		this.yAuto  = true;
		
		this.minXValue = 0;
		this.maxXValue = 0;
		
		this.minYValue = 0;
		this.maxYValue = 0;
	}
	
	getXMin() {
		if(this.xAuto) {
			return this.minXValue;
		} else {
			return this.xMin;
		}
	}
	getXMax() {
		if(this.xAuto) {
			return this.maxXValue;
		} else {
			return this.xMax;
		}
	}
	getYMin() {
		if(this.yAuto) {
			return this.minYValue;
		} else {
			return this.yMin;
		}
	}
	getYMax() {
		if(this.yAuto) {
			return this.maxYValue;
		} else {
			return this.yMax;
		}
	}
}

class TableDialog extends DisplayDialog {
	constructor() {
		super();
		this.start = getTimeStart();
		this.end = getTimeLength() - getTimeStart();
		this.step = getTimeStep();
		this.setTitle("Table properties");
		
		this.startAuto  = true;
		this.endAuto = true;
		this.stepAuto = true;
	}
	beforeShow() {
		// We store the selected variables inside the dialog
		// The dialog is owned by the table to which it belongs
		let primitives = this.getAcceptedPrimitiveList();
		let contentHTML = this.renderPrimitiveListHtml()+`
		<br/><br/>
		<table>
		<tr>
			<td class="text">From</td>
			<td><input class="intervalsettings start" name="start" value="${this.start}" type="text"></td>
			<td>Auto <input class="intervalsettings start_auto" type="checkbox"  ${checkedHtmlAttribute(this.startAuto)}/></td>
		</tr><tr>
			<td class="text">To</td>

			<td><input class="intervalsettings end" name="end" value="${this.end}" type="text"></td>
			<td>Auto <input class="intervalsettings end_auto" type="checkbox"  ${checkedHtmlAttribute(this.endAuto)}/></td>
		</tr><tr>
			<td class="text">Step</td>
			<td><input class="intervalsettings step" name="step" value="${this.step}" type="text"></td>
			<td>Auto <input class="intervalsettings step_auto" type="checkbox"  ${checkedHtmlAttribute(this.stepAuto)}/></td>
		</tr>
		</table>
		`;
		this.setHtml(contentHTML);
		$(this.dialogContent).find(".primitive_checkbox").click((event) => {
			let clickedElement = event.target;
			let idClicked=$(clickedElement).attr("data-id");
			let checked=$(clickedElement).prop("checked");
			this.setDisplayId(idClicked,checked);
			this.subscribePool.publish("primitive check changed");
		});
		$(this.dialogContent).find(".intervalsettings").change((event) => {
			this.updateInterval();
		});
		this.updateInterval();
	}
	updateInterval()  {
		this.start=Number($(this.dialogContent).find(".start").val());
		this.end=Number($(this.dialogContent).find(".end").val());
		this.step=Number($(this.dialogContent).find(".step").val());
		
		this.startAuto = $(this.dialogContent).find(".start_auto").prop("checked");
		$(this.dialogContent).find(".start").prop("disabled",this.startAuto);
		$(this.dialogContent).find(".start").val(this.getStart());
		
		this.endAuto = $(this.dialogContent).find(".end_auto").prop("checked");
		$(this.dialogContent).find(".end").prop("disabled",this.endAuto);
		$(this.dialogContent).find(".end").val(this.getEnd());
		
		this.stepAuto = $(this.dialogContent).find(".step_auto").prop("checked");
		$(this.dialogContent).find(".step").prop("disabled",this.stepAuto);
		$(this.dialogContent).find(".step").val(this.getStep());
	}
	getStart() {
		if(this.startAuto) {
			return getTimeStart();
		} else {
			return this.start;
		}
	}
	getEnd() {
		if(this.endAuto) {
			return getTimeLength()-getTimeStart();
		} else {
			return this.end;
		}
	}
	getStep() {
		if(this.stepAuto) {
			return getTimeStep();
		} else {
			return this.step;
		}
	}
}

class SimulationSettings extends jqDialog {
	constructor() {
		super();
		this.setTitle("Simulation setttings");
		
	}
	beforeShow() {
		let start=getTimeStart();
		let length = getTimeLength();
		let step = getTimeStep();
		this.setHtml(`
			<table>
			<tr>
				<td>Start</td>
				<td><input class="input_start" name="start" value="${start}" type="text"></td>
			</tr><tr>
				<td>Length</td>
				<td><input class="input_length" name="length" value="${length}" type="text"></td>
			</tr><tr>
				<td>Step</td>
				<td><input class="input_step" name="step" value="${step}" type="text"></td>
			</tr>
			</table>
		`);
	}
	afterOkClose() {
		let timeStart =$(this.dialogContent).find(".input_start").val();
		setTimeStart(timeStart);
		
		let timeLength = $(this.dialogContent).find(".input_length").val();
		setTimeLength(timeLength);
		
		let timeStep = $(this.dialogContent).find(".input_step").val();
		setTimeStep(timeStep);
	}
}

class NumberBoxDialog extends jqDialog {
	constructor(id) {
		super();
		this.setTitle("Info");
		let imPrimitive = findID(id);
		if(imPrimitive) {
			let primitiveName = makePrimitiveName(getName(imPrimitive));
			this.setHtml(`
				Value of ${primitiveName}
			`);
		} else {
			this.setHtml(`
				Target primitive not found
			`);	
		}
	}
}

class TextBoxDialog extends jqDialog {
	constructor(id) {
		super();
		this.id = id;
		this.setTitle("Info");
		let text = getName(findID(this.id));
		this.setHtml(`
			Text:<br/>
			<input class="textfieldText textInput" type="text" style="width: 200px" value="${text}"/>
		`);
	}
	afterShow() {
		let field = $(this.dialogContent).find(".textInput").get(0);
		let inputLength = field.value.length;  
		field.setSelectionRange(0, inputLength);
	}
	afterOkClose() {
		let name = $(this.dialogContent).find(".textInput").val();
		setName(findID(this.id),name);
	}
}

class ConverterDialog extends jqDialog {
	constructor() {
		super();
		this.setTitle("Converter settings");
		this.setHtml(`
			<div class="primitiveSettings" style="padding: 10px 20px 20px 0px">
				Name:<br/>
				<input class="nameField textInput" style="width: 100%;" type="text" value=""><br/><br/>
				Definition:<br/>
				<textarea class="valueField" style="width: 100%; height: 50px;"></textarea>
			</div>
		`);
		this.valueField = $(this.dialogContent).find(".valueField").get(0);
		this.nameField = $(this.dialogContent).find(".nameField").get(0);
	}
	open(id,defaultFocusSelector=null) {
		if(jqDialog.blockingDialogOpen) {
			// We can't open a new dialog while one is already open
			return;
		}
		this.primitive = findID(id);
		if(this.primitive == null) {
			alert("Primitive with id "+id+" does not exist");
			return;
		}
		this.show();
		this.defaultFocusSelector = defaultFocusSelector;
		
		var oldValue = getValue(this.primitive);
		oldValue = oldValue.replace(/\\n/g, "\n");
		
		var oldName = makePrimitiveName(getName(this.primitive));

		$(this.nameField).val(oldName);
		$(this.valueField).val(oldValue);
		
		if(this.defaultFocusSelector) {
			let valueFieldDom = $(this.dialogContent).find(this.defaultFocusSelector).get(0);
			valueFieldDom.focus();
		}
	}
	afterShow() {
		let field = $(this.dialogContent).find(".textInput").get(0);
		let inputLength = field.value.length;  
		field.setSelectionRange(0, inputLength);
	}
	afterOkClose() {
		if(this.primitive) {
			// Handle value
			let value = $(this.valueField).val();
			value = value.replace(/\n/g, "\\n");
			setValue(this.primitive,value);
			
			// handle name
			let name = stripBrackets($(this.nameField).val());
			setName(this.primitive,name);
		}
	}
}

var global_log = "";

function global_log_update() {
	var log="";
	log+="<br/>";
	log+=global_log+"<br/>";
	$(".log").html(log);
}

function do_global_log(line) {
	global_log=line+"; "+(new Date()).getMilliseconds()+"<br/>"+global_log;
	global_log_update();
}

class DebugDialog extends jqDialog {
	constructor() {
		super();
		this.valueField = null;
		this.nameField = null;
		this.setTitle("Debug");
		this.setHtml(`
			<div id="log_panel" style="z-index: 10; position: absolute; left: 0px; top: 0px; height: 90%; overflow-x: visible">
				This windows is only for developers of StochSD. If you are not developing StochSD you probably dont need this.<br/>
				<button class="btn_clear_log">clear</button>
				<div class="log" style="width: 100%; height: 90%; overflow-y: scroll;">
				</div>
			</div>
		`);

		$(this.dialogContent).find(".btn_clear_log").click((event) => {
			global_log="";
			global_log_update();
		});
	}
	beforeCreateDialog() {
		this.dialogParameters.modal = false;
		this.dialogParameters.width = 600;
		this.dialogParameters.height = 400;
	}
}


class AboutDialog extends jqDialog {
	constructor() {
		super();
		this.setTitle("About");
		this.setHtml(aboutText);
	}
	beforeCreateDialog() {
		this.dialogParameters.buttons = {
			"Close":() =>
			{
				$(this.dialog).dialog('close');
			}
		};
	}
}

class EquationEditor extends jqDialog {
	constructor() {
		super();
		this.accordionBuilt = false;
		this.setTitle("Equation editor");
		this.primitive = null;
		
		
		// read more about display: table, http://www.mattboldt.com/kicking-ass-with-display-table/
		this.setHtml(`
			<div class="table">
  <div class="table-row">
	<div class="table-row">
		<div class="table-cell" style="width: 400px">
				<div class="primitiveSettings" style="padding: 10px 20px 20px 0px">
					Name:<br/>
					<input class="nameField textInput" style="width: 100%;" type="text" value=""><br/><br/>
					Definition:<br/>
					<textarea class="valueField" style="width: 100%; height: 200px;"></textarea>
					<br/>
					<div class="referenceDiv" style="width: 500px; overflow-x: auto" ><!-- References goes here-->
						
					</div>
					<div class="positiveOnlyDiv">
						<br/>
						<label><input class="restrictPositive" type="checkbox"/> Restrict to positive values</label>
					</div>
				</div>
			</div>
		</div>
    <div class="table-cell">
    
    <div style="overflow-y: scroll; width: 300px; height: 300px; padding:  10px 20px 20px 0px;">
	<div class="accordionCluster">


	</div> <!--End of accordionCluster. Programming help is inserted here-->
		
    
    </div>
  </div>
</div>
		`);

		this.valueField = $(this.dialogContent).find(".valueField").get(0);
		this.nameField = $(this.dialogContent).find(".nameField").get(0);
		this.referenceDiv = $(this.dialogContent).find(".referenceDiv").get(0);
		this.restrictPositiveCheckbox = $(this.dialogContent).find(".restrictPositive").get(0);
		this.positiveOnlyDiv = $(this.dialogContent).find(".positiveOnlyDiv").get(0);
		
		let helpData = getFunctionHelpData();


	
		let functionListToHtml = function(functionList) {
			let filterFunctionTemplate = (functionTemplate)=> {
				return functionTemplate.replace(/\$\$/g, "").replace(/##/g, "").replace(/\</g, "&lt;").replace(/\>/g, "&gt;").replace(/ /g, " ");
			};
			let result = "<ul>";
			let codeSnippetName = "";
			let codeTemplate = "";
			let codeHelp = "";
			for (let j = 0; j < functionList.length; j++) {
				let example="";
				if(functionList[j].length==4) {
					if((functionList[j][3]).constructor === Array) {
						let codeSample = functionList[j][3][0];
						let returnValue = functionList[j][3][1];
						example = `<br/><br/><b>Example</b><br/>${codeSample}<br/><br/><b>Returns:</b><br/> ${returnValue}`;
					} else {
						let codeSample = functionList[j][3];
						example = `<br/><br/><b>Example</b><br/>${codeSample}`;
					}
				}
				codeSnippetName = functionList[j][0];
				codeTemplate = `${filterFunctionTemplate(functionList[j][1])}`;
				codeHelp = `${functionList[j][2]} ${example}`;
				codeHelp = codeHelp.replace(/\'/g, "&#39;");
				codeHelp = codeHelp.replace(/\"/g, "&#34;");
				result += `<li class = "functionHelp clickFunction" data-template="${codeTemplate}" title="${codeHelp}">${codeSnippetName}</li>`;
			}
			result+="</ul>";
			return result;
		};
	
		for (var i = 0; i < helpData.length; i++) {
			$(".accordionCluster").append(`<div>
			<h3 class="functionCategory">${helpData[i][0]}</h3>
			  <div>
				${
					functionListToHtml(helpData[i][1])
				}
			  </div>
			</div>`);
		}
		
		$(this.dialogContent).find(".clickFunction").click((event) => this.templateClick(event));
		
		$(this.valueField).focusout((event)=>{
			this.storeValueSelectionRange();
		});
		$(".accordionCluster").click((event) => {
			this.restoreValueSelectionRange();
		});
		$(this.dialogContent).find(".referenceDiv").click((event) => {
			this.restoreValueSelectionRange();
		});
		
		
		
		$(".accordionCluster").tooltip({
		  content: function () {
              return $(this).prop('title');
          }
		});
		
		
		if(this.defaultFocusSelector) {
			let valueFieldDom = $(this.dialogContent).find(this.defaultFocusSelector).get(0);
			valueFieldDom.focus();
			var inputLength = valueFieldDom.value.length;  
			valueFieldDom.setSelectionRange(0, inputLength);
			this.storeValueSelectionRange();
		}
	
	}
	open(id,defaultFocusSelector=null) {
		if(jqDialog.blockingDialogOpen) {
			// We can't open a new dialog while one is already open
			return;
		}
		this.primitive = findID(id);
		if(this.primitive == null) {
			alert("Primitive with id "+id+" does not exist");
			return;
		}
		this.show();
		this.defaultFocusSelector = defaultFocusSelector;
		
		
		let typeName = type_basename[getType(this.primitive).toLowerCase()];
		
		
		var oldValue = getValue(this.primitive);
		oldValue = oldValue.replace(/\\n/g, "\n");
		
		var oldName = makePrimitiveName(getName(this.primitive));
		
		this.setTitle(typeName+" settings");

		$(this.nameField).val(oldName);
		$(this.valueField).val(oldValue);
		
		
		// Handle restrict to positive
		if(["Flow","Stock"].indexOf(getType(this.primitive))!=-1) {
			// If element has restrict to positive
			$(this.positiveOnlyDiv).show();
			let restrictPositive = getNonNegative(this.primitive);
			$(this.restrictPositiveCheckbox).prop("checked",restrictPositive);
		} else {
			// Otherwise hide that option
			$(this.positiveOnlyDiv).hide();
		}
		
		// Create reference list
		let referenceList = getLinkedPrimitives(this.primitive);
	
		// Sort reference list by name
		referenceList.sort(function(a, b){
			let nameA = getName(a);
			let nameB = getName(b);
			if(nameA < nameB) return -1;
			if(nameA > nameB) return 1;
			return 0;
		})
		
		let referenceListToHtml = (referenceList) => {
			let result = "";
			for(let linked of referenceList) {
				let name ="["+getName(linked)+"]";
				result += `<span class = "linkedReference clickFunction" data-template="${name}">${name}</span>&nbsp;`;
			}
			return result;
		}
		
		let referenceHTML = "";
		if(referenceList.length > 0) {
			referenceHTML = "Linked primitives: <br/>"+referenceListToHtml(referenceList);
		} else {
			referenceHTML = "No linked primitives";
		}
		$(this.referenceDiv).html(referenceHTML);
		
		$(this.referenceDiv).find(".clickFunction").click((event) => this.templateClick(event));
		
		if(this.defaultFocusSelector) {
			let valueFieldDom = $(this.dialogContent).find(this.defaultFocusSelector).get(0);
			valueFieldDom.focus();
			var inputLength = valueFieldDom.value.length;  
			valueFieldDom.setSelectionRange(0, inputLength);
			this.storeValueSelectionRange();
		}
	}
	templateClick(event) {
		let templateData = $(event.target).data("template");
		let start = this.valueField.selectionStart;
		
		let oldValue = $(this.valueField).val();
		let newValue = oldValue.slice(0, this.valueSelectionStart) + templateData + oldValue.slice(this.valueSelectionEnd);
		$(this.valueField).val(newValue);
		let newPosition = this.valueSelectionStart+templateData.length;
		this.valueField.setSelectionRange(newPosition,newPosition);
	}
	beforeClose() {
		this.closeAccordion();
	}
	buildAccordion() {
		// Uses the trick of creating multiple accordions
		// So that they can be independetly opened and closed
		// http://stackoverflow.com/questions/3479447/jquery-ui-accordion-that-keeps-multiple-sections-open
		$(".accordionCluster > div").accordion({active: false, header: "h3", collapsible: true });
	}
	closeAccordion() {
		$(".accordionCluster > div").accordion({
			active: false
		});
	}
	afterShow() {
		// Building the accordion must be done while the window is visible for accordions to work correctly
		// We therefor build it the first time the dialog is shown and store it in this.accordionBuilt
		if(!this.accordionBuilt) {
			this.buildAccordion();
			this.accordionBuilt = true;
		}
	}
	storeValueSelectionRange() {
		this.valueSelectionStart=this.valueField.selectionStart;
		this.valueSelectionEnd=this.valueField.selectionEnd;
	}
	restoreValueSelectionRange() {
		$(this.valueField).focus();
		this.valueField.setSelectionRange(this.valueField.selectionStart,this.valueField.selectionEnd);
	}
	afterOkClose() {
		if(this.primitive) {
			// Handle value
			let value = $(this.dialogContent).find(".valueField").val();
			value = value.replace(/\n/g, "\\n");
			setValue(this.primitive,value);
			
			// handle name
			let name = stripBrackets($(this.dialogContent).find(".nameField").val());
			setName(this.primitive,name);
			
			// Handle restrict to positive
			let restrictPositive = $(this.restrictPositiveCheckbox).prop("checked");
			setNonNegative(this.primitive,restrictPositive);
		}
	}
}

function hideAndPrint(elementsToHide) {
	for(let element of elementsToHide) {
		$(element).hide();
	}
	window.print();
	for(let element of elementsToHide) {
		$(element).show();
	}	
}
class MacroDialog extends jqDialog {
	constructor() {
		super();
		this.setTitle("Macro");
		this.setHtml(`
		<textarea class="macroText"></textarea>
		`);		
		this.macroTextArea=$(this.dialogContent).find(".macroText");
	}
	beforeShow() {
		let oldMacro = getMacros();
		this.macroTextArea.val(oldMacro);
	}
	afterShow() {
		this.updateSize();
	}
	resize() {
		this.updateSize();
	}
	updateSize() {
		let width = this.getWidth();
		let height = this.getHeight();
		this.macroTextArea.width(width-10);
		this.macroTextArea.height(height-20);
	}
	beforeCreateDialog() {
		this.dialogParameters.width="500";
		this.dialogParameters.height="400";
	}
	afterOkClose() {
		let newMacro = $(this.dialogContent).find(".macroText").val();
		setMacros(newMacro);
	}
}

class TextAreaDialog extends jqDialog {
	constructor(primitive) {
		super();
		this.primitive = primitive;
		this.setTitle("Text");
		this.setHtml(`
		<textarea class="text"></textarea>
		`);		
		this.textArea=$(this.dialogContent).find(".text");
	}
	beforeShow() {
		let oldText = getName(this.primitive);
		this.textArea.val(oldText);
	}
	afterShow() {
		this.updateSize();
	}
	resize() {
		this.updateSize();
	}
	updateSize() {
		let width = this.getWidth();
		let height = this.getHeight();
		this.textArea.width(width-10);
		this.textArea.height(height-20);
	}
	beforeCreateDialog() {
		this.dialogParameters.width="500";
		this.dialogParameters.height="400";
	}
	afterOkClose() {
		let newText = $(this.dialogContent).find(".text").val();
		setName(this.primitive, newText);
	}
}

class EquationListDialog extends jqDialog {
	constructor() {
		super();
		this.setTitle("Equation List");
	}
	beforeCreateDialog() {
		this.dialogParameters.buttons = {
			"Print equations": () =>
			{
				hideAndPrint([$("#coverEverythingDiv").get(0)]);
			},
			"Ok":() =>
			{
				$(this.dialog).dialog('close');
			}
		};
	}
	beforeShow() {
		let htmlOut = "";
		
		let Stocks = primitives("Stock");
		if(Stocks.length > 0) {
		htmlOut+=`
		<h3 class="equationListHeader">Stocks</h3>
			<table>
				<tr><th>Name</th><td>Initial value</td></tr>
				${Stocks.map(s => "<tr><td>"+makePrimitiveName(getName(s))+"</td><td>"+getValue(s)+"</td></tr>").join('')}
			</table>
		`;
		}
		
		let Flows = primitives("Flow");
		if(Flows.length > 0) {
		htmlOut+=`
		<h3 class="equationListHeader">Flows</h3>
			<table>
				<tr><th>Name</th><td>Rate</td></tr>
				${Flows.map(s => "<tr><td>"+makePrimitiveName(getName(s))+"</td><td>"+getValue(s)+"</td></tr>").join('')}
			</table>
		`;
		}
		
		let Variables = primitives("Variable");
		if(Variables.length > 0) {
		htmlOut+=`
		<h3 class="equationListHeader">Variables</h3>
			<table>
				<tr><th>Name</th><td>Value</td></tr>
				${Variables.map(s => "<tr><td>"+makePrimitiveName(getName(s))+"</td><td>"+getValue(s)+"</td></tr>").join('')}
			</table>
		`;
		}
		let numberOfPrimitives = Stocks.length+Flows.length+Variables.length;
		if(numberOfPrimitives == 0) {
			this.setHtml("This model is emptry. Build a model to show equation list");	
			return;		
		}
		htmlOut+="<br/>Total of "+numberOfPrimitives+" primitives";
		this.setHtml(htmlOut);
	}
}


// Override the message function used by the insight maker engine so that we can catch error popups
if(typeof mxUtils == "undefined") {
	window.mxUtils = {};
	window.mxUtils.alert=function(message,closeHandler) {
		xAlert("Message from engine:  "+message,closeHandler);
	}
}
